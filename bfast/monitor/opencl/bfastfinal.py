# Generated by Futhark 0.20.0
# git: 5cc4d4b (Tue Jul 6 11:53:53 2021 -0700)
import sys
import numpy as np
import ctypes as ct
# Stub code for OpenCL setup.

import pyopencl as cl
import numpy as np
import sys

if cl.version.VERSION < (2015,2):
    raise Exception('Futhark requires at least PyOpenCL version 2015.2.  Installed version is %s.' %
                    cl.version.VERSION_TEXT)

def parse_preferred_device(s):
    pref_num = 0
    if len(s) > 1 and s[0] == '#':
        i = 1
        while i < len(s):
            if not s[i].isdigit():
                break
            else:
                pref_num = pref_num * 10 + int(s[i])
            i += 1
        while i < len(s) and s[i].isspace():
            i += 1
        return (s[i:], pref_num)
    else:
        return (s, 0)

def get_prefered_context(interactive=False, platform_pref=None, device_pref=None):
    if device_pref != None:
        (device_pref, device_num) = parse_preferred_device(device_pref)
    else:
        device_num = 0

    if interactive:
        return cl.create_some_context(interactive=True)

    def blacklisted(p, d):
        return platform_pref == None and device_pref == None and \
            p.name == "Apple" and d.name.find("Intel(R) Core(TM)") >= 0
    def platform_ok(p):
        return not platform_pref or p.name.find(platform_pref) >= 0
    def device_ok(d):
        return not device_pref or d.name.find(device_pref) >= 0

    device_matches = 0

    for p in cl.get_platforms():
        if not platform_ok(p):
            continue
        for d in p.get_devices():
            if blacklisted(p,d) or not device_ok(d):
                continue
            if device_matches == device_num:
                return cl.Context(devices=[d])
            else:
                device_matches += 1
    raise Exception('No OpenCL platform and device matching constraints found.')

def size_assignment(s):
    name, value = s.split('=')
    return (name, int(value))

def check_types(self, required_types):
    if 'f64' in required_types:
        if self.device.get_info(cl.device_info.PREFERRED_VECTOR_WIDTH_DOUBLE) == 0:
            raise Exception('Program uses double-precision floats, but this is not supported on chosen device: %s' % self.device.name)

def apply_size_heuristics(self, size_heuristics, sizes):
    for (platform_name, device_type, size, valuef) in size_heuristics:
        if sizes[size] == None \
           and self.platform.name.find(platform_name) >= 0 \
           and (self.device.type & device_type) == device_type:
               sizes[size] = valuef(self.device)
    return sizes

def initialise_opencl_object(self,
                             program_src='',
                             command_queue=None,
                             interactive=False,
                             platform_pref=None,
                             device_pref=None,
                             default_group_size=None,
                             default_num_groups=None,
                             default_tile_size=None,
                             default_reg_tile_size=None,
                             default_threshold=None,
                             size_heuristics=[],
                             required_types=[],
                             all_sizes={},
                             user_sizes={}):
    if command_queue is None:
        self.ctx = get_prefered_context(interactive, platform_pref, device_pref)
        self.queue = cl.CommandQueue(self.ctx)
    else:
        self.ctx = command_queue.context
        self.queue = command_queue
    self.device = self.queue.device
    self.platform = self.device.platform
    self.pool = cl.tools.MemoryPool(cl.tools.ImmediateAllocator(self.queue))
    device_type = self.device.type

    check_types(self, required_types)

    max_group_size = int(self.device.max_work_group_size)
    max_tile_size = int(np.sqrt(self.device.max_work_group_size))

    self.max_group_size = max_group_size
    self.max_tile_size = max_tile_size
    self.max_threshold = 0
    self.max_num_groups = 0

    self.max_local_memory = int(self.device.local_mem_size)

    # Futhark reserves 4 bytes of local memory for its own purposes.
    self.max_local_memory -= 4

    # See comment in rts/c/opencl.h.
    if self.platform.name.find('NVIDIA CUDA') >= 0:
        self.max_local_memory -= 12
    elif self.platform.name.find('AMD') >= 0:
        self.max_local_memory -= 16

    self.free_list = {}

    self.global_failure = self.pool.allocate(np.int32().itemsize)
    cl.enqueue_fill_buffer(self.queue, self.global_failure, np.int32(-1), 0, np.int32().itemsize)
    self.global_failure_args = self.pool.allocate(np.int64().itemsize *
                                                  (self.global_failure_args_max+1))
    self.failure_is_an_option = np.int32(0)

    if 'default_group_size' in sizes:
        default_group_size = sizes['default_group_size']
        del sizes['default_group_size']

    if 'default_num_groups' in sizes:
        default_num_groups = sizes['default_num_groups']
        del sizes['default_num_groups']

    if 'default_tile_size' in sizes:
        default_tile_size = sizes['default_tile_size']
        del sizes['default_tile_size']

    if 'default_reg_tile_size' in sizes:
        default_reg_tile_size = sizes['default_reg_tile_size']
        del sizes['default_reg_tile_size']

    if 'default_threshold' in sizes:
        default_threshold = sizes['default_threshold']
        del sizes['default_threshold']

    default_group_size_set = default_group_size != None
    default_tile_size_set = default_tile_size != None
    default_sizes = apply_size_heuristics(self, size_heuristics,
                                          {'group_size': default_group_size,
                                           'tile_size': default_tile_size,
                                           'reg_tile_size': default_reg_tile_size,
                                           'num_groups': default_num_groups,
                                           'lockstep_width': None,
                                           'threshold': default_threshold})
    default_group_size = default_sizes['group_size']
    default_num_groups = default_sizes['num_groups']
    default_threshold = default_sizes['threshold']
    default_tile_size = default_sizes['tile_size']
    default_reg_tile_size = default_sizes['reg_tile_size']
    lockstep_width = default_sizes['lockstep_width']

    if default_group_size > max_group_size:
        if default_group_size_set:
            sys.stderr.write('Note: Device limits group size to {} (down from {})\n'.
                             format(max_tile_size, default_group_size))
        default_group_size = max_group_size

    if default_tile_size > max_tile_size:
        if default_tile_size_set:
            sys.stderr.write('Note: Device limits tile size to {} (down from {})\n'.
                             format(max_tile_size, default_tile_size))
        default_tile_size = max_tile_size

    for (k,v) in user_sizes.items():
        if k in all_sizes:
            all_sizes[k]['value'] = v
        else:
            raise Exception('Unknown size: {}\nKnown sizes: {}'.format(k, ' '.join(all_sizes.keys())))

    self.sizes = {}
    for (k,v) in all_sizes.items():
        if v['class'] == 'group_size':
            max_value = max_group_size
            default_value = default_group_size
        elif v['class'] == 'num_groups':
            max_value = max_group_size # Intentional!
            default_value = default_num_groups
        elif v['class'] == 'tile_size':
            max_value = max_tile_size
            default_value = default_tile_size
        elif v['class'] == 'reg_tile_size':
            max_value = None
            default_value = default_reg_tile_size
        elif v['class'].startswith('threshold'):
            max_value = None
            default_value = default_threshold
        else:
            # Bespoke sizes have no limit or default.
            max_value = None
        if v['value'] == None:
            self.sizes[k] = default_value
        elif max_value != None and v['value'] > max_value:
            sys.stderr.write('Note: Device limits {} to {} (down from {}\n'.
                             format(k, max_value, v['value']))
            self.sizes[k] = max_value
        else:
            self.sizes[k] = v['value']

    # XXX: we perform only a subset of z-encoding here.  Really, the
    # compiler should provide us with the variables to which
    # parameters are mapped.
    if (len(program_src) >= 0):
        return cl.Program(self.ctx, program_src).build(
            ["-DLOCKSTEP_WIDTH={}".format(lockstep_width)]
            + ["-D{}={}".format(s.replace('z', 'zz').replace('.', 'zi').replace('#', 'zh'),v) for (s,v) in self.sizes.items()])

def opencl_alloc(self, min_size, tag):
    min_size = 1 if min_size == 0 else min_size
    assert min_size > 0
    return self.pool.allocate(min_size)

def opencl_free_all(self):
    self.pool.free_held()

def sync(self):
    failure = np.empty(1, dtype=np.int32)
    cl.enqueue_copy(self.queue, failure, self.global_failure, is_blocking=True)
    self.failure_is_an_option = np.int32(0)
    if failure[0] >= 0:
        # Reset failure information.
        cl.enqueue_fill_buffer(self.queue, self.global_failure, np.int32(-1), 0, np.int32().itemsize)

        # Read failure args.
        failure_args = np.empty(self.global_failure_args_max+1, dtype=np.int64)
        cl.enqueue_copy(self.queue, failure_args, self.global_failure_args, is_blocking=True)

        raise Exception(self.failure_msgs[failure[0]].format(*failure_args))
import pyopencl.array
import time
import argparse
sizes = {}
synchronous = False
preferred_platform = None
preferred_device = None
default_threshold = None
default_group_size = None
default_num_groups = None
default_tile_size = None
default_reg_tile_size = None
fut_opencl_src = """#ifdef cl_clang_storage_class_specifiers
#pragma OPENCL EXTENSION cl_clang_storage_class_specifiers : enable
#endif
#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable
__kernel void dummy_kernel(__global unsigned char *dummy, int n)
{
    const int thread_gid = get_global_id(0);
    
    if (thread_gid >= n)
        return;
}
#pragma OPENCL EXTENSION cl_khr_int64_base_atomics : enable
#pragma OPENCL EXTENSION cl_khr_int64_extended_atomics : enable
typedef char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long int64_t;
typedef uchar uint8_t;
typedef ushort uint16_t;
typedef uint uint32_t;
typedef ulong uint64_t;
#ifdef cl_nv_pragma_unroll
static inline void mem_fence_global()
{
    asm("membar.gl;");
}
#else
static inline void mem_fence_global()
{
    mem_fence(CLK_LOCAL_MEM_FENCE | CLK_GLOBAL_MEM_FENCE);
}
#endif
static inline void mem_fence_local()
{
    mem_fence(CLK_LOCAL_MEM_FENCE);
}
static inline uint8_t add8(uint8_t x, uint8_t y)
{
    return x + y;
}
static inline uint16_t add16(uint16_t x, uint16_t y)
{
    return x + y;
}
static inline uint32_t add32(uint32_t x, uint32_t y)
{
    return x + y;
}
static inline uint64_t add64(uint64_t x, uint64_t y)
{
    return x + y;
}
static inline uint8_t sub8(uint8_t x, uint8_t y)
{
    return x - y;
}
static inline uint16_t sub16(uint16_t x, uint16_t y)
{
    return x - y;
}
static inline uint32_t sub32(uint32_t x, uint32_t y)
{
    return x - y;
}
static inline uint64_t sub64(uint64_t x, uint64_t y)
{
    return x - y;
}
static inline uint8_t mul8(uint8_t x, uint8_t y)
{
    return x * y;
}
static inline uint16_t mul16(uint16_t x, uint16_t y)
{
    return x * y;
}
static inline uint32_t mul32(uint32_t x, uint32_t y)
{
    return x * y;
}
static inline uint64_t mul64(uint64_t x, uint64_t y)
{
    return x * y;
}
static inline uint8_t udiv8(uint8_t x, uint8_t y)
{
    return x / y;
}
static inline uint16_t udiv16(uint16_t x, uint16_t y)
{
    return x / y;
}
static inline uint32_t udiv32(uint32_t x, uint32_t y)
{
    return x / y;
}
static inline uint64_t udiv64(uint64_t x, uint64_t y)
{
    return x / y;
}
static inline uint8_t udiv_up8(uint8_t x, uint8_t y)
{
    return (x + y - 1) / y;
}
static inline uint16_t udiv_up16(uint16_t x, uint16_t y)
{
    return (x + y - 1) / y;
}
static inline uint32_t udiv_up32(uint32_t x, uint32_t y)
{
    return (x + y - 1) / y;
}
static inline uint64_t udiv_up64(uint64_t x, uint64_t y)
{
    return (x + y - 1) / y;
}
static inline uint8_t umod8(uint8_t x, uint8_t y)
{
    return x % y;
}
static inline uint16_t umod16(uint16_t x, uint16_t y)
{
    return x % y;
}
static inline uint32_t umod32(uint32_t x, uint32_t y)
{
    return x % y;
}
static inline uint64_t umod64(uint64_t x, uint64_t y)
{
    return x % y;
}
static inline uint8_t udiv_safe8(uint8_t x, uint8_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline uint16_t udiv_safe16(uint16_t x, uint16_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline uint32_t udiv_safe32(uint32_t x, uint32_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline uint64_t udiv_safe64(uint64_t x, uint64_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline uint8_t udiv_up_safe8(uint8_t x, uint8_t y)
{
    return y == 0 ? 0 : (x + y - 1) / y;
}
static inline uint16_t udiv_up_safe16(uint16_t x, uint16_t y)
{
    return y == 0 ? 0 : (x + y - 1) / y;
}
static inline uint32_t udiv_up_safe32(uint32_t x, uint32_t y)
{
    return y == 0 ? 0 : (x + y - 1) / y;
}
static inline uint64_t udiv_up_safe64(uint64_t x, uint64_t y)
{
    return y == 0 ? 0 : (x + y - 1) / y;
}
static inline uint8_t umod_safe8(uint8_t x, uint8_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline uint16_t umod_safe16(uint16_t x, uint16_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline uint32_t umod_safe32(uint32_t x, uint32_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline uint64_t umod_safe64(uint64_t x, uint64_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline int8_t sdiv8(int8_t x, int8_t y)
{
    int8_t q = x / y;
    int8_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int16_t sdiv16(int16_t x, int16_t y)
{
    int16_t q = x / y;
    int16_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int32_t sdiv32(int32_t x, int32_t y)
{
    int32_t q = x / y;
    int32_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int64_t sdiv64(int64_t x, int64_t y)
{
    int64_t q = x / y;
    int64_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int8_t sdiv_up8(int8_t x, int8_t y)
{
    return sdiv8(x + y - 1, y);
}
static inline int16_t sdiv_up16(int16_t x, int16_t y)
{
    return sdiv16(x + y - 1, y);
}
static inline int32_t sdiv_up32(int32_t x, int32_t y)
{
    return sdiv32(x + y - 1, y);
}
static inline int64_t sdiv_up64(int64_t x, int64_t y)
{
    return sdiv64(x + y - 1, y);
}
static inline int8_t smod8(int8_t x, int8_t y)
{
    int8_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int16_t smod16(int16_t x, int16_t y)
{
    int16_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int32_t smod32(int32_t x, int32_t y)
{
    int32_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int64_t smod64(int64_t x, int64_t y)
{
    int64_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int8_t sdiv_safe8(int8_t x, int8_t y)
{
    return y == 0 ? 0 : sdiv8(x, y);
}
static inline int16_t sdiv_safe16(int16_t x, int16_t y)
{
    return y == 0 ? 0 : sdiv16(x, y);
}
static inline int32_t sdiv_safe32(int32_t x, int32_t y)
{
    return y == 0 ? 0 : sdiv32(x, y);
}
static inline int64_t sdiv_safe64(int64_t x, int64_t y)
{
    return y == 0 ? 0 : sdiv64(x, y);
}
static inline int8_t sdiv_up_safe8(int8_t x, int8_t y)
{
    return sdiv_safe8(x + y - 1, y);
}
static inline int16_t sdiv_up_safe16(int16_t x, int16_t y)
{
    return sdiv_safe16(x + y - 1, y);
}
static inline int32_t sdiv_up_safe32(int32_t x, int32_t y)
{
    return sdiv_safe32(x + y - 1, y);
}
static inline int64_t sdiv_up_safe64(int64_t x, int64_t y)
{
    return sdiv_safe64(x + y - 1, y);
}
static inline int8_t smod_safe8(int8_t x, int8_t y)
{
    return y == 0 ? 0 : smod8(x, y);
}
static inline int16_t smod_safe16(int16_t x, int16_t y)
{
    return y == 0 ? 0 : smod16(x, y);
}
static inline int32_t smod_safe32(int32_t x, int32_t y)
{
    return y == 0 ? 0 : smod32(x, y);
}
static inline int64_t smod_safe64(int64_t x, int64_t y)
{
    return y == 0 ? 0 : smod64(x, y);
}
static inline int8_t squot8(int8_t x, int8_t y)
{
    return x / y;
}
static inline int16_t squot16(int16_t x, int16_t y)
{
    return x / y;
}
static inline int32_t squot32(int32_t x, int32_t y)
{
    return x / y;
}
static inline int64_t squot64(int64_t x, int64_t y)
{
    return x / y;
}
static inline int8_t srem8(int8_t x, int8_t y)
{
    return x % y;
}
static inline int16_t srem16(int16_t x, int16_t y)
{
    return x % y;
}
static inline int32_t srem32(int32_t x, int32_t y)
{
    return x % y;
}
static inline int64_t srem64(int64_t x, int64_t y)
{
    return x % y;
}
static inline int8_t squot_safe8(int8_t x, int8_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline int16_t squot_safe16(int16_t x, int16_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline int32_t squot_safe32(int32_t x, int32_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline int64_t squot_safe64(int64_t x, int64_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline int8_t srem_safe8(int8_t x, int8_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline int16_t srem_safe16(int16_t x, int16_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline int32_t srem_safe32(int32_t x, int32_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline int64_t srem_safe64(int64_t x, int64_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline int8_t smin8(int8_t x, int8_t y)
{
    return x < y ? x : y;
}
static inline int16_t smin16(int16_t x, int16_t y)
{
    return x < y ? x : y;
}
static inline int32_t smin32(int32_t x, int32_t y)
{
    return x < y ? x : y;
}
static inline int64_t smin64(int64_t x, int64_t y)
{
    return x < y ? x : y;
}
static inline uint8_t umin8(uint8_t x, uint8_t y)
{
    return x < y ? x : y;
}
static inline uint16_t umin16(uint16_t x, uint16_t y)
{
    return x < y ? x : y;
}
static inline uint32_t umin32(uint32_t x, uint32_t y)
{
    return x < y ? x : y;
}
static inline uint64_t umin64(uint64_t x, uint64_t y)
{
    return x < y ? x : y;
}
static inline int8_t smax8(int8_t x, int8_t y)
{
    return x < y ? y : x;
}
static inline int16_t smax16(int16_t x, int16_t y)
{
    return x < y ? y : x;
}
static inline int32_t smax32(int32_t x, int32_t y)
{
    return x < y ? y : x;
}
static inline int64_t smax64(int64_t x, int64_t y)
{
    return x < y ? y : x;
}
static inline uint8_t umax8(uint8_t x, uint8_t y)
{
    return x < y ? y : x;
}
static inline uint16_t umax16(uint16_t x, uint16_t y)
{
    return x < y ? y : x;
}
static inline uint32_t umax32(uint32_t x, uint32_t y)
{
    return x < y ? y : x;
}
static inline uint64_t umax64(uint64_t x, uint64_t y)
{
    return x < y ? y : x;
}
static inline uint8_t shl8(uint8_t x, uint8_t y)
{
    return x << y;
}
static inline uint16_t shl16(uint16_t x, uint16_t y)
{
    return x << y;
}
static inline uint32_t shl32(uint32_t x, uint32_t y)
{
    return x << y;
}
static inline uint64_t shl64(uint64_t x, uint64_t y)
{
    return x << y;
}
static inline uint8_t lshr8(uint8_t x, uint8_t y)
{
    return x >> y;
}
static inline uint16_t lshr16(uint16_t x, uint16_t y)
{
    return x >> y;
}
static inline uint32_t lshr32(uint32_t x, uint32_t y)
{
    return x >> y;
}
static inline uint64_t lshr64(uint64_t x, uint64_t y)
{
    return x >> y;
}
static inline int8_t ashr8(int8_t x, int8_t y)
{
    return x >> y;
}
static inline int16_t ashr16(int16_t x, int16_t y)
{
    return x >> y;
}
static inline int32_t ashr32(int32_t x, int32_t y)
{
    return x >> y;
}
static inline int64_t ashr64(int64_t x, int64_t y)
{
    return x >> y;
}
static inline uint8_t and8(uint8_t x, uint8_t y)
{
    return x & y;
}
static inline uint16_t and16(uint16_t x, uint16_t y)
{
    return x & y;
}
static inline uint32_t and32(uint32_t x, uint32_t y)
{
    return x & y;
}
static inline uint64_t and64(uint64_t x, uint64_t y)
{
    return x & y;
}
static inline uint8_t or8(uint8_t x, uint8_t y)
{
    return x | y;
}
static inline uint16_t or16(uint16_t x, uint16_t y)
{
    return x | y;
}
static inline uint32_t or32(uint32_t x, uint32_t y)
{
    return x | y;
}
static inline uint64_t or64(uint64_t x, uint64_t y)
{
    return x | y;
}
static inline uint8_t xor8(uint8_t x, uint8_t y)
{
    return x ^ y;
}
static inline uint16_t xor16(uint16_t x, uint16_t y)
{
    return x ^ y;
}
static inline uint32_t xor32(uint32_t x, uint32_t y)
{
    return x ^ y;
}
static inline uint64_t xor64(uint64_t x, uint64_t y)
{
    return x ^ y;
}
static inline bool ult8(uint8_t x, uint8_t y)
{
    return x < y;
}
static inline bool ult16(uint16_t x, uint16_t y)
{
    return x < y;
}
static inline bool ult32(uint32_t x, uint32_t y)
{
    return x < y;
}
static inline bool ult64(uint64_t x, uint64_t y)
{
    return x < y;
}
static inline bool ule8(uint8_t x, uint8_t y)
{
    return x <= y;
}
static inline bool ule16(uint16_t x, uint16_t y)
{
    return x <= y;
}
static inline bool ule32(uint32_t x, uint32_t y)
{
    return x <= y;
}
static inline bool ule64(uint64_t x, uint64_t y)
{
    return x <= y;
}
static inline bool slt8(int8_t x, int8_t y)
{
    return x < y;
}
static inline bool slt16(int16_t x, int16_t y)
{
    return x < y;
}
static inline bool slt32(int32_t x, int32_t y)
{
    return x < y;
}
static inline bool slt64(int64_t x, int64_t y)
{
    return x < y;
}
static inline bool sle8(int8_t x, int8_t y)
{
    return x <= y;
}
static inline bool sle16(int16_t x, int16_t y)
{
    return x <= y;
}
static inline bool sle32(int32_t x, int32_t y)
{
    return x <= y;
}
static inline bool sle64(int64_t x, int64_t y)
{
    return x <= y;
}
static inline int8_t pow8(int8_t x, int8_t y)
{
    int8_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline int16_t pow16(int16_t x, int16_t y)
{
    int16_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline int32_t pow32(int32_t x, int32_t y)
{
    int32_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline int64_t pow64(int64_t x, int64_t y)
{
    int64_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline bool itob_i8_bool(int8_t x)
{
    return x;
}
static inline bool itob_i16_bool(int16_t x)
{
    return x;
}
static inline bool itob_i32_bool(int32_t x)
{
    return x;
}
static inline bool itob_i64_bool(int64_t x)
{
    return x;
}
static inline int8_t btoi_bool_i8(bool x)
{
    return x;
}
static inline int16_t btoi_bool_i16(bool x)
{
    return x;
}
static inline int32_t btoi_bool_i32(bool x)
{
    return x;
}
static inline int64_t btoi_bool_i64(bool x)
{
    return x;
}
#define sext_i8_i8(x) ((int8_t) (int8_t) x)
#define sext_i8_i16(x) ((int16_t) (int8_t) x)
#define sext_i8_i32(x) ((int32_t) (int8_t) x)
#define sext_i8_i64(x) ((int64_t) (int8_t) x)
#define sext_i16_i8(x) ((int8_t) (int16_t) x)
#define sext_i16_i16(x) ((int16_t) (int16_t) x)
#define sext_i16_i32(x) ((int32_t) (int16_t) x)
#define sext_i16_i64(x) ((int64_t) (int16_t) x)
#define sext_i32_i8(x) ((int8_t) (int32_t) x)
#define sext_i32_i16(x) ((int16_t) (int32_t) x)
#define sext_i32_i32(x) ((int32_t) (int32_t) x)
#define sext_i32_i64(x) ((int64_t) (int32_t) x)
#define sext_i64_i8(x) ((int8_t) (int64_t) x)
#define sext_i64_i16(x) ((int16_t) (int64_t) x)
#define sext_i64_i32(x) ((int32_t) (int64_t) x)
#define sext_i64_i64(x) ((int64_t) (int64_t) x)
#define zext_i8_i8(x) ((int8_t) (uint8_t) x)
#define zext_i8_i16(x) ((int16_t) (uint8_t) x)
#define zext_i8_i32(x) ((int32_t) (uint8_t) x)
#define zext_i8_i64(x) ((int64_t) (uint8_t) x)
#define zext_i16_i8(x) ((int8_t) (uint16_t) x)
#define zext_i16_i16(x) ((int16_t) (uint16_t) x)
#define zext_i16_i32(x) ((int32_t) (uint16_t) x)
#define zext_i16_i64(x) ((int64_t) (uint16_t) x)
#define zext_i32_i8(x) ((int8_t) (uint32_t) x)
#define zext_i32_i16(x) ((int16_t) (uint32_t) x)
#define zext_i32_i32(x) ((int32_t) (uint32_t) x)
#define zext_i32_i64(x) ((int64_t) (uint32_t) x)
#define zext_i64_i8(x) ((int8_t) (uint64_t) x)
#define zext_i64_i16(x) ((int16_t) (uint64_t) x)
#define zext_i64_i32(x) ((int32_t) (uint64_t) x)
#define zext_i64_i64(x) ((int64_t) (uint64_t) x)
#if defined(__OPENCL_VERSION__)
static int32_t futrts_popc8(int8_t x)
{
    return popcount(x);
}
static int32_t futrts_popc16(int16_t x)
{
    return popcount(x);
}
static int32_t futrts_popc32(int32_t x)
{
    return popcount(x);
}
static int32_t futrts_popc64(int64_t x)
{
    return popcount(x);
}
#elif defined(__CUDA_ARCH__)
static int32_t futrts_popc8(int8_t x)
{
    return __popc(zext_i8_i32(x));
}
static int32_t futrts_popc16(int16_t x)
{
    return __popc(zext_i16_i32(x));
}
static int32_t futrts_popc32(int32_t x)
{
    return __popc(x);
}
static int32_t futrts_popc64(int64_t x)
{
    return __popcll(x);
}
#else
static int32_t futrts_popc8(int8_t x)
{
    int c = 0;
    
    for (; x; ++c)
        x &= x - 1;
    return c;
}
static int32_t futrts_popc16(int16_t x)
{
    int c = 0;
    
    for (; x; ++c)
        x &= x - 1;
    return c;
}
static int32_t futrts_popc32(int32_t x)
{
    int c = 0;
    
    for (; x; ++c)
        x &= x - 1;
    return c;
}
static int32_t futrts_popc64(int64_t x)
{
    int c = 0;
    
    for (; x; ++c)
        x &= x - 1;
    return c;
}
#endif
#if defined(__OPENCL_VERSION__)
static uint8_t futrts_mul_hi8(uint8_t a, uint8_t b)
{
    return mul_hi(a, b);
}
static uint16_t futrts_mul_hi16(uint16_t a, uint16_t b)
{
    return mul_hi(a, b);
}
static uint32_t futrts_mul_hi32(uint32_t a, uint32_t b)
{
    return mul_hi(a, b);
}
static uint64_t futrts_mul_hi64(uint64_t a, uint64_t b)
{
    return mul_hi(a, b);
}
#elif defined(__CUDA_ARCH__)
static uint8_t futrts_mul_hi8(uint8_t a, uint8_t b)
{
    uint16_t aa = a;
    uint16_t bb = b;
    
    return aa * bb >> 8;
}
static uint16_t futrts_mul_hi16(uint16_t a, uint16_t b)
{
    uint32_t aa = a;
    uint32_t bb = b;
    
    return aa * bb >> 16;
}
static uint32_t futrts_mul_hi32(uint32_t a, uint32_t b)
{
    return mulhi(a, b);
}
static uint64_t futrts_mul_hi64(uint64_t a, uint64_t b)
{
    return mul64hi(a, b);
}
#else
static uint8_t futrts_mul_hi8(uint8_t a, uint8_t b)
{
    uint16_t aa = a;
    uint16_t bb = b;
    
    return aa * bb >> 8;
}
static uint16_t futrts_mul_hi16(uint16_t a, uint16_t b)
{
    uint32_t aa = a;
    uint32_t bb = b;
    
    return aa * bb >> 16;
}
static uint32_t futrts_mul_hi32(uint32_t a, uint32_t b)
{
    uint64_t aa = a;
    uint64_t bb = b;
    
    return aa * bb >> 32;
}
static uint64_t futrts_mul_hi64(uint64_t a, uint64_t b)
{
    __uint128_t aa = a;
    __uint128_t bb = b;
    
    return aa * bb >> 64;
}
#endif
#if defined(__OPENCL_VERSION__)
static uint8_t futrts_mad_hi8(uint8_t a, uint8_t b, uint8_t c)
{
    return mad_hi(a, b, c);
}
static uint16_t futrts_mad_hi16(uint16_t a, uint16_t b, uint16_t c)
{
    return mad_hi(a, b, c);
}
static uint32_t futrts_mad_hi32(uint32_t a, uint32_t b, uint32_t c)
{
    return mad_hi(a, b, c);
}
static uint64_t futrts_mad_hi64(uint64_t a, uint64_t b, uint64_t c)
{
    return mad_hi(a, b, c);
}
#else
static uint8_t futrts_mad_hi8(uint8_t a, uint8_t b, uint8_t c)
{
    return futrts_mul_hi8(a, b) + c;
}
static uint16_t futrts_mad_hi16(uint16_t a, uint16_t b, uint16_t c)
{
    return futrts_mul_hi16(a, b) + c;
}
static uint32_t futrts_mad_hi32(uint32_t a, uint32_t b, uint32_t c)
{
    return futrts_mul_hi32(a, b) + c;
}
static uint64_t futrts_mad_hi64(uint64_t a, uint64_t b, uint64_t c)
{
    return futrts_mul_hi64(a, b) + c;
}
#endif
#if defined(__OPENCL_VERSION__)
static int32_t futrts_clzz8(int8_t x)
{
    return clz(x);
}
static int32_t futrts_clzz16(int16_t x)
{
    return clz(x);
}
static int32_t futrts_clzz32(int32_t x)
{
    return clz(x);
}
static int32_t futrts_clzz64(int64_t x)
{
    return clz(x);
}
#elif defined(__CUDA_ARCH__)
static int32_t futrts_clzz8(int8_t x)
{
    return __clz(zext_i8_i32(x)) - 24;
}
static int32_t futrts_clzz16(int16_t x)
{
    return __clz(zext_i16_i32(x)) - 16;
}
static int32_t futrts_clzz32(int32_t x)
{
    return __clz(x);
}
static int32_t futrts_clzz64(int64_t x)
{
    return __clzll(x);
}
#else
static int32_t futrts_clzz8(int8_t x)
{
    int n = 0;
    int bits = sizeof(x) * 8;
    
    for (int i = 0; i < bits; i++) {
        if (x < 0)
            break;
        n++;
        x <<= 1;
    }
    return n;
}
static int32_t futrts_clzz16(int16_t x)
{
    int n = 0;
    int bits = sizeof(x) * 8;
    
    for (int i = 0; i < bits; i++) {
        if (x < 0)
            break;
        n++;
        x <<= 1;
    }
    return n;
}
static int32_t futrts_clzz32(int32_t x)
{
    int n = 0;
    int bits = sizeof(x) * 8;
    
    for (int i = 0; i < bits; i++) {
        if (x < 0)
            break;
        n++;
        x <<= 1;
    }
    return n;
}
static int32_t futrts_clzz64(int64_t x)
{
    int n = 0;
    int bits = sizeof(x) * 8;
    
    for (int i = 0; i < bits; i++) {
        if (x < 0)
            break;
        n++;
        x <<= 1;
    }
    return n;
}
#endif
#if defined(__OPENCL_VERSION__)
static int32_t futrts_ctzz8(int8_t x)
{
    int i = 0;
    
    for (; i < 8 && (x & 1) == 0; i++, x >>= 1)
        ;
    return i;
}
static int32_t futrts_ctzz16(int16_t x)
{
    int i = 0;
    
    for (; i < 16 && (x & 1) == 0; i++, x >>= 1)
        ;
    return i;
}
static int32_t futrts_ctzz32(int32_t x)
{
    int i = 0;
    
    for (; i < 32 && (x & 1) == 0; i++, x >>= 1)
        ;
    return i;
}
static int32_t futrts_ctzz64(int64_t x)
{
    int i = 0;
    
    for (; i < 64 && (x & 1) == 0; i++, x >>= 1)
        ;
    return i;
}
#elif defined(__CUDA_ARCH__)
static int32_t futrts_ctzz8(int8_t x)
{
    int y = __ffs(x);
    
    return y == 0 ? 8 : y - 1;
}
static int32_t futrts_ctzz16(int16_t x)
{
    int y = __ffs(x);
    
    return y == 0 ? 16 : y - 1;
}
static int32_t futrts_ctzz32(int32_t x)
{
    int y = __ffs(x);
    
    return y == 0 ? 32 : y - 1;
}
static int32_t futrts_ctzz64(int64_t x)
{
    int y = __ffsll(x);
    
    return y == 0 ? 64 : y - 1;
}
#else
static int32_t futrts_ctzz8(int8_t x)
{
    return x == 0 ? 8 : __builtin_ctz((uint32_t) x);
}
static int32_t futrts_ctzz16(int16_t x)
{
    return x == 0 ? 16 : __builtin_ctz((uint32_t) x);
}
static int32_t futrts_ctzz32(int32_t x)
{
    return x == 0 ? 32 : __builtin_ctz(x);
}
static int32_t futrts_ctzz64(int64_t x)
{
    return x == 0 ? 64 : __builtin_ctzll(x);
}
#endif
static inline float fdiv32(float x, float y)
{
    return x / y;
}
static inline float fadd32(float x, float y)
{
    return x + y;
}
static inline float fsub32(float x, float y)
{
    return x - y;
}
static inline float fmul32(float x, float y)
{
    return x * y;
}
static inline float fmin32(float x, float y)
{
    return fmin(x, y);
}
static inline float fmax32(float x, float y)
{
    return fmax(x, y);
}
static inline float fpow32(float x, float y)
{
    return pow(x, y);
}
static inline bool cmplt32(float x, float y)
{
    return x < y;
}
static inline bool cmple32(float x, float y)
{
    return x <= y;
}
static inline float sitofp_i8_f32(int8_t x)
{
    return (float) x;
}
static inline float sitofp_i16_f32(int16_t x)
{
    return (float) x;
}
static inline float sitofp_i32_f32(int32_t x)
{
    return (float) x;
}
static inline float sitofp_i64_f32(int64_t x)
{
    return (float) x;
}
static inline float uitofp_i8_f32(uint8_t x)
{
    return (float) x;
}
static inline float uitofp_i16_f32(uint16_t x)
{
    return (float) x;
}
static inline float uitofp_i32_f32(uint32_t x)
{
    return (float) x;
}
static inline float uitofp_i64_f32(uint64_t x)
{
    return (float) x;
}
static inline int8_t fptosi_f32_i8(float x)
{
    return (int8_t) x;
}
static inline int16_t fptosi_f32_i16(float x)
{
    return (int16_t) x;
}
static inline int32_t fptosi_f32_i32(float x)
{
    return (int32_t) x;
}
static inline int64_t fptosi_f32_i64(float x)
{
    return (int64_t) x;
}
static inline uint8_t fptoui_f32_i8(float x)
{
    return (uint8_t) x;
}
static inline uint16_t fptoui_f32_i16(float x)
{
    return (uint16_t) x;
}
static inline uint32_t fptoui_f32_i32(float x)
{
    return (uint32_t) x;
}
static inline uint64_t fptoui_f32_i64(float x)
{
    return (uint64_t) x;
}
static inline bool futrts_isnan32(float x)
{
    return isnan(x);
}
static inline bool futrts_isinf32(float x)
{
    return isinf(x);
}
#ifdef __OPENCL_VERSION__
static inline float futrts_log32(float x)
{
    return log(x);
}
static inline float futrts_log2_32(float x)
{
    return log2(x);
}
static inline float futrts_log10_32(float x)
{
    return log10(x);
}
static inline float futrts_sqrt32(float x)
{
    return sqrt(x);
}
static inline float futrts_exp32(float x)
{
    return exp(x);
}
static inline float futrts_cos32(float x)
{
    return cos(x);
}
static inline float futrts_sin32(float x)
{
    return sin(x);
}
static inline float futrts_tan32(float x)
{
    return tan(x);
}
static inline float futrts_acos32(float x)
{
    return acos(x);
}
static inline float futrts_asin32(float x)
{
    return asin(x);
}
static inline float futrts_atan32(float x)
{
    return atan(x);
}
static inline float futrts_cosh32(float x)
{
    return cosh(x);
}
static inline float futrts_sinh32(float x)
{
    return sinh(x);
}
static inline float futrts_tanh32(float x)
{
    return tanh(x);
}
static inline float futrts_acosh32(float x)
{
    return acosh(x);
}
static inline float futrts_asinh32(float x)
{
    return asinh(x);
}
static inline float futrts_atanh32(float x)
{
    return atanh(x);
}
static inline float futrts_atan2_32(float x, float y)
{
    return atan2(x, y);
}
static inline float futrts_hypot32(float x, float y)
{
    return hypot(x, y);
}
static inline float futrts_gamma32(float x)
{
    return tgamma(x);
}
static inline float futrts_lgamma32(float x)
{
    return lgamma(x);
}
static inline float fmod32(float x, float y)
{
    return fmod(x, y);
}
static inline float futrts_round32(float x)
{
    return rint(x);
}
static inline float futrts_floor32(float x)
{
    return floor(x);
}
static inline float futrts_ceil32(float x)
{
    return ceil(x);
}
static inline float futrts_lerp32(float v0, float v1, float t)
{
    return mix(v0, v1, t);
}
static inline float futrts_mad32(float a, float b, float c)
{
    return mad(a, b, c);
}
static inline float futrts_fma32(float a, float b, float c)
{
    return fma(a, b, c);
}
#else
static inline float futrts_log32(float x)
{
    return logf(x);
}
static inline float futrts_log2_32(float x)
{
    return log2f(x);
}
static inline float futrts_log10_32(float x)
{
    return log10f(x);
}
static inline float futrts_sqrt32(float x)
{
    return sqrtf(x);
}
static inline float futrts_exp32(float x)
{
    return expf(x);
}
static inline float futrts_cos32(float x)
{
    return cosf(x);
}
static inline float futrts_sin32(float x)
{
    return sinf(x);
}
static inline float futrts_tan32(float x)
{
    return tanf(x);
}
static inline float futrts_acos32(float x)
{
    return acosf(x);
}
static inline float futrts_asin32(float x)
{
    return asinf(x);
}
static inline float futrts_atan32(float x)
{
    return atanf(x);
}
static inline float futrts_cosh32(float x)
{
    return coshf(x);
}
static inline float futrts_sinh32(float x)
{
    return sinhf(x);
}
static inline float futrts_tanh32(float x)
{
    return tanhf(x);
}
static inline float futrts_acosh32(float x)
{
    return acoshf(x);
}
static inline float futrts_asinh32(float x)
{
    return asinhf(x);
}
static inline float futrts_atanh32(float x)
{
    return atanhf(x);
}
static inline float futrts_atan2_32(float x, float y)
{
    return atan2f(x, y);
}
static inline float futrts_hypot32(float x, float y)
{
    return hypotf(x, y);
}
static inline float futrts_gamma32(float x)
{
    return tgammaf(x);
}
static inline float futrts_lgamma32(float x)
{
    return lgammaf(x);
}
static inline float fmod32(float x, float y)
{
    return fmodf(x, y);
}
static inline float futrts_round32(float x)
{
    return rintf(x);
}
static inline float futrts_floor32(float x)
{
    return floorf(x);
}
static inline float futrts_ceil32(float x)
{
    return ceilf(x);
}
static inline float futrts_lerp32(float v0, float v1, float t)
{
    return v0 + (v1 - v0) * t;
}
static inline float futrts_mad32(float a, float b, float c)
{
    return a * b + c;
}
static inline float futrts_fma32(float a, float b, float c)
{
    return fmaf(a, b, c);
}
#endif
static inline int32_t futrts_to_bits32(float x)
{
    union {
        float f;
        int32_t t;
    } p;
    
    p.f = x;
    return p.t;
}
static inline float futrts_from_bits32(int32_t x)
{
    union {
        int32_t f;
        float t;
    } p;
    
    p.f = x;
    return p.t;
}
static inline float fsignum32(float x)
{
    return futrts_isnan32(x) ? x : (x > 0) - (x < 0);
}
// Start of atomics.h

inline int32_t atomic_xchg_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicExch((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

inline int32_t atomic_xchg_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicExch((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

inline int32_t atomic_cmpxchg_i32_global(volatile __global int32_t *p,
                                         int32_t cmp, int32_t val) {
#ifdef FUTHARK_CUDA
  return atomicCAS((int32_t*)p, cmp, val);
#else
  return atomic_cmpxchg(p, cmp, val);
#endif
}

inline int32_t atomic_cmpxchg_i32_local(volatile __local int32_t *p,
                                        int32_t cmp, int32_t val) {
#ifdef FUTHARK_CUDA
  return atomicCAS((int32_t*)p, cmp, val);
#else
  return atomic_cmpxchg(p, cmp, val);
#endif
}

inline int32_t atomic_add_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((int32_t*)p, x);
#else
  return atomic_add(p, x);
#endif
}

inline int32_t atomic_add_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((int32_t*)p, x);
#else
  return atomic_add(p, x);
#endif
}

inline float atomic_fadd_f32_global(volatile __global float *p, float x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((float*)p, x);
#else
  union { int32_t i; float f; } old;
  union { int32_t i; float f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg_i32_global((volatile __global int32_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

inline float atomic_fadd_f32_local(volatile __local float *p, float x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((float*)p, x);
#else
  union { int32_t i; float f; } old;
  union { int32_t i; float f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg_i32_local((volatile __local int32_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

inline int32_t atomic_smax_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((int32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

inline int32_t atomic_smax_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((int32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

inline int32_t atomic_smin_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((int32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

inline int32_t atomic_smin_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((int32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

inline uint32_t atomic_umax_i32_global(volatile __global uint32_t *p, uint32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((uint32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

inline uint32_t atomic_umax_i32_local(volatile __local uint32_t *p, uint32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((uint32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

inline uint32_t atomic_umin_i32_global(volatile __global uint32_t *p, uint32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((uint32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

inline uint32_t atomic_umin_i32_local(volatile __local uint32_t *p, uint32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((uint32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

inline int32_t atomic_and_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicAnd((int32_t*)p, x);
#else
  return atomic_and(p, x);
#endif
}

inline int32_t atomic_and_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicAnd((int32_t*)p, x);
#else
  return atomic_and(p, x);
#endif
}

inline int32_t atomic_or_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicOr((int32_t*)p, x);
#else
  return atomic_or(p, x);
#endif
}

inline int32_t atomic_or_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicOr((int32_t*)p, x);
#else
  return atomic_or(p, x);
#endif
}

inline int32_t atomic_xor_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicXor((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

inline int32_t atomic_xor_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicXor((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

// Start of 64 bit atomics

inline int64_t atomic_xchg_i64_global(volatile __global int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicExch((uint64_t*)p, x);
#else
  return atom_xor(p, x);
#endif
}

inline int64_t atomic_xchg_i64_local(volatile __local int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicExch((uint64_t*)p, x);
#else
  return atom_xor(p, x);
#endif
}

inline int64_t atomic_cmpxchg_i64_global(volatile __global int64_t *p,
                                         int64_t cmp, int64_t val) {
#ifdef FUTHARK_CUDA
  return atomicCAS((uint64_t*)p, cmp, val);
#else
  return atom_cmpxchg(p, cmp, val);
#endif
}

inline int64_t atomic_cmpxchg_i64_local(volatile __local int64_t *p,
                                        int64_t cmp, int64_t val) {
#ifdef FUTHARK_CUDA
  return atomicCAS((uint64_t*)p, cmp, val);
#else
  return atom_cmpxchg(p, cmp, val);
#endif
}

inline int64_t atomic_add_i64_global(volatile __global int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((uint64_t*)p, x);
#else
  return atom_add(p, x);
#endif
}

inline int64_t atomic_add_i64_local(volatile __local int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((uint64_t*)p, x);
#else
  return atom_add(p, x);
#endif
}

#ifdef FUTHARK_F64_ENABLED

inline double atomic_fadd_f64_global(volatile __global double *p, double x) {
#if defined(FUTHARK_CUDA) && __CUDA_ARCH__ >= 600
  return atomicAdd((double*)p, x);
#else
  union { int64_t i; double f; } old;
  union { int64_t i; double f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg_i64_global((volatile __global int64_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

inline double atomic_fadd_f64_local(volatile __local double *p, double x) {
#if defined(FUTHARK_CUDA) && __CUDA_ARCH__ >= 600
  return atomicAdd((double*)p, x);
#else
  union { int64_t i; double f; } old;
  union { int64_t i; double f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg_i64_local((volatile __local int64_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

#endif

inline int64_t atomic_smax_i64_global(volatile __global int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((int64_t*)p, x);
#else
  return atom_max(p, x);
#endif
}

inline int64_t atomic_smax_i64_local(volatile __local int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((int64_t*)p, x);
#else
  return atom_max(p, x);
#endif
}

inline int64_t atomic_smin_i64_global(volatile __global int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((int64_t*)p, x);
#else
  return atom_min(p, x);
#endif
}

inline int64_t atomic_smin_i64_local(volatile __local int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((int64_t*)p, x);
#else
  return atom_min(p, x);
#endif
}

inline uint64_t atomic_umax_i64_global(volatile __global uint64_t *p, uint64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((uint64_t*)p, x);
#else
  return atom_max(p, x);
#endif
}

inline uint64_t atomic_umax_i64_local(volatile __local uint64_t *p, uint64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((uint64_t*)p, x);
#else
  return atom_max(p, x);
#endif
}

inline uint64_t atomic_umin_i64_global(volatile __global uint64_t *p, uint64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((uint64_t*)p, x);
#else
  return atom_min(p, x);
#endif
}

inline uint64_t atomic_umin_i64_local(volatile __local uint64_t *p, uint64_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((uint64_t*)p, x);
#else
  return atom_min(p, x);
#endif
}

inline int64_t atomic_and_i64_global(volatile __global int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicAnd((int64_t*)p, x);
#else
  return atom_and(p, x);
#endif
}

inline int64_t atomic_and_i64_local(volatile __local int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicAnd((int64_t*)p, x);
#else
  return atom_and(p, x);
#endif
}

inline int64_t atomic_or_i64_global(volatile __global int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicOr((int64_t*)p, x);
#else
  return atom_or(p, x);
#endif
}

inline int64_t atomic_or_i64_local(volatile __local int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicOr((int64_t*)p, x);
#else
  return atom_or(p, x);
#endif
}

inline int64_t atomic_xor_i64_global(volatile __global int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicXor((int64_t*)p, x);
#else
  return atom_xor(p, x);
#endif
}

inline int64_t atomic_xor_i64_local(volatile __local int64_t *p, int64_t x) {
#ifdef FUTHARK_CUDA
  return atomicXor((int64_t*)p, x);
#else
  return atom_xor(p, x);
#endif
}

// End of atomics.h




__kernel void builtinzhreplicate_f32zireplicate_43628(int32_t num_elems_43625,
                                                      float val_43626, __global
                                                      unsigned char *mem_43624)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t replicate_gtid_43628;
    int32_t replicate_ltid_43629;
    int32_t replicate_gid_43630;
    
    replicate_gtid_43628 = get_global_id(0);
    replicate_ltid_43629 = get_local_id(0);
    replicate_gid_43630 = get_group_id(0);
    if (slt64(replicate_gtid_43628, num_elems_43625)) {
        ((__global float *) mem_43624)[sext_i32_i64(replicate_gtid_43628)] =
            val_43626;
    }
    
  error_0:
    return;
}
__kernel void builtinzhreplicate_i32zireplicate_43637(int32_t num_elems_43634,
                                                      int32_t val_43635,
                                                      __global
                                                      unsigned char *mem_43633)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t replicate_gtid_43637;
    int32_t replicate_ltid_43638;
    int32_t replicate_gid_43639;
    
    replicate_gtid_43637 = get_global_id(0);
    replicate_ltid_43638 = get_local_id(0);
    replicate_gid_43639 = get_group_id(0);
    if (slt64(replicate_gtid_43637, num_elems_43634)) {
        ((__global int32_t *) mem_43633)[sext_i32_i64(replicate_gtid_43637)] =
            val_43635;
    }
    
  error_0:
    return;
}
__kernel void convertToFloatzisegmap_30158(__global int *global_failure,
                                           int64_t m_28155, int64_t n_28156,
                                           int64_t p_28157,
                                           int16_t nan_value_28158, __global
                                           unsigned char *images_mem_41420,
                                           __global unsigned char *mem_41426)
{
    #define segmap_group_sizze_30208 (convertToFloatzisegmap_group_sizze_30162)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_42874;
    int32_t local_tid_42875;
    int64_t group_sizze_42878;
    int32_t wave_sizze_42877;
    int32_t group_tid_42876;
    
    global_tid_42874 = get_global_id(0);
    local_tid_42875 = get_local_id(0);
    group_sizze_42878 = get_local_size(0);
    wave_sizze_42877 = LOCKSTEP_WIDTH;
    group_tid_42876 = get_group_id(0);
    
    int32_t phys_tid_30158 = global_tid_42874;
    int64_t global_tid_42879 = sext_i32_i64(group_tid_42876) *
            segmap_group_sizze_30208 + sext_i32_i64(local_tid_42875);
    int64_t slice_42880 = p_28157;
    int64_t slice_42881 = n_28156 * slice_42880;
    int64_t slice_42882 = m_28155 * slice_42881;
    int64_t gtid_30155 = squot64(global_tid_42879, slice_42881);
    int64_t remnant_42883 = global_tid_42879 - gtid_30155 * slice_42881;
    int64_t gtid_30156 = squot64(remnant_42883, slice_42880);
    int64_t remnant_42884 = remnant_42883 - gtid_30156 * slice_42880;
    int64_t gtid_30157 = remnant_42884;
    int64_t remnant_42885 = remnant_42884 - gtid_30157;
    
    if ((slt64(gtid_30155, m_28155) && slt64(gtid_30156, n_28156)) &&
        slt64(gtid_30157, p_28157)) {
        int16_t x_30211 = ((__global int16_t *) images_mem_41420)[gtid_30155 *
                                                                  (p_28157 *
                                                                   n_28156) +
                                                                  gtid_30156 *
                                                                  p_28157 +
                                                                  gtid_30157];
        bool cond_30212 = x_30211 == nan_value_28158;
        float defunc_0_f_res_30213;
        
        if (cond_30212) {
            defunc_0_f_res_30213 = NAN;
        } else {
            float i16_res_30214 = sitofp_i16_f32(x_30211);
            
            defunc_0_f_res_30213 = i16_res_30214;
        }
        ((__global float *) mem_41426)[gtid_30155 * (p_28157 * n_28156) +
                                       gtid_30156 * p_28157 + gtid_30157] =
            defunc_0_f_res_30213;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_30208
}
__kernel void gpu_map_transpose_f32(__local volatile
                                    int64_t *block_9_backing_aligned_0,
                                    int32_t destoffset_1, int32_t srcoffset_3,
                                    int32_t num_arrays_4, int32_t x_elems_5,
                                    int32_t y_elems_6, int32_t mulx_7,
                                    int32_t muly_8, __global
                                    unsigned char *destmem_0, __global
                                    unsigned char *srcmem_2)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict block_9_backing_0 = (__local volatile
                                                         char *) block_9_backing_aligned_0;
    __local char *block_9;
    
    block_9 = (__local char *) block_9_backing_0;
    
    int32_t get_global_id_0_37;
    
    get_global_id_0_37 = get_global_id(0);
    
    int32_t get_local_id_0_38;
    
    get_local_id_0_38 = get_local_id(0);
    
    int32_t get_local_id_1_39;
    
    get_local_id_1_39 = get_local_id(1);
    
    int32_t get_group_id_0_40;
    
    get_group_id_0_40 = get_group_id(0);
    
    int32_t get_group_id_1_41;
    
    get_group_id_1_41 = get_group_id(1);
    
    int32_t get_group_id_2_42;
    
    get_group_id_2_42 = get_group_id(2);
    
    int32_t our_array_offset_30 = get_group_id_2_42 * x_elems_5 * y_elems_6;
    int32_t odata_offset_33 = squot32(destoffset_1, 4) + our_array_offset_30;
    int32_t idata_offset_34 = squot32(srcoffset_3, 4) + our_array_offset_30;
    int32_t x_index_31 = get_global_id_0_37;
    int32_t y_index_32 = get_group_id_1_41 * 32 + get_local_id_1_39;
    
    if (slt32(x_index_31, x_elems_5)) {
        for (int32_t j_43 = 0; j_43 < 4; j_43++) {
            int32_t index_in_35 = (y_index_32 + j_43 * 8) * x_elems_5 +
                    x_index_31;
            
            if (slt32(y_index_32 + j_43 * 8, y_elems_6)) {
                ((__local float *) block_9)[sext_i32_i64((get_local_id_1_39 +
                                                          j_43 * 8) * 33 +
                                            get_local_id_0_38)] = ((__global
                                                                    float *) srcmem_2)[sext_i32_i64(idata_offset_34 +
                                                                                       index_in_35)];
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    x_index_31 = get_group_id_1_41 * 32 + get_local_id_0_38;
    y_index_32 = get_group_id_0_40 * 32 + get_local_id_1_39;
    if (slt32(x_index_31, y_elems_6)) {
        for (int32_t j_43 = 0; j_43 < 4; j_43++) {
            int32_t index_out_36 = (y_index_32 + j_43 * 8) * y_elems_6 +
                    x_index_31;
            
            if (slt32(y_index_32 + j_43 * 8, x_elems_5)) {
                ((__global float *) destmem_0)[sext_i32_i64(odata_offset_33 +
                                               index_out_36)] = ((__local
                                                                  float *) block_9)[sext_i32_i64(get_local_id_0_38 *
                                                                                    33 +
                                                                                    get_local_id_1_39 +
                                                                                    j_43 *
                                                                                    8)];
            }
        }
    }
    
  error_0:
    return;
}
__kernel void gpu_map_transpose_f32_low_height(__local volatile
                                               int64_t *block_9_backing_aligned_0,
                                               int32_t destoffset_1,
                                               int32_t srcoffset_3,
                                               int32_t num_arrays_4,
                                               int32_t x_elems_5,
                                               int32_t y_elems_6,
                                               int32_t mulx_7, int32_t muly_8,
                                               __global
                                               unsigned char *destmem_0,
                                               __global unsigned char *srcmem_2)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict block_9_backing_0 = (__local volatile
                                                         char *) block_9_backing_aligned_0;
    __local char *block_9;
    
    block_9 = (__local char *) block_9_backing_0;
    
    int32_t get_global_id_0_37;
    
    get_global_id_0_37 = get_global_id(0);
    
    int32_t get_local_id_0_38;
    
    get_local_id_0_38 = get_local_id(0);
    
    int32_t get_local_id_1_39;
    
    get_local_id_1_39 = get_local_id(1);
    
    int32_t get_group_id_0_40;
    
    get_group_id_0_40 = get_group_id(0);
    
    int32_t get_group_id_1_41;
    
    get_group_id_1_41 = get_group_id(1);
    
    int32_t get_group_id_2_42;
    
    get_group_id_2_42 = get_group_id(2);
    
    int32_t our_array_offset_30 = get_group_id_2_42 * x_elems_5 * y_elems_6;
    int32_t odata_offset_33 = squot32(destoffset_1, 4) + our_array_offset_30;
    int32_t idata_offset_34 = squot32(srcoffset_3, 4) + our_array_offset_30;
    int32_t x_index_31 = get_group_id_0_40 * 16 * mulx_7 + get_local_id_0_38 +
            srem32(get_local_id_1_39, mulx_7) * 16;
    int32_t y_index_32 = get_group_id_1_41 * 16 + squot32(get_local_id_1_39,
                                                          mulx_7);
    int32_t index_in_35 = y_index_32 * x_elems_5 + x_index_31;
    
    if (slt32(x_index_31, x_elems_5) && slt32(y_index_32, y_elems_6)) {
        ((__local float *) block_9)[sext_i32_i64(get_local_id_1_39 * 17 +
                                    get_local_id_0_38)] = ((__global
                                                            float *) srcmem_2)[sext_i32_i64(idata_offset_34 +
                                                                               index_in_35)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    x_index_31 = get_group_id_1_41 * 16 + squot32(get_local_id_0_38, mulx_7);
    y_index_32 = get_group_id_0_40 * 16 * mulx_7 + get_local_id_1_39 +
        srem32(get_local_id_0_38, mulx_7) * 16;
    
    int32_t index_out_36 = y_index_32 * y_elems_6 + x_index_31;
    
    if (slt32(x_index_31, y_elems_6) && slt32(y_index_32, x_elems_5)) {
        ((__global float *) destmem_0)[sext_i32_i64(odata_offset_33 +
                                       index_out_36)] = ((__local
                                                          float *) block_9)[sext_i32_i64(get_local_id_0_38 *
                                                                            17 +
                                                                            get_local_id_1_39)];
    }
    
  error_0:
    return;
}
__kernel void gpu_map_transpose_f32_low_width(__local volatile
                                              int64_t *block_9_backing_aligned_0,
                                              int32_t destoffset_1,
                                              int32_t srcoffset_3,
                                              int32_t num_arrays_4,
                                              int32_t x_elems_5,
                                              int32_t y_elems_6, int32_t mulx_7,
                                              int32_t muly_8, __global
                                              unsigned char *destmem_0, __global
                                              unsigned char *srcmem_2)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict block_9_backing_0 = (__local volatile
                                                         char *) block_9_backing_aligned_0;
    __local char *block_9;
    
    block_9 = (__local char *) block_9_backing_0;
    
    int32_t get_global_id_0_37;
    
    get_global_id_0_37 = get_global_id(0);
    
    int32_t get_local_id_0_38;
    
    get_local_id_0_38 = get_local_id(0);
    
    int32_t get_local_id_1_39;
    
    get_local_id_1_39 = get_local_id(1);
    
    int32_t get_group_id_0_40;
    
    get_group_id_0_40 = get_group_id(0);
    
    int32_t get_group_id_1_41;
    
    get_group_id_1_41 = get_group_id(1);
    
    int32_t get_group_id_2_42;
    
    get_group_id_2_42 = get_group_id(2);
    
    int32_t our_array_offset_30 = get_group_id_2_42 * x_elems_5 * y_elems_6;
    int32_t odata_offset_33 = squot32(destoffset_1, 4) + our_array_offset_30;
    int32_t idata_offset_34 = squot32(srcoffset_3, 4) + our_array_offset_30;
    int32_t x_index_31 = get_group_id_0_40 * 16 + squot32(get_local_id_0_38,
                                                          muly_8);
    int32_t y_index_32 = get_group_id_1_41 * 16 * muly_8 + get_local_id_1_39 +
            srem32(get_local_id_0_38, muly_8) * 16;
    int32_t index_in_35 = y_index_32 * x_elems_5 + x_index_31;
    
    if (slt32(x_index_31, x_elems_5) && slt32(y_index_32, y_elems_6)) {
        ((__local float *) block_9)[sext_i32_i64(get_local_id_1_39 * 17 +
                                    get_local_id_0_38)] = ((__global
                                                            float *) srcmem_2)[sext_i32_i64(idata_offset_34 +
                                                                               index_in_35)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    x_index_31 = get_group_id_1_41 * 16 * muly_8 + get_local_id_0_38 +
        srem32(get_local_id_1_39, muly_8) * 16;
    y_index_32 = get_group_id_0_40 * 16 + squot32(get_local_id_1_39, muly_8);
    
    int32_t index_out_36 = y_index_32 * y_elems_6 + x_index_31;
    
    if (slt32(x_index_31, y_elems_6) && slt32(y_index_32, x_elems_5)) {
        ((__global float *) destmem_0)[sext_i32_i64(odata_offset_33 +
                                       index_out_36)] = ((__local
                                                          float *) block_9)[sext_i32_i64(get_local_id_0_38 *
                                                                            17 +
                                                                            get_local_id_1_39)];
    }
    
  error_0:
    return;
}
__kernel void gpu_map_transpose_f32_small(__local volatile
                                          int64_t *block_9_backing_aligned_0,
                                          int32_t destoffset_1,
                                          int32_t srcoffset_3,
                                          int32_t num_arrays_4,
                                          int32_t x_elems_5, int32_t y_elems_6,
                                          int32_t mulx_7, int32_t muly_8,
                                          __global unsigned char *destmem_0,
                                          __global unsigned char *srcmem_2)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict block_9_backing_0 = (__local volatile
                                                         char *) block_9_backing_aligned_0;
    __local char *block_9;
    
    block_9 = (__local char *) block_9_backing_0;
    
    int32_t get_global_id_0_37;
    
    get_global_id_0_37 = get_global_id(0);
    
    int32_t get_local_id_0_38;
    
    get_local_id_0_38 = get_local_id(0);
    
    int32_t get_local_id_1_39;
    
    get_local_id_1_39 = get_local_id(1);
    
    int32_t get_group_id_0_40;
    
    get_group_id_0_40 = get_group_id(0);
    
    int32_t get_group_id_1_41;
    
    get_group_id_1_41 = get_group_id(1);
    
    int32_t get_group_id_2_42;
    
    get_group_id_2_42 = get_group_id(2);
    
    int32_t our_array_offset_30 = squot32(get_global_id_0_37, y_elems_6 *
                                          x_elems_5) * (y_elems_6 * x_elems_5);
    int32_t x_index_31 = squot32(srem32(get_global_id_0_37, y_elems_6 *
                                        x_elems_5), y_elems_6);
    int32_t y_index_32 = srem32(get_global_id_0_37, y_elems_6);
    int32_t odata_offset_33 = squot32(destoffset_1, 4) + our_array_offset_30;
    int32_t idata_offset_34 = squot32(srcoffset_3, 4) + our_array_offset_30;
    int32_t index_in_35 = y_index_32 * x_elems_5 + x_index_31;
    int32_t index_out_36 = x_index_31 * y_elems_6 + y_index_32;
    
    if (slt32(get_global_id_0_37, x_elems_5 * y_elems_6 * num_arrays_4)) {
        ((__global float *) destmem_0)[sext_i32_i64(odata_offset_33 +
                                       index_out_36)] = ((__global
                                                          float *) srcmem_2)[sext_i32_i64(idata_offset_34 +
                                                                             index_in_35)];
    }
    
  error_0:
    return;
}
__kernel void mainziscan_stage1_38409(__global int *global_failure,
                                      __local volatile
                                      int64_t *scan_arr_mem_43568_backing_aligned_0,
                                      int64_t N_29559, int64_t m_29560,
                                      int32_t num_threads_43562, __global
                                      unsigned char *images_mem_41421, __global
                                      unsigned char *defunc_3_map_res_mem_42216,
                                      __global unsigned char *mem_42247,
                                      __global unsigned char *mem_42251)
{
    #define segscan_group_sizze_38426 (mainzisegscan_group_sizze_38403)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_43568_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_43568_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43563;
    int32_t local_tid_43564;
    int64_t group_sizze_43567;
    int32_t wave_sizze_43566;
    int32_t group_tid_43565;
    
    global_tid_43563 = get_global_id(0);
    local_tid_43564 = get_local_id(0);
    group_sizze_43567 = get_local_size(0);
    wave_sizze_43566 = LOCKSTEP_WIDTH;
    group_tid_43565 = get_group_id(0);
    
    int32_t phys_tid_38409 = global_tid_43563;
    __local char *scan_arr_mem_43568;
    
    scan_arr_mem_43568 = (__local char *) scan_arr_mem_43568_backing_0;
    
    int64_t x_38431;
    int64_t x_38432;
    
    x_38431 = (int64_t) 0;
    for (int64_t j_43570 = 0; j_43570 < sdiv_up64(m_29560 * N_29559,
                                                  sext_i32_i64(num_threads_43562));
         j_43570++) {
        int64_t chunk_offset_43571 = segscan_group_sizze_38426 * j_43570 +
                sext_i32_i64(group_tid_43565) * (segscan_group_sizze_38426 *
                                                 sdiv_up64(m_29560 * N_29559,
                                                           sext_i32_i64(num_threads_43562)));
        int64_t flat_idx_43572 = chunk_offset_43571 +
                sext_i32_i64(local_tid_43564);
        int64_t gtid_38400 = squot64(flat_idx_43572, N_29559);
        int64_t gtid_38408 = flat_idx_43572 - squot64(flat_idx_43572, N_29559) *
                N_29559;
        
        // threads in bounds read input
        {
            if (slt64(gtid_38400, m_29560) && slt64(gtid_38408, N_29559)) {
                float x_38436 = ((__global
                                  float *) images_mem_41421)[gtid_38400 *
                                                             N_29559 +
                                                             gtid_38408];
                bool isnan_res_38438;
                
                isnan_res_38438 = futrts_isnan32(x_38436);
                
                bool cond_38439 = !isnan_res_38438;
                float defunc_1_f_res_38440;
                
                if (cond_38439) {
                    float x_38437 = ((__global
                                      float *) defunc_3_map_res_mem_42216)[gtid_38400 *
                                                                           N_29559 +
                                                                           gtid_38408];
                    float defunc_1_f_res_t_res_38441 = x_38436 - x_38437;
                    
                    defunc_1_f_res_38440 = defunc_1_f_res_t_res_38441;
                } else {
                    defunc_1_f_res_38440 = NAN;
                }
                
                bool isnan_res_38442;
                
                isnan_res_38442 = futrts_isnan32(defunc_1_f_res_38440);
                
                bool defunc_0_p_res_38443 = !isnan_res_38442;
                int64_t defunc_0_f_res_38444 =
                        btoi_bool_i64(defunc_0_p_res_38443);
                
                // write to-scan values to parameters
                {
                    x_38432 = defunc_0_f_res_38444;
                }
                // write mapped values results to global memory
                {
                    ((__global float *) mem_42251)[gtid_38400 * N_29559 +
                                                   gtid_38408] =
                        defunc_1_f_res_38440;
                }
            }
        }
        // do one intra-group scan operation
        {
            // maybe restore some to-scan values to parameters, or read neutral
            {
                if (!(slt64(gtid_38400, m_29560) && slt64(gtid_38408,
                                                          N_29559))) {
                    x_38432 = (int64_t) 0;
                }
            }
            // combine with carry and write to local memory
            {
                int64_t defunc_1_op_res_38433 = add64(x_38431, x_38432);
                
                ((__local
                  int64_t *) scan_arr_mem_43568)[sext_i32_i64(local_tid_43564)] =
                    defunc_1_op_res_38433;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int64_t x_43573;
            int64_t x_43574;
            int64_t x_43576;
            int64_t x_43577;
            bool ltid_in_bounds_43579 = slt64(sext_i32_i64(local_tid_43564),
                                              segscan_group_sizze_38426);
            int32_t skip_threads_43580;
            
            // read input for in-block scan
            {
                if (ltid_in_bounds_43579) {
                    x_43574 = ((volatile __local
                                int64_t *) scan_arr_mem_43568)[sext_i32_i64(local_tid_43564)];
                    if ((local_tid_43564 - squot32(local_tid_43564, 32) * 32) ==
                        0) {
                        x_43573 = x_43574;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_43580 = 1;
                while (slt32(skip_threads_43580, 32)) {
                    if (sle32(skip_threads_43580, local_tid_43564 -
                              squot32(local_tid_43564, 32) * 32) &&
                        ltid_in_bounds_43579) {
                        // read operands
                        {
                            x_43573 = ((volatile __local
                                        int64_t *) scan_arr_mem_43568)[sext_i32_i64(local_tid_43564) -
                                                                       sext_i32_i64(skip_threads_43580)];
                        }
                        // perform operation
                        {
                            bool inactive_43581 =
                                 slt64(srem64(sext_i32_i64(local_tid_43564) +
                                              chunk_offset_43571, N_29559),
                                       sext_i32_i64(local_tid_43564) +
                                       chunk_offset_43571 -
                                       (sext_i32_i64(local_tid_43564 -
                                        skip_threads_43580) +
                                        chunk_offset_43571));
                            
                            if (inactive_43581) {
                                x_43573 = x_43574;
                            }
                            if (!inactive_43581) {
                                int64_t defunc_1_op_res_43575 = add64(x_43573,
                                                                      x_43574);
                                
                                x_43573 = defunc_1_op_res_43575;
                            }
                        }
                    }
                    if (sle32(wave_sizze_43566, skip_threads_43580)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_43580, local_tid_43564 -
                              squot32(local_tid_43564, 32) * 32) &&
                        ltid_in_bounds_43579) {
                        // write result
                        {
                            ((volatile __local
                              int64_t *) scan_arr_mem_43568)[sext_i32_i64(local_tid_43564)] =
                                x_43573;
                            x_43574 = x_43573;
                        }
                    }
                    if (sle32(wave_sizze_43566, skip_threads_43580)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_43580 *= 2;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // last thread of block 'i' writes its result to offset 'i'
            {
                if ((local_tid_43564 - squot32(local_tid_43564, 32) * 32) ==
                    31 && ltid_in_bounds_43579) {
                    ((volatile __local
                      int64_t *) scan_arr_mem_43568)[sext_i32_i64(squot32(local_tid_43564,
                                                                          32))] =
                        x_43573;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
            {
                int32_t skip_threads_43582;
                
                // read input for in-block scan
                {
                    if (squot32(local_tid_43564, 32) == 0 &&
                        ltid_in_bounds_43579) {
                        x_43577 = ((volatile __local
                                    int64_t *) scan_arr_mem_43568)[sext_i32_i64(local_tid_43564)];
                        if ((local_tid_43564 - squot32(local_tid_43564, 32) *
                             32) == 0) {
                            x_43576 = x_43577;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_43582 = 1;
                    while (slt32(skip_threads_43582, 32)) {
                        if (sle32(skip_threads_43582, local_tid_43564 -
                                  squot32(local_tid_43564, 32) * 32) &&
                            (squot32(local_tid_43564, 32) == 0 &&
                             ltid_in_bounds_43579)) {
                            // read operands
                            {
                                x_43576 = ((volatile __local
                                            int64_t *) scan_arr_mem_43568)[sext_i32_i64(local_tid_43564) -
                                                                           sext_i32_i64(skip_threads_43582)];
                            }
                            // perform operation
                            {
                                bool inactive_43583 =
                                     slt64(srem64(sext_i32_i64(local_tid_43564 *
                                                  32 + 32 - 1) +
                                                  chunk_offset_43571, N_29559),
                                           sext_i32_i64(local_tid_43564 * 32 +
                                           32 - 1) + chunk_offset_43571 -
                                           (sext_i32_i64((local_tid_43564 -
                                                          skip_threads_43582) *
                                            32 + 32 - 1) + chunk_offset_43571));
                                
                                if (inactive_43583) {
                                    x_43576 = x_43577;
                                }
                                if (!inactive_43583) {
                                    int64_t defunc_1_op_res_43578 =
                                            add64(x_43576, x_43577);
                                    
                                    x_43576 = defunc_1_op_res_43578;
                                }
                            }
                        }
                        if (sle32(wave_sizze_43566, skip_threads_43582)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_43582, local_tid_43564 -
                                  squot32(local_tid_43564, 32) * 32) &&
                            (squot32(local_tid_43564, 32) == 0 &&
                             ltid_in_bounds_43579)) {
                            // write result
                            {
                                ((volatile __local
                                  int64_t *) scan_arr_mem_43568)[sext_i32_i64(local_tid_43564)] =
                                    x_43576;
                                x_43577 = x_43576;
                            }
                        }
                        if (sle32(wave_sizze_43566, skip_threads_43582)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_43582 *= 2;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // carry-in for every block except the first
            {
                if (!(squot32(local_tid_43564, 32) == 0 ||
                      !ltid_in_bounds_43579)) {
                    // read operands
                    {
                        x_43574 = x_43573;
                        x_43573 = ((__local
                                    int64_t *) scan_arr_mem_43568)[sext_i32_i64(squot32(local_tid_43564,
                                                                                        32)) -
                                                                   (int64_t) 1];
                    }
                    // perform operation
                    {
                        bool inactive_43584 =
                             slt64(srem64(sext_i32_i64(local_tid_43564) +
                                          chunk_offset_43571, N_29559),
                                   sext_i32_i64(local_tid_43564) +
                                   chunk_offset_43571 -
                                   (sext_i32_i64(squot32(local_tid_43564, 32) *
                                    32 - 1) + chunk_offset_43571));
                        
                        if (inactive_43584) {
                            x_43573 = x_43574;
                        }
                        if (!inactive_43584) {
                            int64_t defunc_1_op_res_43575 = add64(x_43573,
                                                                  x_43574);
                            
                            x_43573 = defunc_1_op_res_43575;
                        }
                    }
                    // write final result
                    {
                        ((__local
                          int64_t *) scan_arr_mem_43568)[sext_i32_i64(local_tid_43564)] =
                            x_43573;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // restore correct values for first block
            {
                if (squot32(local_tid_43564, 32) == 0) {
                    ((__local
                      int64_t *) scan_arr_mem_43568)[sext_i32_i64(local_tid_43564)] =
                        x_43574;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // threads in bounds write partial scan result
            {
                if (slt64(gtid_38400, m_29560) && slt64(gtid_38408, N_29559)) {
                    ((__global int64_t *) mem_42247)[gtid_38400 * N_29559 +
                                                     gtid_38408] = ((__local
                                                                     int64_t *) scan_arr_mem_43568)[sext_i32_i64(local_tid_43564)];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread reads last element as carry-in for next iteration
            {
                bool crosses_segment_43585 = slt64(srem64(chunk_offset_43571 +
                                                          segscan_group_sizze_38426,
                                                          N_29559),
                                                   chunk_offset_43571 +
                                                   segscan_group_sizze_38426 -
                                                   (chunk_offset_43571 +
                                                    segscan_group_sizze_38426 -
                                                    (int64_t) 1));
                bool should_load_carry_43586 = local_tid_43564 == 0 &&
                     !crosses_segment_43585;
                
                if (should_load_carry_43586) {
                    x_38431 = ((__local
                                int64_t *) scan_arr_mem_43568)[segscan_group_sizze_38426 -
                                                               (int64_t) 1];
                }
                if (!should_load_carry_43586) {
                    x_38431 = (int64_t) 0;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
  error_1:
    return;
    #undef segscan_group_sizze_38426
}
__kernel void mainziscan_stage1_39165(__global int *global_failure,
                                      int failure_is_an_option, __global
                                      int64_t *global_failure_args,
                                      __local volatile
                                      int64_t *scan_arr_mem_43988_backing_aligned_0,
                                      int64_t N_29559, int64_t m_29560,
                                      int64_t iota32_arg_29989,
                                      int32_t num_threads_43982, __global
                                      unsigned char *defunc_4_map_res_mem_42266,
                                      __global
                                      unsigned char *defunc_3_map_res_mem_42344,
                                      __global
                                      unsigned char *defunc_3_map_res_mem_42345,
                                      __global
                                      unsigned char *defunc_0_f_res_mem_42383,
                                      __global unsigned char *mem_42409,
                                      __global unsigned char *mem_42414)
{
    #define segscan_group_sizze_39251 (mainzisegscan_group_sizze_39159)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_43988_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_43988_backing_aligned_0;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43983;
    int32_t local_tid_43984;
    int64_t group_sizze_43987;
    int32_t wave_sizze_43986;
    int32_t group_tid_43985;
    
    global_tid_43983 = get_global_id(0);
    local_tid_43984 = get_local_id(0);
    group_sizze_43987 = get_local_size(0);
    wave_sizze_43986 = LOCKSTEP_WIDTH;
    group_tid_43985 = get_group_id(0);
    
    int32_t phys_tid_39165 = global_tid_43983;
    __local char *scan_arr_mem_43988;
    
    scan_arr_mem_43988 = (__local char *) scan_arr_mem_43988_backing_0;
    
    float x_39255;
    float x_39256;
    
    x_39255 = 0.0F;
    for (int64_t j_43990 = 0; j_43990 < sdiv_up64(m_29560 * iota32_arg_29989,
                                                  sext_i32_i64(num_threads_43982));
         j_43990++) {
        int64_t chunk_offset_43991 = segscan_group_sizze_39251 * j_43990 +
                sext_i32_i64(group_tid_43985) * (segscan_group_sizze_39251 *
                                                 sdiv_up64(m_29560 *
                                                           iota32_arg_29989,
                                                           sext_i32_i64(num_threads_43982)));
        int64_t flat_idx_43992 = chunk_offset_43991 +
                sext_i32_i64(local_tid_43984);
        int64_t gtid_39156 = squot64(flat_idx_43992, iota32_arg_29989);
        int64_t gtid_39164 = flat_idx_43992 - squot64(flat_idx_43992,
                                                      iota32_arg_29989) *
                iota32_arg_29989;
        
        // threads in bounds read input
        {
            if (slt64(gtid_39156, m_29560) && slt64(gtid_39164,
                                                    iota32_arg_29989)) {
                int32_t y_39262 = ((__global int32_t *) mem_42409)[gtid_39156];
                int32_t index_primexp_39452 = sext_i64_i32(gtid_39164);
                bool cond_39265 = sle32(y_39262, index_primexp_39452);
                float defunc_0_f_res_39266;
                
                if (cond_39265) {
                    defunc_0_f_res_39266 = 0.0F;
                } else {
                    bool cond_39267 = index_primexp_39452 == 0;
                    float defunc_0_f_res_f_res_39268;
                    
                    if (cond_39267) {
                        float x_39260 = ((__global
                                          float *) defunc_0_f_res_mem_42383)[gtid_39156];
                        
                        defunc_0_f_res_f_res_39268 = x_39260;
                    } else {
                        int32_t x_39258 = ((__global
                                            int32_t *) defunc_3_map_res_mem_42345)[gtid_39156];
                        int32_t x_39259 = ((__global
                                            int32_t *) defunc_3_map_res_mem_42344)[gtid_39156];
                        int32_t i_39269 = add32(x_39258, index_primexp_39452);
                        int64_t i_39270 = sext_i32_i64(i_39269);
                        bool x_39271 = sle64((int64_t) 0, i_39270);
                        bool y_39272 = slt64(i_39270, N_29559);
                        bool bounds_check_39273 = x_39271 && y_39272;
                        bool index_certs_39274;
                        
                        if (!bounds_check_39273) {
                            {
                                if (atomic_cmpxchg_i32_global(global_failure,
                                                              -1, 28) == -1) {
                                    global_failure_args[0] = i_39270;
                                    global_failure_args[1] = N_29559;
                                    ;
                                }
                                local_failure = true;
                                goto error_0;
                            }
                        }
                        
                        float x_39275 = ((__global
                                          float *) defunc_4_map_res_mem_42266)[gtid_39156 *
                                                                               N_29559 +
                                                                               i_39270];
                        int32_t x_39276 = sub32(x_39258, x_39259);
                        int32_t i_39277 = add32(x_39276, index_primexp_39452);
                        int64_t i_39278 = sext_i32_i64(i_39277);
                        bool x_39279 = sle64((int64_t) 0, i_39278);
                        bool y_39280 = slt64(i_39278, N_29559);
                        bool bounds_check_39281 = x_39279 && y_39280;
                        bool index_certs_39282;
                        
                        if (!bounds_check_39281) {
                            {
                                if (atomic_cmpxchg_i32_global(global_failure,
                                                              -1, 29) == -1) {
                                    global_failure_args[0] = i_39278;
                                    global_failure_args[1] = N_29559;
                                    ;
                                }
                                local_failure = true;
                                goto error_0;
                            }
                        }
                        
                        float y_39283 = ((__global
                                          float *) defunc_4_map_res_mem_42266)[gtid_39156 *
                                                                               N_29559 +
                                                                               i_39278];
                        float defunc_0_f_res_f_res_f_res_39284 = x_39275 -
                              y_39283;
                        
                        defunc_0_f_res_f_res_39268 =
                            defunc_0_f_res_f_res_f_res_39284;
                    }
                    defunc_0_f_res_39266 = defunc_0_f_res_f_res_39268;
                }
                // write to-scan values to parameters
                {
                    x_39256 = defunc_0_f_res_39266;
                }
                // write mapped values results to global memory
                { }
            }
        }
        // do one intra-group scan operation
        {
            // maybe restore some to-scan values to parameters, or read neutral
            {
                if (!(slt64(gtid_39156, m_29560) && slt64(gtid_39164,
                                                          iota32_arg_29989))) {
                    x_39256 = 0.0F;
                }
            }
            // combine with carry and write to local memory
            {
                float defunc_1_op_res_39257 = x_39255 + x_39256;
                
                ((__local
                  float *) scan_arr_mem_43988)[sext_i32_i64(local_tid_43984)] =
                    defunc_1_op_res_39257;
            }
            
          error_0:
            barrier(CLK_LOCAL_MEM_FENCE);
            if (local_failure)
                return;
            barrier(CLK_LOCAL_MEM_FENCE);
            
            float x_43993;
            float x_43994;
            float x_43996;
            float x_43997;
            bool ltid_in_bounds_43999 = slt64(sext_i32_i64(local_tid_43984),
                                              segscan_group_sizze_39251);
            int32_t skip_threads_44000;
            
            // read input for in-block scan
            {
                if (ltid_in_bounds_43999) {
                    x_43994 = ((volatile __local
                                float *) scan_arr_mem_43988)[sext_i32_i64(local_tid_43984)];
                    if ((local_tid_43984 - squot32(local_tid_43984, 32) * 32) ==
                        0) {
                        x_43993 = x_43994;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_44000 = 1;
                while (slt32(skip_threads_44000, 32)) {
                    if (sle32(skip_threads_44000, local_tid_43984 -
                              squot32(local_tid_43984, 32) * 32) &&
                        ltid_in_bounds_43999) {
                        // read operands
                        {
                            x_43993 = ((volatile __local
                                        float *) scan_arr_mem_43988)[sext_i32_i64(local_tid_43984) -
                                                                     sext_i32_i64(skip_threads_44000)];
                        }
                        // perform operation
                        {
                            bool inactive_44001 =
                                 slt64(srem64(sext_i32_i64(local_tid_43984) +
                                              chunk_offset_43991,
                                              iota32_arg_29989),
                                       sext_i32_i64(local_tid_43984) +
                                       chunk_offset_43991 -
                                       (sext_i32_i64(local_tid_43984 -
                                        skip_threads_44000) +
                                        chunk_offset_43991));
                            
                            if (inactive_44001) {
                                x_43993 = x_43994;
                            }
                            if (!inactive_44001) {
                                float defunc_1_op_res_43995 = x_43993 + x_43994;
                                
                                x_43993 = defunc_1_op_res_43995;
                            }
                        }
                    }
                    if (sle32(wave_sizze_43986, skip_threads_44000)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_44000, local_tid_43984 -
                              squot32(local_tid_43984, 32) * 32) &&
                        ltid_in_bounds_43999) {
                        // write result
                        {
                            ((volatile __local
                              float *) scan_arr_mem_43988)[sext_i32_i64(local_tid_43984)] =
                                x_43993;
                            x_43994 = x_43993;
                        }
                    }
                    if (sle32(wave_sizze_43986, skip_threads_44000)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_44000 *= 2;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // last thread of block 'i' writes its result to offset 'i'
            {
                if ((local_tid_43984 - squot32(local_tid_43984, 32) * 32) ==
                    31 && ltid_in_bounds_43999) {
                    ((volatile __local
                      float *) scan_arr_mem_43988)[sext_i32_i64(squot32(local_tid_43984,
                                                                        32))] =
                        x_43993;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
            {
                int32_t skip_threads_44002;
                
                // read input for in-block scan
                {
                    if (squot32(local_tid_43984, 32) == 0 &&
                        ltid_in_bounds_43999) {
                        x_43997 = ((volatile __local
                                    float *) scan_arr_mem_43988)[sext_i32_i64(local_tid_43984)];
                        if ((local_tid_43984 - squot32(local_tid_43984, 32) *
                             32) == 0) {
                            x_43996 = x_43997;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_44002 = 1;
                    while (slt32(skip_threads_44002, 32)) {
                        if (sle32(skip_threads_44002, local_tid_43984 -
                                  squot32(local_tid_43984, 32) * 32) &&
                            (squot32(local_tid_43984, 32) == 0 &&
                             ltid_in_bounds_43999)) {
                            // read operands
                            {
                                x_43996 = ((volatile __local
                                            float *) scan_arr_mem_43988)[sext_i32_i64(local_tid_43984) -
                                                                         sext_i32_i64(skip_threads_44002)];
                            }
                            // perform operation
                            {
                                bool inactive_44003 =
                                     slt64(srem64(sext_i32_i64(local_tid_43984 *
                                                  32 + 32 - 1) +
                                                  chunk_offset_43991,
                                                  iota32_arg_29989),
                                           sext_i32_i64(local_tid_43984 * 32 +
                                           32 - 1) + chunk_offset_43991 -
                                           (sext_i32_i64((local_tid_43984 -
                                                          skip_threads_44002) *
                                            32 + 32 - 1) + chunk_offset_43991));
                                
                                if (inactive_44003) {
                                    x_43996 = x_43997;
                                }
                                if (!inactive_44003) {
                                    float defunc_1_op_res_43998 = x_43996 +
                                          x_43997;
                                    
                                    x_43996 = defunc_1_op_res_43998;
                                }
                            }
                        }
                        if (sle32(wave_sizze_43986, skip_threads_44002)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_44002, local_tid_43984 -
                                  squot32(local_tid_43984, 32) * 32) &&
                            (squot32(local_tid_43984, 32) == 0 &&
                             ltid_in_bounds_43999)) {
                            // write result
                            {
                                ((volatile __local
                                  float *) scan_arr_mem_43988)[sext_i32_i64(local_tid_43984)] =
                                    x_43996;
                                x_43997 = x_43996;
                            }
                        }
                        if (sle32(wave_sizze_43986, skip_threads_44002)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_44002 *= 2;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // carry-in for every block except the first
            {
                if (!(squot32(local_tid_43984, 32) == 0 ||
                      !ltid_in_bounds_43999)) {
                    // read operands
                    {
                        x_43994 = x_43993;
                        x_43993 = ((__local
                                    float *) scan_arr_mem_43988)[sext_i32_i64(squot32(local_tid_43984,
                                                                                      32)) -
                                                                 (int64_t) 1];
                    }
                    // perform operation
                    {
                        bool inactive_44004 =
                             slt64(srem64(sext_i32_i64(local_tid_43984) +
                                          chunk_offset_43991, iota32_arg_29989),
                                   sext_i32_i64(local_tid_43984) +
                                   chunk_offset_43991 -
                                   (sext_i32_i64(squot32(local_tid_43984, 32) *
                                    32 - 1) + chunk_offset_43991));
                        
                        if (inactive_44004) {
                            x_43993 = x_43994;
                        }
                        if (!inactive_44004) {
                            float defunc_1_op_res_43995 = x_43993 + x_43994;
                            
                            x_43993 = defunc_1_op_res_43995;
                        }
                    }
                    // write final result
                    {
                        ((__local
                          float *) scan_arr_mem_43988)[sext_i32_i64(local_tid_43984)] =
                            x_43993;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // restore correct values for first block
            {
                if (squot32(local_tid_43984, 32) == 0) {
                    ((__local
                      float *) scan_arr_mem_43988)[sext_i32_i64(local_tid_43984)] =
                        x_43994;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // threads in bounds write partial scan result
            {
                if (slt64(gtid_39156, m_29560) && slt64(gtid_39164,
                                                        iota32_arg_29989)) {
                    ((__global float *) mem_42414)[gtid_39156 *
                                                   iota32_arg_29989 +
                                                   gtid_39164] = ((__local
                                                                   float *) scan_arr_mem_43988)[sext_i32_i64(local_tid_43984)];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread reads last element as carry-in for next iteration
            {
                bool crosses_segment_44005 = slt64(srem64(chunk_offset_43991 +
                                                          segscan_group_sizze_39251,
                                                          iota32_arg_29989),
                                                   chunk_offset_43991 +
                                                   segscan_group_sizze_39251 -
                                                   (chunk_offset_43991 +
                                                    segscan_group_sizze_39251 -
                                                    (int64_t) 1));
                bool should_load_carry_44006 = local_tid_43984 == 0 &&
                     !crosses_segment_44005;
                
                if (should_load_carry_44006) {
                    x_39255 = ((__local
                                float *) scan_arr_mem_43988)[segscan_group_sizze_39251 -
                                                             (int64_t) 1];
                }
                if (!should_load_carry_44006) {
                    x_39255 = 0.0F;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
  error_1:
    return;
    #undef segscan_group_sizze_39251
}
__kernel void mainziscan_stage2_38409(__global int *global_failure,
                                      __local volatile
                                      int64_t *scan_arr_mem_43592_backing_aligned_0,
                                      int64_t N_29559, int64_t m_29560,
                                      int64_t stage1_num_groups_43561,
                                      int32_t num_threads_43562, __global
                                      unsigned char *mem_42247)
{
    #define segscan_group_sizze_38426 (mainzisegscan_group_sizze_38403)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_43592_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_43592_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43587;
    int32_t local_tid_43588;
    int64_t group_sizze_43591;
    int32_t wave_sizze_43590;
    int32_t group_tid_43589;
    
    global_tid_43587 = get_global_id(0);
    local_tid_43588 = get_local_id(0);
    group_sizze_43591 = get_local_size(0);
    wave_sizze_43590 = LOCKSTEP_WIDTH;
    group_tid_43589 = get_group_id(0);
    
    int32_t phys_tid_38409 = global_tid_43587;
    __local char *scan_arr_mem_43592;
    
    scan_arr_mem_43592 = (__local char *) scan_arr_mem_43592_backing_0;
    
    int64_t flat_idx_43594 = (sext_i32_i64(local_tid_43588) + (int64_t) 1) *
            (segscan_group_sizze_38426 * sdiv_up64(m_29560 * N_29559,
                                                   sext_i32_i64(num_threads_43562))) -
            (int64_t) 1;
    int64_t gtid_38400 = squot64(flat_idx_43594, N_29559);
    int64_t gtid_38408 = flat_idx_43594 - squot64(flat_idx_43594, N_29559) *
            N_29559;
    
    // threads in bound read carries; others get neutral element
    {
        if (slt64(gtid_38400, m_29560) && slt64(gtid_38408, N_29559)) {
            ((__local
              int64_t *) scan_arr_mem_43592)[sext_i32_i64(local_tid_43588)] =
                ((__global int64_t *) mem_42247)[gtid_38400 * N_29559 +
                                                 gtid_38408];
        } else {
            ((__local
              int64_t *) scan_arr_mem_43592)[sext_i32_i64(local_tid_43588)] =
                (int64_t) 0;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t x_38431;
    int64_t x_38432;
    int64_t x_43595;
    int64_t x_43596;
    bool ltid_in_bounds_43598 = slt64(sext_i32_i64(local_tid_43588),
                                      stage1_num_groups_43561);
    int32_t skip_threads_43599;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_43598) {
            x_38432 = ((volatile __local
                        int64_t *) scan_arr_mem_43592)[sext_i32_i64(local_tid_43588)];
            if ((local_tid_43588 - squot32(local_tid_43588, 32) * 32) == 0) {
                x_38431 = x_38432;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_43599 = 1;
        while (slt32(skip_threads_43599, 32)) {
            if (sle32(skip_threads_43599, local_tid_43588 -
                      squot32(local_tid_43588, 32) * 32) &&
                ltid_in_bounds_43598) {
                // read operands
                {
                    x_38431 = ((volatile __local
                                int64_t *) scan_arr_mem_43592)[sext_i32_i64(local_tid_43588) -
                                                               sext_i32_i64(skip_threads_43599)];
                }
                // perform operation
                {
                    bool inactive_43600 =
                         slt64(srem64((sext_i32_i64(local_tid_43588) +
                                       (int64_t) 1) *
                                      (segscan_group_sizze_38426 *
                                       sdiv_up64(m_29560 * N_29559,
                                                 sext_i32_i64(num_threads_43562))) -
                                      (int64_t) 1, N_29559),
                               (sext_i32_i64(local_tid_43588) + (int64_t) 1) *
                               (segscan_group_sizze_38426 * sdiv_up64(m_29560 *
                                                                      N_29559,
                                                                      sext_i32_i64(num_threads_43562))) -
                               (int64_t) 1 - ((sext_i32_i64(local_tid_43588 -
                                               skip_threads_43599) +
                                               (int64_t) 1) *
                                              (segscan_group_sizze_38426 *
                                               sdiv_up64(m_29560 * N_29559,
                                                         sext_i32_i64(num_threads_43562))) -
                                              (int64_t) 1));
                    
                    if (inactive_43600) {
                        x_38431 = x_38432;
                    }
                    if (!inactive_43600) {
                        int64_t defunc_1_op_res_38433 = add64(x_38431, x_38432);
                        
                        x_38431 = defunc_1_op_res_38433;
                    }
                }
            }
            if (sle32(wave_sizze_43590, skip_threads_43599)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_43599, local_tid_43588 -
                      squot32(local_tid_43588, 32) * 32) &&
                ltid_in_bounds_43598) {
                // write result
                {
                    ((volatile __local
                      int64_t *) scan_arr_mem_43592)[sext_i32_i64(local_tid_43588)] =
                        x_38431;
                    x_38432 = x_38431;
                }
            }
            if (sle32(wave_sizze_43590, skip_threads_43599)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_43599 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_43588 - squot32(local_tid_43588, 32) * 32) == 31 &&
            ltid_in_bounds_43598) {
            ((volatile __local
              int64_t *) scan_arr_mem_43592)[sext_i32_i64(squot32(local_tid_43588,
                                                                  32))] =
                x_38431;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_43601;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_43588, 32) == 0 && ltid_in_bounds_43598) {
                x_43596 = ((volatile __local
                            int64_t *) scan_arr_mem_43592)[sext_i32_i64(local_tid_43588)];
                if ((local_tid_43588 - squot32(local_tid_43588, 32) * 32) ==
                    0) {
                    x_43595 = x_43596;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_43601 = 1;
            while (slt32(skip_threads_43601, 32)) {
                if (sle32(skip_threads_43601, local_tid_43588 -
                          squot32(local_tid_43588, 32) * 32) &&
                    (squot32(local_tid_43588, 32) == 0 &&
                     ltid_in_bounds_43598)) {
                    // read operands
                    {
                        x_43595 = ((volatile __local
                                    int64_t *) scan_arr_mem_43592)[sext_i32_i64(local_tid_43588) -
                                                                   sext_i32_i64(skip_threads_43601)];
                    }
                    // perform operation
                    {
                        bool inactive_43602 =
                             slt64(srem64((sext_i32_i64(local_tid_43588 * 32 +
                                           32 - 1) + (int64_t) 1) *
                                          (segscan_group_sizze_38426 *
                                           sdiv_up64(m_29560 * N_29559,
                                                     sext_i32_i64(num_threads_43562))) -
                                          (int64_t) 1, N_29559),
                                   (sext_i32_i64(local_tid_43588 * 32 + 32 -
                                    1) + (int64_t) 1) *
                                   (segscan_group_sizze_38426 *
                                    sdiv_up64(m_29560 * N_29559,
                                              sext_i32_i64(num_threads_43562))) -
                                   (int64_t) 1 -
                                   ((sext_i32_i64((local_tid_43588 -
                                                   skip_threads_43601) * 32 +
                                     32 - 1) + (int64_t) 1) *
                                    (segscan_group_sizze_38426 *
                                     sdiv_up64(m_29560 * N_29559,
                                               sext_i32_i64(num_threads_43562))) -
                                    (int64_t) 1));
                        
                        if (inactive_43602) {
                            x_43595 = x_43596;
                        }
                        if (!inactive_43602) {
                            int64_t defunc_1_op_res_43597 = add64(x_43595,
                                                                  x_43596);
                            
                            x_43595 = defunc_1_op_res_43597;
                        }
                    }
                }
                if (sle32(wave_sizze_43590, skip_threads_43601)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_43601, local_tid_43588 -
                          squot32(local_tid_43588, 32) * 32) &&
                    (squot32(local_tid_43588, 32) == 0 &&
                     ltid_in_bounds_43598)) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) scan_arr_mem_43592)[sext_i32_i64(local_tid_43588)] =
                            x_43595;
                        x_43596 = x_43595;
                    }
                }
                if (sle32(wave_sizze_43590, skip_threads_43601)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_43601 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_43588, 32) == 0 || !ltid_in_bounds_43598)) {
            // read operands
            {
                x_38432 = x_38431;
                x_38431 = ((__local
                            int64_t *) scan_arr_mem_43592)[sext_i32_i64(squot32(local_tid_43588,
                                                                                32)) -
                                                           (int64_t) 1];
            }
            // perform operation
            {
                bool inactive_43603 =
                     slt64(srem64((sext_i32_i64(local_tid_43588) +
                                   (int64_t) 1) * (segscan_group_sizze_38426 *
                                                   sdiv_up64(m_29560 * N_29559,
                                                             sext_i32_i64(num_threads_43562))) -
                                  (int64_t) 1, N_29559),
                           (sext_i32_i64(local_tid_43588) + (int64_t) 1) *
                           (segscan_group_sizze_38426 * sdiv_up64(m_29560 *
                                                                  N_29559,
                                                                  sext_i32_i64(num_threads_43562))) -
                           (int64_t) 1 - ((sext_i32_i64(squot32(local_tid_43588,
                                                                32) * 32 - 1) +
                                           (int64_t) 1) *
                                          (segscan_group_sizze_38426 *
                                           sdiv_up64(m_29560 * N_29559,
                                                     sext_i32_i64(num_threads_43562))) -
                                          (int64_t) 1));
                
                if (inactive_43603) {
                    x_38431 = x_38432;
                }
                if (!inactive_43603) {
                    int64_t defunc_1_op_res_38433 = add64(x_38431, x_38432);
                    
                    x_38431 = defunc_1_op_res_38433;
                }
            }
            // write final result
            {
                ((__local
                  int64_t *) scan_arr_mem_43592)[sext_i32_i64(local_tid_43588)] =
                    x_38431;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_43588, 32) == 0) {
            ((__local
              int64_t *) scan_arr_mem_43592)[sext_i32_i64(local_tid_43588)] =
                x_38432;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // threads in bounds write scanned carries
    {
        if (slt64(gtid_38400, m_29560) && slt64(gtid_38408, N_29559)) {
            ((__global int64_t *) mem_42247)[gtid_38400 * N_29559 +
                                             gtid_38408] = ((__local
                                                             int64_t *) scan_arr_mem_43592)[sext_i32_i64(local_tid_43588)];
        }
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_38426
}
__kernel void mainziscan_stage2_39165(__global int *global_failure,
                                      __local volatile
                                      int64_t *scan_arr_mem_44012_backing_aligned_0,
                                      int64_t m_29560, int64_t iota32_arg_29989,
                                      int64_t stage1_num_groups_43981,
                                      int32_t num_threads_43982, __global
                                      unsigned char *mem_42414)
{
    #define segscan_group_sizze_39251 (mainzisegscan_group_sizze_39159)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_44012_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_44012_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_44007;
    int32_t local_tid_44008;
    int64_t group_sizze_44011;
    int32_t wave_sizze_44010;
    int32_t group_tid_44009;
    
    global_tid_44007 = get_global_id(0);
    local_tid_44008 = get_local_id(0);
    group_sizze_44011 = get_local_size(0);
    wave_sizze_44010 = LOCKSTEP_WIDTH;
    group_tid_44009 = get_group_id(0);
    
    int32_t phys_tid_39165 = global_tid_44007;
    __local char *scan_arr_mem_44012;
    
    scan_arr_mem_44012 = (__local char *) scan_arr_mem_44012_backing_0;
    
    int64_t flat_idx_44014 = (sext_i32_i64(local_tid_44008) + (int64_t) 1) *
            (segscan_group_sizze_39251 * sdiv_up64(m_29560 * iota32_arg_29989,
                                                   sext_i32_i64(num_threads_43982))) -
            (int64_t) 1;
    int64_t gtid_39156 = squot64(flat_idx_44014, iota32_arg_29989);
    int64_t gtid_39164 = flat_idx_44014 - squot64(flat_idx_44014,
                                                  iota32_arg_29989) *
            iota32_arg_29989;
    
    // threads in bound read carries; others get neutral element
    {
        if (slt64(gtid_39156, m_29560) && slt64(gtid_39164, iota32_arg_29989)) {
            ((__local
              float *) scan_arr_mem_44012)[sext_i32_i64(local_tid_44008)] =
                ((__global float *) mem_42414)[gtid_39156 * iota32_arg_29989 +
                                               gtid_39164];
        } else {
            ((__local
              float *) scan_arr_mem_44012)[sext_i32_i64(local_tid_44008)] =
                0.0F;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float x_39255;
    float x_39256;
    float x_44015;
    float x_44016;
    bool ltid_in_bounds_44018 = slt64(sext_i32_i64(local_tid_44008),
                                      stage1_num_groups_43981);
    int32_t skip_threads_44019;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_44018) {
            x_39256 = ((volatile __local
                        float *) scan_arr_mem_44012)[sext_i32_i64(local_tid_44008)];
            if ((local_tid_44008 - squot32(local_tid_44008, 32) * 32) == 0) {
                x_39255 = x_39256;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_44019 = 1;
        while (slt32(skip_threads_44019, 32)) {
            if (sle32(skip_threads_44019, local_tid_44008 -
                      squot32(local_tid_44008, 32) * 32) &&
                ltid_in_bounds_44018) {
                // read operands
                {
                    x_39255 = ((volatile __local
                                float *) scan_arr_mem_44012)[sext_i32_i64(local_tid_44008) -
                                                             sext_i32_i64(skip_threads_44019)];
                }
                // perform operation
                {
                    bool inactive_44020 =
                         slt64(srem64((sext_i32_i64(local_tid_44008) +
                                       (int64_t) 1) *
                                      (segscan_group_sizze_39251 *
                                       sdiv_up64(m_29560 * iota32_arg_29989,
                                                 sext_i32_i64(num_threads_43982))) -
                                      (int64_t) 1, iota32_arg_29989),
                               (sext_i32_i64(local_tid_44008) + (int64_t) 1) *
                               (segscan_group_sizze_39251 * sdiv_up64(m_29560 *
                                                                      iota32_arg_29989,
                                                                      sext_i32_i64(num_threads_43982))) -
                               (int64_t) 1 - ((sext_i32_i64(local_tid_44008 -
                                               skip_threads_44019) +
                                               (int64_t) 1) *
                                              (segscan_group_sizze_39251 *
                                               sdiv_up64(m_29560 *
                                                         iota32_arg_29989,
                                                         sext_i32_i64(num_threads_43982))) -
                                              (int64_t) 1));
                    
                    if (inactive_44020) {
                        x_39255 = x_39256;
                    }
                    if (!inactive_44020) {
                        float defunc_1_op_res_39257 = x_39255 + x_39256;
                        
                        x_39255 = defunc_1_op_res_39257;
                    }
                }
            }
            if (sle32(wave_sizze_44010, skip_threads_44019)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_44019, local_tid_44008 -
                      squot32(local_tid_44008, 32) * 32) &&
                ltid_in_bounds_44018) {
                // write result
                {
                    ((volatile __local
                      float *) scan_arr_mem_44012)[sext_i32_i64(local_tid_44008)] =
                        x_39255;
                    x_39256 = x_39255;
                }
            }
            if (sle32(wave_sizze_44010, skip_threads_44019)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_44019 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_44008 - squot32(local_tid_44008, 32) * 32) == 31 &&
            ltid_in_bounds_44018) {
            ((volatile __local
              float *) scan_arr_mem_44012)[sext_i32_i64(squot32(local_tid_44008,
                                                                32))] = x_39255;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_44021;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_44008, 32) == 0 && ltid_in_bounds_44018) {
                x_44016 = ((volatile __local
                            float *) scan_arr_mem_44012)[sext_i32_i64(local_tid_44008)];
                if ((local_tid_44008 - squot32(local_tid_44008, 32) * 32) ==
                    0) {
                    x_44015 = x_44016;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_44021 = 1;
            while (slt32(skip_threads_44021, 32)) {
                if (sle32(skip_threads_44021, local_tid_44008 -
                          squot32(local_tid_44008, 32) * 32) &&
                    (squot32(local_tid_44008, 32) == 0 &&
                     ltid_in_bounds_44018)) {
                    // read operands
                    {
                        x_44015 = ((volatile __local
                                    float *) scan_arr_mem_44012)[sext_i32_i64(local_tid_44008) -
                                                                 sext_i32_i64(skip_threads_44021)];
                    }
                    // perform operation
                    {
                        bool inactive_44022 =
                             slt64(srem64((sext_i32_i64(local_tid_44008 * 32 +
                                           32 - 1) + (int64_t) 1) *
                                          (segscan_group_sizze_39251 *
                                           sdiv_up64(m_29560 * iota32_arg_29989,
                                                     sext_i32_i64(num_threads_43982))) -
                                          (int64_t) 1, iota32_arg_29989),
                                   (sext_i32_i64(local_tid_44008 * 32 + 32 -
                                    1) + (int64_t) 1) *
                                   (segscan_group_sizze_39251 *
                                    sdiv_up64(m_29560 * iota32_arg_29989,
                                              sext_i32_i64(num_threads_43982))) -
                                   (int64_t) 1 -
                                   ((sext_i32_i64((local_tid_44008 -
                                                   skip_threads_44021) * 32 +
                                     32 - 1) + (int64_t) 1) *
                                    (segscan_group_sizze_39251 *
                                     sdiv_up64(m_29560 * iota32_arg_29989,
                                               sext_i32_i64(num_threads_43982))) -
                                    (int64_t) 1));
                        
                        if (inactive_44022) {
                            x_44015 = x_44016;
                        }
                        if (!inactive_44022) {
                            float defunc_1_op_res_44017 = x_44015 + x_44016;
                            
                            x_44015 = defunc_1_op_res_44017;
                        }
                    }
                }
                if (sle32(wave_sizze_44010, skip_threads_44021)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_44021, local_tid_44008 -
                          squot32(local_tid_44008, 32) * 32) &&
                    (squot32(local_tid_44008, 32) == 0 &&
                     ltid_in_bounds_44018)) {
                    // write result
                    {
                        ((volatile __local
                          float *) scan_arr_mem_44012)[sext_i32_i64(local_tid_44008)] =
                            x_44015;
                        x_44016 = x_44015;
                    }
                }
                if (sle32(wave_sizze_44010, skip_threads_44021)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_44021 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_44008, 32) == 0 || !ltid_in_bounds_44018)) {
            // read operands
            {
                x_39256 = x_39255;
                x_39255 = ((__local
                            float *) scan_arr_mem_44012)[sext_i32_i64(squot32(local_tid_44008,
                                                                              32)) -
                                                         (int64_t) 1];
            }
            // perform operation
            {
                bool inactive_44023 =
                     slt64(srem64((sext_i32_i64(local_tid_44008) +
                                   (int64_t) 1) * (segscan_group_sizze_39251 *
                                                   sdiv_up64(m_29560 *
                                                             iota32_arg_29989,
                                                             sext_i32_i64(num_threads_43982))) -
                                  (int64_t) 1, iota32_arg_29989),
                           (sext_i32_i64(local_tid_44008) + (int64_t) 1) *
                           (segscan_group_sizze_39251 * sdiv_up64(m_29560 *
                                                                  iota32_arg_29989,
                                                                  sext_i32_i64(num_threads_43982))) -
                           (int64_t) 1 - ((sext_i32_i64(squot32(local_tid_44008,
                                                                32) * 32 - 1) +
                                           (int64_t) 1) *
                                          (segscan_group_sizze_39251 *
                                           sdiv_up64(m_29560 * iota32_arg_29989,
                                                     sext_i32_i64(num_threads_43982))) -
                                          (int64_t) 1));
                
                if (inactive_44023) {
                    x_39255 = x_39256;
                }
                if (!inactive_44023) {
                    float defunc_1_op_res_39257 = x_39255 + x_39256;
                    
                    x_39255 = defunc_1_op_res_39257;
                }
            }
            // write final result
            {
                ((__local
                  float *) scan_arr_mem_44012)[sext_i32_i64(local_tid_44008)] =
                    x_39255;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_44008, 32) == 0) {
            ((__local
              float *) scan_arr_mem_44012)[sext_i32_i64(local_tid_44008)] =
                x_39256;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // threads in bounds write scanned carries
    {
        if (slt64(gtid_39156, m_29560) && slt64(gtid_39164, iota32_arg_29989)) {
            ((__global float *) mem_42414)[gtid_39156 * iota32_arg_29989 +
                                           gtid_39164] = ((__local
                                                           float *) scan_arr_mem_44012)[sext_i32_i64(local_tid_44008)];
        }
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_39251
}
__kernel void mainziscan_stage3_38409(__global int *global_failure,
                                      int64_t N_29559, int64_t m_29560,
                                      int64_t num_groups_38427,
                                      int32_t num_threads_43562,
                                      int32_t required_groups_43604, __global
                                      unsigned char *mem_42247)
{
    #define segscan_group_sizze_38426 (mainzisegscan_group_sizze_38403)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43605;
    int32_t local_tid_43606;
    int64_t group_sizze_43609;
    int32_t wave_sizze_43608;
    int32_t group_tid_43607;
    
    global_tid_43605 = get_global_id(0);
    local_tid_43606 = get_local_id(0);
    group_sizze_43609 = get_local_size(0);
    wave_sizze_43608 = LOCKSTEP_WIDTH;
    group_tid_43607 = get_group_id(0);
    
    int32_t phys_tid_38409 = global_tid_43605;
    int32_t phys_group_id_43610;
    
    phys_group_id_43610 = get_group_id(0);
    for (int32_t i_43611 = 0; i_43611 < sdiv_up32(required_groups_43604 -
                                                  phys_group_id_43610,
                                                  sext_i64_i32(num_groups_38427));
         i_43611++) {
        int32_t virt_group_id_43612 = phys_group_id_43610 + i_43611 *
                sext_i64_i32(num_groups_38427);
        int64_t flat_idx_43613 = sext_i32_i64(virt_group_id_43612) *
                segscan_group_sizze_38426 + sext_i32_i64(local_tid_43606);
        int64_t gtid_38400 = squot64(flat_idx_43613, N_29559);
        int64_t gtid_38408 = flat_idx_43613 - squot64(flat_idx_43613, N_29559) *
                N_29559;
        int64_t orig_group_43614 = squot64(flat_idx_43613,
                                           segscan_group_sizze_38426 *
                                           sdiv_up64(m_29560 * N_29559,
                                                     sext_i32_i64(num_threads_43562)));
        int64_t carry_in_flat_idx_43615 = orig_group_43614 *
                (segscan_group_sizze_38426 * sdiv_up64(m_29560 * N_29559,
                                                       sext_i32_i64(num_threads_43562))) -
                (int64_t) 1;
        
        if (slt64(gtid_38400, m_29560) && slt64(gtid_38408, N_29559)) {
            if (!(orig_group_43614 == (int64_t) 0 || (flat_idx_43613 ==
                                                      (orig_group_43614 +
                                                       (int64_t) 1) *
                                                      (segscan_group_sizze_38426 *
                                                       sdiv_up64(m_29560 *
                                                                 N_29559,
                                                                 sext_i32_i64(num_threads_43562))) -
                                                      (int64_t) 1 ||
                                                      slt64(srem64(flat_idx_43613,
                                                                   N_29559),
                                                            flat_idx_43613 -
                                                            carry_in_flat_idx_43615)))) {
                int64_t x_38431;
                int64_t x_38432;
                
                x_38431 = ((__global
                            int64_t *) mem_42247)[squot64(carry_in_flat_idx_43615,
                                                          N_29559) * N_29559 +
                                                  (carry_in_flat_idx_43615 -
                                                   squot64(carry_in_flat_idx_43615,
                                                           N_29559) * N_29559)];
                x_38432 = ((__global int64_t *) mem_42247)[gtid_38400 *
                                                           N_29559 +
                                                           gtid_38408];
                
                int64_t defunc_1_op_res_38433 = add64(x_38431, x_38432);
                
                x_38431 = defunc_1_op_res_38433;
                ((__global int64_t *) mem_42247)[gtid_38400 * N_29559 +
                                                 gtid_38408] = x_38431;
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_38426
}
__kernel void mainziscan_stage3_39165(__global int *global_failure,
                                      int64_t m_29560, int64_t iota32_arg_29989,
                                      int64_t num_groups_39252,
                                      int32_t num_threads_43982,
                                      int32_t required_groups_44024, __global
                                      unsigned char *mem_42414)
{
    #define segscan_group_sizze_39251 (mainzisegscan_group_sizze_39159)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_44025;
    int32_t local_tid_44026;
    int64_t group_sizze_44029;
    int32_t wave_sizze_44028;
    int32_t group_tid_44027;
    
    global_tid_44025 = get_global_id(0);
    local_tid_44026 = get_local_id(0);
    group_sizze_44029 = get_local_size(0);
    wave_sizze_44028 = LOCKSTEP_WIDTH;
    group_tid_44027 = get_group_id(0);
    
    int32_t phys_tid_39165 = global_tid_44025;
    int32_t phys_group_id_44030;
    
    phys_group_id_44030 = get_group_id(0);
    for (int32_t i_44031 = 0; i_44031 < sdiv_up32(required_groups_44024 -
                                                  phys_group_id_44030,
                                                  sext_i64_i32(num_groups_39252));
         i_44031++) {
        int32_t virt_group_id_44032 = phys_group_id_44030 + i_44031 *
                sext_i64_i32(num_groups_39252);
        int64_t flat_idx_44033 = sext_i32_i64(virt_group_id_44032) *
                segscan_group_sizze_39251 + sext_i32_i64(local_tid_44026);
        int64_t gtid_39156 = squot64(flat_idx_44033, iota32_arg_29989);
        int64_t gtid_39164 = flat_idx_44033 - squot64(flat_idx_44033,
                                                      iota32_arg_29989) *
                iota32_arg_29989;
        int64_t orig_group_44034 = squot64(flat_idx_44033,
                                           segscan_group_sizze_39251 *
                                           sdiv_up64(m_29560 * iota32_arg_29989,
                                                     sext_i32_i64(num_threads_43982)));
        int64_t carry_in_flat_idx_44035 = orig_group_44034 *
                (segscan_group_sizze_39251 * sdiv_up64(m_29560 *
                                                       iota32_arg_29989,
                                                       sext_i32_i64(num_threads_43982))) -
                (int64_t) 1;
        
        if (slt64(gtid_39156, m_29560) && slt64(gtid_39164, iota32_arg_29989)) {
            if (!(orig_group_44034 == (int64_t) 0 || (flat_idx_44033 ==
                                                      (orig_group_44034 +
                                                       (int64_t) 1) *
                                                      (segscan_group_sizze_39251 *
                                                       sdiv_up64(m_29560 *
                                                                 iota32_arg_29989,
                                                                 sext_i32_i64(num_threads_43982))) -
                                                      (int64_t) 1 ||
                                                      slt64(srem64(flat_idx_44033,
                                                                   iota32_arg_29989),
                                                            flat_idx_44033 -
                                                            carry_in_flat_idx_44035)))) {
                float x_39255;
                float x_39256;
                
                x_39255 = ((__global
                            float *) mem_42414)[squot64(carry_in_flat_idx_44035,
                                                        iota32_arg_29989) *
                                                iota32_arg_29989 +
                                                (carry_in_flat_idx_44035 -
                                                 squot64(carry_in_flat_idx_44035,
                                                         iota32_arg_29989) *
                                                 iota32_arg_29989)];
                x_39256 = ((__global float *) mem_42414)[gtid_39156 *
                                                         iota32_arg_29989 +
                                                         gtid_39164];
                
                float defunc_1_op_res_39257 = x_39255 + x_39256;
                
                x_39255 = defunc_1_op_res_39257;
                ((__global float *) mem_42414)[gtid_39156 * iota32_arg_29989 +
                                               gtid_39164] = x_39255;
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_39251
}
__kernel void mainzisegmap_36625(__global int *global_failure, int64_t N_29559,
                                 float freq_29564, int64_t i32_res_29575,
                                 __global
                                 unsigned char *mappingindices_mem_41420,
                                 __global unsigned char *mem_41426)
{
    #define segmap_group_sizze_36695 (mainzisegmap_group_sizze_36628)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_42876;
    int32_t local_tid_42877;
    int64_t group_sizze_42880;
    int32_t wave_sizze_42879;
    int32_t group_tid_42878;
    
    global_tid_42876 = get_global_id(0);
    local_tid_42877 = get_local_id(0);
    group_sizze_42880 = get_local_size(0);
    wave_sizze_42879 = LOCKSTEP_WIDTH;
    group_tid_42878 = get_group_id(0);
    
    int32_t phys_tid_36625 = global_tid_42876;
    int64_t global_tid_42881 = sext_i32_i64(group_tid_42878) *
            segmap_group_sizze_36695 + sext_i32_i64(local_tid_42877);
    int64_t slice_42882 = N_29559;
    int64_t slice_42883 = i32_res_29575 * slice_42882;
    int64_t gtid_36623 = squot64(global_tid_42881, slice_42882);
    int64_t remnant_42884 = global_tid_42881 - gtid_36623 * slice_42882;
    int64_t gtid_36624 = remnant_42884;
    int64_t remnant_42885 = remnant_42884 - gtid_36624;
    
    if (slt64(gtid_36623, i32_res_29575) && slt64(gtid_36624, N_29559)) {
        int32_t index_primexp_39391 = sext_i64_i32(gtid_36623);
        bool index_primexp_39388 = index_primexp_39391 == 0;
        float defunc_0_f_res_36701;
        
        if (index_primexp_39388) {
            defunc_0_f_res_36701 = 1.0F;
        } else {
            int32_t x_36700 = ((__global
                                int32_t *) mappingindices_mem_41420)[gtid_36624];
            bool cond_36702 = index_primexp_39391 == 1;
            float defunc_0_f_res_f_res_36703;
            
            if (cond_36702) {
                float i32_res_36704 = sitofp_i32_f32(x_36700);
                
                defunc_0_f_res_f_res_36703 = i32_res_36704;
            } else {
                int32_t r32_arg_36705 = sdiv32(index_primexp_39391, 2);
                float i32_res_36706 = sitofp_i32_f32(r32_arg_36705);
                float i32_res_36707 = sitofp_i32_f32(x_36700);
                float x_36708 = 6.2831855F * i32_res_36706;
                float x_36709 = i32_res_36707 * x_36708;
                float angle_36710 = x_36709 / freq_29564;
                int32_t x_36711 = smod32(index_primexp_39391, 2);
                bool cond_36712 = x_36711 == 0;
                float defunc_0_f_res_f_res_f_res_36713;
                
                if (cond_36712) {
                    float sin_res_36714;
                    
                    sin_res_36714 = futrts_sin32(angle_36710);
                    defunc_0_f_res_f_res_f_res_36713 = sin_res_36714;
                } else {
                    float cos_res_36715;
                    
                    cos_res_36715 = futrts_cos32(angle_36710);
                    defunc_0_f_res_f_res_f_res_36713 = cos_res_36715;
                }
                defunc_0_f_res_f_res_36703 = defunc_0_f_res_f_res_f_res_36713;
            }
            defunc_0_f_res_36701 = defunc_0_f_res_f_res_36703;
        }
        ((__global float *) mem_41426)[gtid_36623 * N_29559 + gtid_36624] =
            defunc_0_f_res_36701;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_36695
}
__kernel void mainzisegmap_36729(__global int *global_failure, int64_t N_29559,
                                 float freq_29564, int64_t i32_res_29575,
                                 __global
                                 unsigned char *mappingindices_mem_41420,
                                 __global unsigned char *mem_41431)
{
    #define segmap_group_sizze_36795 (mainzisegmap_group_sizze_36732)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_42886;
    int32_t local_tid_42887;
    int64_t group_sizze_42890;
    int32_t wave_sizze_42889;
    int32_t group_tid_42888;
    
    global_tid_42886 = get_global_id(0);
    local_tid_42887 = get_local_id(0);
    group_sizze_42890 = get_local_size(0);
    wave_sizze_42889 = LOCKSTEP_WIDTH;
    group_tid_42888 = get_group_id(0);
    
    int32_t phys_tid_36729 = global_tid_42886;
    int64_t global_tid_42891 = sext_i32_i64(group_tid_42888) *
            segmap_group_sizze_36795 + sext_i32_i64(local_tid_42887);
    int64_t slice_42892 = N_29559;
    int64_t slice_42893 = i32_res_29575 * slice_42892;
    int64_t gtid_36727 = squot64(global_tid_42891, slice_42892);
    int64_t remnant_42894 = global_tid_42891 - gtid_36727 * slice_42892;
    int64_t gtid_36728 = remnant_42894;
    int64_t remnant_42895 = remnant_42894 - gtid_36728;
    
    if (slt64(gtid_36727, i32_res_29575) && slt64(gtid_36728, N_29559)) {
        int32_t index_primexp_39400 = sext_i64_i32(gtid_36727);
        bool index_primexp_39397 = index_primexp_39400 == 0;
        float defunc_0_f_res_36801;
        
        if (index_primexp_39397) {
            defunc_0_f_res_36801 = 1.0F;
        } else {
            int32_t x_36800 = ((__global
                                int32_t *) mappingindices_mem_41420)[gtid_36728];
            int32_t i_36802 = add32(1, index_primexp_39400);
            int32_t r32_arg_36803 = sdiv32(i_36802, 2);
            float i32_res_36804 = sitofp_i32_f32(r32_arg_36803);
            float i32_res_36805 = sitofp_i32_f32(x_36800);
            float x_36806 = 6.2831855F * i32_res_36804;
            float x_36807 = i32_res_36805 * x_36806;
            float angle_36808 = x_36807 / freq_29564;
            int32_t x_36809 = smod32(i_36802, 2);
            bool cond_36810 = x_36809 == 0;
            float defunc_0_f_res_f_res_36811;
            
            if (cond_36810) {
                float sin_res_36812;
                
                sin_res_36812 = futrts_sin32(angle_36808);
                defunc_0_f_res_f_res_36811 = sin_res_36812;
            } else {
                float cos_res_36813;
                
                cos_res_36813 = futrts_cos32(angle_36808);
                defunc_0_f_res_f_res_36811 = cos_res_36813;
            }
            defunc_0_f_res_36801 = defunc_0_f_res_f_res_36811;
        }
        ((__global float *) mem_41431)[gtid_36727 * N_29559 + gtid_36728] =
            defunc_0_f_res_36801;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_36795
}
__kernel void mainzisegmap_36825(__global int *global_failure, int64_t N_29559,
                                 int64_t i32_res_29575, float i32_res_29640,
                                 __global unsigned char *mem_41435, __global
                                 unsigned char *mem_41440)
{
    #define segmap_group_sizze_36846 (mainzisegmap_group_sizze_36828)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_42896;
    int32_t local_tid_42897;
    int64_t group_sizze_42900;
    int32_t wave_sizze_42899;
    int32_t group_tid_42898;
    
    global_tid_42896 = get_global_id(0);
    local_tid_42897 = get_local_id(0);
    group_sizze_42900 = get_local_size(0);
    wave_sizze_42899 = LOCKSTEP_WIDTH;
    group_tid_42898 = get_group_id(0);
    
    int32_t phys_tid_36825 = global_tid_42896;
    int64_t global_tid_42901 = sext_i32_i64(group_tid_42898) *
            segmap_group_sizze_36846 + sext_i32_i64(local_tid_42897);
    int64_t slice_42902 = i32_res_29575;
    int64_t slice_42903 = N_29559 * slice_42902;
    int64_t gtid_36823 = squot64(global_tid_42901, slice_42902);
    int64_t remnant_42904 = global_tid_42901 - gtid_36823 * slice_42902;
    int64_t gtid_36824 = remnant_42904;
    int64_t remnant_42905 = remnant_42904 - gtid_36824;
    
    if (slt64(gtid_36823, N_29559) && slt64(gtid_36824, i32_res_29575)) {
        float x_36849 = ((__global float *) mem_41435)[gtid_36823 *
                                                       i32_res_29575 +
                                                       gtid_36824];
        float defunc_0_f_res_36850 = i32_res_29640 + x_36849;
        
        ((__global float *) mem_41440)[gtid_36823 * i32_res_29575 +
                                       gtid_36824] = defunc_0_f_res_36850;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_36846
}
__kernel void mainzisegmap_36855(__global int *global_failure, int64_t N_29559,
                                 int64_t m_29560, int32_t n_29563,
                                 int32_t k2p2zq_29573, int64_t i32_res_29575,
                                 int64_t num_groups_36880,
                                 int64_t num_threads_42830, __global
                                 unsigned char *binop_p_mem_41432, __global
                                 unsigned char *mem_41440, __global
                                 unsigned char *mem_41443, __global
                                 unsigned char *mem_41492, __global
                                 unsigned char *color_42657)
{
    #define segmap_group_sizze_36879 (mainzisegmap_group_sizze_36857)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_42909;
    int32_t local_tid_42910;
    int64_t group_sizze_42913;
    int32_t wave_sizze_42912;
    int32_t group_tid_42911;
    
    global_tid_42909 = get_global_id(0);
    local_tid_42910 = get_local_id(0);
    group_sizze_42913 = get_local_size(0);
    wave_sizze_42912 = LOCKSTEP_WIDTH;
    group_tid_42911 = get_group_id(0);
    
    int32_t phys_tid_36855 = global_tid_42909;
    int32_t phys_group_id_42914;
    
    phys_group_id_42914 = get_group_id(0);
    for (int32_t i_42915 = 0; i_42915 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_29560, segmap_group_sizze_36879)) -
                   phys_group_id_42914, sext_i64_i32(num_groups_36880));
         i_42915++) {
        int32_t virt_group_id_42916 = phys_group_id_42914 + i_42915 *
                sext_i64_i32(num_groups_36880);
        int64_t global_tid_42917 = sext_i32_i64(virt_group_id_42916) *
                segmap_group_sizze_36879 + sext_i32_i64(local_tid_42910);
        int64_t slice_42918 = m_29560;
        int64_t gtid_36854 = global_tid_42917;
        int64_t remnant_42919 = global_tid_42917 - gtid_36854;
        
        if (slt64(gtid_36854, m_29560)) {
            for (int32_t i_41400 = 0; i_41400 < k2p2zq_29573; i_41400++) {
                int64_t i_41334 = sext_i32_i64(i_41400);
                
                for (int32_t i_41399 = 0; i_41399 < k2p2zq_29573; i_41399++) {
                    int64_t i_41338 = sext_i32_i64(i_41399);
                    float defunc_2_reduce_res_36888;
                    float redout_41340 = 0.0F;
                    
                    for (int32_t i_41398 = 0; i_41398 < n_29563; i_41398++) {
                        int64_t i_41341 = sext_i32_i64(i_41398);
                        float x_36892 = ((__global float *) mem_41443)[i_41341 *
                                                                       m_29560 +
                                                                       gtid_36854];
                        float x_36893 = ((__global
                                          float *) binop_p_mem_41432)[i_41334 *
                                                                      N_29559 +
                                                                      i_41341];
                        float x_36894 = ((__global float *) mem_41440)[i_41341 *
                                                                       i32_res_29575 +
                                                                       i_41338];
                        float x_36895 = x_36893 * x_36894;
                        bool isnan_res_36896;
                        
                        isnan_res_36896 = futrts_isnan32(x_36892);
                        
                        float y_36897;
                        
                        if (isnan_res_36896) {
                            y_36897 = 0.0F;
                        } else {
                            y_36897 = 1.0F;
                        }
                        
                        float defunc_2_f_res_36898 = x_36895 * y_36897;
                        float defunc_1_op_res_36891 = defunc_2_f_res_36898 +
                              redout_41340;
                        float redout_tmp_42922 = defunc_1_op_res_36891;
                        
                        redout_41340 = redout_tmp_42922;
                    }
                    defunc_2_reduce_res_36888 = redout_41340;
                    ((__global float *) color_42657)[phys_tid_36855 + (i_41334 *
                                                                       (num_threads_42830 *
                                                                        i32_res_29575) +
                                                                       i_41338 *
                                                                       num_threads_42830)] =
                        defunc_2_reduce_res_36888;
                }
            }
            for (int64_t i_42923 = 0; i_42923 < i32_res_29575; i_42923++) {
                for (int64_t i_42924 = 0; i_42924 < i32_res_29575; i_42924++) {
                    ((__global float *) mem_41492)[i_42923 * (m_29560 *
                                                              i32_res_29575) +
                                                   i_42924 * m_29560 +
                                                   gtid_36854] = ((__global
                                                                   float *) color_42657)[phys_tid_36855 +
                                                                                         (i_42923 *
                                                                                          (num_threads_42830 *
                                                                                           i32_res_29575) +
                                                                                          i_42924 *
                                                                                          num_threads_42830)];
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_36879
}
__kernel void mainzisegmap_36901(__global int *global_failure, int64_t N_29559,
                                 int64_t m_29560, int32_t n_29563,
                                 int32_t k2p2zq_29573, int64_t i32_res_29575,
                                 int64_t num_groups_37057,
                                 int64_t num_threads_42832, __global
                                 unsigned char *images_mem_41421, __global
                                 unsigned char *mem_41435, __global
                                 unsigned char *mem_41440, __global
                                 unsigned char *mem_41512, __global
                                 unsigned char *color_42658)
{
    #define segmap_group_sizze_37056 (mainzisegmap_group_sizze_36904)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_42925;
    int32_t local_tid_42926;
    int64_t group_sizze_42929;
    int32_t wave_sizze_42928;
    int32_t group_tid_42927;
    
    global_tid_42925 = get_global_id(0);
    local_tid_42926 = get_local_id(0);
    group_sizze_42929 = get_local_size(0);
    wave_sizze_42928 = LOCKSTEP_WIDTH;
    group_tid_42927 = get_group_id(0);
    
    int32_t phys_tid_36901 = global_tid_42925;
    int32_t phys_group_id_42930;
    
    phys_group_id_42930 = get_group_id(0);
    for (int32_t i_42931 = 0; i_42931 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_29560 * i32_res_29575,
                                          segmap_group_sizze_37056)) -
                   phys_group_id_42930, sext_i64_i32(num_groups_37057));
         i_42931++) {
        int32_t virt_group_id_42932 = phys_group_id_42930 + i_42931 *
                sext_i64_i32(num_groups_37057);
        int64_t global_tid_42933 = sext_i32_i64(virt_group_id_42932) *
                segmap_group_sizze_37056 + sext_i32_i64(local_tid_42926);
        int64_t slice_42934 = i32_res_29575;
        int64_t slice_42935 = m_29560 * slice_42934;
        int64_t gtid_36899 = squot64(global_tid_42933, slice_42934);
        int64_t remnant_42936 = global_tid_42933 - gtid_36899 * slice_42934;
        int64_t gtid_36900 = remnant_42936;
        int64_t remnant_42937 = remnant_42936 - gtid_36900;
        
        if (slt64(gtid_36899, m_29560) && slt64(gtid_36900, i32_res_29575)) {
            for (int32_t i_41402 = 0; i_41402 < k2p2zq_29573; i_41402++) {
                int64_t i_41344 = sext_i32_i64(i_41402);
                float defunc_2_reduce_res_37068;
                float redout_41346 = 0.0F;
                
                for (int32_t i_41401 = 0; i_41401 < n_29563; i_41401++) {
                    int64_t i_41347 = sext_i32_i64(i_41401);
                    float x_37072 = ((__global
                                      float *) images_mem_41421)[gtid_36899 *
                                                                 N_29559 +
                                                                 i_41347];
                    float x_37073 = ((__global float *) mem_41435)[i_41347 *
                                                                   i32_res_29575 +
                                                                   gtid_36900];
                    float x_37074 = ((__global float *) mem_41440)[i_41347 *
                                                                   i32_res_29575 +
                                                                   i_41344];
                    float x_37075 = x_37073 * x_37074;
                    bool isnan_res_37076;
                    
                    isnan_res_37076 = futrts_isnan32(x_37072);
                    
                    float y_37077;
                    
                    if (isnan_res_37076) {
                        y_37077 = 0.0F;
                    } else {
                        y_37077 = 1.0F;
                    }
                    
                    float defunc_2_f_res_37078 = x_37075 * y_37077;
                    float defunc_1_op_res_37071 = defunc_2_f_res_37078 +
                          redout_41346;
                    float redout_tmp_42939 = defunc_1_op_res_37071;
                    
                    redout_41346 = redout_tmp_42939;
                }
                defunc_2_reduce_res_37068 = redout_41346;
                ((__global float *) color_42658)[phys_tid_36901 + i_41344 *
                                                 num_threads_42832] =
                    defunc_2_reduce_res_37068;
            }
            for (int64_t i_42940 = 0; i_42940 < i32_res_29575; i_42940++) {
                ((__global float *) mem_41512)[i_42940 * (i32_res_29575 *
                                                          m_29560) +
                                               gtid_36899 * i32_res_29575 +
                                               gtid_36900] = ((__global
                                                               float *) color_42658)[phys_tid_36901 +
                                                                                     i_42940 *
                                                                                     num_threads_42832];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_37056
}
__kernel void mainzisegmap_37304(__global int *global_failure, int64_t m_29560,
                                 int64_t i32_res_29575, int64_t nm_29705,
                                 int64_t i32_res_29720, int64_t x_29721,
                                 int64_t gauss_jordan_res_r_ixfn_41675,
                                 int64_t gauss_jordan_res_r_ixfn_41676,
                                 int64_t gauss_jordan_res_r_ixfn_41678, __global
                                 unsigned char *gauss_jordan_res_r_mem_41680,
                                 __global unsigned char *mem_41686)
{
    #define segmap_group_sizze_37854 (mainzisegmap_group_sizze_37308)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43130;
    int32_t local_tid_43131;
    int64_t group_sizze_43134;
    int32_t wave_sizze_43133;
    int32_t group_tid_43132;
    
    global_tid_43130 = get_global_id(0);
    local_tid_43131 = get_local_id(0);
    group_sizze_43134 = get_local_size(0);
    wave_sizze_43133 = LOCKSTEP_WIDTH;
    group_tid_43132 = get_group_id(0);
    
    int32_t phys_tid_37304 = global_tid_43130;
    int64_t global_tid_43135 = sext_i32_i64(group_tid_43132) *
            segmap_group_sizze_37854 + sext_i32_i64(local_tid_43131);
    int64_t slice_43136 = i32_res_29575;
    int64_t slice_43137 = i32_res_29575 * slice_43136;
    int64_t slice_43138 = m_29560 * slice_43137;
    int64_t gtid_37301 = squot64(global_tid_43135, slice_43137);
    int64_t remnant_43139 = global_tid_43135 - gtid_37301 * slice_43137;
    int64_t gtid_slice_37299 = squot64(remnant_43139, slice_43136);
    int64_t remnant_43140 = remnant_43139 - gtid_slice_37299 * slice_43136;
    int64_t gtid_slice_37300 = remnant_43140;
    int64_t remnant_43141 = remnant_43140 - gtid_slice_37300;
    
    if ((slt64(gtid_37301, m_29560) && slt64(gtid_slice_37299,
                                             i32_res_29575)) &&
        slt64(gtid_slice_37300, i32_res_29575)) {
        int64_t slice_37858 = i32_res_29575 + gtid_slice_37300;
        int64_t binop_x_39458 = x_29721 * gtid_37301;
        int64_t binop_y_39459 = i32_res_29720 * gtid_slice_37299;
        int64_t binop_x_39460 = binop_x_39458 + binop_y_39459;
        int64_t binop_x_39461 = slice_37858 + binop_x_39460;
        int64_t new_index_39462 = squot64(binop_x_39461, nm_29705);
        int64_t binop_y_39474 = nm_29705 * new_index_39462;
        int64_t new_index_39475 = binop_x_39461 - binop_y_39474;
        float v_37859 = ((__global
                          float *) gauss_jordan_res_r_mem_41680)[gauss_jordan_res_r_ixfn_41675 +
                                                                 (new_index_39462 *
                                                                  gauss_jordan_res_r_ixfn_41676 +
                                                                  new_index_39475 *
                                                                  gauss_jordan_res_r_ixfn_41678)];
        
        ((__global float *) mem_41686)[gtid_37301 * (i32_res_29575 *
                                                     i32_res_29575) +
                                       gtid_slice_37299 * i32_res_29575 +
                                       gtid_slice_37300] = v_37859;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_37854
}
__kernel void mainzisegmap_37425(__global int *global_failure, int64_t m_29560,
                                 int64_t nm_29705, int64_t ctx_param_ext_41635,
                                 int64_t ctx_param_ext_41636,
                                 int64_t ctx_param_ext_41638, __global
                                 unsigned char *mem_param_41640, __global
                                 unsigned char *mem_41663)
{
    #define segmap_group_sizze_37844 (mainzisegmap_group_sizze_37428)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43119;
    int32_t local_tid_43120;
    int64_t group_sizze_43123;
    int32_t wave_sizze_43122;
    int32_t group_tid_43121;
    
    global_tid_43119 = get_global_id(0);
    local_tid_43120 = get_local_id(0);
    group_sizze_43123 = get_local_size(0);
    wave_sizze_43122 = LOCKSTEP_WIDTH;
    group_tid_43121 = get_group_id(0);
    
    int32_t phys_tid_37425 = global_tid_43119;
    int64_t global_tid_43124 = sext_i32_i64(group_tid_43121) *
            segmap_group_sizze_37844 + sext_i32_i64(local_tid_43120);
    int64_t slice_43125 = nm_29705;
    int64_t slice_43126 = m_29560 * slice_43125;
    int64_t gtid_37423 = squot64(global_tid_43124, slice_43125);
    int64_t remnant_43127 = global_tid_43124 - gtid_37423 * slice_43125;
    int64_t gtid_37424 = remnant_43127;
    int64_t remnant_43128 = remnant_43127 - gtid_37424;
    
    if (slt64(gtid_37423, m_29560) && slt64(gtid_37424, nm_29705)) {
        float write_value_37848 = ((__global float *) mem_41663)[gtid_37423 *
                                                                 nm_29705 +
                                                                 gtid_37424];
        
        if ((sle64((int64_t) 0, gtid_37423) && slt64(gtid_37423, m_29560)) &&
            (sle64((int64_t) 0, gtid_37424) && slt64(gtid_37424, nm_29705))) {
            ((__global float *) mem_param_41640)[ctx_param_ext_41635 +
                                                 (gtid_37423 *
                                                  ctx_param_ext_41636 +
                                                  gtid_37424 *
                                                  ctx_param_ext_41638)] =
                write_value_37848;
        }
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_37844
}
__kernel void mainzisegmap_37445(__global int *global_failure,
                                 int failure_is_an_option, __global
                                 int64_t *global_failure_args, int64_t m_29560,
                                 int32_t k2p2zq_29573, int32_t m_29703,
                                 int64_t nm_29705, int32_t i_37715,
                                 int64_t i32_res_37717,
                                 int64_t ctx_param_ext_41635,
                                 int64_t ctx_param_ext_41636,
                                 int64_t ctx_param_ext_41638, __global
                                 unsigned char *mem_param_41640, __global
                                 unsigned char *mem_41658, __global
                                 unsigned char *mem_41663)
{
    #define segmap_group_sizze_37794 (mainzisegmap_group_sizze_37448)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43109;
    int32_t local_tid_43110;
    int64_t group_sizze_43113;
    int32_t wave_sizze_43112;
    int32_t group_tid_43111;
    
    global_tid_43109 = get_global_id(0);
    local_tid_43110 = get_local_id(0);
    group_sizze_43113 = get_local_size(0);
    wave_sizze_43112 = LOCKSTEP_WIDTH;
    group_tid_43111 = get_group_id(0);
    
    int32_t phys_tid_37445 = global_tid_43109;
    int64_t global_tid_43114 = sext_i32_i64(group_tid_43111) *
            segmap_group_sizze_37794 + sext_i32_i64(local_tid_43110);
    int64_t slice_43115 = nm_29705;
    int64_t slice_43116 = m_29560 * slice_43115;
    int64_t gtid_37443 = squot64(global_tid_43114, slice_43115);
    int64_t remnant_43117 = global_tid_43114 - gtid_37443 * slice_43115;
    int64_t gtid_37444 = remnant_43117;
    int64_t remnant_43118 = remnant_43117 - gtid_37444;
    
    if (slt64(gtid_37443, m_29560) && slt64(gtid_37444, nm_29705)) {
        bool cond_37799 = ((__global bool *) mem_41658)[gtid_37443];
        int32_t defunc_0_f_res_37801 = sext_i64_i32(gtid_37444);
        int32_t defunc_0_f_res_37802 = sdiv32(defunc_0_f_res_37801, m_29703);
        int32_t defunc_0_f_res_37803 = smod32(defunc_0_f_res_37801, m_29703);
        float defunc_0_f_res_37804;
        
        if (cond_37799) {
            int32_t x_37805 = mul32(m_29703, defunc_0_f_res_37802);
            int32_t i32_arg_37806 = add32(defunc_0_f_res_37803, x_37805);
            int64_t i32_res_37807 = sext_i32_i64(i32_arg_37806);
            bool x_37808 = sle64((int64_t) 0, i32_res_37807);
            bool y_37809 = slt64(i32_res_37807, nm_29705);
            bool bounds_check_37810 = x_37808 && y_37809;
            bool index_certs_37811;
            
            if (!bounds_check_37810) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 11) ==
                        -1) {
                        global_failure_args[0] = i32_res_37807;
                        global_failure_args[1] = nm_29705;
                        ;
                    }
                    return;
                }
            }
            
            float defunc_0_f_res_t_res_37812 = ((__global
                                                 float *) mem_param_41640)[ctx_param_ext_41635 +
                                                                           (gtid_37443 *
                                                                            ctx_param_ext_41636 +
                                                                            i32_res_37807 *
                                                                            ctx_param_ext_41638)];
            
            defunc_0_f_res_37804 = defunc_0_f_res_t_res_37812;
        } else {
            float v1_37798 = ((__global
                               float *) mem_param_41640)[ctx_param_ext_41635 +
                                                         (gtid_37443 *
                                                          ctx_param_ext_41636 +
                                                          i32_res_37717 *
                                                          ctx_param_ext_41638)];
            int64_t i32_res_37813 = sext_i32_i64(defunc_0_f_res_37803);
            bool x_37814 = sle64((int64_t) 0, i32_res_37813);
            bool y_37815 = slt64(i32_res_37813, nm_29705);
            bool bounds_check_37816 = x_37814 && y_37815;
            bool index_certs_37817;
            
            if (!bounds_check_37816) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 12) ==
                        -1) {
                        global_failure_args[0] = i32_res_37813;
                        global_failure_args[1] = nm_29705;
                        ;
                    }
                    return;
                }
            }
            
            float x_37818 = ((__global
                              float *) mem_param_41640)[ctx_param_ext_41635 +
                                                        (gtid_37443 *
                                                         ctx_param_ext_41636 +
                                                         i32_res_37813 *
                                                         ctx_param_ext_41638)];
            float x_37819 = x_37818 / v1_37798;
            int32_t y_37820 = sub32(k2p2zq_29573, 1);
            bool cond_37821 = slt32(defunc_0_f_res_37802, y_37820);
            float defunc_0_f_res_f_res_37822;
            
            if (cond_37821) {
                int32_t x_37823 = add32(1, defunc_0_f_res_37802);
                int32_t x_37824 = mul32(m_29703, x_37823);
                int32_t i32_arg_37825 = add32(defunc_0_f_res_37803, x_37824);
                int64_t i32_res_37826 = sext_i32_i64(i32_arg_37825);
                bool x_37827 = sle64((int64_t) 0, i32_res_37826);
                bool y_37828 = slt64(i32_res_37826, nm_29705);
                bool bounds_check_37829 = x_37827 && y_37828;
                bool index_certs_37830;
                
                if (!bounds_check_37829) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 13) ==
                            -1) {
                            global_failure_args[0] = i32_res_37826;
                            global_failure_args[1] = nm_29705;
                            ;
                        }
                        return;
                    }
                }
                
                float x_37831 = ((__global
                                  float *) mem_param_41640)[ctx_param_ext_41635 +
                                                            (gtid_37443 *
                                                             ctx_param_ext_41636 +
                                                             i32_res_37826 *
                                                             ctx_param_ext_41638)];
                int32_t i32_arg_37832 = add32(i_37715, x_37824);
                int64_t i32_res_37833 = sext_i32_i64(i32_arg_37832);
                bool x_37834 = sle64((int64_t) 0, i32_res_37833);
                bool y_37835 = slt64(i32_res_37833, nm_29705);
                bool bounds_check_37836 = x_37834 && y_37835;
                bool index_certs_37837;
                
                if (!bounds_check_37836) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 14) ==
                            -1) {
                            global_failure_args[0] = i32_res_37833;
                            global_failure_args[1] = nm_29705;
                            ;
                        }
                        return;
                    }
                }
                
                float x_37838 = ((__global
                                  float *) mem_param_41640)[ctx_param_ext_41635 +
                                                            (gtid_37443 *
                                                             ctx_param_ext_41636 +
                                                             i32_res_37833 *
                                                             ctx_param_ext_41638)];
                float y_37839 = x_37819 * x_37838;
                float defunc_0_f_res_f_res_t_res_37840 = x_37831 - y_37839;
                
                defunc_0_f_res_f_res_37822 = defunc_0_f_res_f_res_t_res_37840;
            } else {
                defunc_0_f_res_f_res_37822 = x_37819;
            }
            defunc_0_f_res_37804 = defunc_0_f_res_f_res_37822;
        }
        ((__global float *) mem_41663)[gtid_37443 * nm_29705 + gtid_37444] =
            defunc_0_f_res_37804;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_37794
}
__kernel void mainzisegmap_37545(__global int *global_failure, int64_t m_29560,
                                 int64_t i32_res_37717,
                                 int64_t ctx_param_ext_41635,
                                 int64_t ctx_param_ext_41636,
                                 int64_t ctx_param_ext_41638, __global
                                 unsigned char *mem_param_41640, __global
                                 unsigned char *mem_41658)
{
    #define segmap_group_sizze_37781 (mainzisegmap_group_sizze_37547)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43101;
    int32_t local_tid_43102;
    int64_t group_sizze_43105;
    int32_t wave_sizze_43104;
    int32_t group_tid_43103;
    
    global_tid_43101 = get_global_id(0);
    local_tid_43102 = get_local_id(0);
    group_sizze_43105 = get_local_size(0);
    wave_sizze_43104 = LOCKSTEP_WIDTH;
    group_tid_43103 = get_group_id(0);
    
    int32_t phys_tid_37545 = global_tid_43101;
    int64_t global_tid_43106 = sext_i32_i64(group_tid_43103) *
            segmap_group_sizze_37781 + sext_i32_i64(local_tid_43102);
    int64_t slice_43107 = m_29560;
    int64_t gtid_37544 = global_tid_43106;
    int64_t remnant_43108 = global_tid_43106 - gtid_37544;
    
    if (slt64(gtid_37544, m_29560)) {
        float v1_37786 = ((__global
                           float *) mem_param_41640)[ctx_param_ext_41635 +
                                                     (gtid_37544 *
                                                      ctx_param_ext_41636 +
                                                      i32_res_37717 *
                                                      ctx_param_ext_41638)];
        bool cond_37787 = v1_37786 == 0.0F;
        
        ((__global bool *) mem_41658)[gtid_37544] = cond_37787;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_37781
}
__kernel void mainzisegmap_37633(__global int *global_failure,
                                 int failure_is_an_option, __global
                                 int64_t *global_failure_args, int64_t m_29560,
                                 int32_t k2p2zq_29573, int64_t i32_res_29575,
                                 int32_t m_29703, int64_t nm_29705, __global
                                 unsigned char *defunc_3_map_res_mem_41600,
                                 __global unsigned char *mem_41632)
{
    #define segmap_group_sizze_37690 (mainzisegmap_group_sizze_37636)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43067;
    int32_t local_tid_43068;
    int64_t group_sizze_43071;
    int32_t wave_sizze_43070;
    int32_t group_tid_43069;
    
    global_tid_43067 = get_global_id(0);
    local_tid_43068 = get_local_id(0);
    group_sizze_43071 = get_local_size(0);
    wave_sizze_43070 = LOCKSTEP_WIDTH;
    group_tid_43069 = get_group_id(0);
    
    int32_t phys_tid_37633 = global_tid_43067;
    int64_t global_tid_43072 = sext_i32_i64(group_tid_43069) *
            segmap_group_sizze_37690 + sext_i32_i64(local_tid_43068);
    int64_t slice_43073 = nm_29705;
    int64_t slice_43074 = m_29560 * slice_43073;
    int64_t gtid_37631 = squot64(global_tid_43072, slice_43073);
    int64_t remnant_43075 = global_tid_43072 - gtid_37631 * slice_43073;
    int64_t gtid_37632 = remnant_43075;
    int64_t remnant_43076 = remnant_43075 - gtid_37632;
    
    if (slt64(gtid_37631, m_29560) && slt64(gtid_37632, nm_29705)) {
        int32_t index_primexp_39412 = sext_i64_i32(gtid_37632);
        int32_t defunc_0_f_res_37695 = sdiv32(index_primexp_39412, m_29703);
        int32_t defunc_0_f_res_37696 = smod32(index_primexp_39412, m_29703);
        bool cond_37697 = slt32(defunc_0_f_res_37696, k2p2zq_29573);
        float defunc_0_f_res_37698;
        
        if (cond_37697) {
            int64_t i_37699 = sext_i32_i64(defunc_0_f_res_37695);
            bool x_37700 = sle64((int64_t) 0, i_37699);
            bool y_37701 = slt64(i_37699, i32_res_29575);
            bool bounds_check_37702 = x_37700 && y_37701;
            int64_t j_37703 = sext_i32_i64(defunc_0_f_res_37696);
            bool x_37704 = sle64((int64_t) 0, j_37703);
            bool y_37705 = slt64(j_37703, i32_res_29575);
            bool bounds_check_37706 = x_37704 && y_37705;
            bool index_ok_37707 = bounds_check_37702 && bounds_check_37706;
            bool index_certs_37708;
            
            if (!index_ok_37707) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 6) ==
                        -1) {
                        global_failure_args[0] = i_37699;
                        global_failure_args[1] = j_37703;
                        global_failure_args[2] = i32_res_29575;
                        global_failure_args[3] = i32_res_29575;
                        ;
                    }
                    return;
                }
            }
            
            float defunc_0_f_res_t_res_37709 = ((__global
                                                 float *) defunc_3_map_res_mem_41600)[gtid_37631 *
                                                                                      (i32_res_29575 *
                                                                                       i32_res_29575) +
                                                                                      i_37699 *
                                                                                      i32_res_29575 +
                                                                                      j_37703];
            
            defunc_0_f_res_37698 = defunc_0_f_res_t_res_37709;
        } else {
            int32_t y_37710 = add32(k2p2zq_29573, defunc_0_f_res_37695);
            bool cond_37711 = defunc_0_f_res_37696 == y_37710;
            float defunc_0_f_res_f_res_37712;
            
            if (cond_37711) {
                defunc_0_f_res_f_res_37712 = 1.0F;
            } else {
                defunc_0_f_res_f_res_37712 = 0.0F;
            }
            defunc_0_f_res_37698 = defunc_0_f_res_f_res_37712;
        }
        ((__global float *) mem_41632)[gtid_37631 * nm_29705 + gtid_37632] =
            defunc_0_f_res_37698;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_37690
}
__kernel void mainzisegmap_37864(__global int *global_failure, int64_t N_29559,
                                 int64_t m_29560, int32_t n_29563,
                                 int32_t k2p2zq_29573, int64_t i32_res_29575,
                                 int64_t num_groups_37885,
                                 int64_t num_threads_42843, __global
                                 unsigned char *binop_p_mem_41432, __global
                                 unsigned char *mem_41690, __global
                                 unsigned char *mem_41709, __global
                                 unsigned char *color_42670)
{
    #define segmap_group_sizze_37884 (mainzisegmap_group_sizze_37866)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43145;
    int32_t local_tid_43146;
    int64_t group_sizze_43149;
    int32_t wave_sizze_43148;
    int32_t group_tid_43147;
    
    global_tid_43145 = get_global_id(0);
    local_tid_43146 = get_local_id(0);
    group_sizze_43149 = get_local_size(0);
    wave_sizze_43148 = LOCKSTEP_WIDTH;
    group_tid_43147 = get_group_id(0);
    
    int32_t phys_tid_37864 = global_tid_43145;
    int32_t phys_group_id_43150;
    
    phys_group_id_43150 = get_group_id(0);
    for (int32_t i_43151 = 0; i_43151 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_29560, segmap_group_sizze_37884)) -
                   phys_group_id_43150, sext_i64_i32(num_groups_37885));
         i_43151++) {
        int32_t virt_group_id_43152 = phys_group_id_43150 + i_43151 *
                sext_i64_i32(num_groups_37885);
        int64_t global_tid_43153 = sext_i32_i64(virt_group_id_43152) *
                segmap_group_sizze_37884 + sext_i32_i64(local_tid_43146);
        int64_t slice_43154 = m_29560;
        int64_t gtid_37863 = global_tid_43153;
        int64_t remnant_43155 = global_tid_43153 - gtid_37863;
        
        if (slt64(gtid_37863, m_29560)) {
            for (int32_t i_41404 = 0; i_41404 < k2p2zq_29573; i_41404++) {
                int64_t i_41350 = sext_i32_i64(i_41404);
                float defunc_2_reduce_res_37891;
                float redout_41352 = 0.0F;
                
                for (int32_t i_41403 = 0; i_41403 < n_29563; i_41403++) {
                    int64_t i_41353 = sext_i32_i64(i_41403);
                    float x_37896 = ((__global float *) mem_41690)[i_41353 *
                                                                   m_29560 +
                                                                   gtid_37863];
                    bool isnan_res_37897;
                    
                    isnan_res_37897 = futrts_isnan32(x_37896);
                    
                    float defunc_1_f_res_37898;
                    
                    if (isnan_res_37897) {
                        defunc_1_f_res_37898 = 0.0F;
                    } else {
                        float x_37895 = ((__global
                                          float *) binop_p_mem_41432)[i_41350 *
                                                                      N_29559 +
                                                                      i_41353];
                        float defunc_1_f_res_f_res_37899 = x_37895 * x_37896;
                        
                        defunc_1_f_res_37898 = defunc_1_f_res_f_res_37899;
                    }
                    
                    float defunc_1_op_res_37894 = defunc_1_f_res_37898 +
                          redout_41352;
                    float redout_tmp_43157 = defunc_1_op_res_37894;
                    
                    redout_41352 = redout_tmp_43157;
                }
                defunc_2_reduce_res_37891 = redout_41352;
                ((__global float *) color_42670)[phys_tid_37864 + i_41350 *
                                                 num_threads_42843] =
                    defunc_2_reduce_res_37891;
            }
            for (int64_t i_43158 = 0; i_43158 < i32_res_29575; i_43158++) {
                ((__global float *) mem_41709)[i_43158 * m_29560 + gtid_37863] =
                    ((__global float *) color_42670)[phys_tid_37864 + i_43158 *
                                                     num_threads_42843];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_37884
}
__kernel void mainzisegmap_38005(__global int *global_failure, int64_t m_29560,
                                 int32_t k2p2zq_29573, int64_t i32_res_29575,
                                 int64_t num_groups_38025,
                                 int64_t num_threads_42847, __global
                                 unsigned char *mem_41918, __global
                                 unsigned char *mem_41921, __global
                                 unsigned char *mem_41940, __global
                                 unsigned char *color_42683)
{
    #define segmap_group_sizze_38024 (mainzisegmap_group_sizze_38007)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43292;
    int32_t local_tid_43293;
    int64_t group_sizze_43296;
    int32_t wave_sizze_43295;
    int32_t group_tid_43294;
    
    global_tid_43292 = get_global_id(0);
    local_tid_43293 = get_local_id(0);
    group_sizze_43296 = get_local_size(0);
    wave_sizze_43295 = LOCKSTEP_WIDTH;
    group_tid_43294 = get_group_id(0);
    
    int32_t phys_tid_38005 = global_tid_43292;
    int32_t phys_group_id_43297;
    
    phys_group_id_43297 = get_group_id(0);
    for (int32_t i_43298 = 0; i_43298 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_29560, segmap_group_sizze_38024)) -
                   phys_group_id_43297, sext_i64_i32(num_groups_38025));
         i_43298++) {
        int32_t virt_group_id_43299 = phys_group_id_43297 + i_43298 *
                sext_i64_i32(num_groups_38025);
        int64_t global_tid_43300 = sext_i32_i64(virt_group_id_43299) *
                segmap_group_sizze_38024 + sext_i32_i64(local_tid_43293);
        int64_t slice_43301 = m_29560;
        int64_t gtid_38004 = global_tid_43300;
        int64_t remnant_43302 = global_tid_43300 - gtid_38004;
        
        if (slt64(gtid_38004, m_29560)) {
            for (int32_t i_41406 = 0; i_41406 < k2p2zq_29573; i_41406++) {
                int64_t i_41356 = sext_i32_i64(i_41406);
                float defunc_0_f_res_38032;
                float redout_41358 = 0.0F;
                
                for (int32_t i_41405 = 0; i_41405 < k2p2zq_29573; i_41405++) {
                    int64_t i_41359 = sext_i32_i64(i_41405);
                    float x_38036 = ((__global float *) mem_41921)[i_41359 *
                                                                   m_29560 +
                                                                   gtid_38004];
                    float x_38037 = ((__global float *) mem_41918)[i_41356 *
                                                                   (m_29560 *
                                                                    i32_res_29575) +
                                                                   i_41359 *
                                                                   m_29560 +
                                                                   gtid_38004];
                    float defunc_1_f_res_38038 = x_38036 * x_38037;
                    float defunc_1_op_res_38035 = defunc_1_f_res_38038 +
                          redout_41358;
                    float redout_tmp_43304 = defunc_1_op_res_38035;
                    
                    redout_41358 = redout_tmp_43304;
                }
                defunc_0_f_res_38032 = redout_41358;
                ((__global float *) color_42683)[phys_tid_38005 + i_41356 *
                                                 num_threads_42847] =
                    defunc_0_f_res_38032;
            }
            for (int64_t i_43305 = 0; i_43305 < i32_res_29575; i_43305++) {
                ((__global float *) mem_41940)[i_43305 * m_29560 + gtid_38004] =
                    ((__global float *) color_42683)[phys_tid_38005 + i_43305 *
                                                     num_threads_42847];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_38024
}
__kernel void mainzisegmap_38137(__global int *global_failure, int64_t N_29559,
                                 int64_t m_29560, int32_t k2p2zq_29573,
                                 int64_t i32_res_29575,
                                 int64_t num_groups_38156,
                                 int64_t num_threads_42851, __global
                                 unsigned char *mem_41440, __global
                                 unsigned char *mem_41989, __global
                                 unsigned char *mem_42008, __global
                                 unsigned char *color_42688)
{
    #define segmap_group_sizze_38155 (mainzisegmap_group_sizze_38139)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43395;
    int32_t local_tid_43396;
    int64_t group_sizze_43399;
    int32_t wave_sizze_43398;
    int32_t group_tid_43397;
    
    global_tid_43395 = get_global_id(0);
    local_tid_43396 = get_local_id(0);
    group_sizze_43399 = get_local_size(0);
    wave_sizze_43398 = LOCKSTEP_WIDTH;
    group_tid_43397 = get_group_id(0);
    
    int32_t phys_tid_38137 = global_tid_43395;
    int32_t phys_group_id_43400;
    
    phys_group_id_43400 = get_group_id(0);
    for (int32_t i_43401 = 0; i_43401 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_29560, segmap_group_sizze_38155)) -
                   phys_group_id_43400, sext_i64_i32(num_groups_38156));
         i_43401++) {
        int32_t virt_group_id_43402 = phys_group_id_43400 + i_43401 *
                sext_i64_i32(num_groups_38156);
        int64_t global_tid_43403 = sext_i32_i64(virt_group_id_43402) *
                segmap_group_sizze_38155 + sext_i32_i64(local_tid_43396);
        int64_t slice_43404 = m_29560;
        int64_t gtid_38136 = global_tid_43403;
        int64_t remnant_43405 = global_tid_43403 - gtid_38136;
        
        if (slt64(gtid_38136, m_29560)) {
            for (int64_t i_41366 = 0; i_41366 < N_29559; i_41366++) {
                float defunc_0_f_res_38162;
                float redout_41368 = 0.0F;
                
                for (int32_t i_41409 = 0; i_41409 < k2p2zq_29573; i_41409++) {
                    int64_t i_41369 = sext_i32_i64(i_41409);
                    float x_38166 = ((__global float *) mem_41989)[i_41369 *
                                                                   m_29560 +
                                                                   gtid_38136];
                    float x_38167 = ((__global float *) mem_41440)[i_41366 *
                                                                   i32_res_29575 +
                                                                   i_41369];
                    float defunc_1_f_res_38168 = x_38166 * x_38167;
                    float defunc_1_op_res_38165 = defunc_1_f_res_38168 +
                          redout_41368;
                    float redout_tmp_43407 = defunc_1_op_res_38165;
                    
                    redout_41368 = redout_tmp_43407;
                }
                defunc_0_f_res_38162 = redout_41368;
                ((__global float *) color_42688)[phys_tid_38137 + i_41366 *
                                                 num_threads_42851] =
                    defunc_0_f_res_38162;
            }
            for (int64_t i_43408 = 0; i_43408 < N_29559; i_43408++) {
                ((__global float *) mem_42008)[i_43408 * m_29560 + gtid_38136] =
                    ((__global float *) color_42688)[phys_tid_38137 + i_43408 *
                                                     num_threads_42851];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_38155
}
__kernel void mainzisegmap_38330(__global int *global_failure, int64_t N_29559,
                                 int64_t m_29560, __global
                                 unsigned char *mem_42247, __global
                                 unsigned char *mem_42251, __global
                                 unsigned char *mem_42259, __global
                                 unsigned char *mem_42263)
{
    #define segmap_group_sizze_38476 (mainzisegmap_group_sizze_38333)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43642;
    int32_t local_tid_43643;
    int64_t group_sizze_43646;
    int32_t wave_sizze_43645;
    int32_t group_tid_43644;
    
    global_tid_43642 = get_global_id(0);
    local_tid_43643 = get_local_id(0);
    group_sizze_43646 = get_local_size(0);
    wave_sizze_43645 = LOCKSTEP_WIDTH;
    group_tid_43644 = get_group_id(0);
    
    int32_t phys_tid_38330 = global_tid_43642;
    int64_t global_tid_43647 = sext_i32_i64(group_tid_43644) *
            segmap_group_sizze_38476 + sext_i32_i64(local_tid_43643);
    int64_t slice_43648 = N_29559;
    int64_t slice_43649 = m_29560 * slice_43648;
    int64_t gtid_38328 = squot64(global_tid_43647, slice_43648);
    int64_t remnant_43650 = global_tid_43647 - gtid_38328 * slice_43648;
    int64_t gtid_38329 = remnant_43650;
    int64_t remnant_43651 = remnant_43650 - gtid_38329;
    
    if (slt64(gtid_38328, m_29560) && slt64(gtid_38329, N_29559)) {
        float x_38480 = ((__global float *) mem_42251)[gtid_38328 * N_29559 +
                                                       gtid_38329];
        int32_t index_primexp_39428 = sext_i64_i32(gtid_38329);
        bool isnan_res_38483;
        
        isnan_res_38483 = futrts_isnan32(x_38480);
        
        bool defunc_0_p_res_38484 = !isnan_res_38483;
        int64_t defunc_1_f_res_38485;
        
        if (defunc_0_p_res_38484) {
            int64_t x_38481 = ((__global int64_t *) mem_42247)[gtid_38328 *
                                                               N_29559 +
                                                               gtid_38329];
            int64_t defunc_1_f_res_t_res_38486 = sub64(x_38481, (int64_t) 1);
            
            defunc_1_f_res_38485 = defunc_1_f_res_t_res_38486;
        } else {
            defunc_1_f_res_38485 = (int64_t) -1;
        }
        if ((sle64((int64_t) 0, gtid_38328) && slt64(gtid_38328, m_29560)) &&
            (sle64((int64_t) 0, defunc_1_f_res_38485) &&
             slt64(defunc_1_f_res_38485, N_29559))) {
            ((__global int32_t *) mem_42263)[gtid_38328 * N_29559 +
                                             defunc_1_f_res_38485] =
                index_primexp_39428;
        }
        if ((sle64((int64_t) 0, gtid_38328) && slt64(gtid_38328, m_29560)) &&
            (sle64((int64_t) 0, defunc_1_f_res_38485) &&
             slt64(defunc_1_f_res_38485, N_29559))) {
            ((__global float *) mem_42259)[gtid_38328 * N_29559 +
                                           defunc_1_f_res_38485] = x_38480;
        }
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_38476
}
__kernel void mainzisegmap_38392(__global int *global_failure, int64_t N_29559,
                                 int64_t m_29560, int64_t i_29861, __global
                                 unsigned char *mem_42247, __global
                                 unsigned char *mem_42255)
{
    #define segmap_group_sizze_38446 (mainzisegmap_group_sizze_38394)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43616;
    int32_t local_tid_43617;
    int64_t group_sizze_43620;
    int32_t wave_sizze_43619;
    int32_t group_tid_43618;
    
    global_tid_43616 = get_global_id(0);
    local_tid_43617 = get_local_id(0);
    group_sizze_43620 = get_local_size(0);
    wave_sizze_43619 = LOCKSTEP_WIDTH;
    group_tid_43618 = get_group_id(0);
    
    int32_t phys_tid_38392 = global_tid_43616;
    int64_t global_tid_43621 = sext_i32_i64(group_tid_43618) *
            segmap_group_sizze_38446 + sext_i32_i64(local_tid_43617);
    int64_t slice_43622 = m_29560;
    int64_t gtid_38391 = global_tid_43621;
    int64_t remnant_43623 = global_tid_43621 - gtid_38391;
    
    if (slt64(gtid_38391, m_29560)) {
        int64_t last_res_38450 = ((__global int64_t *) mem_42247)[gtid_38391 *
                                                                  N_29559 +
                                                                  i_29861];
        int32_t defunc_0_f_res_38451 = sext_i64_i32(last_res_38450);
        
        ((__global int32_t *) mem_42255)[gtid_38391] = defunc_0_f_res_38451;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_38446
}
__kernel void mainzisegmap_38633(__global int *global_failure, int64_t m_29560,
                                 float hfrac_29565, int32_t k2p2_29571, __global
                                 unsigned char *mem_42329, __global
                                 unsigned char *mem_42333, __global
                                 unsigned char *mem_42337, __global
                                 unsigned char *mem_42340)
{
    #define segmap_group_sizze_38726 (mainzisegmap_group_sizze_38635)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43812;
    int32_t local_tid_43813;
    int64_t group_sizze_43816;
    int32_t wave_sizze_43815;
    int32_t group_tid_43814;
    
    global_tid_43812 = get_global_id(0);
    local_tid_43813 = get_local_id(0);
    group_sizze_43816 = get_local_size(0);
    wave_sizze_43815 = LOCKSTEP_WIDTH;
    group_tid_43814 = get_group_id(0);
    
    int32_t phys_tid_38633 = global_tid_43812;
    int64_t global_tid_43817 = sext_i32_i64(group_tid_43814) *
            segmap_group_sizze_38726 + sext_i32_i64(local_tid_43813);
    int64_t slice_43818 = m_29560;
    int64_t gtid_38632 = global_tid_43817;
    int64_t remnant_43819 = global_tid_43817 - gtid_38632;
    
    if (slt64(gtid_38632, m_29560)) {
        int32_t defunc_0_f_res_38730 = ((__global
                                         int32_t *) mem_42329)[gtid_38632];
        float defunc_0_f_res_38731 = ((__global float *) mem_42333)[gtid_38632];
        int32_t r32_arg_38732 = sub32(defunc_0_f_res_38730, k2p2_29571);
        float i32_res_38733 = sitofp_i32_f32(r32_arg_38732);
        float sqrt_arg_38734 = defunc_0_f_res_38731 / i32_res_38733;
        float sqrt_res_38735;
        
        sqrt_res_38735 = futrts_sqrt32(sqrt_arg_38734);
        
        float i32_res_38736 = sitofp_i32_f32(defunc_0_f_res_38730);
        float t32_arg_38737 = hfrac_29565 * i32_res_38736;
        int32_t f32_res_38738 = fptosi_f32_i32(t32_arg_38737);
        
        ((__global int32_t *) mem_42337)[gtid_38632] = f32_res_38738;
        ((__global float *) mem_42340)[gtid_38632] = sqrt_res_38735;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_38726
}
__kernel void mainzisegmap_38873(__global int *global_failure,
                                 int failure_is_an_option, __global
                                 int64_t *global_failure_args, int64_t N_29559,
                                 int32_t n_29563, float lam_29566,
                                 int64_t iota32_arg_29989, float i32_res_30001,
                                 __global
                                 unsigned char *mappingindices_mem_41420,
                                 __global unsigned char *mem_42387, __global
                                 unsigned char *mem_42390)
{
    #define segmap_group_sizze_38895 (mainzisegmap_group_sizze_38875)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43931;
    int32_t local_tid_43932;
    int64_t group_sizze_43935;
    int32_t wave_sizze_43934;
    int32_t group_tid_43933;
    
    global_tid_43931 = get_global_id(0);
    local_tid_43932 = get_local_id(0);
    group_sizze_43935 = get_local_size(0);
    wave_sizze_43934 = LOCKSTEP_WIDTH;
    group_tid_43933 = get_group_id(0);
    
    int32_t phys_tid_38873 = global_tid_43931;
    int64_t global_tid_43936 = sext_i32_i64(group_tid_43933) *
            segmap_group_sizze_38895 + sext_i32_i64(local_tid_43932);
    int64_t slice_43937 = iota32_arg_29989;
    int64_t gtid_38872 = global_tid_43936;
    int64_t remnant_43938 = global_tid_43936 - gtid_38872;
    
    if (slt64(gtid_38872, iota32_arg_29989)) {
        int32_t defunc_0_f_res_38900 = sext_i64_i32(gtid_38872);
        int32_t i_38901 = add32(n_29563, defunc_0_f_res_38900);
        int64_t i_38902 = sext_i32_i64(i_38901);
        bool x_38903 = sle64((int64_t) 0, i_38902);
        bool y_38904 = slt64(i_38902, N_29559);
        bool bounds_check_38905 = x_38903 && y_38904;
        bool index_certs_38906;
        
        if (!bounds_check_38905) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 24) == -1) {
                    global_failure_args[0] = i_38902;
                    global_failure_args[1] = N_29559;
                    ;
                }
                return;
            }
        }
        
        int32_t time_38907 = ((__global
                               int32_t *) mappingindices_mem_41420)[i_38902];
        float i32_res_38908 = sitofp_i32_f32(time_38907);
        float logplus_arg_38909 = i32_res_38908 / i32_res_30001;
        bool cond_38910 = 2.7182817F < logplus_arg_38909;
        float logplus_res_38911;
        
        if (cond_38910) {
            float log_res_38912;
            
            log_res_38912 = futrts_log32(logplus_arg_38909);
            logplus_res_38911 = log_res_38912;
        } else {
            logplus_res_38911 = 1.0F;
        }
        
        float sqrt_res_38913;
        
        sqrt_res_38913 = futrts_sqrt32(logplus_res_38911);
        
        float defunc_0_f_res_38914 = lam_29566 * sqrt_res_38913;
        
        ((__global int32_t *) mem_42387)[gtid_38872] = defunc_0_f_res_38900;
        ((__global float *) mem_42390)[gtid_38872] = defunc_0_f_res_38914;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_38895
}
__kernel void mainzisegmap_39052(__global int *global_failure,
                                 int failure_is_an_option, __global
                                 int64_t *global_failure_args, int64_t N_29559,
                                 int64_t m_29560, int32_t n_29563, __global
                                 unsigned char *defunc_4_map_res_mem_42267,
                                 __global
                                 unsigned char *defunc_3_map_res_mem_42345,
                                 __global unsigned char *mem_42409, __global
                                 unsigned char *mem_42417, __global
                                 unsigned char *mem_42420, __global
                                 unsigned char *mem_42423, __global
                                 unsigned char *mem_42427, __global
                                 unsigned char *mem_42430)
{
    #define segmap_group_sizze_39336 (mainzisegmap_group_sizze_39054)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_44138;
    int32_t local_tid_44139;
    int64_t group_sizze_44142;
    int32_t wave_sizze_44141;
    int32_t group_tid_44140;
    
    global_tid_44138 = get_global_id(0);
    local_tid_44139 = get_local_id(0);
    group_sizze_44142 = get_local_size(0);
    wave_sizze_44141 = LOCKSTEP_WIDTH;
    group_tid_44140 = get_group_id(0);
    
    int32_t phys_tid_39052 = global_tid_44138;
    int64_t global_tid_44143 = sext_i32_i64(group_tid_44140) *
            segmap_group_sizze_39336 + sext_i32_i64(local_tid_44139);
    int64_t slice_44144 = m_29560;
    int64_t gtid_39051 = global_tid_44143;
    int64_t remnant_44145 = global_tid_44143 - gtid_39051;
    
    if (slt64(gtid_39051, m_29560)) {
        int32_t x_39340 = ((__global
                            int32_t *) defunc_3_map_res_mem_42345)[gtid_39051];
        int32_t y_39342 = ((__global int32_t *) mem_42409)[gtid_39051];
        bool acc0_39344 = ((__global bool *) mem_42417)[gtid_39051];
        bool x_39349 = acc0_39344 && acc0_39344;
        int32_t defunc_1_op_res_f_res_39353;
        
        if (acc0_39344) {
            int32_t acc0_39345 = ((__global int32_t *) mem_42420)[gtid_39051];
            
            defunc_1_op_res_f_res_39353 = acc0_39345;
        } else {
            defunc_1_op_res_f_res_39353 = -1;
        }
        
        bool cond_39359 = y_39342 == 0;
        float defunc_0_f_res_39360;
        
        if (cond_39359) {
            defunc_0_f_res_39360 = 0.0F;
        } else {
            float acc0_39346 = ((__global float *) mem_42423)[gtid_39051];
            float i32_res_39361 = sitofp_i32_f32(y_39342);
            float defunc_0_f_res_f_res_39362 = acc0_39346 / i32_res_39361;
            
            defunc_0_f_res_39360 = defunc_0_f_res_f_res_39362;
        }
        
        bool cond_39363 = !x_39349;
        int32_t fst_breakzq_39364;
        
        if (cond_39363) {
            fst_breakzq_39364 = -1;
        } else {
            bool cond_39365 = slt32(defunc_1_op_res_f_res_39353, y_39342);
            int32_t adjustValInds_res_39366;
            
            if (cond_39365) {
                int32_t i_39367 = add32(x_39340, defunc_1_op_res_f_res_39353);
                int64_t i_39368 = sext_i32_i64(i_39367);
                bool x_39369 = sle64((int64_t) 0, i_39368);
                bool y_39370 = slt64(i_39368, N_29559);
                bool bounds_check_39371 = x_39369 && y_39370;
                bool index_certs_39372;
                
                if (!bounds_check_39371) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 30) ==
                            -1) {
                            global_failure_args[0] = i_39368;
                            global_failure_args[1] = N_29559;
                            ;
                        }
                        return;
                    }
                }
                
                int32_t x_39373 = ((__global
                                    int32_t *) defunc_4_map_res_mem_42267)[gtid_39051 *
                                                                           N_29559 +
                                                                           i_39368];
                int32_t adjustValInds_res_t_res_39374 = sub32(x_39373, n_29563);
                
                adjustValInds_res_39366 = adjustValInds_res_t_res_39374;
            } else {
                adjustValInds_res_39366 = -1;
            }
            fst_breakzq_39364 = adjustValInds_res_39366;
        }
        
        bool cond_39375 = sle32(x_39340, 5);
        bool cond_f_res_39376 = sle32(y_39342, 5);
        bool x_39377 = !cond_39375;
        bool y_39378 = cond_f_res_39376 && x_39377;
        bool cond_39379 = cond_39375 || y_39378;
        int32_t fst_breakzq_39380;
        
        if (cond_39379) {
            fst_breakzq_39380 = -2;
        } else {
            fst_breakzq_39380 = fst_breakzq_39364;
        }
        ((__global int32_t *) mem_42427)[gtid_39051] = fst_breakzq_39380;
        ((__global float *) mem_42430)[gtid_39051] = defunc_0_f_res_39360;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_39336
}
__kernel void mainzisegmap_39206(__global int *global_failure, int64_t m_29560,
                                 int64_t num_groups_39229, __global
                                 unsigned char *defunc_4_map_res_mem_42265,
                                 __global
                                 unsigned char *defunc_3_map_res_mem_42345,
                                 __global
                                 unsigned char *defunc_3_map_res_mem_42346,
                                 __global unsigned char *mem_42406, __global
                                 unsigned char *mem_42409)
{
    #define segmap_group_sizze_39228 (mainzisegmap_group_sizze_39208)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43969;
    int32_t local_tid_43970;
    int64_t group_sizze_43973;
    int32_t wave_sizze_43972;
    int32_t group_tid_43971;
    
    global_tid_43969 = get_global_id(0);
    local_tid_43970 = get_local_id(0);
    group_sizze_43973 = get_local_size(0);
    wave_sizze_43972 = LOCKSTEP_WIDTH;
    group_tid_43971 = get_group_id(0);
    
    int32_t phys_tid_39206 = global_tid_43969;
    int32_t phys_group_id_43974;
    
    phys_group_id_43974 = get_group_id(0);
    for (int32_t i_43975 = 0; i_43975 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_29560, segmap_group_sizze_39228)) -
                   phys_group_id_43974, sext_i64_i32(num_groups_39229));
         i_43975++) {
        int32_t virt_group_id_43976 = phys_group_id_43974 + i_43975 *
                sext_i64_i32(num_groups_39229);
        int64_t global_tid_43977 = sext_i32_i64(virt_group_id_43976) *
                segmap_group_sizze_39228 + sext_i32_i64(local_tid_43970);
        int64_t slice_43978 = m_29560;
        int64_t gtid_39205 = global_tid_43977;
        int64_t remnant_43979 = global_tid_43977 - gtid_39205;
        
        if (slt64(gtid_39205, m_29560)) {
            int32_t x_39235 = ((__global
                                int32_t *) defunc_4_map_res_mem_42265)[gtid_39205];
            int32_t x_39236 = ((__global
                                int32_t *) defunc_3_map_res_mem_42345)[gtid_39205];
            float x_39237 = ((__global
                              float *) defunc_3_map_res_mem_42346)[gtid_39205];
            int32_t y_39238 = sub32(x_39235, x_39236);
            float i32_res_39239 = sitofp_i32_f32(x_39236);
            float sqrt_res_39240;
            
            sqrt_res_39240 = futrts_sqrt32(i32_res_39239);
            
            float y_39241 = x_39237 * sqrt_res_39240;
            
            ((__global float *) mem_42406)[gtid_39205] = y_39241;
            ((__global int32_t *) mem_42409)[gtid_39205] = y_39238;
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_39228
}
__kernel void mainzisegmap_intragroup_37212(__global int *global_failure,
                                            int failure_is_an_option, __global
                                            int64_t *global_failure_args,
                                            __local volatile
                                            int64_t *color_42667_backing_aligned_0,
                                            __local volatile
                                            int64_t *color_42666_backing_aligned_1,
                                            int64_t m_29560,
                                            int32_t k2p2zq_29573,
                                            int64_t i32_res_29575,
                                            int32_t m_29703, int64_t nm_29705,
                                            int64_t i32_res_29720, __global
                                            unsigned char *defunc_3_map_res_mem_41600,
                                            __global unsigned char *mem_41627)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict color_42667_backing_1 = (__local volatile
                                                             char *) color_42667_backing_aligned_0;
    __local volatile char *restrict color_42666_backing_0 = (__local volatile
                                                             char *) color_42666_backing_aligned_1;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43057;
    int32_t local_tid_43058;
    int64_t group_sizze_43061;
    int32_t wave_sizze_43060;
    int32_t group_tid_43059;
    
    global_tid_43057 = get_global_id(0);
    local_tid_43058 = get_local_id(0);
    group_sizze_43061 = get_local_size(0);
    wave_sizze_43060 = LOCKSTEP_WIDTH;
    group_tid_43059 = get_group_id(0);
    
    int32_t phys_tid_37212 = group_tid_43059;
    int32_t ltid_pre_43062 = local_tid_43058;
    int64_t slice_43063 = m_29560;
    int64_t gtid_37142 = sext_i32_i64(group_tid_43059);
    int64_t remnant_43064 = sext_i32_i64(group_tid_43059) - gtid_37142;
    __local char *color_42666;
    
    color_42666 = (__local char *) color_42666_backing_0;
    
    __local char *color_42667;
    
    color_42667 = (__local char *) color_42667_backing_1;
    
    int64_t gtid_37145 = sext_i32_i64(ltid_pre_43062);
    int32_t phys_tid_37146 = local_tid_43058;
    int32_t index_primexp_39405 = sext_i64_i32(gtid_37145);
    int32_t defunc_0_f_res_37223 = sdiv32(index_primexp_39405, m_29703);
    int32_t defunc_0_f_res_37224 = smod32(index_primexp_39405, m_29703);
    bool cond_37225 = slt32(defunc_0_f_res_37224, k2p2zq_29573);
    float defunc_0_f_res_37226;
    
    if (cond_37225) {
        int64_t i_37227 = sext_i32_i64(defunc_0_f_res_37223);
        bool x_37228 = sle64((int64_t) 0, i_37227);
        bool y_37229 = slt64(i_37227, i32_res_29575);
        bool bounds_check_37230 = x_37228 && y_37229;
        int64_t j_37231 = sext_i32_i64(defunc_0_f_res_37224);
        bool x_37232 = sle64((int64_t) 0, j_37231);
        bool y_37233 = slt64(j_37231, i32_res_29575);
        bool bounds_check_37234 = x_37232 && y_37233;
        bool index_ok_37235 = bounds_check_37230 && bounds_check_37234;
        bool index_certs_37236;
        
        if (!index_ok_37235) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 0) == -1) {
                    global_failure_args[0] = i_37227;
                    global_failure_args[1] = j_37231;
                    global_failure_args[2] = i32_res_29575;
                    global_failure_args[3] = i32_res_29575;
                    ;
                }
                local_failure = true;
                goto error_0;
            }
        }
        
        float defunc_0_f_res_t_res_37237 = ((__global
                                             float *) defunc_3_map_res_mem_41600)[gtid_37142 *
                                                                                  (i32_res_29575 *
                                                                                   i32_res_29575) +
                                                                                  i_37227 *
                                                                                  i32_res_29575 +
                                                                                  j_37231];
        
        defunc_0_f_res_37226 = defunc_0_f_res_t_res_37237;
    } else {
        int32_t y_37238 = add32(k2p2zq_29573, defunc_0_f_res_37223);
        bool cond_37239 = defunc_0_f_res_37224 == y_37238;
        float defunc_0_f_res_f_res_37240;
        
        if (cond_37239) {
            defunc_0_f_res_f_res_37240 = 1.0F;
        } else {
            defunc_0_f_res_f_res_37240 = 0.0F;
        }
        defunc_0_f_res_37226 = defunc_0_f_res_f_res_37240;
    }
    ((__local float *) color_42667)[gtid_37145] = defunc_0_f_res_37226;
    
  error_0:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int32_t i_37242 = 0; i_37242 < k2p2zq_29573; i_37242++) {
        int64_t i32_res_37244 = sext_i32_i64(i_37242);
        bool x_37245 = sle64((int64_t) 0, i32_res_37244);
        bool y_37246 = slt64(i32_res_37244, nm_29705);
        bool bounds_check_37247 = x_37245 && y_37246;
        bool index_certs_37248;
        
        if (!bounds_check_37247) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 1) == -1) {
                    global_failure_args[0] = i32_res_37244;
                    global_failure_args[1] = nm_29705;
                    ;
                }
                local_failure = true;
                goto error_1;
            }
        }
        
        float v1_37249 = ((__local float *) color_42667)[i32_res_37244];
        bool cond_37250 = v1_37249 == 0.0F;
        int64_t gtid_37166 = sext_i32_i64(ltid_pre_43062);
        int32_t phys_tid_37167 = local_tid_43058;
        int32_t defunc_0_f_res_37253 = sext_i64_i32(gtid_37166);
        int32_t defunc_0_f_res_37254 = sdiv32(defunc_0_f_res_37253, m_29703);
        int32_t defunc_0_f_res_37255 = smod32(defunc_0_f_res_37253, m_29703);
        float defunc_0_f_res_37256;
        
        if (cond_37250) {
            int32_t x_37257 = mul32(m_29703, defunc_0_f_res_37254);
            int32_t i32_arg_37258 = add32(defunc_0_f_res_37255, x_37257);
            int64_t i32_res_37259 = sext_i32_i64(i32_arg_37258);
            bool x_37260 = sle64((int64_t) 0, i32_res_37259);
            bool y_37261 = slt64(i32_res_37259, nm_29705);
            bool bounds_check_37262 = x_37260 && y_37261;
            bool index_certs_37263;
            
            if (!bounds_check_37262) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 2) ==
                        -1) {
                        global_failure_args[0] = i32_res_37259;
                        global_failure_args[1] = nm_29705;
                        ;
                    }
                    local_failure = true;
                    goto error_1;
                }
            }
            
            float defunc_0_f_res_t_res_37264 = ((__local
                                                 float *) color_42667)[i32_res_37259];
            
            defunc_0_f_res_37256 = defunc_0_f_res_t_res_37264;
        } else {
            int64_t i32_res_37265 = sext_i32_i64(defunc_0_f_res_37255);
            bool x_37266 = sle64((int64_t) 0, i32_res_37265);
            bool y_37267 = slt64(i32_res_37265, nm_29705);
            bool bounds_check_37268 = x_37266 && y_37267;
            bool index_certs_37269;
            
            if (!bounds_check_37268) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 3) ==
                        -1) {
                        global_failure_args[0] = i32_res_37265;
                        global_failure_args[1] = nm_29705;
                        ;
                    }
                    local_failure = true;
                    goto error_1;
                }
            }
            
            float x_37270 = ((__local float *) color_42667)[i32_res_37265];
            float x_37271 = x_37270 / v1_37249;
            int32_t y_37272 = sub32(k2p2zq_29573, 1);
            bool cond_37273 = slt32(defunc_0_f_res_37254, y_37272);
            float defunc_0_f_res_f_res_37274;
            
            if (cond_37273) {
                int32_t x_37275 = add32(1, defunc_0_f_res_37254);
                int32_t x_37276 = mul32(m_29703, x_37275);
                int32_t i32_arg_37277 = add32(defunc_0_f_res_37255, x_37276);
                int64_t i32_res_37278 = sext_i32_i64(i32_arg_37277);
                bool x_37279 = sle64((int64_t) 0, i32_res_37278);
                bool y_37280 = slt64(i32_res_37278, nm_29705);
                bool bounds_check_37281 = x_37279 && y_37280;
                bool index_certs_37282;
                
                if (!bounds_check_37281) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 4) ==
                            -1) {
                            global_failure_args[0] = i32_res_37278;
                            global_failure_args[1] = nm_29705;
                            ;
                        }
                        local_failure = true;
                        goto error_1;
                    }
                }
                
                float x_37283 = ((__local float *) color_42667)[i32_res_37278];
                int32_t i32_arg_37284 = add32(i_37242, x_37276);
                int64_t i32_res_37285 = sext_i32_i64(i32_arg_37284);
                bool x_37286 = sle64((int64_t) 0, i32_res_37285);
                bool y_37287 = slt64(i32_res_37285, nm_29705);
                bool bounds_check_37288 = x_37286 && y_37287;
                bool index_certs_37289;
                
                if (!bounds_check_37288) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 5) ==
                            -1) {
                            global_failure_args[0] = i32_res_37285;
                            global_failure_args[1] = nm_29705;
                            ;
                        }
                        local_failure = true;
                        goto error_1;
                    }
                }
                
                float x_37290 = ((__local float *) color_42667)[i32_res_37285];
                float y_37291 = x_37271 * x_37290;
                float defunc_0_f_res_f_res_t_res_37292 = x_37283 - y_37291;
                
                defunc_0_f_res_f_res_37274 = defunc_0_f_res_f_res_t_res_37292;
            } else {
                defunc_0_f_res_f_res_37274 = x_37271;
            }
            defunc_0_f_res_37256 = defunc_0_f_res_f_res_37274;
        }
        ((__local float *) color_42666)[gtid_37166] = defunc_0_f_res_37256;
        
      error_1:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t write_i_37209 = sext_i32_i64(ltid_pre_43062);
        int32_t phys_tid_37210 = local_tid_43058;
        float write_value_37295 = ((__local
                                    float *) color_42666)[write_i_37209];
        
        if (sle64((int64_t) 0, write_i_37209) && slt64(write_i_37209,
                                                       nm_29705)) {
            ((__local float *) color_42667)[write_i_37209] = write_value_37295;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    for (int64_t i_43066 = 0; i_43066 < sdiv_up64(i32_res_29575 *
                                                  i32_res_29575 -
                                                  sext_i32_i64(local_tid_43058),
                                                  nm_29705); i_43066++) {
        ((__global float *) mem_41627)[gtid_37142 * (i32_res_29575 *
                                                     i32_res_29575) +
                                       squot64(i_43066 * nm_29705 +
                                               sext_i32_i64(local_tid_43058),
                                               i32_res_29575) * i32_res_29575 +
                                       (i_43066 * nm_29705 +
                                        sext_i32_i64(local_tid_43058) -
                                        squot64(i_43066 * nm_29705 +
                                                sext_i32_i64(local_tid_43058),
                                                i32_res_29575) *
                                        i32_res_29575)] = ((__local
                                                            float *) color_42667)[i32_res_29575 +
                                                                                  (squot64(i_43066 *
                                                                                           nm_29705 +
                                                                                           sext_i32_i64(local_tid_43058),
                                                                                           i32_res_29575) *
                                                                                   i32_res_29720 +
                                                                                   (i_43066 *
                                                                                    nm_29705 +
                                                                                    sext_i32_i64(local_tid_43058) -
                                                                                    squot64(i_43066 *
                                                                                            nm_29705 +
                                                                                            sext_i32_i64(local_tid_43058),
                                                                                            i32_res_29575) *
                                                                                    i32_res_29575))];
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_3:
    return;
}
__kernel void mainzisegmap_intragroup_37366(__global int *global_failure,
                                            int failure_is_an_option, __global
                                            int64_t *global_failure_args,
                                            __local volatile
                                            int64_t *color_42669_backing_aligned_0,
                                            __local volatile
                                            int64_t *color_42668_backing_aligned_1,
                                            int64_t m_29560,
                                            int32_t k2p2zq_29573,
                                            int32_t m_29703, int64_t nm_29705,
                                            int32_t i_37715,
                                            int64_t i32_res_37717,
                                            int64_t ctx_param_ext_41635,
                                            int64_t ctx_param_ext_41636,
                                            int64_t ctx_param_ext_41638,
                                            __global
                                            unsigned char *mem_param_41640,
                                            __global unsigned char *mem_41655)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict color_42669_backing_1 = (__local volatile
                                                             char *) color_42669_backing_aligned_0;
    __local volatile char *restrict color_42668_backing_0 = (__local volatile
                                                             char *) color_42668_backing_aligned_1;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43093;
    int32_t local_tid_43094;
    int64_t group_sizze_43097;
    int32_t wave_sizze_43096;
    int32_t group_tid_43095;
    
    global_tid_43093 = get_global_id(0);
    local_tid_43094 = get_local_id(0);
    group_sizze_43097 = get_local_size(0);
    wave_sizze_43096 = LOCKSTEP_WIDTH;
    group_tid_43095 = get_group_id(0);
    
    int32_t phys_tid_37366 = group_tid_43095;
    int32_t ltid_pre_43098 = local_tid_43094;
    int64_t slice_43099 = m_29560;
    int64_t gtid_37317 = sext_i32_i64(group_tid_43095);
    int64_t remnant_43100 = sext_i32_i64(group_tid_43095) - gtid_37317;
    __local char *color_42668;
    
    color_42668 = (__local char *) color_42668_backing_0;
    
    __local char *color_42669;
    
    color_42669 = (__local char *) color_42669_backing_1;
    ((__local float *) color_42669)[sext_i32_i64(local_tid_43094)] = ((__global
                                                                       float *) mem_param_41640)[ctx_param_ext_41635 +
                                                                                                 gtid_37317 *
                                                                                                 ctx_param_ext_41636 +
                                                                                                 sext_i32_i64(local_tid_43094) *
                                                                                                 ctx_param_ext_41638];
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float v1_37733 = ((__global float *) mem_param_41640)[ctx_param_ext_41635 +
                                                          (gtid_37317 *
                                                           ctx_param_ext_41636 +
                                                           i32_res_37717 *
                                                           ctx_param_ext_41638)];
    bool cond_37734 = v1_37733 == 0.0F;
    int64_t gtid_37320 = sext_i32_i64(ltid_pre_43098);
    int32_t phys_tid_37321 = local_tid_43094;
    int32_t defunc_0_f_res_37737 = sext_i64_i32(gtid_37320);
    int32_t defunc_0_f_res_37738 = sdiv32(defunc_0_f_res_37737, m_29703);
    int32_t defunc_0_f_res_37739 = smod32(defunc_0_f_res_37737, m_29703);
    float defunc_0_f_res_37740;
    
    if (cond_37734) {
        int32_t x_37741 = mul32(m_29703, defunc_0_f_res_37738);
        int32_t i32_arg_37742 = add32(defunc_0_f_res_37739, x_37741);
        int64_t i32_res_37743 = sext_i32_i64(i32_arg_37742);
        bool x_37744 = sle64((int64_t) 0, i32_res_37743);
        bool y_37745 = slt64(i32_res_37743, nm_29705);
        bool bounds_check_37746 = x_37744 && y_37745;
        bool index_certs_37747;
        
        if (!bounds_check_37746) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 7) == -1) {
                    global_failure_args[0] = i32_res_37743;
                    global_failure_args[1] = nm_29705;
                    ;
                }
                local_failure = true;
                goto error_0;
            }
        }
        
        float defunc_0_f_res_t_res_37748 = ((__local
                                             float *) color_42669)[i32_res_37743];
        
        defunc_0_f_res_37740 = defunc_0_f_res_t_res_37748;
    } else {
        int64_t i32_res_37749 = sext_i32_i64(defunc_0_f_res_37739);
        bool x_37750 = sle64((int64_t) 0, i32_res_37749);
        bool y_37751 = slt64(i32_res_37749, nm_29705);
        bool bounds_check_37752 = x_37750 && y_37751;
        bool index_certs_37753;
        
        if (!bounds_check_37752) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 8) == -1) {
                    global_failure_args[0] = i32_res_37749;
                    global_failure_args[1] = nm_29705;
                    ;
                }
                local_failure = true;
                goto error_0;
            }
        }
        
        float x_37754 = ((__global
                          float *) mem_param_41640)[ctx_param_ext_41635 +
                                                    (gtid_37317 *
                                                     ctx_param_ext_41636 +
                                                     i32_res_37749 *
                                                     ctx_param_ext_41638)];
        float x_37755 = x_37754 / v1_37733;
        int32_t y_37756 = sub32(k2p2zq_29573, 1);
        bool cond_37757 = slt32(defunc_0_f_res_37738, y_37756);
        float defunc_0_f_res_f_res_37758;
        
        if (cond_37757) {
            int32_t x_37759 = add32(1, defunc_0_f_res_37738);
            int32_t x_37760 = mul32(m_29703, x_37759);
            int32_t i32_arg_37761 = add32(defunc_0_f_res_37739, x_37760);
            int64_t i32_res_37762 = sext_i32_i64(i32_arg_37761);
            bool x_37763 = sle64((int64_t) 0, i32_res_37762);
            bool y_37764 = slt64(i32_res_37762, nm_29705);
            bool bounds_check_37765 = x_37763 && y_37764;
            bool index_certs_37766;
            
            if (!bounds_check_37765) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 9) ==
                        -1) {
                        global_failure_args[0] = i32_res_37762;
                        global_failure_args[1] = nm_29705;
                        ;
                    }
                    local_failure = true;
                    goto error_0;
                }
            }
            
            float x_37767 = ((__global
                              float *) mem_param_41640)[ctx_param_ext_41635 +
                                                        (gtid_37317 *
                                                         ctx_param_ext_41636 +
                                                         i32_res_37762 *
                                                         ctx_param_ext_41638)];
            int32_t i32_arg_37768 = add32(i_37715, x_37760);
            int64_t i32_res_37769 = sext_i32_i64(i32_arg_37768);
            bool x_37770 = sle64((int64_t) 0, i32_res_37769);
            bool y_37771 = slt64(i32_res_37769, nm_29705);
            bool bounds_check_37772 = x_37770 && y_37771;
            bool index_certs_37773;
            
            if (!bounds_check_37772) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 10) ==
                        -1) {
                        global_failure_args[0] = i32_res_37769;
                        global_failure_args[1] = nm_29705;
                        ;
                    }
                    local_failure = true;
                    goto error_0;
                }
            }
            
            float x_37774 = ((__global
                              float *) mem_param_41640)[ctx_param_ext_41635 +
                                                        (gtid_37317 *
                                                         ctx_param_ext_41636 +
                                                         i32_res_37769 *
                                                         ctx_param_ext_41638)];
            float y_37775 = x_37755 * x_37774;
            float defunc_0_f_res_f_res_t_res_37776 = x_37767 - y_37775;
            
            defunc_0_f_res_f_res_37758 = defunc_0_f_res_f_res_t_res_37776;
        } else {
            defunc_0_f_res_f_res_37758 = x_37755;
        }
        defunc_0_f_res_37740 = defunc_0_f_res_f_res_37758;
    }
    ((__local float *) color_42668)[gtid_37320] = defunc_0_f_res_37740;
    
  error_0:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t write_i_37363 = sext_i32_i64(ltid_pre_43098);
    int32_t phys_tid_37364 = local_tid_43094;
    float write_value_37779 = ((__local float *) color_42668)[write_i_37363];
    
    if (sle64((int64_t) 0, write_i_37363) && slt64(write_i_37363, nm_29705)) {
        ((__local float *) color_42669)[write_i_37363] = write_value_37779;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    ((__global float *) mem_41655)[gtid_37317 * nm_29705 +
                                   sext_i32_i64(local_tid_43094)] = ((__local
                                                                      float *) color_42669)[sext_i32_i64(local_tid_43094)];
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_2:
    return;
}
__kernel void mainzisegmap_intragroup_38284(__global int *global_failure,
                                            __local volatile
                                            int64_t *color_42704_backing_aligned_0,
                                            __local volatile
                                            int64_t *color_42703_backing_aligned_1,
                                            __local volatile
                                            int64_t *color_42702_backing_aligned_2,
                                            __local volatile
                                            int64_t *color_42701_backing_aligned_3,
                                            int64_t N_29559, int64_t m_29560,
                                            int64_t i_29861, __global
                                            unsigned char *images_mem_41421,
                                            __global
                                            unsigned char *defunc_3_map_res_mem_42216,
                                            __global unsigned char *mem_42234,
                                            __global unsigned char *mem_42238,
                                            __global unsigned char *mem_42242)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict color_42704_backing_3 = (__local volatile
                                                             char *) color_42704_backing_aligned_0;
    __local volatile char *restrict color_42703_backing_2 = (__local volatile
                                                             char *) color_42703_backing_aligned_1;
    __local volatile char *restrict color_42702_backing_1 = (__local volatile
                                                             char *) color_42702_backing_aligned_2;
    __local volatile char *restrict color_42701_backing_0 = (__local volatile
                                                             char *) color_42701_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43541;
    int32_t local_tid_43542;
    int64_t group_sizze_43545;
    int32_t wave_sizze_43544;
    int32_t group_tid_43543;
    
    global_tid_43541 = get_global_id(0);
    local_tid_43542 = get_local_id(0);
    group_sizze_43545 = get_local_size(0);
    wave_sizze_43544 = LOCKSTEP_WIDTH;
    group_tid_43543 = get_group_id(0);
    
    int32_t phys_tid_38284 = group_tid_43543;
    int32_t ltid_pre_43546 = local_tid_43542;
    int64_t slice_43547 = m_29560;
    int64_t gtid_38275 = sext_i32_i64(group_tid_43543);
    int64_t remnant_43548 = sext_i32_i64(group_tid_43543) - gtid_38275;
    __local char *color_42701;
    
    color_42701 = (__local char *) color_42701_backing_0;
    
    __local char *color_42702;
    
    color_42702 = (__local char *) color_42702_backing_1;
    
    __local char *color_42703;
    
    color_42703 = (__local char *) color_42703_backing_2;
    
    __local char *color_42704;
    
    color_42704 = (__local char *) color_42704_backing_3;
    
    int64_t gtid_38278 = sext_i32_i64(ltid_pre_43546);
    int32_t phys_tid_38279 = local_tid_43542;
    float x_38302 = ((__global float *) images_mem_41421)[gtid_38275 * N_29559 +
                                                          gtid_38278];
    bool isnan_res_38304;
    
    isnan_res_38304 = futrts_isnan32(x_38302);
    
    bool cond_38305 = !isnan_res_38304;
    float defunc_1_f_res_38306;
    
    if (cond_38305) {
        float x_38303 = ((__global
                          float *) defunc_3_map_res_mem_42216)[gtid_38275 *
                                                               N_29559 +
                                                               gtid_38278];
        float defunc_1_f_res_t_res_38307 = x_38302 - x_38303;
        
        defunc_1_f_res_38306 = defunc_1_f_res_t_res_38307;
    } else {
        defunc_1_f_res_38306 = NAN;
    }
    
    bool isnan_res_38308;
    
    isnan_res_38308 = futrts_isnan32(defunc_1_f_res_38306);
    
    bool defunc_0_p_res_38309 = !isnan_res_38308;
    int64_t defunc_0_f_res_38310 = btoi_bool_i64(defunc_0_p_res_38309);
    
    ((__local int64_t *) color_42704)[gtid_38278] = defunc_0_f_res_38310;
    ((__local float *) color_42703)[gtid_38278] = defunc_1_f_res_38306;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t dims_flat_43549 = N_29559;
    int64_t x_38299;
    int64_t x_38300;
    int64_t x_43551;
    int64_t x_43552;
    bool ltid_in_bounds_43554 = slt64(sext_i32_i64(local_tid_43542), N_29559);
    int32_t skip_threads_43555;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_43554) {
            x_38300 = ((volatile __local
                        int64_t *) color_42704)[sext_i32_i64(local_tid_43542)];
            if ((local_tid_43542 - squot32(local_tid_43542, 32) * 32) == 0) {
                x_38299 = x_38300;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_43555 = 1;
        while (slt32(skip_threads_43555, 32)) {
            if (sle32(skip_threads_43555, local_tid_43542 -
                      squot32(local_tid_43542, 32) * 32) &&
                ltid_in_bounds_43554) {
                // read operands
                {
                    x_38299 = ((volatile __local
                                int64_t *) color_42704)[sext_i32_i64(local_tid_43542) -
                                                        sext_i32_i64(skip_threads_43555)];
                }
                // perform operation
                {
                    bool inactive_43556 =
                         slt64(srem64(sext_i32_i64(local_tid_43542), N_29559),
                               sext_i32_i64(local_tid_43542) -
                               sext_i32_i64(local_tid_43542 -
                               skip_threads_43555));
                    
                    if (inactive_43556) {
                        x_38299 = x_38300;
                    }
                    if (!inactive_43556) {
                        int64_t defunc_1_op_res_38301 = add64(x_38299, x_38300);
                        
                        x_38299 = defunc_1_op_res_38301;
                    }
                }
            }
            if (sle32(wave_sizze_43544, skip_threads_43555)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_43555, local_tid_43542 -
                      squot32(local_tid_43542, 32) * 32) &&
                ltid_in_bounds_43554) {
                // write result
                {
                    ((volatile __local
                      int64_t *) color_42704)[sext_i32_i64(local_tid_43542)] =
                        x_38299;
                    x_38300 = x_38299;
                }
            }
            if (sle32(wave_sizze_43544, skip_threads_43555)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_43555 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_43542 - squot32(local_tid_43542, 32) * 32) == 31 &&
            ltid_in_bounds_43554) {
            ((volatile __local
              int64_t *) color_42704)[sext_i32_i64(squot32(local_tid_43542,
                                                           32))] = x_38299;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_43557;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_43542, 32) == 0 && ltid_in_bounds_43554) {
                x_43552 = ((volatile __local
                            int64_t *) color_42704)[sext_i32_i64(local_tid_43542)];
                if ((local_tid_43542 - squot32(local_tid_43542, 32) * 32) ==
                    0) {
                    x_43551 = x_43552;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_43557 = 1;
            while (slt32(skip_threads_43557, 32)) {
                if (sle32(skip_threads_43557, local_tid_43542 -
                          squot32(local_tid_43542, 32) * 32) &&
                    (squot32(local_tid_43542, 32) == 0 &&
                     ltid_in_bounds_43554)) {
                    // read operands
                    {
                        x_43551 = ((volatile __local
                                    int64_t *) color_42704)[sext_i32_i64(local_tid_43542) -
                                                            sext_i32_i64(skip_threads_43557)];
                    }
                    // perform operation
                    {
                        bool inactive_43558 =
                             slt64(srem64(sext_i32_i64(local_tid_43542 * 32 +
                                          32 - 1), N_29559),
                                   sext_i32_i64(local_tid_43542 * 32 + 32 - 1) -
                                   sext_i32_i64((local_tid_43542 -
                                                 skip_threads_43557) * 32 + 32 -
                                   1));
                        
                        if (inactive_43558) {
                            x_43551 = x_43552;
                        }
                        if (!inactive_43558) {
                            int64_t defunc_1_op_res_43553 = add64(x_43551,
                                                                  x_43552);
                            
                            x_43551 = defunc_1_op_res_43553;
                        }
                    }
                }
                if (sle32(wave_sizze_43544, skip_threads_43557)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_43557, local_tid_43542 -
                          squot32(local_tid_43542, 32) * 32) &&
                    (squot32(local_tid_43542, 32) == 0 &&
                     ltid_in_bounds_43554)) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) color_42704)[sext_i32_i64(local_tid_43542)] =
                            x_43551;
                        x_43552 = x_43551;
                    }
                }
                if (sle32(wave_sizze_43544, skip_threads_43557)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_43557 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_43542, 32) == 0 || !ltid_in_bounds_43554)) {
            // read operands
            {
                x_38300 = x_38299;
                x_38299 = ((__local
                            int64_t *) color_42704)[sext_i32_i64(squot32(local_tid_43542,
                                                                         32)) -
                                                    (int64_t) 1];
            }
            // perform operation
            {
                bool inactive_43559 =
                     slt64(srem64(sext_i32_i64(local_tid_43542), N_29559),
                           sext_i32_i64(local_tid_43542) -
                           sext_i32_i64(squot32(local_tid_43542, 32) * 32 - 1));
                
                if (inactive_43559) {
                    x_38299 = x_38300;
                }
                if (!inactive_43559) {
                    int64_t defunc_1_op_res_38301 = add64(x_38299, x_38300);
                    
                    x_38299 = defunc_1_op_res_38301;
                }
            }
            // write final result
            {
                ((__local
                  int64_t *) color_42704)[sext_i32_i64(local_tid_43542)] =
                    x_38299;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_43542, 32) == 0) {
            ((__local int64_t *) color_42704)[sext_i32_i64(local_tid_43542)] =
                x_38300;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t last_res_38311 = ((__local int64_t *) color_42704)[i_29861];
    int32_t defunc_0_f_res_38312 = sext_i64_i32(last_res_38311);
    
    ((__local float *) color_42702)[sext_i32_i64(local_tid_43542)] = NAN;
    barrier(CLK_LOCAL_MEM_FENCE);
    ((__local int32_t *) color_42701)[sext_i32_i64(local_tid_43542)] = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t write_i_38280 = sext_i32_i64(ltid_pre_43546);
    int32_t phys_tid_38281 = local_tid_43542;
    float x_38317 = ((__local float *) color_42703)[write_i_38280];
    int32_t index_primexp_39425 = sext_i64_i32(write_i_38280);
    bool isnan_res_38320;
    
    isnan_res_38320 = futrts_isnan32(x_38317);
    
    bool defunc_0_p_res_38321 = !isnan_res_38320;
    int64_t defunc_1_f_res_38322;
    
    if (defunc_0_p_res_38321) {
        int64_t x_38318 = ((__local int64_t *) color_42704)[write_i_38280];
        int64_t defunc_1_f_res_t_res_38323 = sub64(x_38318, (int64_t) 1);
        
        defunc_1_f_res_38322 = defunc_1_f_res_t_res_38323;
    } else {
        defunc_1_f_res_38322 = (int64_t) -1;
    }
    if (sle64((int64_t) 0, defunc_1_f_res_38322) && slt64(defunc_1_f_res_38322,
                                                          N_29559)) {
        ((__local int32_t *) color_42701)[defunc_1_f_res_38322] =
            index_primexp_39425;
    }
    if (sle64((int64_t) 0, defunc_1_f_res_38322) && slt64(defunc_1_f_res_38322,
                                                          N_29559)) {
        ((__local float *) color_42702)[defunc_1_f_res_38322] = x_38317;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_tid_43542 == 0) {
        ((__global int32_t *) mem_42234)[gtid_38275] = defunc_0_f_res_38312;
    }
    ((__global float *) mem_42238)[gtid_38275 * N_29559 +
                                   sext_i32_i64(local_tid_43542)] = ((__local
                                                                      float *) color_42702)[sext_i32_i64(local_tid_43542)];
    barrier(CLK_LOCAL_MEM_FENCE);
    ((__global int32_t *) mem_42242)[gtid_38275 * N_29559 +
                                     sext_i32_i64(local_tid_43542)] = ((__local
                                                                        int32_t *) color_42701)[sext_i32_i64(local_tid_43542)];
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_2:
    return;
}
__kernel void mainzisegmap_intragroup_38513(__global int *global_failure,
                                            int failure_is_an_option, __global
                                            int64_t *global_failure_args,
                                            __local volatile
                                            int64_t *red_arr_mem_43680_backing_aligned_0,
                                            __local volatile
                                            int64_t *red_arr_mem_43676_backing_aligned_1,
                                            int64_t N_29559, int64_t m_29560,
                                            float hfrac_29565,
                                            int64_t i32_res_29569,
                                            int32_t k2p2_29571, __global
                                            unsigned char *images_mem_41421,
                                            __global
                                            unsigned char *defunc_4_map_res_mem_42266,
                                            __global unsigned char *mem_42319,
                                            __global unsigned char *mem_42322,
                                            __global unsigned char *mem_42325)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_43680_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_43680_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_43676_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43676_backing_aligned_1;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43668;
    int32_t local_tid_43669;
    int64_t group_sizze_43672;
    int32_t wave_sizze_43671;
    int32_t group_tid_43670;
    
    global_tid_43668 = get_global_id(0);
    local_tid_43669 = get_local_id(0);
    group_sizze_43672 = get_local_size(0);
    wave_sizze_43671 = LOCKSTEP_WIDTH;
    group_tid_43670 = get_group_id(0);
    
    int32_t phys_tid_38513 = group_tid_43670;
    int32_t ltid_pre_43673 = local_tid_43669;
    int64_t slice_43674 = m_29560;
    int64_t gtid_38504 = sext_i32_i64(group_tid_43670);
    int64_t remnant_43675 = sext_i32_i64(group_tid_43670) - gtid_38504;
    int32_t defunc_0_f_res_38602;
    int64_t gtid_38507 = sext_i32_i64(ltid_pre_43673);
    int32_t phys_tid_38508 = local_tid_43669;
    __local char *red_arr_mem_43676;
    
    red_arr_mem_43676 = (__local char *) red_arr_mem_43676_backing_0;
    
    float x_38606 = ((__global float *) images_mem_41421)[gtid_38504 * N_29559 +
                                                          gtid_38507];
    bool isnan_res_38607;
    
    isnan_res_38607 = futrts_isnan32(x_38606);
    
    bool cond_38608 = !isnan_res_38607;
    int32_t defunc_0_f_res_38609 = btoi_bool_i32(cond_38608);
    
    ((__local int32_t *) red_arr_mem_43676)[gtid_38507] = defunc_0_f_res_38609;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_43678;
    int32_t skip_waves_43679 = 1;
    int32_t x_38603;
    int32_t x_38604;
    
    offset_43678 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_43669, sext_i64_i32(i32_res_29569))) {
            x_38603 = ((__local
                        int32_t *) red_arr_mem_43676)[sext_i32_i64(local_tid_43669 +
                                                      offset_43678)];
        }
    }
    offset_43678 = 1;
    while (slt32(offset_43678, wave_sizze_43671)) {
        if (slt32(local_tid_43669 + offset_43678,
                  sext_i64_i32(i32_res_29569)) && ((local_tid_43669 -
                                                    squot32(local_tid_43669,
                                                            wave_sizze_43671) *
                                                    wave_sizze_43671) & (2 *
                                                                         offset_43678 -
                                                                         1)) ==
            0) {
            // read array element
            {
                x_38604 = ((volatile __local
                            int32_t *) red_arr_mem_43676)[sext_i32_i64(local_tid_43669 +
                                                          offset_43678)];
            }
            // apply reduction operation
            {
                int32_t defunc_1_op_res_38605 = add32(x_38603, x_38604);
                
                x_38603 = defunc_1_op_res_38605;
            }
            // write result of operation
            {
                ((volatile __local
                  int32_t *) red_arr_mem_43676)[sext_i32_i64(local_tid_43669)] =
                    x_38603;
            }
        }
        offset_43678 *= 2;
    }
    while (slt32(skip_waves_43679, squot32(sext_i64_i32(i32_res_29569) +
                                           wave_sizze_43671 - 1,
                                           wave_sizze_43671))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_43678 = skip_waves_43679 * wave_sizze_43671;
        if (slt32(local_tid_43669 + offset_43678,
                  sext_i64_i32(i32_res_29569)) && ((local_tid_43669 -
                                                    squot32(local_tid_43669,
                                                            wave_sizze_43671) *
                                                    wave_sizze_43671) == 0 &&
                                                   (squot32(local_tid_43669,
                                                            wave_sizze_43671) &
                                                    (2 * skip_waves_43679 -
                                                     1)) == 0)) {
            // read array element
            {
                x_38604 = ((__local
                            int32_t *) red_arr_mem_43676)[sext_i32_i64(local_tid_43669 +
                                                          offset_43678)];
            }
            // apply reduction operation
            {
                int32_t defunc_1_op_res_38605 = add32(x_38603, x_38604);
                
                x_38603 = defunc_1_op_res_38605;
            }
            // write result of operation
            {
                ((__local
                  int32_t *) red_arr_mem_43676)[sext_i32_i64(local_tid_43669)] =
                    x_38603;
            }
        }
        skip_waves_43679 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    defunc_0_f_res_38602 = ((__local int32_t *) red_arr_mem_43676)[(int64_t) 0];
    
    float defunc_0_f_res_38610;
    int64_t gtid_38509 = sext_i32_i64(ltid_pre_43673);
    int32_t phys_tid_38510 = local_tid_43669;
    __local char *red_arr_mem_43680;
    
    red_arr_mem_43680 = (__local char *) red_arr_mem_43680_backing_1;
    
    int32_t index_primexp_39433 = sext_i64_i32(gtid_38509);
    bool cond_38615 = slt32(index_primexp_39433, defunc_0_f_res_38602);
    float defunc_0_f_res_38616;
    
    if (cond_38615) {
        int64_t i_38617 = sext_i32_i64(index_primexp_39433);
        bool x_38618 = sle64((int64_t) 0, i_38617);
        bool y_38619 = slt64(i_38617, N_29559);
        bool bounds_check_38620 = x_38618 && y_38619;
        bool index_certs_38621;
        
        if (!bounds_check_38620) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 17) == -1) {
                    global_failure_args[0] = i_38617;
                    global_failure_args[1] = N_29559;
                    ;
                }
                local_failure = true;
                goto error_2;
            }
        }
        
        float defunc_0_f_res_t_res_38622 = ((__global
                                             float *) defunc_4_map_res_mem_42266)[gtid_38504 *
                                                                                  N_29559 +
                                                                                  i_38617];
        
        defunc_0_f_res_38616 = defunc_0_f_res_t_res_38622;
    } else {
        defunc_0_f_res_38616 = 0.0F;
    }
    
    float defunc_0_f_res_38623 = defunc_0_f_res_38616 * defunc_0_f_res_38616;
    
    ((__local float *) red_arr_mem_43680)[gtid_38509] = defunc_0_f_res_38623;
    
  error_2:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_43682;
    int32_t skip_waves_43683 = 1;
    float x_38611;
    float x_38612;
    
    offset_43682 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_43669, sext_i64_i32(i32_res_29569))) {
            x_38611 = ((__local
                        float *) red_arr_mem_43680)[sext_i32_i64(local_tid_43669 +
                                                    offset_43682)];
        }
    }
    offset_43682 = 1;
    while (slt32(offset_43682, wave_sizze_43671)) {
        if (slt32(local_tid_43669 + offset_43682,
                  sext_i64_i32(i32_res_29569)) && ((local_tid_43669 -
                                                    squot32(local_tid_43669,
                                                            wave_sizze_43671) *
                                                    wave_sizze_43671) & (2 *
                                                                         offset_43682 -
                                                                         1)) ==
            0) {
            // read array element
            {
                x_38612 = ((volatile __local
                            float *) red_arr_mem_43680)[sext_i32_i64(local_tid_43669 +
                                                        offset_43682)];
            }
            // apply reduction operation
            {
                float defunc_1_op_res_38613 = x_38611 + x_38612;
                
                x_38611 = defunc_1_op_res_38613;
            }
            // write result of operation
            {
                ((volatile __local
                  float *) red_arr_mem_43680)[sext_i32_i64(local_tid_43669)] =
                    x_38611;
            }
        }
        offset_43682 *= 2;
    }
    while (slt32(skip_waves_43683, squot32(sext_i64_i32(i32_res_29569) +
                                           wave_sizze_43671 - 1,
                                           wave_sizze_43671))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_43682 = skip_waves_43683 * wave_sizze_43671;
        if (slt32(local_tid_43669 + offset_43682,
                  sext_i64_i32(i32_res_29569)) && ((local_tid_43669 -
                                                    squot32(local_tid_43669,
                                                            wave_sizze_43671) *
                                                    wave_sizze_43671) == 0 &&
                                                   (squot32(local_tid_43669,
                                                            wave_sizze_43671) &
                                                    (2 * skip_waves_43683 -
                                                     1)) == 0)) {
            // read array element
            {
                x_38612 = ((__local
                            float *) red_arr_mem_43680)[sext_i32_i64(local_tid_43669 +
                                                        offset_43682)];
            }
            // apply reduction operation
            {
                float defunc_1_op_res_38613 = x_38611 + x_38612;
                
                x_38611 = defunc_1_op_res_38613;
            }
            // write result of operation
            {
                ((__local
                  float *) red_arr_mem_43680)[sext_i32_i64(local_tid_43669)] =
                    x_38611;
            }
        }
        skip_waves_43683 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    defunc_0_f_res_38610 = ((__local float *) red_arr_mem_43680)[(int64_t) 0];
    
    int32_t r32_arg_38624 = sub32(defunc_0_f_res_38602, k2p2_29571);
    float i32_res_38625 = sitofp_i32_f32(r32_arg_38624);
    float sqrt_arg_38626 = defunc_0_f_res_38610 / i32_res_38625;
    float sqrt_res_38627;
    
    sqrt_res_38627 = futrts_sqrt32(sqrt_arg_38626);
    
    float i32_res_38628 = sitofp_i32_f32(defunc_0_f_res_38602);
    float t32_arg_38629 = hfrac_29565 * i32_res_38628;
    int32_t f32_res_38630 = fptosi_f32_i32(t32_arg_38629);
    
    if (local_tid_43669 == 0) {
        ((__global int32_t *) mem_42319)[gtid_38504] = f32_res_38630;
    }
    if (local_tid_43669 == 0) {
        ((__global int32_t *) mem_42322)[gtid_38504] = defunc_0_f_res_38602;
    }
    if (local_tid_43669 == 0) {
        ((__global float *) mem_42325)[gtid_38504] = sqrt_res_38627;
    }
    
  error_4:
    return;
}
__kernel void mainzisegmap_intragroup_38924(__global int *global_failure,
                                            int failure_is_an_option, __global
                                            int64_t *global_failure_args,
                                            __local volatile
                                            int64_t *red_arr_mem_43965_backing_aligned_0,
                                            __local volatile
                                            int64_t *red_arr_mem_43963_backing_aligned_1,
                                            __local volatile
                                            int64_t *red_arr_mem_43961_backing_aligned_2,
                                            __local volatile
                                            int64_t *color_42716_backing_aligned_3,
                                            int64_t N_29559, int64_t m_29560,
                                            int32_t n_29563,
                                            int64_t iota32_arg_29989, __global
                                            unsigned char *defunc_4_map_res_mem_42265,
                                            __global
                                            unsigned char *defunc_4_map_res_mem_42266,
                                            __global
                                            unsigned char *defunc_4_map_res_mem_42267,
                                            __global
                                            unsigned char *defunc_3_map_res_mem_42344,
                                            __global
                                            unsigned char *defunc_3_map_res_mem_42345,
                                            __global
                                            unsigned char *defunc_3_map_res_mem_42346,
                                            __global
                                            unsigned char *defunc_0_f_res_mem_42383,
                                            __global unsigned char *mem_42390,
                                            __global unsigned char *mem_42399,
                                            __global unsigned char *mem_42402)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_43965_backing_3 =
                          (__local volatile
                           char *) red_arr_mem_43965_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_43963_backing_2 =
                          (__local volatile
                           char *) red_arr_mem_43963_backing_aligned_1;
    __local volatile char *restrict red_arr_mem_43961_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_43961_backing_aligned_2;
    __local volatile char *restrict color_42716_backing_0 = (__local volatile
                                                             char *) color_42716_backing_aligned_3;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43942;
    int32_t local_tid_43943;
    int64_t group_sizze_43946;
    int32_t wave_sizze_43945;
    int32_t group_tid_43944;
    
    global_tid_43942 = get_global_id(0);
    local_tid_43943 = get_local_id(0);
    group_sizze_43946 = get_local_size(0);
    wave_sizze_43945 = LOCKSTEP_WIDTH;
    group_tid_43944 = get_group_id(0);
    
    int32_t phys_tid_38924 = group_tid_43944;
    int32_t ltid_pre_43947 = local_tid_43943;
    int64_t slice_43948 = m_29560;
    int64_t gtid_38915 = sext_i32_i64(group_tid_43944);
    int64_t remnant_43949 = sext_i32_i64(group_tid_43944) - gtid_38915;
    __local char *color_42716;
    
    color_42716 = (__local char *) color_42716_backing_0;
    
    int32_t x_38932 = ((__global
                        int32_t *) defunc_4_map_res_mem_42265)[gtid_38915];
    int32_t x_38933 = ((__global
                        int32_t *) defunc_3_map_res_mem_42345)[gtid_38915];
    float x_38934 = ((__global float *) defunc_3_map_res_mem_42346)[gtid_38915];
    int32_t x_38935 = ((__global
                        int32_t *) defunc_3_map_res_mem_42344)[gtid_38915];
    float x_38936 = ((__global float *) defunc_0_f_res_mem_42383)[gtid_38915];
    int32_t y_38941 = sub32(x_38932, x_38933);
    float i32_res_38942 = sitofp_i32_f32(x_38933);
    float sqrt_res_38943;
    
    sqrt_res_38943 = futrts_sqrt32(i32_res_38942);
    
    float y_38944 = x_38934 * sqrt_res_38943;
    int64_t gtid_38918 = sext_i32_i64(ltid_pre_43947);
    int32_t phys_tid_38919 = local_tid_43943;
    int32_t index_primexp_39446 = sext_i64_i32(gtid_38918);
    bool cond_38957 = sle32(y_38941, index_primexp_39446);
    float defunc_0_f_res_38958;
    
    if (cond_38957) {
        defunc_0_f_res_38958 = 0.0F;
    } else {
        bool cond_38959 = index_primexp_39446 == 0;
        float defunc_0_f_res_f_res_38960;
        
        if (cond_38959) {
            defunc_0_f_res_f_res_38960 = x_38936;
        } else {
            int32_t i_38961 = add32(x_38933, index_primexp_39446);
            int64_t i_38962 = sext_i32_i64(i_38961);
            bool x_38963 = sle64((int64_t) 0, i_38962);
            bool y_38964 = slt64(i_38962, N_29559);
            bool bounds_check_38965 = x_38963 && y_38964;
            bool index_certs_38966;
            
            if (!bounds_check_38965) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 25) ==
                        -1) {
                        global_failure_args[0] = i_38962;
                        global_failure_args[1] = N_29559;
                        ;
                    }
                    local_failure = true;
                    goto error_0;
                }
            }
            
            float x_38967 = ((__global
                              float *) defunc_4_map_res_mem_42266)[gtid_38915 *
                                                                   N_29559 +
                                                                   i_38962];
            int32_t x_38968 = sub32(x_38933, x_38935);
            int32_t i_38969 = add32(x_38968, index_primexp_39446);
            int64_t i_38970 = sext_i32_i64(i_38969);
            bool x_38971 = sle64((int64_t) 0, i_38970);
            bool y_38972 = slt64(i_38970, N_29559);
            bool bounds_check_38973 = x_38971 && y_38972;
            bool index_certs_38974;
            
            if (!bounds_check_38973) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 26) ==
                        -1) {
                        global_failure_args[0] = i_38970;
                        global_failure_args[1] = N_29559;
                        ;
                    }
                    local_failure = true;
                    goto error_0;
                }
            }
            
            float y_38975 = ((__global
                              float *) defunc_4_map_res_mem_42266)[gtid_38915 *
                                                                   N_29559 +
                                                                   i_38970];
            float defunc_0_f_res_f_res_f_res_38976 = x_38967 - y_38975;
            
            defunc_0_f_res_f_res_38960 = defunc_0_f_res_f_res_f_res_38976;
        }
        defunc_0_f_res_38958 = defunc_0_f_res_f_res_38960;
    }
    ((__local float *) color_42716)[gtid_38918] = defunc_0_f_res_38958;
    
  error_0:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t dims_flat_43950 = iota32_arg_29989;
    float x_38953;
    float x_38954;
    float x_43952;
    float x_43953;
    bool ltid_in_bounds_43955 = slt64(sext_i32_i64(local_tid_43943),
                                      iota32_arg_29989);
    int32_t skip_threads_43956;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_43955) {
            x_38954 = ((volatile __local
                        float *) color_42716)[sext_i32_i64(local_tid_43943)];
            if ((local_tid_43943 - squot32(local_tid_43943, 32) * 32) == 0) {
                x_38953 = x_38954;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_43956 = 1;
        while (slt32(skip_threads_43956, 32)) {
            if (sle32(skip_threads_43956, local_tid_43943 -
                      squot32(local_tid_43943, 32) * 32) &&
                ltid_in_bounds_43955) {
                // read operands
                {
                    x_38953 = ((volatile __local
                                float *) color_42716)[sext_i32_i64(local_tid_43943) -
                                                      sext_i32_i64(skip_threads_43956)];
                }
                // perform operation
                {
                    bool inactive_43957 =
                         slt64(srem64(sext_i32_i64(local_tid_43943),
                                      iota32_arg_29989),
                               sext_i32_i64(local_tid_43943) -
                               sext_i32_i64(local_tid_43943 -
                               skip_threads_43956));
                    
                    if (inactive_43957) {
                        x_38953 = x_38954;
                    }
                    if (!inactive_43957) {
                        float defunc_1_op_res_38955 = x_38953 + x_38954;
                        
                        x_38953 = defunc_1_op_res_38955;
                    }
                }
            }
            if (sle32(wave_sizze_43945, skip_threads_43956)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_43956, local_tid_43943 -
                      squot32(local_tid_43943, 32) * 32) &&
                ltid_in_bounds_43955) {
                // write result
                {
                    ((volatile __local
                      float *) color_42716)[sext_i32_i64(local_tid_43943)] =
                        x_38953;
                    x_38954 = x_38953;
                }
            }
            if (sle32(wave_sizze_43945, skip_threads_43956)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_43956 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_43943 - squot32(local_tid_43943, 32) * 32) == 31 &&
            ltid_in_bounds_43955) {
            ((volatile __local
              float *) color_42716)[sext_i32_i64(squot32(local_tid_43943,
                                                         32))] = x_38953;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_43958;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_43943, 32) == 0 && ltid_in_bounds_43955) {
                x_43953 = ((volatile __local
                            float *) color_42716)[sext_i32_i64(local_tid_43943)];
                if ((local_tid_43943 - squot32(local_tid_43943, 32) * 32) ==
                    0) {
                    x_43952 = x_43953;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_43958 = 1;
            while (slt32(skip_threads_43958, 32)) {
                if (sle32(skip_threads_43958, local_tid_43943 -
                          squot32(local_tid_43943, 32) * 32) &&
                    (squot32(local_tid_43943, 32) == 0 &&
                     ltid_in_bounds_43955)) {
                    // read operands
                    {
                        x_43952 = ((volatile __local
                                    float *) color_42716)[sext_i32_i64(local_tid_43943) -
                                                          sext_i32_i64(skip_threads_43958)];
                    }
                    // perform operation
                    {
                        bool inactive_43959 =
                             slt64(srem64(sext_i32_i64(local_tid_43943 * 32 +
                                          32 - 1), iota32_arg_29989),
                                   sext_i32_i64(local_tid_43943 * 32 + 32 - 1) -
                                   sext_i32_i64((local_tid_43943 -
                                                 skip_threads_43958) * 32 + 32 -
                                   1));
                        
                        if (inactive_43959) {
                            x_43952 = x_43953;
                        }
                        if (!inactive_43959) {
                            float defunc_1_op_res_43954 = x_43952 + x_43953;
                            
                            x_43952 = defunc_1_op_res_43954;
                        }
                    }
                }
                if (sle32(wave_sizze_43945, skip_threads_43958)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_43958, local_tid_43943 -
                          squot32(local_tid_43943, 32) * 32) &&
                    (squot32(local_tid_43943, 32) == 0 &&
                     ltid_in_bounds_43955)) {
                    // write result
                    {
                        ((volatile __local
                          float *) color_42716)[sext_i32_i64(local_tid_43943)] =
                            x_43952;
                        x_43953 = x_43952;
                    }
                }
                if (sle32(wave_sizze_43945, skip_threads_43958)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_43958 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_43943, 32) == 0 || !ltid_in_bounds_43955)) {
            // read operands
            {
                x_38954 = x_38953;
                x_38953 = ((__local
                            float *) color_42716)[sext_i32_i64(squot32(local_tid_43943,
                                                                       32)) -
                                                  (int64_t) 1];
            }
            // perform operation
            {
                bool inactive_43960 =
                     slt64(srem64(sext_i32_i64(local_tid_43943),
                                  iota32_arg_29989),
                           sext_i32_i64(local_tid_43943) -
                           sext_i32_i64(squot32(local_tid_43943, 32) * 32 - 1));
                
                if (inactive_43960) {
                    x_38953 = x_38954;
                }
                if (!inactive_43960) {
                    float defunc_1_op_res_38955 = x_38953 + x_38954;
                    
                    x_38953 = defunc_1_op_res_38955;
                }
            }
            // write final result
            {
                ((__local float *) color_42716)[sext_i32_i64(local_tid_43943)] =
                    x_38953;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_43943, 32) == 0) {
            ((__local float *) color_42716)[sext_i32_i64(local_tid_43943)] =
                x_38954;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    bool acc0_38982;
    int32_t acc0_38983;
    float acc0_38984;
    int64_t gtid_38920 = sext_i32_i64(ltid_pre_43947);
    int32_t phys_tid_38921 = local_tid_43943;
    __local char *red_arr_mem_43961;
    
    red_arr_mem_43961 = (__local char *) red_arr_mem_43961_backing_1;
    
    __local char *red_arr_mem_43963;
    
    red_arr_mem_43963 = (__local char *) red_arr_mem_43963_backing_2;
    
    __local char *red_arr_mem_43965;
    
    red_arr_mem_43965 = (__local char *) red_arr_mem_43965_backing_3;
    
    float x_38999 = ((__local float *) color_42716)[gtid_38920];
    float x_39000 = ((__global float *) mem_42390)[gtid_38920];
    int32_t index_primexp_39449 = sext_i64_i32(gtid_38920);
    float defunc_0_f_res_39003 = x_38999 / y_38944;
    bool cond_39004 = slt32(index_primexp_39449, y_38941);
    bool isnan_res_39005;
    
    isnan_res_39005 = futrts_isnan32(defunc_0_f_res_39003);
    
    bool cond_t_res_39006 = !isnan_res_39005;
    bool x_39007 = cond_39004 && cond_t_res_39006;
    float abs_res_39008 = (float) fabs(defunc_0_f_res_39003);
    bool defunc_2_f_res_t_res_39009 = x_39000 < abs_res_39008;
    bool x_39010 = x_39007 && defunc_2_f_res_t_res_39009;
    float defunc_1_f_res_39011;
    
    if (cond_39004) {
        defunc_1_f_res_39011 = defunc_0_f_res_39003;
    } else {
        defunc_1_f_res_39011 = 0.0F;
    }
    ((__local bool *) red_arr_mem_43961)[gtid_38920] = x_39010;
    ((__local int32_t *) red_arr_mem_43963)[gtid_38920] = index_primexp_39449;
    ((__local float *) red_arr_mem_43965)[gtid_38920] = defunc_1_f_res_39011;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_43967;
    int32_t skip_waves_43968 = 1;
    bool x_38985;
    int32_t x_38986;
    float x_38987;
    bool x_38988;
    int32_t x_38989;
    float x_38990;
    
    offset_43967 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_43943, sext_i64_i32(iota32_arg_29989))) {
            x_38985 = ((__local
                        bool *) red_arr_mem_43961)[sext_i32_i64(local_tid_43943 +
                                                   offset_43967)];
            x_38986 = ((__local
                        int32_t *) red_arr_mem_43963)[sext_i32_i64(local_tid_43943 +
                                                      offset_43967)];
            x_38987 = ((__local
                        float *) red_arr_mem_43965)[sext_i32_i64(local_tid_43943 +
                                                    offset_43967)];
        }
    }
    offset_43967 = 1;
    while (slt32(offset_43967, wave_sizze_43945)) {
        if (slt32(local_tid_43943 + offset_43967,
                  sext_i64_i32(iota32_arg_29989)) && ((local_tid_43943 -
                                                       squot32(local_tid_43943,
                                                               wave_sizze_43945) *
                                                       wave_sizze_43945) & (2 *
                                                                            offset_43967 -
                                                                            1)) ==
            0) {
            // read array element
            {
                x_38988 = ((volatile __local
                            bool *) red_arr_mem_43961)[sext_i32_i64(local_tid_43943 +
                                                       offset_43967)];
                x_38989 = ((volatile __local
                            int32_t *) red_arr_mem_43963)[sext_i32_i64(local_tid_43943 +
                                                          offset_43967)];
                x_38990 = ((volatile __local
                            float *) red_arr_mem_43965)[sext_i32_i64(local_tid_43943 +
                                                        offset_43967)];
            }
            // apply reduction operation
            {
                bool defunc_1_op_res_38991;
                int32_t defunc_1_op_res_38992;
                
                if (x_38985) {
                    defunc_1_op_res_38991 = x_38985;
                    defunc_1_op_res_38992 = x_38986;
                } else {
                    bool x_38993 = x_38988 && x_38988;
                    bool x_38994 = !x_38988;
                    bool y_38995 = x_38985 && x_38994;
                    bool defunc_1_op_res_f_res_38996 = x_38993 || y_38995;
                    int32_t defunc_1_op_res_f_res_38997;
                    
                    if (x_38988) {
                        defunc_1_op_res_f_res_38997 = x_38989;
                    } else {
                        defunc_1_op_res_f_res_38997 = x_38986;
                    }
                    defunc_1_op_res_38991 = defunc_1_op_res_f_res_38996;
                    defunc_1_op_res_38992 = defunc_1_op_res_f_res_38997;
                }
                
                float defunc_1_op_res_38998 = x_38987 + x_38990;
                
                x_38985 = defunc_1_op_res_38991;
                x_38986 = defunc_1_op_res_38992;
                x_38987 = defunc_1_op_res_38998;
            }
            // write result of operation
            {
                ((volatile __local
                  bool *) red_arr_mem_43961)[sext_i32_i64(local_tid_43943)] =
                    x_38985;
                ((volatile __local
                  int32_t *) red_arr_mem_43963)[sext_i32_i64(local_tid_43943)] =
                    x_38986;
                ((volatile __local
                  float *) red_arr_mem_43965)[sext_i32_i64(local_tid_43943)] =
                    x_38987;
            }
        }
        offset_43967 *= 2;
    }
    while (slt32(skip_waves_43968, squot32(sext_i64_i32(iota32_arg_29989) +
                                           wave_sizze_43945 - 1,
                                           wave_sizze_43945))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_43967 = skip_waves_43968 * wave_sizze_43945;
        if (slt32(local_tid_43943 + offset_43967,
                  sext_i64_i32(iota32_arg_29989)) && ((local_tid_43943 -
                                                       squot32(local_tid_43943,
                                                               wave_sizze_43945) *
                                                       wave_sizze_43945) == 0 &&
                                                      (squot32(local_tid_43943,
                                                               wave_sizze_43945) &
                                                       (2 * skip_waves_43968 -
                                                        1)) == 0)) {
            // read array element
            {
                x_38988 = ((__local
                            bool *) red_arr_mem_43961)[sext_i32_i64(local_tid_43943 +
                                                       offset_43967)];
                x_38989 = ((__local
                            int32_t *) red_arr_mem_43963)[sext_i32_i64(local_tid_43943 +
                                                          offset_43967)];
                x_38990 = ((__local
                            float *) red_arr_mem_43965)[sext_i32_i64(local_tid_43943 +
                                                        offset_43967)];
            }
            // apply reduction operation
            {
                bool defunc_1_op_res_38991;
                int32_t defunc_1_op_res_38992;
                
                if (x_38985) {
                    defunc_1_op_res_38991 = x_38985;
                    defunc_1_op_res_38992 = x_38986;
                } else {
                    bool x_38993 = x_38988 && x_38988;
                    bool x_38994 = !x_38988;
                    bool y_38995 = x_38985 && x_38994;
                    bool defunc_1_op_res_f_res_38996 = x_38993 || y_38995;
                    int32_t defunc_1_op_res_f_res_38997;
                    
                    if (x_38988) {
                        defunc_1_op_res_f_res_38997 = x_38989;
                    } else {
                        defunc_1_op_res_f_res_38997 = x_38986;
                    }
                    defunc_1_op_res_38991 = defunc_1_op_res_f_res_38996;
                    defunc_1_op_res_38992 = defunc_1_op_res_f_res_38997;
                }
                
                float defunc_1_op_res_38998 = x_38987 + x_38990;
                
                x_38985 = defunc_1_op_res_38991;
                x_38986 = defunc_1_op_res_38992;
                x_38987 = defunc_1_op_res_38998;
            }
            // write result of operation
            {
                ((__local
                  bool *) red_arr_mem_43961)[sext_i32_i64(local_tid_43943)] =
                    x_38985;
                ((__local
                  int32_t *) red_arr_mem_43963)[sext_i32_i64(local_tid_43943)] =
                    x_38986;
                ((__local
                  float *) red_arr_mem_43965)[sext_i32_i64(local_tid_43943)] =
                    x_38987;
            }
        }
        skip_waves_43968 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    acc0_38982 = ((__local bool *) red_arr_mem_43961)[(int64_t) 0];
    acc0_38983 = ((__local int32_t *) red_arr_mem_43963)[(int64_t) 0];
    acc0_38984 = ((__local float *) red_arr_mem_43965)[(int64_t) 0];
    
    bool x_39014 = acc0_38982 && acc0_38982;
    int32_t defunc_1_op_res_f_res_39018;
    
    if (acc0_38982) {
        defunc_1_op_res_f_res_39018 = acc0_38983;
    } else {
        defunc_1_op_res_f_res_39018 = -1;
    }
    
    bool cond_39024 = y_38941 == 0;
    float defunc_0_f_res_39025;
    
    if (cond_39024) {
        defunc_0_f_res_39025 = 0.0F;
    } else {
        float i32_res_39026 = sitofp_i32_f32(y_38941);
        float defunc_0_f_res_f_res_39027 = acc0_38984 / i32_res_39026;
        
        defunc_0_f_res_39025 = defunc_0_f_res_f_res_39027;
    }
    
    bool cond_39028 = !x_39014;
    int32_t fst_breakzq_39029;
    
    if (cond_39028) {
        fst_breakzq_39029 = -1;
    } else {
        bool cond_39030 = slt32(defunc_1_op_res_f_res_39018, y_38941);
        int32_t adjustValInds_res_39031;
        
        if (cond_39030) {
            int32_t i_39032 = add32(x_38933, defunc_1_op_res_f_res_39018);
            int64_t i_39033 = sext_i32_i64(i_39032);
            bool x_39034 = sle64((int64_t) 0, i_39033);
            bool y_39035 = slt64(i_39033, N_29559);
            bool bounds_check_39036 = x_39034 && y_39035;
            bool index_certs_39037;
            
            if (!bounds_check_39036) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 27) ==
                        -1) {
                        global_failure_args[0] = i_39033;
                        global_failure_args[1] = N_29559;
                        ;
                    }
                    local_failure = true;
                    goto error_3;
                }
            }
            
            int32_t x_39038 = ((__global
                                int32_t *) defunc_4_map_res_mem_42267)[gtid_38915 *
                                                                       N_29559 +
                                                                       i_39033];
            int32_t adjustValInds_res_t_res_39039 = sub32(x_39038, n_29563);
            
            adjustValInds_res_39031 = adjustValInds_res_t_res_39039;
        } else {
            adjustValInds_res_39031 = -1;
        }
        fst_breakzq_39029 = adjustValInds_res_39031;
    }
    
    bool cond_39040 = sle32(x_38933, 5);
    bool cond_f_res_39041 = sle32(y_38941, 5);
    bool x_39042 = !cond_39040;
    bool y_39043 = cond_f_res_39041 && x_39042;
    bool cond_39044 = cond_39040 || y_39043;
    int32_t fst_breakzq_39045;
    
    if (cond_39044) {
        fst_breakzq_39045 = -2;
    } else {
        fst_breakzq_39045 = fst_breakzq_39029;
    }
    if (local_tid_43943 == 0) {
        ((__global int32_t *) mem_42399)[gtid_38915] = fst_breakzq_39045;
    }
    if (local_tid_43943 == 0) {
        ((__global float *) mem_42402)[gtid_38915] = defunc_0_f_res_39025;
    }
    
  error_3:
    return;
}
__kernel void mainzisegmap_intragroup_39586(__global int *global_failure,
                                            __local volatile
                                            int64_t *color_42664_backing_aligned_0,
                                            int64_t m_29560, int32_t n_29563,
                                            int64_t i32_res_29575,
                                            int64_t Ty_39574, int64_t Tx_39575,
                                            int64_t gridDim_x_39576,
                                            int64_t gridDim_y_39577,
                                            int64_t gridDim_zz_39578,
                                            int64_t group_sizze_tile3d_39581,
                                            int64_t count_shmem_39582, __global
                                            unsigned char *mem_41435, __global
                                            unsigned char *mem_41440, __global
                                            unsigned char *mem_41515, __global
                                            unsigned char *mem_41576)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict color_42664_backing_0 = (__local volatile
                                                             char *) color_42664_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_42941;
    int32_t local_tid_42942;
    int64_t group_sizze_42945;
    int32_t wave_sizze_42944;
    int32_t group_tid_42943;
    
    global_tid_42941 = get_global_id(0);
    local_tid_42942 = get_local_id(0);
    group_sizze_42945 = get_local_size(0);
    wave_sizze_42944 = LOCKSTEP_WIDTH;
    group_tid_42943 = get_group_id(0);
    
    int32_t gid_flat_39586 = group_tid_42943;
    int32_t ltid_pre_42946 = squot32(local_tid_42942, sext_i64_i32(Ty_39574) *
                                     sext_i64_i32(Tx_39575));
    int32_t ltid_pre_42947 = squot32(local_tid_42942 - squot32(local_tid_42942,
                                                               sext_i64_i32(Ty_39574) *
                                                               sext_i64_i32(Tx_39575)) *
                                     (sext_i64_i32(Ty_39574) *
                                      sext_i64_i32(Tx_39575)),
                                     sext_i64_i32(Tx_39575));
    int32_t ltid_pre_42948 = local_tid_42942 - squot32(local_tid_42942,
                                                       sext_i64_i32(Ty_39574) *
                                                       sext_i64_i32(Tx_39575)) *
            (sext_i64_i32(Ty_39574) * sext_i64_i32(Tx_39575)) -
            squot32(local_tid_42942 - squot32(local_tid_42942,
                                              sext_i64_i32(Ty_39574) *
                                              sext_i64_i32(Tx_39575)) *
                    (sext_i64_i32(Ty_39574) * sext_i64_i32(Tx_39575)),
                    sext_i64_i32(Tx_39575)) * sext_i64_i32(Tx_39575);
    int32_t ltid_pre_42949 = squot32(local_tid_42942, sext_i64_i32(Tx_39575));
    int32_t ltid_pre_42950 = local_tid_42942 - squot32(local_tid_42942,
                                                       sext_i64_i32(Tx_39575)) *
            sext_i64_i32(Tx_39575);
    int32_t ltid_pre_42951 = local_tid_42942;
    int64_t slice_42952 = gridDim_x_39576;
    int64_t slice_42953 = gridDim_y_39577 * slice_42952;
    int64_t slice_42954 = gridDim_zz_39578 * slice_42953;
    int64_t gid_zz_39585 = squot64(sext_i32_i64(group_tid_42943), slice_42953);
    int64_t remnant_42955 = sext_i32_i64(group_tid_42943) - gid_zz_39585 *
            slice_42953;
    int64_t gid_y_39584 = squot64(remnant_42955, slice_42952);
    int64_t remnant_42956 = remnant_42955 - gid_y_39584 * slice_42952;
    int64_t gid_x_39583 = remnant_42956;
    int64_t remnant_42957 = remnant_42956 - gid_x_39583;
    float color_42662[30 * 1 * 1];
    float color_42663[30];
    __local char *color_42664;
    
    color_42664 = (__local char *) color_42664_backing_0;
    
    float color_42665[30];
    int64_t ii_39587 = (int64_t) 30 * gid_zz_39585;
    int64_t jj1_39588 = Ty_39574 * gid_y_39584;
    int64_t jj2_39589 = Tx_39575 * gid_x_39583;
    int64_t ltid_y_39592 = sext_i32_i64(ltid_pre_42949);
    int64_t ltid_x_39590 = sext_i32_i64(ltid_pre_42950);
    int32_t ltid_flat_39591 = local_tid_42942;
    float color_42659[30];
    
    for (int32_t i_41315 = 0; i_41315 < 30; i_41315++) {
        int64_t i_39600 = sext_i32_i64(i_41315);
        
        color_42659[i_39600] = 0.0F;
    }
    for (int64_t i_42959 = 0; i_42959 < (int64_t) 30; i_42959++) {
        color_42665[i_42959] = color_42659[i_42959];
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float loop_mem_41557[30];
    float mem_param_41528[30];
    
    for (int32_t i_1 = 0; i_1 < 30; i_1++)
        mem_param_41528[i_1] = color_42665[i_1];
    for (int32_t i_41317 = 0; i_41317 < n_29563; i_41317++) {
        int64_t i_39605 = sext_i32_i64(i_41317);
        
        for (int64_t i_39608 = 0; i_39608 < count_shmem_39582; i_39608++) {
            int64_t offs_39621 = group_sizze_tile3d_39581 * i_39608;
            int64_t ltid_39611 = sext_i32_i64(ltid_pre_42951);
            int32_t ltid_flat_39610 = local_tid_42942;
            int64_t loc_ind_39622 = ltid_39611 + offs_39621;
            int64_t gtid_39623 = ii_39587 + loc_ind_39622;
            bool cond_39624 = slt64(gtid_39623, m_29560);
            float y_elem_39625;
            
            if (cond_39624) {
                float Y_elem_39627 = ((__global float *) mem_41515)[i_39605 *
                                                                    m_29560 +
                                                                    gtid_39623];
                
                y_elem_39625 = Y_elem_39627;
            } else {
                y_elem_39625 = 0.0F;
            }
            
            bool cond_39629 = slt64(loc_ind_39622, (int64_t) 30);
            int64_t y_loc_ind_39630;
            
            if (cond_39629) {
                y_loc_ind_39630 = loc_ind_39622;
            } else {
                y_loc_ind_39630 = (int64_t) -1;
            }
            if (sle64((int64_t) 0, y_loc_ind_39630) && slt64(y_loc_ind_39630,
                                                             (int64_t) 30)) {
                ((__local float *) color_42664)[y_loc_ind_39630] = y_elem_39625;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        
        int64_t ltid_y_39636 = sext_i32_i64(ltid_pre_42949);
        int64_t ltid_x_39634 = sext_i32_i64(ltid_pre_42950);
        int32_t ltid_flat_39635 = local_tid_42942;
        float color_42660[30];
        int64_t gtid_39663 = jj1_39588 + ltid_y_39636;
        int64_t gtid_39664 = jj2_39589 + ltid_x_39634;
        bool binop_x_39666 = slt64(gtid_39663, i32_res_29575);
        bool binop_y_39667 = slt64(gtid_39664, i32_res_29575);
        bool cond_39668 = binop_x_39666 && binop_y_39667;
        
        if (cond_39668) {
            float x_39671 = ((__global float *) mem_41435)[i_39605 *
                                                           i32_res_29575 +
                                                           gtid_39663];
            float x_39673 = ((__global float *) mem_41440)[i_39605 *
                                                           i32_res_29575 +
                                                           gtid_39664];
            
            for (int32_t i_41316 = 0; i_41316 < 30; i_41316++) {
                int64_t i_39675 = sext_i32_i64(i_41316);
                int64_t gtid_39677 = ii_39587 + i_39675;
                bool cond_39678 = slt64(gtid_39677, m_29560);
                
                if (cond_39678) {
                    float inp_reg_var2zz_39680 = ((__local
                                                   float *) color_42664)[i_39675];
                    float res_reg_var2zz_39681 = mem_param_41528[i_39675];
                    float x_39685 = x_39671 * x_39673;
                    bool isnan_res_39686;
                    
                    isnan_res_39686 = futrts_isnan32(inp_reg_var2zz_39680);
                    
                    float y_39687;
                    
                    if (isnan_res_39686) {
                        y_39687 = 0.0F;
                    } else {
                        y_39687 = 1.0F;
                    }
                    
                    float defunc_2_f_res_39688 = x_39685 * y_39687;
                    float defunc_1_op_res_39692 = res_reg_var2zz_39681 +
                          defunc_2_f_res_39688;
                    
                    mem_param_41528[i_39675] = defunc_1_op_res_39692;
                }
            }
            for (int64_t i_42965 = 0; i_42965 < (int64_t) 30; i_42965++) {
                color_42660[i_42965] = mem_param_41528[i_42965];
            }
        } else {
            for (int64_t i_42966 = 0; i_42966 < (int64_t) 30; i_42966++) {
                color_42660[i_42966] = mem_param_41528[i_42966];
            }
        }
        for (int64_t i_42967 = 0; i_42967 < (int64_t) 30; i_42967++) {
            color_42663[i_42967] = color_42660[i_42967];
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_42960[30];
        
        for (int32_t i_2 = 0; i_2 < 30; i_2++)
            mem_param_tmp_42960[i_2] = color_42663[i_2];
        for (int32_t i_3 = 0; i_3 < 30; i_3++)
            mem_param_41528[i_3] = mem_param_tmp_42960[i_3];
    }
    for (int32_t i_4 = 0; i_4 < 30; i_4++)
        loop_mem_41557[i_4] = mem_param_41528[i_4];
    
    int64_t ltid_zz_39701 = sext_i32_i64(ltid_pre_42946);
    int64_t ltid_y_39700 = sext_i32_i64(ltid_pre_42947);
    int64_t ltid_x_39698 = sext_i32_i64(ltid_pre_42948);
    int32_t ltid_flat_39699 = local_tid_42942;
    float color_42661[30 * 1 * 1];
    
    for (int32_t i_41319 = 0; i_41319 < 30; i_41319++) {
        int64_t i_39710 = sext_i32_i64(i_41319);
        
        for (int64_t i_42969 = 0; i_42969 < (int64_t) 1; i_42969++) {
            color_42661[i_39710 + i_42969] = loop_mem_41557[i_39710 + i_42969];
        }
    }
    for (int64_t i_42970 = 0; i_42970 < (int64_t) 30; i_42970++) {
        for (int64_t i_42971 = 0; i_42971 < (int64_t) 1; i_42971++) {
            for (int64_t i_42972 = 0; i_42972 < (int64_t) 1; i_42972++) {
                color_42662[i_42970 + i_42971 + i_42972] = color_42661[i_42970 +
                                                                       i_42971 +
                                                                       i_42972];
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t reg_tile_i_42973 = squot64(sext_i32_i64(local_tid_42942), Ty_39574 *
                                       Tx_39575);
    int64_t reg_tile_i_42974 = squot64(sext_i32_i64(local_tid_42942) -
                                       squot64(sext_i32_i64(local_tid_42942),
                                               Ty_39574 * Tx_39575) *
                                       (Ty_39574 * Tx_39575), Tx_39575);
    int64_t reg_tile_i_42975 = sext_i32_i64(local_tid_42942) -
            squot64(sext_i32_i64(local_tid_42942), Ty_39574 * Tx_39575) *
            (Ty_39574 * Tx_39575) - squot64(sext_i32_i64(local_tid_42942) -
                                            squot64(sext_i32_i64(local_tid_42942),
                                                    Ty_39574 * Tx_39575) *
                                            (Ty_39574 * Tx_39575), Tx_39575) *
            Tx_39575;
    int64_t tile_dim_start_42976 = (int64_t) 30 * (gid_zz_39585 +
                                                   reg_tile_i_42973);
    int64_t tile_dim_start_42977 = Ty_39574 * gid_y_39584 + reg_tile_i_42974;
    int64_t tile_dim_start_42978 = Tx_39575 * gid_x_39583 + reg_tile_i_42975;
    
    for (int64_t nest_i_42979 = 0; nest_i_42979 < (int64_t) 30;
         nest_i_42979++) {
        for (int64_t nest_i_42980 = 0; nest_i_42980 < (int64_t) 1;
             nest_i_42980++) {
            for (int64_t nest_i_42981 = 0; nest_i_42981 < (int64_t) 1;
                 nest_i_42981++) {
                if ((slt64(tile_dim_start_42976 + nest_i_42979, m_29560) &&
                     slt64(tile_dim_start_42977 + nest_i_42980,
                           i32_res_29575)) && slt64(tile_dim_start_42978 +
                                                    nest_i_42981,
                                                    i32_res_29575)) {
                    ((__global float *) mem_41576)[(tile_dim_start_42976 +
                                                    nest_i_42979) *
                                                   (i32_res_29575 *
                                                    i32_res_29575) +
                                                   (tile_dim_start_42977 +
                                                    nest_i_42980) *
                                                   i32_res_29575 +
                                                   (tile_dim_start_42978 +
                                                    nest_i_42981)] =
                        color_42662[nest_i_42979 + nest_i_42980 + nest_i_42981];
                }
            }
        }
    }
    
  error_4:
    return;
}
__kernel void mainzisegmap_intragroup_39739(__global int *global_failure,
                                            __local volatile
                                            int64_t *color_42682_backing_aligned_0,
                                            __local volatile
                                            int64_t *color_42681_backing_aligned_1,
                                            int64_t N_29559, int64_t m_29560,
                                            int64_t i32_res_29569,
                                            int64_t i32_res_29575,
                                            int64_t gridDim_x_39733,
                                            int64_t gridDim_y_39734,
                                            int64_t full_tiles_39764,
                                            int64_t kk_39971, __global
                                            unsigned char *images_mem_41421,
                                            __global unsigned char *mem_41435,
                                            __global unsigned char *mem_41902)
{
    #define Ty_39720 (mainziTy_39717)
    #define Ry_39721 (mainziRy_39719)
    #define Tx_39722 (mainziTx_39716)
    #define Rx_39723 (mainziRx_39718)
    #define Tk_39724 (mainziTk_39715)
    #define tk_div_tx_39725 (sdiv_up64(mainziTk_39715, mainziTx_39716))
    #define tk_div_ty_39726 (sdiv_up64(mainziTk_39715, mainziTy_39717))
    #define TxRx_39727 (mainziTx_39716 * mainziRx_39718)
    #define TyRy_39728 (mainziTy_39717 * mainziRy_39719)
    #define a_loc_szz_39730 (mainziTk_39715 * (mainziTy_39717 * mainziRy_39719))
    #define b_loc_szz_39732 (mainziRx_39718 * (mainziTx_39716 * mainziTk_39715))
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict color_42682_backing_1 = (__local volatile
                                                             char *) color_42682_backing_aligned_0;
    __local volatile char *restrict color_42681_backing_0 = (__local volatile
                                                             char *) color_42681_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43159;
    int32_t local_tid_43160;
    int64_t group_sizze_43163;
    int32_t wave_sizze_43162;
    int32_t group_tid_43161;
    
    global_tid_43159 = get_global_id(0);
    local_tid_43160 = get_local_id(0);
    group_sizze_43163 = get_local_size(0);
    wave_sizze_43162 = LOCKSTEP_WIDTH;
    group_tid_43161 = get_group_id(0);
    
    int32_t gid_flat_39739 = group_tid_43161;
    int32_t ltid_pre_43164 = squot32(local_tid_43160, sext_i64_i32(Tx_39722));
    int32_t ltid_pre_43165 = local_tid_43160 - squot32(local_tid_43160,
                                                       sext_i64_i32(Tx_39722)) *
            sext_i64_i32(Tx_39722);
    int64_t slice_43166 = gridDim_x_39733;
    int64_t slice_43167 = gridDim_y_39734 * slice_43166;
    int64_t gid_y_39738 = squot64(sext_i32_i64(group_tid_43161), slice_43166);
    int64_t remnant_43168 = sext_i32_i64(group_tid_43161) - gid_y_39738 *
            slice_43166;
    int64_t gid_x_39737 = remnant_43168;
    int64_t remnant_43169 = remnant_43168 - gid_x_39737;
    float color_42677[Ry_39721 * Rx_39723];
    float color_42678[Ry_39721 * Rx_39723];
    float color_42679[Rx_39723];
    float color_42680[Ry_39721];
    __local char *color_42681;
    
    color_42681 = (__local char *) color_42681_backing_0;
    
    __local char *color_42682;
    
    color_42682 = (__local char *) color_42682_backing_1;
    
    int64_t iii_39740 = TyRy_39728 * gid_y_39738;
    int64_t jjj_39741 = TxRx_39727 * gid_x_39737;
    int64_t ltid_y_39744 = sext_i32_i64(ltid_pre_43164);
    int64_t ltid_x_39742 = sext_i32_i64(ltid_pre_43165);
    int32_t ltid_flat_39743 = local_tid_43160;
    float color_42671[Ry_39721 * Rx_39723];
    
    for (int64_t i_39755 = 0; i_39755 < Ry_39721; i_39755++) {
        for (int64_t i_39758 = 0; i_39758 < Rx_39723; i_39758++) {
            color_42671[i_39755 * Rx_39723 + i_39758] = 0.0F;
        }
    }
    for (int64_t i_43172 = 0; i_43172 < Ry_39721; i_43172++) {
        for (int64_t i_43173 = 0; i_43173 < Rx_39723; i_43173++) {
            color_42678[i_43172 * Rx_39723 + i_43173] = color_42671[i_43172 *
                                                                    Rx_39723 +
                                                                    i_43173];
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float loop_mem_41816[Ry_39721 * Rx_39723];
    float mem_param_41730[Ry_39721 * Rx_39723];
    
    for (int32_t i_2 = 0; i_2 < Ry_39721 * Rx_39723; i_2++)
        mem_param_41730[i_2] = color_42678[i_2];
    for (int64_t i_39765 = 0; i_39765 < full_tiles_39764; i_39765++) {
        int64_t kk_39769 = Tk_39724 * i_39765;
        
        for (int64_t i_39770 = 0; i_39770 < Ry_39721; i_39770++) {
            int64_t binop_y_39793 = Ty_39720 * i_39770;
            
            for (int64_t i_39772 = 0; i_39772 < tk_div_tx_39725; i_39772++) {
                int64_t binop_y_39791 = Tx_39722 * i_39772;
                int64_t ltid_x_39774 = sext_i32_i64(ltid_pre_43164);
                int64_t ltid_y_39775 = sext_i32_i64(ltid_pre_43165);
                int32_t ltid_flat_39776 = local_tid_43160;
                int64_t k_39792 = ltid_y_39775 + binop_y_39791;
                int64_t i_39794 = ltid_x_39774 + binop_y_39793;
                int64_t gtid_39795 = iii_39740 + i_39794;
                int64_t A_col_idx_39796 = kk_39769 + k_39792;
                bool cond_39797 = slt64(gtid_39795, m_29560);
                float A_elem_39798;
                
                if (cond_39797) {
                    float A_elem_39800 = ((__global
                                           float *) images_mem_41421)[gtid_39795 *
                                                                      N_29559 +
                                                                      A_col_idx_39796];
                    
                    A_elem_39798 = A_elem_39800;
                } else {
                    A_elem_39798 = 0.0F;
                }
                
                bool cond_39802 = slt64(k_39792, Tk_39724);
                int64_t a_loc_ind_39803;
                
                if (cond_39802) {
                    int64_t binop_y_39804 = Tk_39724 * i_39794;
                    int64_t loc_fi_39805 = k_39792 + binop_y_39804;
                    
                    a_loc_ind_39803 = loc_fi_39805;
                } else {
                    a_loc_ind_39803 = (int64_t) -1;
                }
                if (sle64((int64_t) 0, a_loc_ind_39803) &&
                    slt64(a_loc_ind_39803, a_loc_szz_39730)) {
                    ((__local float *) color_42682)[a_loc_ind_39803] =
                        A_elem_39798;
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        for (int64_t i_39810 = 0; i_39810 < tk_div_ty_39726; i_39810++) {
            int64_t binop_y_39831 = Ty_39720 * i_39810;
            
            for (int64_t i_39812 = 0; i_39812 < Rx_39723; i_39812++) {
                int64_t binop_y_39833 = Tx_39722 * i_39812;
                int64_t ltid_x_39814 = sext_i32_i64(ltid_pre_43164);
                int64_t ltid_y_39815 = sext_i32_i64(ltid_pre_43165);
                int32_t ltid_flat_39816 = local_tid_43160;
                int64_t k_39832 = ltid_x_39814 + binop_y_39831;
                int64_t j_39834 = ltid_y_39815 + binop_y_39833;
                int64_t gtid_39835 = jjj_39741 + j_39834;
                int64_t B_row_idx_39836 = kk_39769 + k_39832;
                bool cond_39837 = slt64(gtid_39835, i32_res_29575);
                float B_elem_39838;
                
                if (cond_39837) {
                    float B_elem_39840 = ((__global
                                           float *) mem_41435)[B_row_idx_39836 *
                                                               i32_res_29575 +
                                                               gtid_39835];
                    
                    B_elem_39838 = B_elem_39840;
                } else {
                    B_elem_39838 = 0.0F;
                }
                
                bool cond_39842 = slt64(k_39832, Tk_39724);
                int64_t b_loc_ind_39843;
                
                if (cond_39842) {
                    int64_t binop_y_39844 = TxRx_39727 * k_39832;
                    int64_t loc_fi_39845 = j_39834 + binop_y_39844;
                    
                    b_loc_ind_39843 = loc_fi_39845;
                } else {
                    b_loc_ind_39843 = (int64_t) -1;
                }
                if (sle64((int64_t) 0, b_loc_ind_39843) &&
                    slt64(b_loc_ind_39843, b_loc_szz_39732)) {
                    ((__local float *) color_42681)[b_loc_ind_39843] =
                        B_elem_39838;
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        
        float loop_mem_41815[Ry_39721 * Rx_39723];
        float mem_param_41787[Ry_39721 * Rx_39723];
        
        for (int32_t i_3 = 0; i_3 < Ry_39721 * Rx_39723; i_3++)
            mem_param_41787[i_3] = mem_param_41730[i_3];
        for (int64_t i_39850 = 0; i_39850 < Tk_39724; i_39850++) {
            int64_t binop_y_39889 = TxRx_39727 * i_39850;
            int64_t ltid_y_39854 = sext_i32_i64(ltid_pre_43164);
            int64_t ltid_x_39852 = sext_i32_i64(ltid_pre_43165);
            int32_t ltid_flat_39853 = local_tid_43160;
            float color_42672[Rx_39723];
            float color_42673[Ry_39721];
            int64_t binop_x_39880 = Ry_39721 * ltid_y_39854;
            
            for (int64_t i_39878 = 0; i_39878 < Ry_39721; i_39878++) {
                int64_t binop_x_39881 = i_39878 + binop_x_39880;
                int64_t binop_y_39882 = Tk_39724 * binop_x_39881;
                int64_t a_loc_ind_39883 = i_39850 + binop_y_39882;
                
                for (int64_t i_43185 = 0; i_43185 < (int64_t) 1; i_43185++) {
                    color_42673[i_39878 + i_43185] = ((__local
                                                       float *) color_42682)[a_loc_ind_39883 +
                                                                             i_43185];
                }
            }
            
            int64_t binop_y_39891 = Rx_39723 * ltid_x_39852;
            
            for (int64_t i_39887 = 0; i_39887 < Rx_39723; i_39887++) {
                int64_t binop_x_39890 = i_39887 + binop_y_39889;
                int64_t b_loc_ind_39892 = binop_x_39890 + binop_y_39891;
                
                for (int64_t i_43187 = 0; i_43187 < (int64_t) 1; i_43187++) {
                    color_42672[i_39887 + i_43187] = ((__local
                                                       float *) color_42681)[b_loc_ind_39892 +
                                                                             i_43187];
                }
            }
            for (int64_t i_43188 = 0; i_43188 < Ry_39721; i_43188++) {
                color_42680[i_43188] = color_42673[i_43188];
            }
            for (int64_t i_43189 = 0; i_43189 < Rx_39723; i_43189++) {
                color_42679[i_43189] = color_42672[i_43189];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int64_t ltid_y_39899 = sext_i32_i64(ltid_pre_43164);
            int64_t ltid_x_39897 = sext_i32_i64(ltid_pre_43165);
            int32_t ltid_flat_39898 = local_tid_43160;
            int64_t binop_y_39942 = Ry_39721 * ltid_y_39899;
            int64_t binop_y_39946 = Rx_39723 * ltid_x_39897;
            
            for (int64_t i_39936 = 0; i_39936 < Ry_39721; i_39936++) {
                int64_t binop_x_39941 = iii_39740 + i_39936;
                int64_t cmpop_x_39943 = binop_x_39941 + binop_y_39942;
                bool binop_x_39944 = slt64(cmpop_x_39943, m_29560);
                
                for (int64_t i_39939 = 0; i_39939 < Rx_39723; i_39939++) {
                    int64_t binop_x_39945 = jjj_39741 + i_39939;
                    int64_t cmpop_x_39947 = binop_x_39945 + binop_y_39946;
                    bool binop_y_39948 = slt64(cmpop_x_39947, i32_res_29575);
                    bool cond_39949 = binop_x_39944 && binop_y_39948;
                    
                    if (cond_39949) {
                        float a_39951 = color_42680[i_39936];
                        float c_39953 = mem_param_41787[i_39936 * Rx_39723 +
                                                        i_39939];
                        bool isnan_res_39956;
                        
                        isnan_res_39956 = futrts_isnan32(a_39951);
                        
                        float defunc_1_f_res_39957;
                        
                        if (isnan_res_39956) {
                            defunc_1_f_res_39957 = 0.0F;
                        } else {
                            float b_39952 = color_42679[i_39939];
                            float defunc_1_f_res_f_res_39958 = a_39951 *
                                  b_39952;
                            
                            defunc_1_f_res_39957 = defunc_1_f_res_f_res_39958;
                        }
                        
                        float defunc_1_op_res_39962 = c_39953 +
                              defunc_1_f_res_39957;
                        
                        mem_param_41787[i_39936 * Rx_39723 + i_39939] =
                            defunc_1_op_res_39962;
                    }
                }
            }
            for (int64_t i_43192 = 0; i_43192 < Ry_39721; i_43192++) {
                for (int64_t i_43193 = 0; i_43193 < Rx_39723; i_43193++) {
                    color_42677[i_43192 * Rx_39723 + i_43193] =
                        mem_param_41787[i_43192 * Rx_39723 + i_43193];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            float mem_param_tmp_43182[Ry_39721 * Rx_39723];
            
            for (int32_t i_4 = 0; i_4 < Ry_39721 * Rx_39723; i_4++)
                mem_param_tmp_43182[i_4] = color_42677[i_4];
            for (int32_t i_5 = 0; i_5 < Ry_39721 * Rx_39723; i_5++)
                mem_param_41787[i_5] = mem_param_tmp_43182[i_5];
        }
        for (int32_t i_6 = 0; i_6 < Ry_39721 * Rx_39723; i_6++)
            loop_mem_41815[i_6] = mem_param_41787[i_6];
        
        float mem_param_tmp_43174[Ry_39721 * Rx_39723];
        
        for (int32_t i_7 = 0; i_7 < Ry_39721 * Rx_39723; i_7++)
            mem_param_tmp_43174[i_7] = loop_mem_41815[i_7];
        for (int32_t i_8 = 0; i_8 < Ry_39721 * Rx_39723; i_8++)
            mem_param_41730[i_8] = mem_param_tmp_43174[i_8];
    }
    for (int32_t i_9 = 0; i_9 < Ry_39721 * Rx_39723; i_9++)
        loop_mem_41816[i_9] = mem_param_41730[i_9];
    for (int64_t i_39972 = 0; i_39972 < Ry_39721; i_39972++) {
        int64_t binop_y_39997 = Ty_39720 * i_39972;
        
        for (int64_t i_39974 = 0; i_39974 < tk_div_tx_39725; i_39974++) {
            int64_t binop_y_39995 = Tx_39722 * i_39974;
            int64_t ltid_x_39976 = sext_i32_i64(ltid_pre_43164);
            int64_t ltid_y_39977 = sext_i32_i64(ltid_pre_43165);
            int32_t ltid_flat_39978 = local_tid_43160;
            int64_t k_39996 = ltid_y_39977 + binop_y_39995;
            int64_t i_39998 = ltid_x_39976 + binop_y_39997;
            int64_t gtid_39999 = iii_39740 + i_39998;
            int64_t A_col_idx_40000 = kk_39971 + k_39996;
            bool binop_x_40001 = slt64(gtid_39999, m_29560);
            bool binop_y_40002 = slt64(A_col_idx_40000, i32_res_29569);
            bool cond_40003 = binop_x_40001 && binop_y_40002;
            float A_elem_40004;
            
            if (cond_40003) {
                float A_elem_40006 = ((__global
                                       float *) images_mem_41421)[gtid_39999 *
                                                                  N_29559 +
                                                                  A_col_idx_40000];
                
                A_elem_40004 = A_elem_40006;
            } else {
                A_elem_40004 = 0.0F;
            }
            
            bool cond_40008 = slt64(k_39996, Tk_39724);
            int64_t a_loc_ind_40009;
            
            if (cond_40008) {
                int64_t binop_y_40010 = Tk_39724 * i_39998;
                int64_t loc_fi_40011 = k_39996 + binop_y_40010;
                
                a_loc_ind_40009 = loc_fi_40011;
            } else {
                a_loc_ind_40009 = (int64_t) -1;
            }
            if (sle64((int64_t) 0, a_loc_ind_40009) && slt64(a_loc_ind_40009,
                                                             a_loc_szz_39730)) {
                ((__local float *) color_42682)[a_loc_ind_40009] = A_elem_40004;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    for (int64_t i_40016 = 0; i_40016 < tk_div_ty_39726; i_40016++) {
        int64_t binop_y_40039 = Ty_39720 * i_40016;
        
        for (int64_t i_40018 = 0; i_40018 < Rx_39723; i_40018++) {
            int64_t binop_y_40041 = Tx_39722 * i_40018;
            int64_t ltid_x_40020 = sext_i32_i64(ltid_pre_43164);
            int64_t ltid_y_40021 = sext_i32_i64(ltid_pre_43165);
            int32_t ltid_flat_40022 = local_tid_43160;
            int64_t k_40040 = ltid_x_40020 + binop_y_40039;
            int64_t j_40042 = ltid_y_40021 + binop_y_40041;
            int64_t gtid_40043 = jjj_39741 + j_40042;
            int64_t B_row_idx_40044 = kk_39971 + k_40040;
            bool binop_x_40045 = slt64(gtid_40043, i32_res_29575);
            bool binop_y_40046 = slt64(B_row_idx_40044, i32_res_29569);
            bool cond_40047 = binop_x_40045 && binop_y_40046;
            float B_elem_40048;
            
            if (cond_40047) {
                float B_elem_40050 = ((__global
                                       float *) mem_41435)[B_row_idx_40044 *
                                                           i32_res_29575 +
                                                           gtid_40043];
                
                B_elem_40048 = B_elem_40050;
            } else {
                B_elem_40048 = 0.0F;
            }
            
            bool cond_40052 = slt64(k_40040, Tk_39724);
            int64_t b_loc_ind_40053;
            
            if (cond_40052) {
                int64_t binop_y_40054 = TxRx_39727 * k_40040;
                int64_t loc_fi_40055 = j_40042 + binop_y_40054;
                
                b_loc_ind_40053 = loc_fi_40055;
            } else {
                b_loc_ind_40053 = (int64_t) -1;
            }
            if (sle64((int64_t) 0, b_loc_ind_40053) && slt64(b_loc_ind_40053,
                                                             b_loc_szz_39732)) {
                ((__local float *) color_42681)[b_loc_ind_40053] = B_elem_40048;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
    float loop_mem_41898[Ry_39721 * Rx_39723];
    float mem_param_41869[Ry_39721 * Rx_39723];
    
    for (int32_t i_10 = 0; i_10 < Ry_39721 * Rx_39723; i_10++)
        mem_param_41869[i_10] = loop_mem_41816[i_10];
    for (int64_t i_40060 = 0; i_40060 < Tk_39724; i_40060++) {
        int64_t cmpop_x_40062 = kk_39971 + i_40060;
        bool cond_40063 = slt64(cmpop_x_40062, i32_res_29569);
        
        if (cond_40063) {
            int64_t binop_y_40101 = TxRx_39727 * i_40060;
            int64_t bytes_41871 = (int64_t) 4 * Ry_39721;
            int64_t bytes_41873 = (int64_t) 4 * Rx_39723;
            int64_t ltid_y_40066 = sext_i32_i64(ltid_pre_43164);
            int64_t ltid_x_40064 = sext_i32_i64(ltid_pre_43165);
            int32_t ltid_flat_40065 = local_tid_43160;
            float color_42674[Rx_39723];
            float color_42675[Ry_39721];
            int64_t binop_x_40092 = Ry_39721 * ltid_y_40066;
            
            for (int64_t i_40090 = 0; i_40090 < Ry_39721; i_40090++) {
                int64_t binop_x_40093 = i_40090 + binop_x_40092;
                int64_t binop_y_40094 = Tk_39724 * binop_x_40093;
                int64_t a_loc_ind_40095 = i_40060 + binop_y_40094;
                
                for (int64_t i_43201 = 0; i_43201 < (int64_t) 1; i_43201++) {
                    color_42675[i_40090 + i_43201] = ((__local
                                                       float *) color_42682)[a_loc_ind_40095 +
                                                                             i_43201];
                }
            }
            
            int64_t binop_y_40103 = Rx_39723 * ltid_x_40064;
            
            for (int64_t i_40099 = 0; i_40099 < Rx_39723; i_40099++) {
                int64_t binop_x_40102 = i_40099 + binop_y_40101;
                int64_t b_loc_ind_40104 = binop_x_40102 + binop_y_40103;
                
                for (int64_t i_43203 = 0; i_43203 < (int64_t) 1; i_43203++) {
                    color_42674[i_40099 + i_43203] = ((__local
                                                       float *) color_42681)[b_loc_ind_40104 +
                                                                             i_43203];
                }
            }
            for (int64_t i_43204 = 0; i_43204 < Ry_39721; i_43204++) {
                color_42680[i_43204] = color_42675[i_43204];
            }
            for (int64_t i_43205 = 0; i_43205 < Rx_39723; i_43205++) {
                color_42679[i_43205] = color_42674[i_43205];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int64_t ltid_y_40111 = sext_i32_i64(ltid_pre_43164);
            int64_t ltid_x_40109 = sext_i32_i64(ltid_pre_43165);
            int32_t ltid_flat_40110 = local_tid_43160;
            int64_t binop_y_40154 = Ry_39721 * ltid_y_40111;
            int64_t binop_y_40158 = Rx_39723 * ltid_x_40109;
            
            for (int64_t i_40148 = 0; i_40148 < Ry_39721; i_40148++) {
                int64_t binop_x_40153 = iii_39740 + i_40148;
                int64_t cmpop_x_40155 = binop_x_40153 + binop_y_40154;
                bool binop_x_40156 = slt64(cmpop_x_40155, m_29560);
                
                for (int64_t i_40151 = 0; i_40151 < Rx_39723; i_40151++) {
                    int64_t binop_x_40157 = jjj_39741 + i_40151;
                    int64_t cmpop_x_40159 = binop_x_40157 + binop_y_40158;
                    bool binop_y_40160 = slt64(cmpop_x_40159, i32_res_29575);
                    bool cond_40161 = binop_x_40156 && binop_y_40160;
                    
                    if (cond_40161) {
                        float a_40163 = color_42680[i_40148];
                        float c_40165 = mem_param_41869[i_40148 * Rx_39723 +
                                                        i_40151];
                        bool isnan_res_40168;
                        
                        isnan_res_40168 = futrts_isnan32(a_40163);
                        
                        float defunc_1_f_res_40169;
                        
                        if (isnan_res_40168) {
                            defunc_1_f_res_40169 = 0.0F;
                        } else {
                            float b_40164 = color_42679[i_40151];
                            float defunc_1_f_res_f_res_40170 = a_40163 *
                                  b_40164;
                            
                            defunc_1_f_res_40169 = defunc_1_f_res_f_res_40170;
                        }
                        
                        float defunc_1_op_res_40174 = c_40165 +
                              defunc_1_f_res_40169;
                        
                        mem_param_41869[i_40148 * Rx_39723 + i_40151] =
                            defunc_1_op_res_40174;
                    }
                }
            }
            for (int64_t i_43208 = 0; i_43208 < Ry_39721; i_43208++) {
                for (int64_t i_43209 = 0; i_43209 < Rx_39723; i_43209++) {
                    color_42678[i_43208 * Rx_39723 + i_43209] =
                        mem_param_41869[i_43208 * Rx_39723 + i_43209];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            for (int64_t i_43210 = 0; i_43210 < Ry_39721; i_43210++) {
                for (int64_t i_43211 = 0; i_43211 < Rx_39723; i_43211++) {
                    color_42677[i_43210 * Rx_39723 + i_43211] =
                        color_42678[i_43210 * Rx_39723 + i_43211];
                }
            }
        } else {
            for (int64_t i_43212 = 0; i_43212 < Ry_39721; i_43212++) {
                for (int64_t i_43213 = 0; i_43213 < Rx_39723; i_43213++) {
                    color_42677[i_43212 * Rx_39723 + i_43213] =
                        mem_param_41869[i_43212 * Rx_39723 + i_43213];
                }
            }
        }
        
        float mem_param_tmp_43198[Ry_39721 * Rx_39723];
        
        for (int32_t i_11 = 0; i_11 < Ry_39721 * Rx_39723; i_11++)
            mem_param_tmp_43198[i_11] = color_42677[i_11];
        for (int32_t i_12 = 0; i_12 < Ry_39721 * Rx_39723; i_12++)
            mem_param_41869[i_12] = mem_param_tmp_43198[i_12];
    }
    for (int32_t i_13 = 0; i_13 < Ry_39721 * Rx_39723; i_13++)
        loop_mem_41898[i_13] = mem_param_41869[i_13];
    
    int64_t reg_tile_i_43214 = squot64(sext_i32_i64(local_tid_43160), Tx_39722);
    int64_t reg_tile_i_43215 = sext_i32_i64(local_tid_43160) -
            squot64(sext_i32_i64(local_tid_43160), Tx_39722) * Tx_39722;
    int64_t tile_dim_start_43216 = Ry_39721 * (Ty_39720 * gid_y_39738 +
                                               reg_tile_i_43214);
    int64_t tile_dim_start_43217 = Rx_39723 * (Tx_39722 * gid_x_39737 +
                                               reg_tile_i_43215);
    
    for (int64_t nest_i_43218 = 0; nest_i_43218 < Ry_39721; nest_i_43218++) {
        for (int64_t nest_i_43219 = 0; nest_i_43219 < Rx_39723;
             nest_i_43219++) {
            if (slt64(tile_dim_start_43216 + nest_i_43218, m_29560) &&
                slt64(tile_dim_start_43217 + nest_i_43219, i32_res_29575)) {
                ((__global float *) mem_41902)[(tile_dim_start_43216 +
                                                nest_i_43218) * i32_res_29575 +
                                               (tile_dim_start_43217 +
                                                nest_i_43219)] =
                    loop_mem_41898[nest_i_43218 * Rx_39723 + nest_i_43219];
            }
        }
    }
    
  error_9:
    return;
    #undef Ty_39720
    #undef Ry_39721
    #undef Tx_39722
    #undef Rx_39723
    #undef Tk_39724
    #undef tk_div_tx_39725
    #undef tk_div_ty_39726
    #undef TxRx_39727
    #undef TyRy_39728
    #undef a_loc_szz_39730
    #undef b_loc_szz_39732
}
__kernel void mainzisegmap_intragroup_40188(__global int *global_failure,
                                            __local volatile
                                            int64_t *color_42687_backing_aligned_0,
                                            int64_t m_29560,
                                            int64_t i32_res_29575,
                                            int64_t num_groups_x_40185,
                                            int64_t num_groups_y_40186,
                                            int64_t num_whole_tiles_40204,
                                            int64_t residual_input_40331,
                                            unsigned char cond_40332, __global
                                            unsigned char *defunc_3_map_res_mem_41914,
                                            __global unsigned char *mem_41944,
                                            __global unsigned char *mem_41974)
{
    #define tile_sizze_40183 (mainzitile_sizze_40182)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict color_42687_backing_0 = (__local volatile
                                                             char *) color_42687_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43306;
    int32_t local_tid_43307;
    int64_t group_sizze_43310;
    int32_t wave_sizze_43309;
    int32_t group_tid_43308;
    
    global_tid_43306 = get_global_id(0);
    local_tid_43307 = get_local_id(0);
    group_sizze_43310 = get_local_size(0);
    wave_sizze_43309 = LOCKSTEP_WIDTH;
    group_tid_43308 = get_group_id(0);
    
    int32_t gid_flat_40188 = group_tid_43308;
    int32_t ltid_pre_43311 = squot32(local_tid_43307,
                                     sext_i64_i32(tile_sizze_40183));
    int32_t ltid_pre_43312 = local_tid_43307 - squot32(local_tid_43307,
                                                       sext_i64_i32(tile_sizze_40183)) *
            sext_i64_i32(tile_sizze_40183);
    int64_t slice_43313 = num_groups_y_40186;
    int64_t slice_43314 = num_groups_x_40185 * slice_43313;
    int64_t gid_x_40180 = squot64(sext_i32_i64(group_tid_43308), slice_43313);
    int64_t remnant_43315 = sext_i32_i64(group_tid_43308) - gid_x_40180 *
            slice_43313;
    int64_t gid_y_40181 = remnant_43315;
    int64_t remnant_43316 = remnant_43315 - gid_y_40181;
    float color_42685[1];
    float color_42686[1];
    __local char *color_42687;
    
    color_42687 = (__local char *) color_42687_backing_0;
    
    int64_t ltid_y_40207 = sext_i32_i64(ltid_pre_43311);
    int64_t ltid_x_40205 = sext_i32_i64(ltid_pre_43312);
    int32_t ltid_flat_40206 = local_tid_43307;
    
    if (slt64(ltid_y_40207, tile_sizze_40183) && slt64(ltid_x_40205,
                                                       tile_sizze_40183)) {
        color_42686[(int64_t) 0] = 0.0F;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t binop_x_40290 = gid_x_40180 * tile_sizze_40183;
    int64_t binop_x_40305 = gid_y_40181 * tile_sizze_40183;
    float accs_mem_41960[1];
    float mem_param_41950[1];
    
    for (int32_t i_1 = 0; i_1 < 1; i_1++)
        mem_param_41950[i_1] = color_42686[i_1];
    for (int64_t tile_id_40216 = 0; tile_id_40216 < num_whole_tiles_40204;
         tile_id_40216++) {
        int64_t binop_x_40288 = tile_sizze_40183 * tile_id_40216;
        int64_t ltid_y_40219 = sext_i32_i64(ltid_pre_43311);
        int64_t ltid_x_40217 = sext_i32_i64(ltid_pre_43312);
        int32_t ltid_flat_40218 = local_tid_43307;
        int64_t j_40289 = ltid_x_40217 + binop_x_40288;
        int64_t gtid_40291 = ltid_y_40219 + binop_x_40290;
        bool binop_x_40296 = slt64(j_40289, i32_res_29575);
        bool binop_y_40297 = slt64(gtid_40291, m_29560);
        bool cond_40298 = binop_x_40296 && binop_y_40297;
        float pre_40299;
        
        if (cond_40298) {
            float x_40300 = ((__global
                              float *) defunc_3_map_res_mem_41914)[gtid_40291 *
                                                                   i32_res_29575 +
                                                                   j_40289];
            
            pre_40299 = x_40300;
        } else {
            pre_40299 = 0.0F;
        }
        ((__local float *) color_42687)[ltid_y_40219 * tile_sizze_40183 +
                                        ltid_x_40217] = pre_40299;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_y_40251 = sext_i32_i64(ltid_pre_43311);
        int64_t ltid_x_40249 = sext_i32_i64(ltid_pre_43312);
        int32_t ltid_flat_40250 = local_tid_43307;
        int64_t gtid_40304 = ltid_y_40251 + binop_x_40290;
        int64_t gtid_40306 = ltid_x_40249 + binop_x_40305;
        float acc_40309 = mem_param_41950[(int64_t) 0];
        bool binop_x_40313 = slt64(gtid_40304, m_29560);
        bool binop_y_40314 = slt64(gtid_40306, i32_res_29575);
        bool cond_40315 = binop_x_40313 && binop_y_40314;
        float acc_40316;
        
        if (cond_40315) {
            float x_40317;
            float redout_41360 = acc_40309;
            
            for (int64_t i_41361 = 0; i_41361 < tile_sizze_40183; i_41361++) {
                float x_40321 = ((__local float *) color_42687)[ltid_y_40251 *
                                                                tile_sizze_40183 +
                                                                i_41361];
                int64_t slice_41407 = binop_x_40288 + i_41361;
                float x_40322 = ((__global float *) mem_41944)[slice_41407 *
                                                               (i32_res_29575 *
                                                                m_29560) +
                                                               gtid_40304 *
                                                               i32_res_29575 +
                                                               gtid_40306];
                float defunc_1_f_res_40323 = x_40321 * x_40322;
                float defunc_1_op_res_40320 = defunc_1_f_res_40323 +
                      redout_41360;
                float redout_tmp_43319 = defunc_1_op_res_40320;
                
                redout_41360 = redout_tmp_43319;
            }
            x_40317 = redout_41360;
            acc_40316 = x_40317;
        } else {
            acc_40316 = acc_40309;
        }
        color_42685[(int64_t) 0] = acc_40316;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_43317[1];
        
        for (int32_t i_2 = 0; i_2 < 1; i_2++)
            mem_param_tmp_43317[i_2] = color_42685[i_2];
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_41950[i_3] = mem_param_tmp_43317[i_3];
    }
    for (int32_t i_4 = 0; i_4 < 1; i_4++)
        accs_mem_41960[i_4] = mem_param_41950[i_4];
    if (cond_40332) {
        color_42685[(int64_t) 0] = accs_mem_41960[(int64_t) 0];
    } else {
        int64_t binop_x_40405 = tile_sizze_40183 * num_whole_tiles_40204;
        int64_t ltid_y_40335 = sext_i32_i64(ltid_pre_43311);
        int64_t ltid_x_40333 = sext_i32_i64(ltid_pre_43312);
        int32_t ltid_flat_40334 = local_tid_43307;
        int64_t j_40406 = ltid_x_40333 + binop_x_40405;
        int64_t gtid_40408 = binop_x_40290 + ltid_y_40335;
        bool binop_x_40413 = slt64(j_40406, i32_res_29575);
        bool binop_y_40414 = slt64(gtid_40408, m_29560);
        bool cond_40415 = binop_x_40413 && binop_y_40414;
        float pre_40416;
        
        if (cond_40415) {
            float x_40417 = ((__global
                              float *) defunc_3_map_res_mem_41914)[gtid_40408 *
                                                                   i32_res_29575 +
                                                                   j_40406];
            
            pre_40416 = x_40417;
        } else {
            pre_40416 = 0.0F;
        }
        ((__local float *) color_42687)[ltid_y_40335 * tile_sizze_40183 +
                                        ltid_x_40333] = pre_40416;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_y_40368 = sext_i32_i64(ltid_pre_43311);
        int64_t ltid_x_40366 = sext_i32_i64(ltid_pre_43312);
        int32_t ltid_flat_40367 = local_tid_43307;
        int64_t gtid_40422 = binop_x_40290 + ltid_y_40368;
        int64_t gtid_40424 = binop_x_40305 + ltid_x_40366;
        float acc_40427 = accs_mem_41960[(int64_t) 0];
        bool binop_x_40431 = slt64(gtid_40422, m_29560);
        bool binop_y_40432 = slt64(gtid_40424, i32_res_29575);
        bool cond_40433 = binop_x_40431 && binop_y_40432;
        float acc_40434;
        
        if (cond_40433) {
            float x_40435;
            float redout_41362 = acc_40427;
            
            for (int64_t i_41363 = 0; i_41363 < residual_input_40331;
                 i_41363++) {
                float x_40439 = ((__local float *) color_42687)[ltid_y_40368 *
                                                                tile_sizze_40183 +
                                                                i_41363];
                int64_t slice_41408 = binop_x_40405 + i_41363;
                float x_40440 = ((__global float *) mem_41944)[slice_41408 *
                                                               (i32_res_29575 *
                                                                m_29560) +
                                                               gtid_40422 *
                                                               i32_res_29575 +
                                                               gtid_40424];
                float defunc_1_f_res_40441 = x_40439 * x_40440;
                float defunc_1_op_res_40438 = defunc_1_f_res_40441 +
                      redout_41362;
                float redout_tmp_43320 = defunc_1_op_res_40438;
                
                redout_41362 = redout_tmp_43320;
            }
            x_40435 = redout_41362;
            acc_40434 = x_40435;
        } else {
            acc_40434 = acc_40427;
        }
        color_42686[(int64_t) 0] = acc_40434;
        barrier(CLK_LOCAL_MEM_FENCE);
        color_42685[(int64_t) 0] = color_42686[(int64_t) 0];
    }
    
    int64_t thread_out_index_43321 = gid_x_40180 * tile_sizze_40183 +
            sext_i32_i64(ltid_pre_43311);
    int64_t thread_out_index_43322 = gid_y_40181 * tile_sizze_40183 +
            sext_i32_i64(ltid_pre_43312);
    
    if (slt64(thread_out_index_43321, m_29560) && slt64(thread_out_index_43322,
                                                        i32_res_29575)) {
        ((__global float *) mem_41974)[thread_out_index_43321 * i32_res_29575 +
                                       thread_out_index_43322] =
            color_42685[(int64_t) 0];
    }
    
  error_5:
    return;
    #undef tile_sizze_40183
}
__kernel void mainzisegmap_intragroup_40480(__global int *global_failure,
                                            __local volatile
                                            int64_t *color_42700_backing_aligned_0,
                                            __local volatile
                                            int64_t *color_42699_backing_aligned_1,
                                            int64_t N_29559, int64_t m_29560,
                                            int64_t i32_res_29575,
                                            int64_t gridDim_x_40474,
                                            int64_t gridDim_y_40475,
                                            int64_t full_tiles_40505,
                                            int64_t kk_40708, __global
                                            unsigned char *defunc_4_map_res_mem_41986,
                                            __global unsigned char *mem_42011,
                                            __global unsigned char *mem_42204)
{
    #define Ty_40461 (mainziTy_40458)
    #define Ry_40462 (mainziRy_40460)
    #define Tx_40463 (mainziTx_40457)
    #define Rx_40464 (mainziRx_40459)
    #define Tk_40465 (mainziTk_40456)
    #define tk_div_tx_40466 (sdiv_up64(mainziTk_40456, mainziTx_40457))
    #define tk_div_ty_40467 (sdiv_up64(mainziTk_40456, mainziTy_40458))
    #define TxRx_40468 (mainziTx_40457 * mainziRx_40459)
    #define TyRy_40469 (mainziTy_40458 * mainziRy_40460)
    #define a_loc_szz_40471 (mainziTk_40456 * (mainziTy_40458 * mainziRy_40460))
    #define b_loc_szz_40473 (mainziRx_40459 * (mainziTx_40457 * mainziTk_40456))
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict color_42700_backing_1 = (__local volatile
                                                             char *) color_42700_backing_aligned_0;
    __local volatile char *restrict color_42699_backing_0 = (__local volatile
                                                             char *) color_42699_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43409;
    int32_t local_tid_43410;
    int64_t group_sizze_43413;
    int32_t wave_sizze_43412;
    int32_t group_tid_43411;
    
    global_tid_43409 = get_global_id(0);
    local_tid_43410 = get_local_id(0);
    group_sizze_43413 = get_local_size(0);
    wave_sizze_43412 = LOCKSTEP_WIDTH;
    group_tid_43411 = get_group_id(0);
    
    int32_t gid_flat_40480 = group_tid_43411;
    int32_t ltid_pre_43414 = squot32(local_tid_43410, sext_i64_i32(Tx_40463));
    int32_t ltid_pre_43415 = local_tid_43410 - squot32(local_tid_43410,
                                                       sext_i64_i32(Tx_40463)) *
            sext_i64_i32(Tx_40463);
    int64_t slice_43416 = gridDim_x_40474;
    int64_t slice_43417 = gridDim_y_40475 * slice_43416;
    int64_t gid_y_40479 = squot64(sext_i32_i64(group_tid_43411), slice_43416);
    int64_t remnant_43418 = sext_i32_i64(group_tid_43411) - gid_y_40479 *
            slice_43416;
    int64_t gid_x_40478 = remnant_43418;
    int64_t remnant_43419 = remnant_43418 - gid_x_40478;
    float color_42695[Ry_40462 * Rx_40464];
    float color_42696[Ry_40462 * Rx_40464];
    float color_42697[Rx_40464];
    float color_42698[Ry_40462];
    __local char *color_42699;
    
    color_42699 = (__local char *) color_42699_backing_0;
    
    __local char *color_42700;
    
    color_42700 = (__local char *) color_42700_backing_1;
    
    int64_t iii_40481 = TyRy_40469 * gid_y_40479;
    int64_t jjj_40482 = TxRx_40468 * gid_x_40478;
    int64_t ltid_y_40485 = sext_i32_i64(ltid_pre_43414);
    int64_t ltid_x_40483 = sext_i32_i64(ltid_pre_43415);
    int32_t ltid_flat_40484 = local_tid_43410;
    float color_42689[Ry_40462 * Rx_40464];
    
    for (int64_t i_40496 = 0; i_40496 < Ry_40462; i_40496++) {
        for (int64_t i_40499 = 0; i_40499 < Rx_40464; i_40499++) {
            color_42689[i_40496 * Rx_40464 + i_40499] = 0.0F;
        }
    }
    for (int64_t i_43422 = 0; i_43422 < Ry_40462; i_43422++) {
        for (int64_t i_43423 = 0; i_43423 < Rx_40464; i_43423++) {
            color_42696[i_43422 * Rx_40464 + i_43423] = color_42689[i_43422 *
                                                                    Rx_40464 +
                                                                    i_43423];
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float loop_mem_42118[Ry_40462 * Rx_40464];
    float mem_param_42032[Ry_40462 * Rx_40464];
    
    for (int32_t i_2 = 0; i_2 < Ry_40462 * Rx_40464; i_2++)
        mem_param_42032[i_2] = color_42696[i_2];
    for (int64_t i_40506 = 0; i_40506 < full_tiles_40505; i_40506++) {
        int64_t kk_40510 = Tk_40465 * i_40506;
        
        for (int64_t i_40511 = 0; i_40511 < Ry_40462; i_40511++) {
            int64_t binop_y_40534 = Ty_40461 * i_40511;
            
            for (int64_t i_40513 = 0; i_40513 < tk_div_tx_40466; i_40513++) {
                int64_t binop_y_40532 = Tx_40463 * i_40513;
                int64_t ltid_x_40515 = sext_i32_i64(ltid_pre_43414);
                int64_t ltid_y_40516 = sext_i32_i64(ltid_pre_43415);
                int32_t ltid_flat_40517 = local_tid_43410;
                int64_t k_40533 = ltid_y_40516 + binop_y_40532;
                int64_t i_40535 = ltid_x_40515 + binop_y_40534;
                int64_t gtid_40536 = iii_40481 + i_40535;
                int64_t A_col_idx_40537 = kk_40510 + k_40533;
                bool cond_40538 = slt64(gtid_40536, m_29560);
                float A_elem_40539;
                
                if (cond_40538) {
                    float A_elem_40541 = ((__global
                                           float *) defunc_4_map_res_mem_41986)[gtid_40536 *
                                                                                i32_res_29575 +
                                                                                A_col_idx_40537];
                    
                    A_elem_40539 = A_elem_40541;
                } else {
                    A_elem_40539 = 0.0F;
                }
                
                bool cond_40543 = slt64(k_40533, Tk_40465);
                int64_t a_loc_ind_40544;
                
                if (cond_40543) {
                    int64_t binop_y_40545 = Tk_40465 * i_40535;
                    int64_t loc_fi_40546 = k_40533 + binop_y_40545;
                    
                    a_loc_ind_40544 = loc_fi_40546;
                } else {
                    a_loc_ind_40544 = (int64_t) -1;
                }
                if (sle64((int64_t) 0, a_loc_ind_40544) &&
                    slt64(a_loc_ind_40544, a_loc_szz_40471)) {
                    ((__local float *) color_42700)[a_loc_ind_40544] =
                        A_elem_40539;
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        for (int64_t i_40551 = 0; i_40551 < tk_div_ty_40467; i_40551++) {
            int64_t binop_y_40572 = Ty_40461 * i_40551;
            
            for (int64_t i_40553 = 0; i_40553 < Rx_40464; i_40553++) {
                int64_t binop_y_40574 = Tx_40463 * i_40553;
                int64_t ltid_x_40555 = sext_i32_i64(ltid_pre_43414);
                int64_t ltid_y_40556 = sext_i32_i64(ltid_pre_43415);
                int32_t ltid_flat_40557 = local_tid_43410;
                int64_t k_40573 = ltid_x_40555 + binop_y_40572;
                int64_t j_40575 = ltid_y_40556 + binop_y_40574;
                int64_t gtid_40576 = jjj_40482 + j_40575;
                int64_t B_row_idx_40577 = kk_40510 + k_40573;
                bool cond_40578 = slt64(gtid_40576, N_29559);
                float B_elem_40579;
                
                if (cond_40578) {
                    float B_elem_40581 = ((__global
                                           float *) mem_42011)[B_row_idx_40577 *
                                                               N_29559 +
                                                               gtid_40576];
                    
                    B_elem_40579 = B_elem_40581;
                } else {
                    B_elem_40579 = 0.0F;
                }
                
                bool cond_40583 = slt64(k_40573, Tk_40465);
                int64_t b_loc_ind_40584;
                
                if (cond_40583) {
                    int64_t binop_y_40585 = TxRx_40468 * k_40573;
                    int64_t loc_fi_40586 = j_40575 + binop_y_40585;
                    
                    b_loc_ind_40584 = loc_fi_40586;
                } else {
                    b_loc_ind_40584 = (int64_t) -1;
                }
                if (sle64((int64_t) 0, b_loc_ind_40584) &&
                    slt64(b_loc_ind_40584, b_loc_szz_40473)) {
                    ((__local float *) color_42699)[b_loc_ind_40584] =
                        B_elem_40579;
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        
        float loop_mem_42117[Ry_40462 * Rx_40464];
        float mem_param_42089[Ry_40462 * Rx_40464];
        
        for (int32_t i_3 = 0; i_3 < Ry_40462 * Rx_40464; i_3++)
            mem_param_42089[i_3] = mem_param_42032[i_3];
        for (int64_t i_40591 = 0; i_40591 < Tk_40465; i_40591++) {
            int64_t binop_y_40630 = TxRx_40468 * i_40591;
            int64_t ltid_y_40595 = sext_i32_i64(ltid_pre_43414);
            int64_t ltid_x_40593 = sext_i32_i64(ltid_pre_43415);
            int32_t ltid_flat_40594 = local_tid_43410;
            float color_42690[Rx_40464];
            float color_42691[Ry_40462];
            int64_t binop_x_40621 = Ry_40462 * ltid_y_40595;
            
            for (int64_t i_40619 = 0; i_40619 < Ry_40462; i_40619++) {
                int64_t binop_x_40622 = i_40619 + binop_x_40621;
                int64_t binop_y_40623 = Tk_40465 * binop_x_40622;
                int64_t a_loc_ind_40624 = i_40591 + binop_y_40623;
                
                for (int64_t i_43435 = 0; i_43435 < (int64_t) 1; i_43435++) {
                    color_42691[i_40619 + i_43435] = ((__local
                                                       float *) color_42700)[a_loc_ind_40624 +
                                                                             i_43435];
                }
            }
            
            int64_t binop_y_40632 = Rx_40464 * ltid_x_40593;
            
            for (int64_t i_40628 = 0; i_40628 < Rx_40464; i_40628++) {
                int64_t binop_x_40631 = i_40628 + binop_y_40630;
                int64_t b_loc_ind_40633 = binop_x_40631 + binop_y_40632;
                
                for (int64_t i_43437 = 0; i_43437 < (int64_t) 1; i_43437++) {
                    color_42690[i_40628 + i_43437] = ((__local
                                                       float *) color_42699)[b_loc_ind_40633 +
                                                                             i_43437];
                }
            }
            for (int64_t i_43438 = 0; i_43438 < Ry_40462; i_43438++) {
                color_42698[i_43438] = color_42691[i_43438];
            }
            for (int64_t i_43439 = 0; i_43439 < Rx_40464; i_43439++) {
                color_42697[i_43439] = color_42690[i_43439];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int64_t ltid_y_40640 = sext_i32_i64(ltid_pre_43414);
            int64_t ltid_x_40638 = sext_i32_i64(ltid_pre_43415);
            int32_t ltid_flat_40639 = local_tid_43410;
            int64_t binop_y_40681 = Ry_40462 * ltid_y_40640;
            int64_t binop_y_40685 = Rx_40464 * ltid_x_40638;
            
            for (int64_t i_40675 = 0; i_40675 < Ry_40462; i_40675++) {
                int64_t binop_x_40680 = iii_40481 + i_40675;
                int64_t cmpop_x_40682 = binop_x_40680 + binop_y_40681;
                bool binop_x_40683 = slt64(cmpop_x_40682, m_29560);
                
                for (int64_t i_40678 = 0; i_40678 < Rx_40464; i_40678++) {
                    int64_t binop_x_40684 = jjj_40482 + i_40678;
                    int64_t cmpop_x_40686 = binop_x_40684 + binop_y_40685;
                    bool binop_y_40687 = slt64(cmpop_x_40686, N_29559);
                    bool cond_40688 = binop_x_40683 && binop_y_40687;
                    
                    if (cond_40688) {
                        float a_40690 = color_42698[i_40675];
                        float b_40691 = color_42697[i_40678];
                        float c_40692 = mem_param_42089[i_40675 * Rx_40464 +
                                                        i_40678];
                        float defunc_1_f_res_40695 = a_40690 * b_40691;
                        float defunc_1_op_res_40699 = c_40692 +
                              defunc_1_f_res_40695;
                        
                        mem_param_42089[i_40675 * Rx_40464 + i_40678] =
                            defunc_1_op_res_40699;
                    }
                }
            }
            for (int64_t i_43442 = 0; i_43442 < Ry_40462; i_43442++) {
                for (int64_t i_43443 = 0; i_43443 < Rx_40464; i_43443++) {
                    color_42695[i_43442 * Rx_40464 + i_43443] =
                        mem_param_42089[i_43442 * Rx_40464 + i_43443];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            float mem_param_tmp_43432[Ry_40462 * Rx_40464];
            
            for (int32_t i_4 = 0; i_4 < Ry_40462 * Rx_40464; i_4++)
                mem_param_tmp_43432[i_4] = color_42695[i_4];
            for (int32_t i_5 = 0; i_5 < Ry_40462 * Rx_40464; i_5++)
                mem_param_42089[i_5] = mem_param_tmp_43432[i_5];
        }
        for (int32_t i_6 = 0; i_6 < Ry_40462 * Rx_40464; i_6++)
            loop_mem_42117[i_6] = mem_param_42089[i_6];
        
        float mem_param_tmp_43424[Ry_40462 * Rx_40464];
        
        for (int32_t i_7 = 0; i_7 < Ry_40462 * Rx_40464; i_7++)
            mem_param_tmp_43424[i_7] = loop_mem_42117[i_7];
        for (int32_t i_8 = 0; i_8 < Ry_40462 * Rx_40464; i_8++)
            mem_param_42032[i_8] = mem_param_tmp_43424[i_8];
    }
    for (int32_t i_9 = 0; i_9 < Ry_40462 * Rx_40464; i_9++)
        loop_mem_42118[i_9] = mem_param_42032[i_9];
    for (int64_t i_40709 = 0; i_40709 < Ry_40462; i_40709++) {
        int64_t binop_y_40734 = Ty_40461 * i_40709;
        
        for (int64_t i_40711 = 0; i_40711 < tk_div_tx_40466; i_40711++) {
            int64_t binop_y_40732 = Tx_40463 * i_40711;
            int64_t ltid_x_40713 = sext_i32_i64(ltid_pre_43414);
            int64_t ltid_y_40714 = sext_i32_i64(ltid_pre_43415);
            int32_t ltid_flat_40715 = local_tid_43410;
            int64_t k_40733 = ltid_y_40714 + binop_y_40732;
            int64_t i_40735 = ltid_x_40713 + binop_y_40734;
            int64_t gtid_40736 = iii_40481 + i_40735;
            int64_t A_col_idx_40737 = kk_40708 + k_40733;
            bool binop_x_40738 = slt64(gtid_40736, m_29560);
            bool binop_y_40739 = slt64(A_col_idx_40737, i32_res_29575);
            bool cond_40740 = binop_x_40738 && binop_y_40739;
            float A_elem_40741;
            
            if (cond_40740) {
                float A_elem_40743 = ((__global
                                       float *) defunc_4_map_res_mem_41986)[gtid_40736 *
                                                                            i32_res_29575 +
                                                                            A_col_idx_40737];
                
                A_elem_40741 = A_elem_40743;
            } else {
                A_elem_40741 = 0.0F;
            }
            
            bool cond_40745 = slt64(k_40733, Tk_40465);
            int64_t a_loc_ind_40746;
            
            if (cond_40745) {
                int64_t binop_y_40747 = Tk_40465 * i_40735;
                int64_t loc_fi_40748 = k_40733 + binop_y_40747;
                
                a_loc_ind_40746 = loc_fi_40748;
            } else {
                a_loc_ind_40746 = (int64_t) -1;
            }
            if (sle64((int64_t) 0, a_loc_ind_40746) && slt64(a_loc_ind_40746,
                                                             a_loc_szz_40471)) {
                ((__local float *) color_42700)[a_loc_ind_40746] = A_elem_40741;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    for (int64_t i_40753 = 0; i_40753 < tk_div_ty_40467; i_40753++) {
        int64_t binop_y_40776 = Ty_40461 * i_40753;
        
        for (int64_t i_40755 = 0; i_40755 < Rx_40464; i_40755++) {
            int64_t binop_y_40778 = Tx_40463 * i_40755;
            int64_t ltid_x_40757 = sext_i32_i64(ltid_pre_43414);
            int64_t ltid_y_40758 = sext_i32_i64(ltid_pre_43415);
            int32_t ltid_flat_40759 = local_tid_43410;
            int64_t k_40777 = ltid_x_40757 + binop_y_40776;
            int64_t j_40779 = ltid_y_40758 + binop_y_40778;
            int64_t gtid_40780 = jjj_40482 + j_40779;
            int64_t B_row_idx_40781 = kk_40708 + k_40777;
            bool binop_x_40782 = slt64(gtid_40780, N_29559);
            bool binop_y_40783 = slt64(B_row_idx_40781, i32_res_29575);
            bool cond_40784 = binop_x_40782 && binop_y_40783;
            float B_elem_40785;
            
            if (cond_40784) {
                float B_elem_40787 = ((__global
                                       float *) mem_42011)[B_row_idx_40781 *
                                                           N_29559 +
                                                           gtid_40780];
                
                B_elem_40785 = B_elem_40787;
            } else {
                B_elem_40785 = 0.0F;
            }
            
            bool cond_40789 = slt64(k_40777, Tk_40465);
            int64_t b_loc_ind_40790;
            
            if (cond_40789) {
                int64_t binop_y_40791 = TxRx_40468 * k_40777;
                int64_t loc_fi_40792 = j_40779 + binop_y_40791;
                
                b_loc_ind_40790 = loc_fi_40792;
            } else {
                b_loc_ind_40790 = (int64_t) -1;
            }
            if (sle64((int64_t) 0, b_loc_ind_40790) && slt64(b_loc_ind_40790,
                                                             b_loc_szz_40473)) {
                ((__local float *) color_42699)[b_loc_ind_40790] = B_elem_40785;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
    float loop_mem_42200[Ry_40462 * Rx_40464];
    float mem_param_42171[Ry_40462 * Rx_40464];
    
    for (int32_t i_10 = 0; i_10 < Ry_40462 * Rx_40464; i_10++)
        mem_param_42171[i_10] = loop_mem_42118[i_10];
    for (int64_t i_40797 = 0; i_40797 < Tk_40465; i_40797++) {
        int64_t cmpop_x_40799 = kk_40708 + i_40797;
        bool cond_40800 = slt64(cmpop_x_40799, i32_res_29575);
        
        if (cond_40800) {
            int64_t binop_y_40838 = TxRx_40468 * i_40797;
            int64_t bytes_42173 = (int64_t) 4 * Ry_40462;
            int64_t bytes_42175 = (int64_t) 4 * Rx_40464;
            int64_t ltid_y_40803 = sext_i32_i64(ltid_pre_43414);
            int64_t ltid_x_40801 = sext_i32_i64(ltid_pre_43415);
            int32_t ltid_flat_40802 = local_tid_43410;
            float color_42692[Rx_40464];
            float color_42693[Ry_40462];
            int64_t binop_x_40829 = Ry_40462 * ltid_y_40803;
            
            for (int64_t i_40827 = 0; i_40827 < Ry_40462; i_40827++) {
                int64_t binop_x_40830 = i_40827 + binop_x_40829;
                int64_t binop_y_40831 = Tk_40465 * binop_x_40830;
                int64_t a_loc_ind_40832 = i_40797 + binop_y_40831;
                
                for (int64_t i_43451 = 0; i_43451 < (int64_t) 1; i_43451++) {
                    color_42693[i_40827 + i_43451] = ((__local
                                                       float *) color_42700)[a_loc_ind_40832 +
                                                                             i_43451];
                }
            }
            
            int64_t binop_y_40840 = Rx_40464 * ltid_x_40801;
            
            for (int64_t i_40836 = 0; i_40836 < Rx_40464; i_40836++) {
                int64_t binop_x_40839 = i_40836 + binop_y_40838;
                int64_t b_loc_ind_40841 = binop_x_40839 + binop_y_40840;
                
                for (int64_t i_43453 = 0; i_43453 < (int64_t) 1; i_43453++) {
                    color_42692[i_40836 + i_43453] = ((__local
                                                       float *) color_42699)[b_loc_ind_40841 +
                                                                             i_43453];
                }
            }
            for (int64_t i_43454 = 0; i_43454 < Ry_40462; i_43454++) {
                color_42698[i_43454] = color_42693[i_43454];
            }
            for (int64_t i_43455 = 0; i_43455 < Rx_40464; i_43455++) {
                color_42697[i_43455] = color_42692[i_43455];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int64_t ltid_y_40848 = sext_i32_i64(ltid_pre_43414);
            int64_t ltid_x_40846 = sext_i32_i64(ltid_pre_43415);
            int32_t ltid_flat_40847 = local_tid_43410;
            int64_t binop_y_40889 = Ry_40462 * ltid_y_40848;
            int64_t binop_y_40893 = Rx_40464 * ltid_x_40846;
            
            for (int64_t i_40883 = 0; i_40883 < Ry_40462; i_40883++) {
                int64_t binop_x_40888 = iii_40481 + i_40883;
                int64_t cmpop_x_40890 = binop_x_40888 + binop_y_40889;
                bool binop_x_40891 = slt64(cmpop_x_40890, m_29560);
                
                for (int64_t i_40886 = 0; i_40886 < Rx_40464; i_40886++) {
                    int64_t binop_x_40892 = jjj_40482 + i_40886;
                    int64_t cmpop_x_40894 = binop_x_40892 + binop_y_40893;
                    bool binop_y_40895 = slt64(cmpop_x_40894, N_29559);
                    bool cond_40896 = binop_x_40891 && binop_y_40895;
                    
                    if (cond_40896) {
                        float a_40898 = color_42698[i_40883];
                        float b_40899 = color_42697[i_40886];
                        float c_40900 = mem_param_42171[i_40883 * Rx_40464 +
                                                        i_40886];
                        float defunc_1_f_res_40903 = a_40898 * b_40899;
                        float defunc_1_op_res_40907 = c_40900 +
                              defunc_1_f_res_40903;
                        
                        mem_param_42171[i_40883 * Rx_40464 + i_40886] =
                            defunc_1_op_res_40907;
                    }
                }
            }
            for (int64_t i_43458 = 0; i_43458 < Ry_40462; i_43458++) {
                for (int64_t i_43459 = 0; i_43459 < Rx_40464; i_43459++) {
                    color_42696[i_43458 * Rx_40464 + i_43459] =
                        mem_param_42171[i_43458 * Rx_40464 + i_43459];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            for (int64_t i_43460 = 0; i_43460 < Ry_40462; i_43460++) {
                for (int64_t i_43461 = 0; i_43461 < Rx_40464; i_43461++) {
                    color_42695[i_43460 * Rx_40464 + i_43461] =
                        color_42696[i_43460 * Rx_40464 + i_43461];
                }
            }
        } else {
            for (int64_t i_43462 = 0; i_43462 < Ry_40462; i_43462++) {
                for (int64_t i_43463 = 0; i_43463 < Rx_40464; i_43463++) {
                    color_42695[i_43462 * Rx_40464 + i_43463] =
                        mem_param_42171[i_43462 * Rx_40464 + i_43463];
                }
            }
        }
        
        float mem_param_tmp_43448[Ry_40462 * Rx_40464];
        
        for (int32_t i_11 = 0; i_11 < Ry_40462 * Rx_40464; i_11++)
            mem_param_tmp_43448[i_11] = color_42695[i_11];
        for (int32_t i_12 = 0; i_12 < Ry_40462 * Rx_40464; i_12++)
            mem_param_42171[i_12] = mem_param_tmp_43448[i_12];
    }
    for (int32_t i_13 = 0; i_13 < Ry_40462 * Rx_40464; i_13++)
        loop_mem_42200[i_13] = mem_param_42171[i_13];
    
    int64_t reg_tile_i_43464 = squot64(sext_i32_i64(local_tid_43410), Tx_40463);
    int64_t reg_tile_i_43465 = sext_i32_i64(local_tid_43410) -
            squot64(sext_i32_i64(local_tid_43410), Tx_40463) * Tx_40463;
    int64_t tile_dim_start_43466 = Ry_40462 * (Ty_40461 * gid_y_40479 +
                                               reg_tile_i_43464);
    int64_t tile_dim_start_43467 = Rx_40464 * (Tx_40463 * gid_x_40478 +
                                               reg_tile_i_43465);
    
    for (int64_t nest_i_43468 = 0; nest_i_43468 < Ry_40462; nest_i_43468++) {
        for (int64_t nest_i_43469 = 0; nest_i_43469 < Rx_40464;
             nest_i_43469++) {
            if (slt64(tile_dim_start_43466 + nest_i_43468, m_29560) &&
                slt64(tile_dim_start_43467 + nest_i_43469, N_29559)) {
                ((__global float *) mem_42204)[(tile_dim_start_43466 +
                                                nest_i_43468) * N_29559 +
                                               (tile_dim_start_43467 +
                                                nest_i_43469)] =
                    loop_mem_42200[nest_i_43468 * Rx_40464 + nest_i_43469];
            }
        }
    }
    
  error_9:
    return;
    #undef Ty_40461
    #undef Ry_40462
    #undef Tx_40463
    #undef Rx_40464
    #undef Tk_40465
    #undef tk_div_tx_40466
    #undef tk_div_ty_40467
    #undef TxRx_40468
    #undef TyRy_40469
    #undef a_loc_szz_40471
    #undef b_loc_szz_40473
}
__kernel void mainzisegmap_intragroup_40914(__global int *global_failure,
                                            int failure_is_an_option, __global
                                            int64_t *global_failure_args,
                                            __local volatile
                                            int64_t *color_42709_backing_aligned_0,
                                            int64_t N_29559, int64_t m_29560,
                                            int32_t n_29563, float hfrac_29565,
                                            int64_t i32_res_29569,
                                            int32_t k2p2_29571,
                                            int64_t segmap_usable_groups_38555,
                                            int64_t num_whole_tiles_40936,
                                            int64_t residual_input_41037,
                                            unsigned char cond_41038, __global
                                            unsigned char *mem_42270, __global
                                            unsigned char *mem_42273, __global
                                            unsigned char *mem_42307, __global
                                            unsigned char *mem_42310, __global
                                            unsigned char *mem_42313)
{
    #define segmap_group_sizze_38554 (mainzisegmap_group_sizze_38519)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict color_42709_backing_0 = (__local volatile
                                                             char *) color_42709_backing_aligned_0;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43655;
    int32_t local_tid_43656;
    int64_t group_sizze_43659;
    int32_t wave_sizze_43658;
    int32_t group_tid_43657;
    
    global_tid_43655 = get_global_id(0);
    local_tid_43656 = get_local_id(0);
    group_sizze_43659 = get_local_size(0);
    wave_sizze_43658 = LOCKSTEP_WIDTH;
    group_tid_43657 = get_group_id(0);
    
    int32_t gid_flat_40914 = group_tid_43657;
    int32_t ltid_pre_43660 = local_tid_43656;
    int64_t slice_43661 = segmap_usable_groups_38555;
    int64_t gid_40913 = sext_i32_i64(group_tid_43657);
    int64_t remnant_43662 = sext_i32_i64(group_tid_43657) - gid_40913;
    float color_42705[1];
    float color_42706[1];
    int32_t color_42707[1];
    int32_t color_42708[1];
    __local char *color_42709;
    
    color_42709 = (__local char *) color_42709_backing_0;
    
    int32_t color_42710[1];
    int64_t binop_x_40921 = segmap_group_sizze_38554 * gid_40913;
    int64_t ltid_40915 = sext_i32_i64(ltid_pre_43660);
    int32_t ltid_flat_40916 = local_tid_43656;
    int64_t gtid_40922 = ltid_40915 + binop_x_40921;
    bool cond_40923 = slt64(gtid_40922, m_29560);
    int32_t pre_40924;
    
    if (cond_40923) {
        int32_t defunc_0_f_res_40926;
        int32_t redout_41370 = 0;
        
        for (int32_t i_41410 = 0; i_41410 < n_29563; i_41410++) {
            int64_t i_41371 = sext_i32_i64(i_41410);
            float x_40930 = ((__global float *) mem_42270)[i_41371 * m_29560 +
                                                           gtid_40922];
            bool isnan_res_40931;
            
            isnan_res_40931 = futrts_isnan32(x_40930);
            
            bool cond_40932 = !isnan_res_40931;
            int32_t defunc_0_f_res_40933 = btoi_bool_i32(cond_40932);
            int32_t defunc_1_op_res_40929 = add32(defunc_0_f_res_40933,
                                                  redout_41370);
            int32_t redout_tmp_43663 = defunc_1_op_res_40929;
            
            redout_41370 = redout_tmp_43663;
        }
        defunc_0_f_res_40926 = redout_41370;
        pre_40924 = defunc_0_f_res_40926;
    } else {
        pre_40924 = 0;
    }
    color_42710[(int64_t) 0] = pre_40924;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t ltid_40937 = sext_i32_i64(ltid_pre_43660);
    int32_t ltid_flat_40938 = local_tid_43656;
    
    color_42706[(int64_t) 0] = 0.0F;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float accs_mem_42289[1];
    float mem_param_42281[1];
    
    for (int32_t i_1 = 0; i_1 < 1; i_1++)
        mem_param_42281[i_1] = color_42706[i_1];
    for (int64_t tile_id_40944 = 0; tile_id_40944 < num_whole_tiles_40936;
         tile_id_40944++) {
        int64_t binop_x_40993 = segmap_group_sizze_38554 * tile_id_40944;
        int64_t ltid_40945 = sext_i32_i64(ltid_pre_43660);
        int32_t ltid_flat_40946 = local_tid_43656;
        int64_t j_40994 = ltid_40945 + binop_x_40993;
        bool cond_40998 = slt64(j_40994, i32_res_29569);
        int32_t pre_40999;
        
        if (cond_40998) {
            int32_t index_primexp_41328 = sext_i64_i32(j_40994);
            
            pre_40999 = index_primexp_41328;
        } else {
            pre_40999 = 0;
        }
        ((__local int32_t *) color_42709)[ltid_40945] = pre_40999;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_40964 = sext_i32_i64(ltid_pre_43660);
        int32_t ltid_flat_40965 = local_tid_43656;
        int64_t gtid_41004 = binop_x_40921 + ltid_40964;
        float acc_41006 = mem_param_42281[(int64_t) 0];
        bool cond_41007 = slt64(gtid_41004, m_29560);
        float acc_41008;
        
        if (cond_41007) {
            int32_t defunc_0_f_res_41005 = color_42710[(int64_t) 0];
            float x_41009;
            float redout_41372 = acc_41006;
            
            for (int64_t i_41373 = 0; i_41373 < segmap_group_sizze_38554;
                 i_41373++) {
                int32_t x_41013 = ((__local int32_t *) color_42709)[i_41373];
                bool cond_41014 = slt32(x_41013, defunc_0_f_res_41005);
                float defunc_0_f_res_41015;
                
                if (cond_41014) {
                    int64_t i_41016 = sext_i32_i64(x_41013);
                    bool x_41017 = sle64((int64_t) 0, i_41016);
                    bool y_41018 = slt64(i_41016, N_29559);
                    bool bounds_check_41019 = x_41017 && y_41018;
                    bool index_certs_41020;
                    
                    if (!bounds_check_41019) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          15) == -1) {
                                global_failure_args[0] = i_41016;
                                global_failure_args[1] = N_29559;
                                ;
                            }
                            local_failure = true;
                            goto error_3;
                        }
                    }
                    
                    float defunc_0_f_res_t_res_41021 = ((__global
                                                         float *) mem_42273)[i_41016 *
                                                                             m_29560 +
                                                                             gtid_41004];
                    
                    defunc_0_f_res_41015 = defunc_0_f_res_t_res_41021;
                } else {
                    defunc_0_f_res_41015 = 0.0F;
                }
                
                float defunc_0_f_res_41022 = defunc_0_f_res_41015 *
                      defunc_0_f_res_41015;
                float defunc_1_op_res_41012 = defunc_0_f_res_41022 +
                      redout_41372;
                float redout_tmp_43666 = defunc_1_op_res_41012;
                
                redout_41372 = redout_tmp_43666;
            }
            x_41009 = redout_41372;
            acc_41008 = x_41009;
        } else {
            acc_41008 = acc_41006;
        }
        color_42705[(int64_t) 0] = acc_41008;
        
      error_3:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_43664[1];
        
        for (int32_t i_2 = 0; i_2 < 1; i_2++)
            mem_param_tmp_43664[i_2] = color_42705[i_2];
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_42281[i_3] = mem_param_tmp_43664[i_3];
    }
    for (int32_t i_4 = 0; i_4 < 1; i_4++)
        accs_mem_42289[i_4] = mem_param_42281[i_4];
    if (cond_41038) {
        color_42705[(int64_t) 0] = accs_mem_42289[(int64_t) 0];
    } else {
        int64_t binop_x_41048 = segmap_group_sizze_38554 *
                num_whole_tiles_40936;
        int64_t ltid_41039 = sext_i32_i64(ltid_pre_43660);
        int32_t ltid_flat_41040 = local_tid_43656;
        int64_t j_41049 = ltid_41039 + binop_x_41048;
        bool cond_41053 = slt64(j_41049, i32_res_29569);
        int32_t pre_41054;
        
        if (cond_41053) {
            int32_t index_primexp_41329 = sext_i64_i32(j_41049);
            
            pre_41054 = index_primexp_41329;
        } else {
            pre_41054 = 0;
        }
        ((__local int32_t *) color_42709)[ltid_41039] = pre_41054;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_41059 = sext_i32_i64(ltid_pre_43660);
        int32_t ltid_flat_41060 = local_tid_43656;
        int64_t gtid_41067 = binop_x_40921 + ltid_41059;
        float acc_41069 = accs_mem_42289[(int64_t) 0];
        bool cond_41070 = slt64(gtid_41067, m_29560);
        float acc_41071;
        
        if (cond_41070) {
            int32_t defunc_0_f_res_41068 = color_42710[(int64_t) 0];
            float x_41072;
            float redout_41374 = acc_41069;
            
            for (int64_t i_41375 = 0; i_41375 < residual_input_41037;
                 i_41375++) {
                int32_t x_41076 = ((__local int32_t *) color_42709)[i_41375];
                bool cond_41077 = slt32(x_41076, defunc_0_f_res_41068);
                float defunc_0_f_res_41078;
                
                if (cond_41077) {
                    int64_t i_41079 = sext_i32_i64(x_41076);
                    bool x_41080 = sle64((int64_t) 0, i_41079);
                    bool y_41081 = slt64(i_41079, N_29559);
                    bool bounds_check_41082 = x_41080 && y_41081;
                    bool index_certs_41083;
                    
                    if (!bounds_check_41082) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          16) == -1) {
                                global_failure_args[0] = i_41079;
                                global_failure_args[1] = N_29559;
                                ;
                            }
                            local_failure = true;
                            goto error_5;
                        }
                    }
                    
                    float defunc_0_f_res_t_res_41084 = ((__global
                                                         float *) mem_42273)[i_41079 *
                                                                             m_29560 +
                                                                             gtid_41067];
                    
                    defunc_0_f_res_41078 = defunc_0_f_res_t_res_41084;
                } else {
                    defunc_0_f_res_41078 = 0.0F;
                }
                
                float defunc_0_f_res_41085 = defunc_0_f_res_41078 *
                      defunc_0_f_res_41078;
                float defunc_1_op_res_41075 = defunc_0_f_res_41085 +
                      redout_41374;
                float redout_tmp_43667 = defunc_1_op_res_41075;
                
                redout_41374 = redout_tmp_43667;
            }
            x_41072 = redout_41374;
            acc_41071 = x_41072;
        } else {
            acc_41071 = acc_41069;
        }
        color_42706[(int64_t) 0] = acc_41071;
        
      error_5:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        color_42705[(int64_t) 0] = color_42706[(int64_t) 0];
    }
    
    int64_t ltid_41088 = sext_i32_i64(ltid_pre_43660);
    int32_t ltid_flat_41089 = local_tid_43656;
    int64_t gtid_41099 = binop_x_40921 + ltid_41088;
    bool cond_41101 = slt64(gtid_41099, m_29560);
    int32_t postlude_41102;
    int32_t postlude_41103;
    float postlude_41104;
    
    if (cond_41101) {
        float defunc_0_f_res_41100 = color_42705[(int64_t) 0];
        int32_t defunc_0_f_res_41105 = color_42710[(int64_t) 0];
        int32_t r32_arg_41106 = sub32(defunc_0_f_res_41105, k2p2_29571);
        float i32_res_41107 = sitofp_i32_f32(r32_arg_41106);
        float sqrt_arg_41108 = defunc_0_f_res_41100 / i32_res_41107;
        float sqrt_res_41109;
        
        sqrt_res_41109 = futrts_sqrt32(sqrt_arg_41108);
        
        float i32_res_41110 = sitofp_i32_f32(defunc_0_f_res_41105);
        float t32_arg_41111 = hfrac_29565 * i32_res_41110;
        int32_t f32_res_41112 = fptosi_f32_i32(t32_arg_41111);
        
        postlude_41102 = f32_res_41112;
        postlude_41103 = defunc_0_f_res_41105;
        postlude_41104 = sqrt_res_41109;
    } else {
        postlude_41102 = 0;
        postlude_41103 = 0;
        postlude_41104 = 0.0F;
    }
    color_42708[(int64_t) 0] = postlude_41102;
    color_42707[(int64_t) 0] = postlude_41103;
    color_42706[(int64_t) 0] = postlude_41104;
    barrier(CLK_LOCAL_MEM_FENCE);
    if (slt64(sext_i32_i64(local_tid_43656) + segmap_group_sizze_38554 *
              sext_i32_i64(group_tid_43657), m_29560)) {
        ((__global int32_t *) mem_42307)[sext_i32_i64(local_tid_43656) +
                                         segmap_group_sizze_38554 *
                                         sext_i32_i64(group_tid_43657)] =
            color_42708[(int64_t) 0];
    }
    if (slt64(sext_i32_i64(local_tid_43656) + segmap_group_sizze_38554 *
              sext_i32_i64(group_tid_43657), m_29560)) {
        ((__global int32_t *) mem_42310)[sext_i32_i64(local_tid_43656) +
                                         segmap_group_sizze_38554 *
                                         sext_i32_i64(group_tid_43657)] =
            color_42707[(int64_t) 0];
    }
    if (slt64(sext_i32_i64(local_tid_43656) + segmap_group_sizze_38554 *
              sext_i32_i64(group_tid_43657), m_29560)) {
        ((__global float *) mem_42313)[sext_i32_i64(local_tid_43656) +
                                       segmap_group_sizze_38554 *
                                       sext_i32_i64(group_tid_43657)] =
            color_42706[(int64_t) 0];
    }
    
  error_7:
    return;
    #undef segmap_group_sizze_38554
}
__kernel void mainzisegmap_intragroup_41120(__global int *global_failure,
                                            int failure_is_an_option, __global
                                            int64_t *global_failure_args,
                                            __local volatile
                                            int64_t *color_42713_backing_aligned_0,
                                            int64_t N_29559, int64_t m_29560,
                                            int64_t i32_res_29960,
                                            int64_t segmap_usable_groups_38798,
                                            int64_t num_whole_tiles_41140,
                                            int64_t residual_input_41251,
                                            unsigned char cond_41252, __global
                                            unsigned char *defunc_4_map_res_mem_42266,
                                            __global
                                            unsigned char *defunc_3_map_res_mem_42344,
                                            __global
                                            unsigned char *defunc_3_map_res_mem_42345,
                                            __global unsigned char *mem_42378)
{
    #define segmap_group_sizze_38797 (mainzisegmap_group_sizze_38774)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict color_42713_backing_0 = (__local volatile
                                                             char *) color_42713_backing_aligned_0;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43854;
    int32_t local_tid_43855;
    int64_t group_sizze_43858;
    int32_t wave_sizze_43857;
    int32_t group_tid_43856;
    
    global_tid_43854 = get_global_id(0);
    local_tid_43855 = get_local_id(0);
    group_sizze_43858 = get_local_size(0);
    wave_sizze_43857 = LOCKSTEP_WIDTH;
    group_tid_43856 = get_group_id(0);
    
    int32_t gid_flat_41120 = group_tid_43856;
    int32_t ltid_pre_43859 = local_tid_43855;
    int64_t slice_43860 = segmap_usable_groups_38798;
    int64_t gid_41119 = sext_i32_i64(group_tid_43856);
    int64_t remnant_43861 = sext_i32_i64(group_tid_43856) - gid_41119;
    float color_42711[1];
    float color_42712[1];
    __local char *color_42713;
    
    color_42713 = (__local char *) color_42713_backing_0;
    
    int32_t color_42714[1];
    int32_t color_42715[1];
    int64_t binop_x_41129 = segmap_group_sizze_38797 * gid_41119;
    int64_t ltid_41121 = sext_i32_i64(ltid_pre_43859);
    int32_t ltid_flat_41122 = local_tid_43855;
    int64_t gtid_41130 = ltid_41121 + binop_x_41129;
    bool cond_41131 = slt64(gtid_41130, m_29560);
    int32_t pre_41132;
    int32_t pre_41133;
    
    if (cond_41131) {
        int32_t x_41134 = ((__global
                            int32_t *) defunc_3_map_res_mem_42345)[gtid_41130];
        int32_t x_41135 = ((__global
                            int32_t *) defunc_3_map_res_mem_42344)[gtid_41130];
        
        pre_41132 = x_41134;
        pre_41133 = x_41135;
    } else {
        pre_41132 = 0;
        pre_41133 = 0;
    }
    color_42715[(int64_t) 0] = pre_41132;
    color_42714[(int64_t) 0] = pre_41133;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t ltid_41141 = sext_i32_i64(ltid_pre_43859);
    int32_t ltid_flat_41142 = local_tid_43855;
    
    color_42712[(int64_t) 0] = 0.0F;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float accs_mem_42367[1];
    float mem_param_42359[1];
    
    for (int32_t i_1 = 0; i_1 < 1; i_1++)
        mem_param_42359[i_1] = color_42712[i_1];
    for (int64_t tile_id_41148 = 0; tile_id_41148 < num_whole_tiles_41140;
         tile_id_41148++) {
        int64_t binop_x_41201 = segmap_group_sizze_38797 * tile_id_41148;
        int64_t ltid_41149 = sext_i32_i64(ltid_pre_43859);
        int32_t ltid_flat_41150 = local_tid_43855;
        int64_t j_41202 = ltid_41149 + binop_x_41201;
        bool cond_41207 = slt64(j_41202, i32_res_29960);
        int32_t pre_41208;
        
        if (cond_41207) {
            int32_t index_primexp_41330 = sext_i64_i32(j_41202);
            int32_t tile_elem_41209 = index_primexp_41330;
            
            pre_41208 = tile_elem_41209;
        } else {
            pre_41208 = 0;
        }
        ((__local int32_t *) color_42713)[ltid_41149] = pre_41208;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_41169 = sext_i32_i64(ltid_pre_43859);
        int32_t ltid_flat_41170 = local_tid_43855;
        int64_t gtid_41213 = binop_x_41129 + ltid_41169;
        float acc_41216 = mem_param_42359[(int64_t) 0];
        bool cond_41217 = slt64(gtid_41213, m_29560);
        float acc_41218;
        
        if (cond_41217) {
            int32_t x_41214 = color_42715[(int64_t) 0];
            int32_t x_41215 = color_42714[(int64_t) 0];
            float x_41219;
            float redout_41376 = acc_41216;
            
            for (int64_t i_41377 = 0; i_41377 < segmap_group_sizze_38797;
                 i_41377++) {
                int32_t x_41223 = ((__local int32_t *) color_42713)[i_41377];
                bool cond_41224 = slt32(x_41223, x_41215);
                float defunc_0_f_res_41225;
                
                if (cond_41224) {
                    int32_t x_41226 = add32(x_41214, x_41223);
                    int32_t x_41227 = sub32(x_41226, x_41215);
                    int32_t i_41228 = add32(1, x_41227);
                    int64_t i_41229 = sext_i32_i64(i_41228);
                    bool x_41230 = sle64((int64_t) 0, i_41229);
                    bool y_41231 = slt64(i_41229, N_29559);
                    bool bounds_check_41232 = x_41230 && y_41231;
                    bool index_certs_41233;
                    
                    if (!bounds_check_41232) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          20) == -1) {
                                global_failure_args[0] = i_41229;
                                global_failure_args[1] = N_29559;
                                ;
                            }
                            local_failure = true;
                            goto error_3;
                        }
                    }
                    
                    float defunc_0_f_res_t_res_41234 = ((__global
                                                         float *) defunc_4_map_res_mem_42266)[gtid_41213 *
                                                                                              N_29559 +
                                                                                              i_41229];
                    
                    defunc_0_f_res_41225 = defunc_0_f_res_t_res_41234;
                } else {
                    defunc_0_f_res_41225 = 0.0F;
                }
                
                float defunc_1_op_res_41222 = defunc_0_f_res_41225 +
                      redout_41376;
                float redout_tmp_43864 = defunc_1_op_res_41222;
                
                redout_41376 = redout_tmp_43864;
            }
            x_41219 = redout_41376;
            acc_41218 = x_41219;
        } else {
            acc_41218 = acc_41216;
        }
        color_42711[(int64_t) 0] = acc_41218;
        
      error_3:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_43862[1];
        
        for (int32_t i_2 = 0; i_2 < 1; i_2++)
            mem_param_tmp_43862[i_2] = color_42711[i_2];
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_42359[i_3] = mem_param_tmp_43862[i_3];
    }
    for (int32_t i_4 = 0; i_4 < 1; i_4++)
        accs_mem_42367[i_4] = mem_param_42359[i_4];
    if (cond_41252) {
        color_42711[(int64_t) 0] = accs_mem_42367[(int64_t) 0];
    } else {
        int64_t binop_x_41262 = segmap_group_sizze_38797 *
                num_whole_tiles_41140;
        int64_t ltid_41253 = sext_i32_i64(ltid_pre_43859);
        int32_t ltid_flat_41254 = local_tid_43855;
        int64_t j_41263 = ltid_41253 + binop_x_41262;
        bool cond_41268 = slt64(j_41263, i32_res_29960);
        int32_t pre_41269;
        
        if (cond_41268) {
            int32_t index_primexp_41331 = sext_i64_i32(j_41263);
            int32_t tile_elem_41270 = index_primexp_41331;
            
            pre_41269 = tile_elem_41270;
        } else {
            pre_41269 = 0;
        }
        ((__local int32_t *) color_42713)[ltid_41253] = pre_41269;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_41274 = sext_i32_i64(ltid_pre_43859);
        int32_t ltid_flat_41275 = local_tid_43855;
        int64_t gtid_41282 = binop_x_41129 + ltid_41274;
        float acc_41285 = accs_mem_42367[(int64_t) 0];
        bool cond_41286 = slt64(gtid_41282, m_29560);
        float acc_41287;
        
        if (cond_41286) {
            int32_t x_41283 = color_42715[(int64_t) 0];
            int32_t x_41284 = color_42714[(int64_t) 0];
            float x_41288;
            float redout_41378 = acc_41285;
            
            for (int64_t i_41379 = 0; i_41379 < residual_input_41251;
                 i_41379++) {
                int32_t x_41292 = ((__local int32_t *) color_42713)[i_41379];
                bool cond_41293 = slt32(x_41292, x_41284);
                float defunc_0_f_res_41294;
                
                if (cond_41293) {
                    int32_t x_41295 = add32(x_41283, x_41292);
                    int32_t x_41296 = sub32(x_41295, x_41284);
                    int32_t i_41297 = add32(1, x_41296);
                    int64_t i_41298 = sext_i32_i64(i_41297);
                    bool x_41299 = sle64((int64_t) 0, i_41298);
                    bool y_41300 = slt64(i_41298, N_29559);
                    bool bounds_check_41301 = x_41299 && y_41300;
                    bool index_certs_41302;
                    
                    if (!bounds_check_41301) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          21) == -1) {
                                global_failure_args[0] = i_41298;
                                global_failure_args[1] = N_29559;
                                ;
                            }
                            local_failure = true;
                            goto error_5;
                        }
                    }
                    
                    float defunc_0_f_res_t_res_41303 = ((__global
                                                         float *) defunc_4_map_res_mem_42266)[gtid_41282 *
                                                                                              N_29559 +
                                                                                              i_41298];
                    
                    defunc_0_f_res_41294 = defunc_0_f_res_t_res_41303;
                } else {
                    defunc_0_f_res_41294 = 0.0F;
                }
                
                float defunc_1_op_res_41291 = defunc_0_f_res_41294 +
                      redout_41378;
                float redout_tmp_43865 = defunc_1_op_res_41291;
                
                redout_41378 = redout_tmp_43865;
            }
            x_41288 = redout_41378;
            acc_41287 = x_41288;
        } else {
            acc_41287 = acc_41285;
        }
        color_42712[(int64_t) 0] = acc_41287;
        
      error_5:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        color_42711[(int64_t) 0] = color_42712[(int64_t) 0];
    }
    if (slt64(sext_i32_i64(local_tid_43855) + segmap_group_sizze_38797 *
              sext_i32_i64(group_tid_43856), m_29560)) {
        ((__global float *) mem_42378)[sext_i32_i64(local_tid_43855) +
                                       segmap_group_sizze_38797 *
                                       sext_i32_i64(group_tid_43856)] =
            color_42711[(int64_t) 0];
    }
    
  error_6:
    return;
    #undef segmap_group_sizze_38797
}
__kernel void mainzisegred_large_36970(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_43025_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_43023_backing_aligned_1,
                                       int64_t N_29559, int64_t m_29560,
                                       int64_t i32_res_29569,
                                       int64_t i32_res_29575,
                                       int64_t num_groups_37109,
                                       int64_t groups_per_segment_43009,
                                       int64_t elements_per_thread_43010,
                                       int64_t virt_num_groups_43011,
                                       int64_t threads_per_segment_43013,
                                       __global unsigned char *images_mem_41421,
                                       __global
                                       unsigned char *binop_p_mem_41432,
                                       __global unsigned char *mem_41579,
                                       __global unsigned char *mem_41585,
                                       __global
                                       unsigned char *segred_tmp_mem_43014,
                                       __global
                                       unsigned char *mainzicounter_mem_43016)
{
    #define segred_group_sizze_37108 (mainzisegred_group_sizze_36964)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_43025_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_43025_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_43023_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43023_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43018;
    int32_t local_tid_43019;
    int64_t group_sizze_43022;
    int32_t wave_sizze_43021;
    int32_t group_tid_43020;
    
    global_tid_43018 = get_global_id(0);
    local_tid_43019 = get_local_id(0);
    group_sizze_43022 = get_local_size(0);
    wave_sizze_43021 = LOCKSTEP_WIDTH;
    group_tid_43020 = get_group_id(0);
    
    int32_t phys_tid_36970 = global_tid_43018;
    __local char *red_arr_mem_43023;
    
    red_arr_mem_43023 = (__local char *) red_arr_mem_43023_backing_0;
    
    __local char *sync_arr_mem_43025;
    
    sync_arr_mem_43025 = (__local char *) sync_arr_mem_43025_backing_1;
    
    int32_t phys_group_id_43027;
    
    phys_group_id_43027 = get_group_id(0);
    for (int32_t i_43028 = 0; i_43028 <
         sdiv_up32(sext_i64_i32(virt_num_groups_43011) - phys_group_id_43027,
                   sext_i64_i32(num_groups_37109)); i_43028++) {
        int32_t virt_group_id_43029 = phys_group_id_43027 + i_43028 *
                sext_i64_i32(num_groups_37109);
        int32_t flat_segment_id_43030 = squot32(virt_group_id_43029,
                                                sext_i64_i32(groups_per_segment_43009));
        int64_t global_tid_43031 = srem64(sext_i32_i64(virt_group_id_43029) *
                                          segred_group_sizze_37108 +
                                          sext_i32_i64(local_tid_43019),
                                          segred_group_sizze_37108 *
                                          groups_per_segment_43009);
        int64_t slice_43032 = i32_res_29575;
        int64_t slice_43033 = i32_res_29575 * slice_43032;
        int64_t slice_43034 = m_29560 * slice_43033;
        int64_t gtid_36957 = squot64(sext_i32_i64(flat_segment_id_43030),
                                     slice_43033);
        int64_t remnant_43035 = sext_i32_i64(flat_segment_id_43030) -
                gtid_36957 * slice_43033;
        int64_t gtid_36958 = squot64(remnant_43035, slice_43032);
        int64_t remnant_43036 = remnant_43035 - gtid_36958 * slice_43032;
        int64_t gtid_36959 = remnant_43036;
        int64_t remnant_43037 = remnant_43036 - gtid_36959;
        int64_t gtid_36969;
        float x_acc_43038;
        int64_t chunk_sizze_43039 = smin64(elements_per_thread_43010,
                                           sdiv_up64(i32_res_29569 -
                                                     global_tid_43031,
                                                     threads_per_segment_43013));
        float x_37112;
        float x_37113;
        
        // neutral-initialise the accumulators
        {
            x_acc_43038 = 0.0F;
        }
        for (int64_t i_43043 = 0; i_43043 < chunk_sizze_43039; i_43043++) {
            gtid_36969 = global_tid_43031 + threads_per_segment_43013 * i_43043;
            // apply map function
            {
                float x_37118 = ((__global
                                  float *) images_mem_41421)[gtid_36957 *
                                                             N_29559 +
                                                             gtid_36969];
                float x_37119 = ((__global
                                  float *) binop_p_mem_41432)[gtid_36958 *
                                                              N_29559 +
                                                              gtid_36969];
                float x_37120 = ((__global float *) mem_41579)[gtid_36959 *
                                                               N_29559 +
                                                               gtid_36969];
                float x_37121 = x_37119 * x_37120;
                bool isnan_res_37122;
                
                isnan_res_37122 = futrts_isnan32(x_37118);
                
                float y_37123;
                
                if (isnan_res_37122) {
                    y_37123 = 0.0F;
                } else {
                    y_37123 = 1.0F;
                }
                
                float defunc_2_f_res_37124 = x_37121 * y_37123;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_37112 = x_acc_43038;
                }
                // load new values
                {
                    x_37113 = defunc_2_f_res_37124;
                }
                // apply reduction operator
                {
                    float defunc_1_op_res_37114 = x_37112 + x_37113;
                    
                    // store in accumulator
                    {
                        x_acc_43038 = defunc_1_op_res_37114;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_37112 = x_acc_43038;
            ((__local
              float *) red_arr_mem_43023)[sext_i32_i64(local_tid_43019)] =
                x_37112;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_43044;
        int32_t skip_waves_43045 = 1;
        float x_43040;
        float x_43041;
        
        offset_43044 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_43019,
                      sext_i64_i32(segred_group_sizze_37108))) {
                x_43040 = ((__local
                            float *) red_arr_mem_43023)[sext_i32_i64(local_tid_43019 +
                                                        offset_43044)];
            }
        }
        offset_43044 = 1;
        while (slt32(offset_43044, wave_sizze_43021)) {
            if (slt32(local_tid_43019 + offset_43044,
                      sext_i64_i32(segred_group_sizze_37108)) &&
                ((local_tid_43019 - squot32(local_tid_43019, wave_sizze_43021) *
                  wave_sizze_43021) & (2 * offset_43044 - 1)) == 0) {
                // read array element
                {
                    x_43041 = ((volatile __local
                                float *) red_arr_mem_43023)[sext_i32_i64(local_tid_43019 +
                                                            offset_43044)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43042 = x_43040 + x_43041;
                    
                    x_43040 = defunc_1_op_res_43042;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_43023)[sext_i32_i64(local_tid_43019)] =
                        x_43040;
                }
            }
            offset_43044 *= 2;
        }
        while (slt32(skip_waves_43045,
                     squot32(sext_i64_i32(segred_group_sizze_37108) +
                             wave_sizze_43021 - 1, wave_sizze_43021))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_43044 = skip_waves_43045 * wave_sizze_43021;
            if (slt32(local_tid_43019 + offset_43044,
                      sext_i64_i32(segred_group_sizze_37108)) &&
                ((local_tid_43019 - squot32(local_tid_43019, wave_sizze_43021) *
                  wave_sizze_43021) == 0 && (squot32(local_tid_43019,
                                                     wave_sizze_43021) & (2 *
                                                                          skip_waves_43045 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_43041 = ((__local
                                float *) red_arr_mem_43023)[sext_i32_i64(local_tid_43019 +
                                                            offset_43044)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43042 = x_43040 + x_43041;
                    
                    x_43040 = defunc_1_op_res_43042;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_43023)[sext_i32_i64(local_tid_43019)] =
                        x_43040;
                }
            }
            skip_waves_43045 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_43019) == (int64_t) 0) {
                x_acc_43038 = x_43040;
            }
        }
        if (groups_per_segment_43009 == (int64_t) 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_43019 == 0) {
                    ((__global float *) mem_41585)[gtid_36957 * (i32_res_29575 *
                                                                 i32_res_29575) +
                                                   gtid_36958 * i32_res_29575 +
                                                   gtid_36959] = x_acc_43038;
                }
            }
        } else {
            int32_t old_counter_43046;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_43019 == 0) {
                    ((__global
                      float *) segred_tmp_mem_43014)[sext_i32_i64(virt_group_id_43029)] =
                        x_acc_43038;
                    mem_fence_global();
                    old_counter_43046 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_43016)[sext_i32_i64(srem32(flat_segment_id_43030,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_43025)[(int64_t) 0] =
                        old_counter_43046 == groups_per_segment_43009 -
                        (int64_t) 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_43047 = ((__local
                                         bool *) sync_arr_mem_43025)[(int64_t) 0];
            
            if (is_last_group_43047) {
                if (local_tid_43019 == 0) {
                    old_counter_43046 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_43016)[sext_i32_i64(srem32(flat_segment_id_43030,
                                                                                                     10240))],
                                              (int) ((int64_t) 0 -
                                                     groups_per_segment_43009));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_43048 =
                            sdiv_up64(groups_per_segment_43009,
                                      segred_group_sizze_37108);
                    
                    x_37112 = 0.0F;
                    for (int64_t i_43049 = 0; i_43049 < read_per_thread_43048;
                         i_43049++) {
                        int64_t group_res_id_43050 =
                                sext_i32_i64(local_tid_43019) *
                                read_per_thread_43048 + i_43049;
                        int64_t index_of_group_res_43051 =
                                sext_i32_i64(flat_segment_id_43030) *
                                groups_per_segment_43009 + group_res_id_43050;
                        
                        if (slt64(group_res_id_43050,
                                  groups_per_segment_43009)) {
                            x_37113 = ((__global
                                        float *) segred_tmp_mem_43014)[index_of_group_res_43051];
                            
                            float defunc_1_op_res_37114 = x_37112 + x_37113;
                            
                            x_37112 = defunc_1_op_res_37114;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_43023)[sext_i32_i64(local_tid_43019)] =
                    x_37112;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_43052;
                    int32_t skip_waves_43053 = 1;
                    float x_43040;
                    float x_43041;
                    
                    offset_43052 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_43019,
                                  sext_i64_i32(segred_group_sizze_37108))) {
                            x_43040 = ((__local
                                        float *) red_arr_mem_43023)[sext_i32_i64(local_tid_43019 +
                                                                    offset_43052)];
                        }
                    }
                    offset_43052 = 1;
                    while (slt32(offset_43052, wave_sizze_43021)) {
                        if (slt32(local_tid_43019 + offset_43052,
                                  sext_i64_i32(segred_group_sizze_37108)) &&
                            ((local_tid_43019 - squot32(local_tid_43019,
                                                        wave_sizze_43021) *
                              wave_sizze_43021) & (2 * offset_43052 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_43041 = ((volatile __local
                                            float *) red_arr_mem_43023)[sext_i32_i64(local_tid_43019 +
                                                                        offset_43052)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43042 = x_43040 + x_43041;
                                
                                x_43040 = defunc_1_op_res_43042;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43023)[sext_i32_i64(local_tid_43019)] =
                                    x_43040;
                            }
                        }
                        offset_43052 *= 2;
                    }
                    while (slt32(skip_waves_43053,
                                 squot32(sext_i64_i32(segred_group_sizze_37108) +
                                         wave_sizze_43021 - 1,
                                         wave_sizze_43021))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_43052 = skip_waves_43053 * wave_sizze_43021;
                        if (slt32(local_tid_43019 + offset_43052,
                                  sext_i64_i32(segred_group_sizze_37108)) &&
                            ((local_tid_43019 - squot32(local_tid_43019,
                                                        wave_sizze_43021) *
                              wave_sizze_43021) == 0 &&
                             (squot32(local_tid_43019, wave_sizze_43021) & (2 *
                                                                            skip_waves_43053 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_43041 = ((__local
                                            float *) red_arr_mem_43023)[sext_i32_i64(local_tid_43019 +
                                                                        offset_43052)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43042 = x_43040 + x_43041;
                                
                                x_43040 = defunc_1_op_res_43042;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_43023)[sext_i32_i64(local_tid_43019)] =
                                    x_43040;
                            }
                        }
                        skip_waves_43053 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_43019 == 0) {
                            ((__global float *) mem_41585)[gtid_36957 *
                                                           (i32_res_29575 *
                                                            i32_res_29575) +
                                                           gtid_36958 *
                                                           i32_res_29575 +
                                                           gtid_36959] =
                                x_43040;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_37108
}
__kernel void mainzisegred_large_37934(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_43261_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_43259_backing_aligned_1,
                                       int64_t N_29559, int64_t m_29560,
                                       int64_t i32_res_29569,
                                       int64_t i32_res_29575,
                                       int64_t num_groups_37987,
                                       int64_t groups_per_segment_43245,
                                       int64_t elements_per_thread_43246,
                                       int64_t virt_num_groups_43247,
                                       int64_t threads_per_segment_43249,
                                       __global unsigned char *images_mem_41421,
                                       __global
                                       unsigned char *binop_p_mem_41432,
                                       __global unsigned char *mem_41907,
                                       __global
                                       unsigned char *segred_tmp_mem_43250,
                                       __global
                                       unsigned char *mainzicounter_mem_43252)
{
    #define segred_group_sizze_37986 (mainzisegred_group_sizze_37928)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_43261_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_43261_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_43259_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43259_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43254;
    int32_t local_tid_43255;
    int64_t group_sizze_43258;
    int32_t wave_sizze_43257;
    int32_t group_tid_43256;
    
    global_tid_43254 = get_global_id(0);
    local_tid_43255 = get_local_id(0);
    group_sizze_43258 = get_local_size(0);
    wave_sizze_43257 = LOCKSTEP_WIDTH;
    group_tid_43256 = get_group_id(0);
    
    int32_t phys_tid_37934 = global_tid_43254;
    __local char *red_arr_mem_43259;
    
    red_arr_mem_43259 = (__local char *) red_arr_mem_43259_backing_0;
    
    __local char *sync_arr_mem_43261;
    
    sync_arr_mem_43261 = (__local char *) sync_arr_mem_43261_backing_1;
    
    int32_t phys_group_id_43263;
    
    phys_group_id_43263 = get_group_id(0);
    for (int32_t i_43264 = 0; i_43264 <
         sdiv_up32(sext_i64_i32(virt_num_groups_43247) - phys_group_id_43263,
                   sext_i64_i32(num_groups_37987)); i_43264++) {
        int32_t virt_group_id_43265 = phys_group_id_43263 + i_43264 *
                sext_i64_i32(num_groups_37987);
        int32_t flat_segment_id_43266 = squot32(virt_group_id_43265,
                                                sext_i64_i32(groups_per_segment_43245));
        int64_t global_tid_43267 = srem64(sext_i32_i64(virt_group_id_43265) *
                                          segred_group_sizze_37986 +
                                          sext_i32_i64(local_tid_43255),
                                          segred_group_sizze_37986 *
                                          groups_per_segment_43245);
        int64_t slice_43268 = i32_res_29575;
        int64_t slice_43269 = m_29560 * slice_43268;
        int64_t gtid_37923 = squot64(sext_i32_i64(flat_segment_id_43266),
                                     slice_43268);
        int64_t remnant_43270 = sext_i32_i64(flat_segment_id_43266) -
                gtid_37923 * slice_43268;
        int64_t gtid_37924 = remnant_43270;
        int64_t remnant_43271 = remnant_43270 - gtid_37924;
        int64_t gtid_37933;
        float x_acc_43272;
        int64_t chunk_sizze_43273 = smin64(elements_per_thread_43246,
                                           sdiv_up64(i32_res_29569 -
                                                     global_tid_43267,
                                                     threads_per_segment_43249));
        float x_37990;
        float x_37991;
        
        // neutral-initialise the accumulators
        {
            x_acc_43272 = 0.0F;
        }
        for (int64_t i_43277 = 0; i_43277 < chunk_sizze_43273; i_43277++) {
            gtid_37933 = global_tid_43267 + threads_per_segment_43249 * i_43277;
            // apply map function
            {
                float x_37996 = ((__global
                                  float *) images_mem_41421)[gtid_37923 *
                                                             N_29559 +
                                                             gtid_37933];
                bool isnan_res_37997;
                
                isnan_res_37997 = futrts_isnan32(x_37996);
                
                float defunc_1_f_res_37998;
                
                if (isnan_res_37997) {
                    defunc_1_f_res_37998 = 0.0F;
                } else {
                    float x_37995 = ((__global
                                      float *) binop_p_mem_41432)[gtid_37924 *
                                                                  N_29559 +
                                                                  gtid_37933];
                    float defunc_1_f_res_f_res_37999 = x_37995 * x_37996;
                    
                    defunc_1_f_res_37998 = defunc_1_f_res_f_res_37999;
                }
                // save map-out results
                { }
                // load accumulator
                {
                    x_37990 = x_acc_43272;
                }
                // load new values
                {
                    x_37991 = defunc_1_f_res_37998;
                }
                // apply reduction operator
                {
                    float defunc_1_op_res_37992 = x_37990 + x_37991;
                    
                    // store in accumulator
                    {
                        x_acc_43272 = defunc_1_op_res_37992;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_37990 = x_acc_43272;
            ((__local
              float *) red_arr_mem_43259)[sext_i32_i64(local_tid_43255)] =
                x_37990;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_43278;
        int32_t skip_waves_43279 = 1;
        float x_43274;
        float x_43275;
        
        offset_43278 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_43255,
                      sext_i64_i32(segred_group_sizze_37986))) {
                x_43274 = ((__local
                            float *) red_arr_mem_43259)[sext_i32_i64(local_tid_43255 +
                                                        offset_43278)];
            }
        }
        offset_43278 = 1;
        while (slt32(offset_43278, wave_sizze_43257)) {
            if (slt32(local_tid_43255 + offset_43278,
                      sext_i64_i32(segred_group_sizze_37986)) &&
                ((local_tid_43255 - squot32(local_tid_43255, wave_sizze_43257) *
                  wave_sizze_43257) & (2 * offset_43278 - 1)) == 0) {
                // read array element
                {
                    x_43275 = ((volatile __local
                                float *) red_arr_mem_43259)[sext_i32_i64(local_tid_43255 +
                                                            offset_43278)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43276 = x_43274 + x_43275;
                    
                    x_43274 = defunc_1_op_res_43276;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_43259)[sext_i32_i64(local_tid_43255)] =
                        x_43274;
                }
            }
            offset_43278 *= 2;
        }
        while (slt32(skip_waves_43279,
                     squot32(sext_i64_i32(segred_group_sizze_37986) +
                             wave_sizze_43257 - 1, wave_sizze_43257))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_43278 = skip_waves_43279 * wave_sizze_43257;
            if (slt32(local_tid_43255 + offset_43278,
                      sext_i64_i32(segred_group_sizze_37986)) &&
                ((local_tid_43255 - squot32(local_tid_43255, wave_sizze_43257) *
                  wave_sizze_43257) == 0 && (squot32(local_tid_43255,
                                                     wave_sizze_43257) & (2 *
                                                                          skip_waves_43279 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_43275 = ((__local
                                float *) red_arr_mem_43259)[sext_i32_i64(local_tid_43255 +
                                                            offset_43278)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43276 = x_43274 + x_43275;
                    
                    x_43274 = defunc_1_op_res_43276;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_43259)[sext_i32_i64(local_tid_43255)] =
                        x_43274;
                }
            }
            skip_waves_43279 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_43255) == (int64_t) 0) {
                x_acc_43272 = x_43274;
            }
        }
        if (groups_per_segment_43245 == (int64_t) 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_43255 == 0) {
                    ((__global float *) mem_41907)[gtid_37923 * i32_res_29575 +
                                                   gtid_37924] = x_acc_43272;
                }
            }
        } else {
            int32_t old_counter_43280;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_43255 == 0) {
                    ((__global
                      float *) segred_tmp_mem_43250)[sext_i32_i64(virt_group_id_43265)] =
                        x_acc_43272;
                    mem_fence_global();
                    old_counter_43280 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_43252)[sext_i32_i64(srem32(flat_segment_id_43266,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_43261)[(int64_t) 0] =
                        old_counter_43280 == groups_per_segment_43245 -
                        (int64_t) 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_43281 = ((__local
                                         bool *) sync_arr_mem_43261)[(int64_t) 0];
            
            if (is_last_group_43281) {
                if (local_tid_43255 == 0) {
                    old_counter_43280 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_43252)[sext_i32_i64(srem32(flat_segment_id_43266,
                                                                                                     10240))],
                                              (int) ((int64_t) 0 -
                                                     groups_per_segment_43245));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_43282 =
                            sdiv_up64(groups_per_segment_43245,
                                      segred_group_sizze_37986);
                    
                    x_37990 = 0.0F;
                    for (int64_t i_43283 = 0; i_43283 < read_per_thread_43282;
                         i_43283++) {
                        int64_t group_res_id_43284 =
                                sext_i32_i64(local_tid_43255) *
                                read_per_thread_43282 + i_43283;
                        int64_t index_of_group_res_43285 =
                                sext_i32_i64(flat_segment_id_43266) *
                                groups_per_segment_43245 + group_res_id_43284;
                        
                        if (slt64(group_res_id_43284,
                                  groups_per_segment_43245)) {
                            x_37991 = ((__global
                                        float *) segred_tmp_mem_43250)[index_of_group_res_43285];
                            
                            float defunc_1_op_res_37992 = x_37990 + x_37991;
                            
                            x_37990 = defunc_1_op_res_37992;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_43259)[sext_i32_i64(local_tid_43255)] =
                    x_37990;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_43286;
                    int32_t skip_waves_43287 = 1;
                    float x_43274;
                    float x_43275;
                    
                    offset_43286 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_43255,
                                  sext_i64_i32(segred_group_sizze_37986))) {
                            x_43274 = ((__local
                                        float *) red_arr_mem_43259)[sext_i32_i64(local_tid_43255 +
                                                                    offset_43286)];
                        }
                    }
                    offset_43286 = 1;
                    while (slt32(offset_43286, wave_sizze_43257)) {
                        if (slt32(local_tid_43255 + offset_43286,
                                  sext_i64_i32(segred_group_sizze_37986)) &&
                            ((local_tid_43255 - squot32(local_tid_43255,
                                                        wave_sizze_43257) *
                              wave_sizze_43257) & (2 * offset_43286 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_43275 = ((volatile __local
                                            float *) red_arr_mem_43259)[sext_i32_i64(local_tid_43255 +
                                                                        offset_43286)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43276 = x_43274 + x_43275;
                                
                                x_43274 = defunc_1_op_res_43276;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43259)[sext_i32_i64(local_tid_43255)] =
                                    x_43274;
                            }
                        }
                        offset_43286 *= 2;
                    }
                    while (slt32(skip_waves_43287,
                                 squot32(sext_i64_i32(segred_group_sizze_37986) +
                                         wave_sizze_43257 - 1,
                                         wave_sizze_43257))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_43286 = skip_waves_43287 * wave_sizze_43257;
                        if (slt32(local_tid_43255 + offset_43286,
                                  sext_i64_i32(segred_group_sizze_37986)) &&
                            ((local_tid_43255 - squot32(local_tid_43255,
                                                        wave_sizze_43257) *
                              wave_sizze_43257) == 0 &&
                             (squot32(local_tid_43255, wave_sizze_43257) & (2 *
                                                                            skip_waves_43287 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_43275 = ((__local
                                            float *) red_arr_mem_43259)[sext_i32_i64(local_tid_43255 +
                                                                        offset_43286)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43276 = x_43274 + x_43275;
                                
                                x_43274 = defunc_1_op_res_43276;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_43259)[sext_i32_i64(local_tid_43255)] =
                                    x_43274;
                            }
                        }
                        skip_waves_43287 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_43255 == 0) {
                            ((__global float *) mem_41907)[gtid_37923 *
                                                           i32_res_29575 +
                                                           gtid_37924] =
                                x_43274;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_37986
}
__kernel void mainzisegred_large_38071(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_43364_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_43362_backing_aligned_1,
                                       int64_t m_29560, int64_t i32_res_29575,
                                       int64_t num_groups_38120,
                                       int64_t groups_per_segment_43348,
                                       int64_t elements_per_thread_43349,
                                       int64_t virt_num_groups_43350,
                                       int64_t threads_per_segment_43352,
                                       __global
                                       unsigned char *defunc_3_map_res_mem_41687,
                                       __global
                                       unsigned char *defunc_3_map_res_mem_41914,
                                       __global unsigned char *mem_41979,
                                       __global
                                       unsigned char *segred_tmp_mem_43353,
                                       __global
                                       unsigned char *mainzicounter_mem_43355)
{
    #define segred_group_sizze_38119 (mainzisegred_group_sizze_38065)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_43364_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_43364_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_43362_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43362_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43357;
    int32_t local_tid_43358;
    int64_t group_sizze_43361;
    int32_t wave_sizze_43360;
    int32_t group_tid_43359;
    
    global_tid_43357 = get_global_id(0);
    local_tid_43358 = get_local_id(0);
    group_sizze_43361 = get_local_size(0);
    wave_sizze_43360 = LOCKSTEP_WIDTH;
    group_tid_43359 = get_group_id(0);
    
    int32_t phys_tid_38071 = global_tid_43357;
    __local char *red_arr_mem_43362;
    
    red_arr_mem_43362 = (__local char *) red_arr_mem_43362_backing_0;
    
    __local char *sync_arr_mem_43364;
    
    sync_arr_mem_43364 = (__local char *) sync_arr_mem_43364_backing_1;
    
    int32_t phys_group_id_43366;
    
    phys_group_id_43366 = get_group_id(0);
    for (int32_t i_43367 = 0; i_43367 <
         sdiv_up32(sext_i64_i32(virt_num_groups_43350) - phys_group_id_43366,
                   sext_i64_i32(num_groups_38120)); i_43367++) {
        int32_t virt_group_id_43368 = phys_group_id_43366 + i_43367 *
                sext_i64_i32(num_groups_38120);
        int32_t flat_segment_id_43369 = squot32(virt_group_id_43368,
                                                sext_i64_i32(groups_per_segment_43348));
        int64_t global_tid_43370 = srem64(sext_i32_i64(virt_group_id_43368) *
                                          segred_group_sizze_38119 +
                                          sext_i32_i64(local_tid_43358),
                                          segred_group_sizze_38119 *
                                          groups_per_segment_43348);
        int64_t slice_43371 = i32_res_29575;
        int64_t slice_43372 = m_29560 * slice_43371;
        int64_t gtid_38060 = squot64(sext_i32_i64(flat_segment_id_43369),
                                     slice_43371);
        int64_t remnant_43373 = sext_i32_i64(flat_segment_id_43369) -
                gtid_38060 * slice_43371;
        int64_t gtid_38061 = remnant_43373;
        int64_t remnant_43374 = remnant_43373 - gtid_38061;
        int64_t gtid_38070;
        float x_acc_43375;
        int64_t chunk_sizze_43376 = smin64(elements_per_thread_43349,
                                           sdiv_up64(i32_res_29575 -
                                                     global_tid_43370,
                                                     threads_per_segment_43352));
        float x_38123;
        float x_38124;
        
        // neutral-initialise the accumulators
        {
            x_acc_43375 = 0.0F;
        }
        for (int64_t i_43380 = 0; i_43380 < chunk_sizze_43376; i_43380++) {
            gtid_38070 = global_tid_43370 + threads_per_segment_43352 * i_43380;
            // apply map function
            {
                float x_38129 = ((__global
                                  float *) defunc_3_map_res_mem_41914)[gtid_38060 *
                                                                       i32_res_29575 +
                                                                       gtid_38070];
                float x_38130 = ((__global
                                  float *) defunc_3_map_res_mem_41687)[gtid_38060 *
                                                                       (i32_res_29575 *
                                                                        i32_res_29575) +
                                                                       gtid_38061 *
                                                                       i32_res_29575 +
                                                                       gtid_38070];
                float defunc_1_f_res_38131 = x_38129 * x_38130;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_38123 = x_acc_43375;
                }
                // load new values
                {
                    x_38124 = defunc_1_f_res_38131;
                }
                // apply reduction operator
                {
                    float defunc_1_op_res_38125 = x_38123 + x_38124;
                    
                    // store in accumulator
                    {
                        x_acc_43375 = defunc_1_op_res_38125;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_38123 = x_acc_43375;
            ((__local
              float *) red_arr_mem_43362)[sext_i32_i64(local_tid_43358)] =
                x_38123;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_43381;
        int32_t skip_waves_43382 = 1;
        float x_43377;
        float x_43378;
        
        offset_43381 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_43358,
                      sext_i64_i32(segred_group_sizze_38119))) {
                x_43377 = ((__local
                            float *) red_arr_mem_43362)[sext_i32_i64(local_tid_43358 +
                                                        offset_43381)];
            }
        }
        offset_43381 = 1;
        while (slt32(offset_43381, wave_sizze_43360)) {
            if (slt32(local_tid_43358 + offset_43381,
                      sext_i64_i32(segred_group_sizze_38119)) &&
                ((local_tid_43358 - squot32(local_tid_43358, wave_sizze_43360) *
                  wave_sizze_43360) & (2 * offset_43381 - 1)) == 0) {
                // read array element
                {
                    x_43378 = ((volatile __local
                                float *) red_arr_mem_43362)[sext_i32_i64(local_tid_43358 +
                                                            offset_43381)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43379 = x_43377 + x_43378;
                    
                    x_43377 = defunc_1_op_res_43379;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_43362)[sext_i32_i64(local_tid_43358)] =
                        x_43377;
                }
            }
            offset_43381 *= 2;
        }
        while (slt32(skip_waves_43382,
                     squot32(sext_i64_i32(segred_group_sizze_38119) +
                             wave_sizze_43360 - 1, wave_sizze_43360))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_43381 = skip_waves_43382 * wave_sizze_43360;
            if (slt32(local_tid_43358 + offset_43381,
                      sext_i64_i32(segred_group_sizze_38119)) &&
                ((local_tid_43358 - squot32(local_tid_43358, wave_sizze_43360) *
                  wave_sizze_43360) == 0 && (squot32(local_tid_43358,
                                                     wave_sizze_43360) & (2 *
                                                                          skip_waves_43382 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_43378 = ((__local
                                float *) red_arr_mem_43362)[sext_i32_i64(local_tid_43358 +
                                                            offset_43381)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43379 = x_43377 + x_43378;
                    
                    x_43377 = defunc_1_op_res_43379;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_43362)[sext_i32_i64(local_tid_43358)] =
                        x_43377;
                }
            }
            skip_waves_43382 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_43358) == (int64_t) 0) {
                x_acc_43375 = x_43377;
            }
        }
        if (groups_per_segment_43348 == (int64_t) 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_43358 == 0) {
                    ((__global float *) mem_41979)[gtid_38060 * i32_res_29575 +
                                                   gtid_38061] = x_acc_43375;
                }
            }
        } else {
            int32_t old_counter_43383;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_43358 == 0) {
                    ((__global
                      float *) segred_tmp_mem_43353)[sext_i32_i64(virt_group_id_43368)] =
                        x_acc_43375;
                    mem_fence_global();
                    old_counter_43383 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_43355)[sext_i32_i64(srem32(flat_segment_id_43369,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_43364)[(int64_t) 0] =
                        old_counter_43383 == groups_per_segment_43348 -
                        (int64_t) 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_43384 = ((__local
                                         bool *) sync_arr_mem_43364)[(int64_t) 0];
            
            if (is_last_group_43384) {
                if (local_tid_43358 == 0) {
                    old_counter_43383 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_43355)[sext_i32_i64(srem32(flat_segment_id_43369,
                                                                                                     10240))],
                                              (int) ((int64_t) 0 -
                                                     groups_per_segment_43348));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_43385 =
                            sdiv_up64(groups_per_segment_43348,
                                      segred_group_sizze_38119);
                    
                    x_38123 = 0.0F;
                    for (int64_t i_43386 = 0; i_43386 < read_per_thread_43385;
                         i_43386++) {
                        int64_t group_res_id_43387 =
                                sext_i32_i64(local_tid_43358) *
                                read_per_thread_43385 + i_43386;
                        int64_t index_of_group_res_43388 =
                                sext_i32_i64(flat_segment_id_43369) *
                                groups_per_segment_43348 + group_res_id_43387;
                        
                        if (slt64(group_res_id_43387,
                                  groups_per_segment_43348)) {
                            x_38124 = ((__global
                                        float *) segred_tmp_mem_43353)[index_of_group_res_43388];
                            
                            float defunc_1_op_res_38125 = x_38123 + x_38124;
                            
                            x_38123 = defunc_1_op_res_38125;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_43362)[sext_i32_i64(local_tid_43358)] =
                    x_38123;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_43389;
                    int32_t skip_waves_43390 = 1;
                    float x_43377;
                    float x_43378;
                    
                    offset_43389 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_43358,
                                  sext_i64_i32(segred_group_sizze_38119))) {
                            x_43377 = ((__local
                                        float *) red_arr_mem_43362)[sext_i32_i64(local_tid_43358 +
                                                                    offset_43389)];
                        }
                    }
                    offset_43389 = 1;
                    while (slt32(offset_43389, wave_sizze_43360)) {
                        if (slt32(local_tid_43358 + offset_43389,
                                  sext_i64_i32(segred_group_sizze_38119)) &&
                            ((local_tid_43358 - squot32(local_tid_43358,
                                                        wave_sizze_43360) *
                              wave_sizze_43360) & (2 * offset_43389 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_43378 = ((volatile __local
                                            float *) red_arr_mem_43362)[sext_i32_i64(local_tid_43358 +
                                                                        offset_43389)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43379 = x_43377 + x_43378;
                                
                                x_43377 = defunc_1_op_res_43379;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43362)[sext_i32_i64(local_tid_43358)] =
                                    x_43377;
                            }
                        }
                        offset_43389 *= 2;
                    }
                    while (slt32(skip_waves_43390,
                                 squot32(sext_i64_i32(segred_group_sizze_38119) +
                                         wave_sizze_43360 - 1,
                                         wave_sizze_43360))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_43389 = skip_waves_43390 * wave_sizze_43360;
                        if (slt32(local_tid_43358 + offset_43389,
                                  sext_i64_i32(segred_group_sizze_38119)) &&
                            ((local_tid_43358 - squot32(local_tid_43358,
                                                        wave_sizze_43360) *
                              wave_sizze_43360) == 0 &&
                             (squot32(local_tid_43358, wave_sizze_43360) & (2 *
                                                                            skip_waves_43390 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_43378 = ((__local
                                            float *) red_arr_mem_43362)[sext_i32_i64(local_tid_43358 +
                                                                        offset_43389)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43379 = x_43377 + x_43378;
                                
                                x_43377 = defunc_1_op_res_43379;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_43362)[sext_i32_i64(local_tid_43358)] =
                                    x_43377;
                            }
                        }
                        skip_waves_43390 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_43358 == 0) {
                            ((__global float *) mem_41979)[gtid_38060 *
                                                           i32_res_29575 +
                                                           gtid_38061] =
                                x_43377;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_38119
}
__kernel void mainzisegred_large_38201(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_43511_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_43509_backing_aligned_1,
                                       int64_t N_29559, int64_t m_29560,
                                       int64_t i32_res_29575,
                                       int64_t num_groups_38248,
                                       int64_t groups_per_segment_43495,
                                       int64_t elements_per_thread_43496,
                                       int64_t virt_num_groups_43497,
                                       int64_t threads_per_segment_43499,
                                       __global unsigned char *mem_41440,
                                       __global
                                       unsigned char *defunc_4_map_res_mem_41986,
                                       __global unsigned char *mem_42209,
                                       __global
                                       unsigned char *segred_tmp_mem_43500,
                                       __global
                                       unsigned char *mainzicounter_mem_43502)
{
    #define segred_group_sizze_38247 (mainzisegred_group_sizze_38195)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_43511_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_43511_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_43509_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43509_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43504;
    int32_t local_tid_43505;
    int64_t group_sizze_43508;
    int32_t wave_sizze_43507;
    int32_t group_tid_43506;
    
    global_tid_43504 = get_global_id(0);
    local_tid_43505 = get_local_id(0);
    group_sizze_43508 = get_local_size(0);
    wave_sizze_43507 = LOCKSTEP_WIDTH;
    group_tid_43506 = get_group_id(0);
    
    int32_t phys_tid_38201 = global_tid_43504;
    __local char *red_arr_mem_43509;
    
    red_arr_mem_43509 = (__local char *) red_arr_mem_43509_backing_0;
    
    __local char *sync_arr_mem_43511;
    
    sync_arr_mem_43511 = (__local char *) sync_arr_mem_43511_backing_1;
    
    int32_t phys_group_id_43513;
    
    phys_group_id_43513 = get_group_id(0);
    for (int32_t i_43514 = 0; i_43514 <
         sdiv_up32(sext_i64_i32(virt_num_groups_43497) - phys_group_id_43513,
                   sext_i64_i32(num_groups_38248)); i_43514++) {
        int32_t virt_group_id_43515 = phys_group_id_43513 + i_43514 *
                sext_i64_i32(num_groups_38248);
        int32_t flat_segment_id_43516 = squot32(virt_group_id_43515,
                                                sext_i64_i32(groups_per_segment_43495));
        int64_t global_tid_43517 = srem64(sext_i32_i64(virt_group_id_43515) *
                                          segred_group_sizze_38247 +
                                          sext_i32_i64(local_tid_43505),
                                          segred_group_sizze_38247 *
                                          groups_per_segment_43495);
        int64_t slice_43518 = N_29559;
        int64_t slice_43519 = m_29560 * slice_43518;
        int64_t gtid_38190 = squot64(sext_i32_i64(flat_segment_id_43516),
                                     slice_43518);
        int64_t remnant_43520 = sext_i32_i64(flat_segment_id_43516) -
                gtid_38190 * slice_43518;
        int64_t gtid_38191 = remnant_43520;
        int64_t remnant_43521 = remnant_43520 - gtid_38191;
        int64_t gtid_38200;
        float x_acc_43522;
        int64_t chunk_sizze_43523 = smin64(elements_per_thread_43496,
                                           sdiv_up64(i32_res_29575 -
                                                     global_tid_43517,
                                                     threads_per_segment_43499));
        float x_38251;
        float x_38252;
        
        // neutral-initialise the accumulators
        {
            x_acc_43522 = 0.0F;
        }
        for (int64_t i_43527 = 0; i_43527 < chunk_sizze_43523; i_43527++) {
            gtid_38200 = global_tid_43517 + threads_per_segment_43499 * i_43527;
            // apply map function
            {
                float x_38256 = ((__global
                                  float *) defunc_4_map_res_mem_41986)[gtid_38190 *
                                                                       i32_res_29575 +
                                                                       gtid_38200];
                float x_38257 = ((__global float *) mem_41440)[gtid_38191 *
                                                               i32_res_29575 +
                                                               gtid_38200];
                float defunc_1_f_res_38258 = x_38256 * x_38257;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_38251 = x_acc_43522;
                }
                // load new values
                {
                    x_38252 = defunc_1_f_res_38258;
                }
                // apply reduction operator
                {
                    float defunc_1_op_res_38253 = x_38251 + x_38252;
                    
                    // store in accumulator
                    {
                        x_acc_43522 = defunc_1_op_res_38253;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_38251 = x_acc_43522;
            ((__local
              float *) red_arr_mem_43509)[sext_i32_i64(local_tid_43505)] =
                x_38251;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_43528;
        int32_t skip_waves_43529 = 1;
        float x_43524;
        float x_43525;
        
        offset_43528 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_43505,
                      sext_i64_i32(segred_group_sizze_38247))) {
                x_43524 = ((__local
                            float *) red_arr_mem_43509)[sext_i32_i64(local_tid_43505 +
                                                        offset_43528)];
            }
        }
        offset_43528 = 1;
        while (slt32(offset_43528, wave_sizze_43507)) {
            if (slt32(local_tid_43505 + offset_43528,
                      sext_i64_i32(segred_group_sizze_38247)) &&
                ((local_tid_43505 - squot32(local_tid_43505, wave_sizze_43507) *
                  wave_sizze_43507) & (2 * offset_43528 - 1)) == 0) {
                // read array element
                {
                    x_43525 = ((volatile __local
                                float *) red_arr_mem_43509)[sext_i32_i64(local_tid_43505 +
                                                            offset_43528)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43526 = x_43524 + x_43525;
                    
                    x_43524 = defunc_1_op_res_43526;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_43509)[sext_i32_i64(local_tid_43505)] =
                        x_43524;
                }
            }
            offset_43528 *= 2;
        }
        while (slt32(skip_waves_43529,
                     squot32(sext_i64_i32(segred_group_sizze_38247) +
                             wave_sizze_43507 - 1, wave_sizze_43507))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_43528 = skip_waves_43529 * wave_sizze_43507;
            if (slt32(local_tid_43505 + offset_43528,
                      sext_i64_i32(segred_group_sizze_38247)) &&
                ((local_tid_43505 - squot32(local_tid_43505, wave_sizze_43507) *
                  wave_sizze_43507) == 0 && (squot32(local_tid_43505,
                                                     wave_sizze_43507) & (2 *
                                                                          skip_waves_43529 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_43525 = ((__local
                                float *) red_arr_mem_43509)[sext_i32_i64(local_tid_43505 +
                                                            offset_43528)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43526 = x_43524 + x_43525;
                    
                    x_43524 = defunc_1_op_res_43526;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_43509)[sext_i32_i64(local_tid_43505)] =
                        x_43524;
                }
            }
            skip_waves_43529 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_43505) == (int64_t) 0) {
                x_acc_43522 = x_43524;
            }
        }
        if (groups_per_segment_43495 == (int64_t) 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_43505 == 0) {
                    ((__global float *) mem_42209)[gtid_38190 * N_29559 +
                                                   gtid_38191] = x_acc_43522;
                }
            }
        } else {
            int32_t old_counter_43530;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_43505 == 0) {
                    ((__global
                      float *) segred_tmp_mem_43500)[sext_i32_i64(virt_group_id_43515)] =
                        x_acc_43522;
                    mem_fence_global();
                    old_counter_43530 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_43502)[sext_i32_i64(srem32(flat_segment_id_43516,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_43511)[(int64_t) 0] =
                        old_counter_43530 == groups_per_segment_43495 -
                        (int64_t) 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_43531 = ((__local
                                         bool *) sync_arr_mem_43511)[(int64_t) 0];
            
            if (is_last_group_43531) {
                if (local_tid_43505 == 0) {
                    old_counter_43530 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_43502)[sext_i32_i64(srem32(flat_segment_id_43516,
                                                                                                     10240))],
                                              (int) ((int64_t) 0 -
                                                     groups_per_segment_43495));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_43532 =
                            sdiv_up64(groups_per_segment_43495,
                                      segred_group_sizze_38247);
                    
                    x_38251 = 0.0F;
                    for (int64_t i_43533 = 0; i_43533 < read_per_thread_43532;
                         i_43533++) {
                        int64_t group_res_id_43534 =
                                sext_i32_i64(local_tid_43505) *
                                read_per_thread_43532 + i_43533;
                        int64_t index_of_group_res_43535 =
                                sext_i32_i64(flat_segment_id_43516) *
                                groups_per_segment_43495 + group_res_id_43534;
                        
                        if (slt64(group_res_id_43534,
                                  groups_per_segment_43495)) {
                            x_38252 = ((__global
                                        float *) segred_tmp_mem_43500)[index_of_group_res_43535];
                            
                            float defunc_1_op_res_38253 = x_38251 + x_38252;
                            
                            x_38251 = defunc_1_op_res_38253;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_43509)[sext_i32_i64(local_tid_43505)] =
                    x_38251;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_43536;
                    int32_t skip_waves_43537 = 1;
                    float x_43524;
                    float x_43525;
                    
                    offset_43536 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_43505,
                                  sext_i64_i32(segred_group_sizze_38247))) {
                            x_43524 = ((__local
                                        float *) red_arr_mem_43509)[sext_i32_i64(local_tid_43505 +
                                                                    offset_43536)];
                        }
                    }
                    offset_43536 = 1;
                    while (slt32(offset_43536, wave_sizze_43507)) {
                        if (slt32(local_tid_43505 + offset_43536,
                                  sext_i64_i32(segred_group_sizze_38247)) &&
                            ((local_tid_43505 - squot32(local_tid_43505,
                                                        wave_sizze_43507) *
                              wave_sizze_43507) & (2 * offset_43536 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_43525 = ((volatile __local
                                            float *) red_arr_mem_43509)[sext_i32_i64(local_tid_43505 +
                                                                        offset_43536)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43526 = x_43524 + x_43525;
                                
                                x_43524 = defunc_1_op_res_43526;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43509)[sext_i32_i64(local_tid_43505)] =
                                    x_43524;
                            }
                        }
                        offset_43536 *= 2;
                    }
                    while (slt32(skip_waves_43537,
                                 squot32(sext_i64_i32(segred_group_sizze_38247) +
                                         wave_sizze_43507 - 1,
                                         wave_sizze_43507))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_43536 = skip_waves_43537 * wave_sizze_43507;
                        if (slt32(local_tid_43505 + offset_43536,
                                  sext_i64_i32(segred_group_sizze_38247)) &&
                            ((local_tid_43505 - squot32(local_tid_43505,
                                                        wave_sizze_43507) *
                              wave_sizze_43507) == 0 &&
                             (squot32(local_tid_43505, wave_sizze_43507) & (2 *
                                                                            skip_waves_43537 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_43525 = ((__local
                                            float *) red_arr_mem_43509)[sext_i32_i64(local_tid_43505 +
                                                                        offset_43536)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43526 = x_43524 + x_43525;
                                
                                x_43524 = defunc_1_op_res_43526;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_43509)[sext_i32_i64(local_tid_43505)] =
                                    x_43524;
                            }
                        }
                        skip_waves_43537 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_43505 == 0) {
                            ((__global float *) mem_42209)[gtid_38190 *
                                                           N_29559 +
                                                           gtid_38191] =
                                x_43524;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_38247
}
__kernel void mainzisegred_large_38656(__global int *global_failure,
                                       int failure_is_an_option, __global
                                       int64_t *global_failure_args,
                                       __local volatile
                                       int64_t *sync_arr_mem_43787_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_43785_backing_aligned_1,
                                       int64_t N_29559, int64_t m_29560,
                                       int64_t i32_res_29569,
                                       int64_t num_groups_38707,
                                       int64_t groups_per_segment_43771,
                                       int64_t elements_per_thread_43772,
                                       int64_t virt_num_groups_43773,
                                       int64_t threads_per_segment_43775,
                                       __global
                                       unsigned char *defunc_4_map_res_mem_42266,
                                       __global unsigned char *mem_42329,
                                       __global unsigned char *mem_42333,
                                       __global
                                       unsigned char *segred_tmp_mem_43776,
                                       __global
                                       unsigned char *mainzicounter_mem_43778)
{
    #define segred_group_sizze_38706 (mainzisegred_group_sizze_38650)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_43787_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_43787_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_43785_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43785_backing_aligned_1;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43780;
    int32_t local_tid_43781;
    int64_t group_sizze_43784;
    int32_t wave_sizze_43783;
    int32_t group_tid_43782;
    
    global_tid_43780 = get_global_id(0);
    local_tid_43781 = get_local_id(0);
    group_sizze_43784 = get_local_size(0);
    wave_sizze_43783 = LOCKSTEP_WIDTH;
    group_tid_43782 = get_group_id(0);
    
    int32_t phys_tid_38656 = global_tid_43780;
    __local char *red_arr_mem_43785;
    
    red_arr_mem_43785 = (__local char *) red_arr_mem_43785_backing_0;
    
    __local char *sync_arr_mem_43787;
    
    sync_arr_mem_43787 = (__local char *) sync_arr_mem_43787_backing_1;
    
    int32_t phys_group_id_43789;
    
    phys_group_id_43789 = get_group_id(0);
    for (int32_t i_43790 = 0; i_43790 <
         sdiv_up32(sext_i64_i32(virt_num_groups_43773) - phys_group_id_43789,
                   sext_i64_i32(num_groups_38707)); i_43790++) {
        int32_t virt_group_id_43791 = phys_group_id_43789 + i_43790 *
                sext_i64_i32(num_groups_38707);
        int32_t flat_segment_id_43792 = squot32(virt_group_id_43791,
                                                sext_i64_i32(groups_per_segment_43771));
        int64_t global_tid_43793 = srem64(sext_i32_i64(virt_group_id_43791) *
                                          segred_group_sizze_38706 +
                                          sext_i32_i64(local_tid_43781),
                                          segred_group_sizze_38706 *
                                          groups_per_segment_43771);
        int64_t slice_43794 = m_29560;
        int64_t gtid_38647 = sext_i32_i64(flat_segment_id_43792);
        int64_t remnant_43795 = sext_i32_i64(flat_segment_id_43792) -
                gtid_38647;
        int64_t gtid_38655;
        float x_acc_43796;
        int64_t chunk_sizze_43797 = smin64(elements_per_thread_43772,
                                           sdiv_up64(i32_res_29569 -
                                                     global_tid_43793,
                                                     threads_per_segment_43775));
        float x_38710;
        float x_38711;
        
        // neutral-initialise the accumulators
        {
            x_acc_43796 = 0.0F;
        }
        for (int64_t i_43801 = 0; i_43801 < chunk_sizze_43797; i_43801++) {
            gtid_38655 = global_tid_43793 + threads_per_segment_43775 * i_43801;
            // apply map function
            {
                int32_t defunc_0_f_res_38714 = ((__global
                                                 int32_t *) mem_42329)[gtid_38647];
                int32_t index_primexp_39436 = sext_i64_i32(gtid_38655);
                bool cond_38716 = slt32(index_primexp_39436,
                                        defunc_0_f_res_38714);
                float defunc_0_f_res_38717;
                
                if (cond_38716) {
                    int64_t i_38718 = sext_i32_i64(index_primexp_39436);
                    bool x_38719 = sle64((int64_t) 0, i_38718);
                    bool y_38720 = slt64(i_38718, N_29559);
                    bool bounds_check_38721 = x_38719 && y_38720;
                    bool index_certs_38722;
                    
                    if (!bounds_check_38721) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          19) == -1) {
                                global_failure_args[0] = i_38718;
                                global_failure_args[1] = N_29559;
                                ;
                            }
                            local_failure = true;
                            goto error_0;
                        }
                    }
                    
                    float defunc_0_f_res_t_res_38723 = ((__global
                                                         float *) defunc_4_map_res_mem_42266)[gtid_38647 *
                                                                                              N_29559 +
                                                                                              i_38718];
                    
                    defunc_0_f_res_38717 = defunc_0_f_res_t_res_38723;
                } else {
                    defunc_0_f_res_38717 = 0.0F;
                }
                
                float defunc_0_f_res_38724 = defunc_0_f_res_38717 *
                      defunc_0_f_res_38717;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_38710 = x_acc_43796;
                }
                // load new values
                {
                    x_38711 = defunc_0_f_res_38724;
                }
                // apply reduction operator
                {
                    float defunc_1_op_res_38712 = x_38710 + x_38711;
                    
                    // store in accumulator
                    {
                        x_acc_43796 = defunc_1_op_res_38712;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_38710 = x_acc_43796;
            ((__local
              float *) red_arr_mem_43785)[sext_i32_i64(local_tid_43781)] =
                x_38710;
        }
        
      error_0:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_43802;
        int32_t skip_waves_43803 = 1;
        float x_43798;
        float x_43799;
        
        offset_43802 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_43781,
                      sext_i64_i32(segred_group_sizze_38706))) {
                x_43798 = ((__local
                            float *) red_arr_mem_43785)[sext_i32_i64(local_tid_43781 +
                                                        offset_43802)];
            }
        }
        offset_43802 = 1;
        while (slt32(offset_43802, wave_sizze_43783)) {
            if (slt32(local_tid_43781 + offset_43802,
                      sext_i64_i32(segred_group_sizze_38706)) &&
                ((local_tid_43781 - squot32(local_tid_43781, wave_sizze_43783) *
                  wave_sizze_43783) & (2 * offset_43802 - 1)) == 0) {
                // read array element
                {
                    x_43799 = ((volatile __local
                                float *) red_arr_mem_43785)[sext_i32_i64(local_tid_43781 +
                                                            offset_43802)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43800 = x_43798 + x_43799;
                    
                    x_43798 = defunc_1_op_res_43800;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_43785)[sext_i32_i64(local_tid_43781)] =
                        x_43798;
                }
            }
            offset_43802 *= 2;
        }
        while (slt32(skip_waves_43803,
                     squot32(sext_i64_i32(segred_group_sizze_38706) +
                             wave_sizze_43783 - 1, wave_sizze_43783))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_43802 = skip_waves_43803 * wave_sizze_43783;
            if (slt32(local_tid_43781 + offset_43802,
                      sext_i64_i32(segred_group_sizze_38706)) &&
                ((local_tid_43781 - squot32(local_tid_43781, wave_sizze_43783) *
                  wave_sizze_43783) == 0 && (squot32(local_tid_43781,
                                                     wave_sizze_43783) & (2 *
                                                                          skip_waves_43803 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_43799 = ((__local
                                float *) red_arr_mem_43785)[sext_i32_i64(local_tid_43781 +
                                                            offset_43802)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43800 = x_43798 + x_43799;
                    
                    x_43798 = defunc_1_op_res_43800;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_43785)[sext_i32_i64(local_tid_43781)] =
                        x_43798;
                }
            }
            skip_waves_43803 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_43781) == (int64_t) 0) {
                x_acc_43796 = x_43798;
            }
        }
        if (groups_per_segment_43771 == (int64_t) 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_43781 == 0) {
                    ((__global float *) mem_42333)[gtid_38647] = x_acc_43796;
                }
            }
        } else {
            int32_t old_counter_43804;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_43781 == 0) {
                    ((__global
                      float *) segred_tmp_mem_43776)[sext_i32_i64(virt_group_id_43791)] =
                        x_acc_43796;
                    mem_fence_global();
                    old_counter_43804 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_43778)[sext_i32_i64(srem32(flat_segment_id_43792,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_43787)[(int64_t) 0] =
                        old_counter_43804 == groups_per_segment_43771 -
                        (int64_t) 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_43805 = ((__local
                                         bool *) sync_arr_mem_43787)[(int64_t) 0];
            
            if (is_last_group_43805) {
                if (local_tid_43781 == 0) {
                    old_counter_43804 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_43778)[sext_i32_i64(srem32(flat_segment_id_43792,
                                                                                                     10240))],
                                              (int) ((int64_t) 0 -
                                                     groups_per_segment_43771));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_43806 =
                            sdiv_up64(groups_per_segment_43771,
                                      segred_group_sizze_38706);
                    
                    x_38710 = 0.0F;
                    for (int64_t i_43807 = 0; i_43807 < read_per_thread_43806;
                         i_43807++) {
                        int64_t group_res_id_43808 =
                                sext_i32_i64(local_tid_43781) *
                                read_per_thread_43806 + i_43807;
                        int64_t index_of_group_res_43809 =
                                sext_i32_i64(flat_segment_id_43792) *
                                groups_per_segment_43771 + group_res_id_43808;
                        
                        if (slt64(group_res_id_43808,
                                  groups_per_segment_43771)) {
                            x_38711 = ((__global
                                        float *) segred_tmp_mem_43776)[index_of_group_res_43809];
                            
                            float defunc_1_op_res_38712 = x_38710 + x_38711;
                            
                            x_38710 = defunc_1_op_res_38712;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_43785)[sext_i32_i64(local_tid_43781)] =
                    x_38710;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_43810;
                    int32_t skip_waves_43811 = 1;
                    float x_43798;
                    float x_43799;
                    
                    offset_43810 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_43781,
                                  sext_i64_i32(segred_group_sizze_38706))) {
                            x_43798 = ((__local
                                        float *) red_arr_mem_43785)[sext_i32_i64(local_tid_43781 +
                                                                    offset_43810)];
                        }
                    }
                    offset_43810 = 1;
                    while (slt32(offset_43810, wave_sizze_43783)) {
                        if (slt32(local_tid_43781 + offset_43810,
                                  sext_i64_i32(segred_group_sizze_38706)) &&
                            ((local_tid_43781 - squot32(local_tid_43781,
                                                        wave_sizze_43783) *
                              wave_sizze_43783) & (2 * offset_43810 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_43799 = ((volatile __local
                                            float *) red_arr_mem_43785)[sext_i32_i64(local_tid_43781 +
                                                                        offset_43810)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43800 = x_43798 + x_43799;
                                
                                x_43798 = defunc_1_op_res_43800;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43785)[sext_i32_i64(local_tid_43781)] =
                                    x_43798;
                            }
                        }
                        offset_43810 *= 2;
                    }
                    while (slt32(skip_waves_43811,
                                 squot32(sext_i64_i32(segred_group_sizze_38706) +
                                         wave_sizze_43783 - 1,
                                         wave_sizze_43783))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_43810 = skip_waves_43811 * wave_sizze_43783;
                        if (slt32(local_tid_43781 + offset_43810,
                                  sext_i64_i32(segred_group_sizze_38706)) &&
                            ((local_tid_43781 - squot32(local_tid_43781,
                                                        wave_sizze_43783) *
                              wave_sizze_43783) == 0 &&
                             (squot32(local_tid_43781, wave_sizze_43783) & (2 *
                                                                            skip_waves_43811 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_43799 = ((__local
                                            float *) red_arr_mem_43785)[sext_i32_i64(local_tid_43781 +
                                                                        offset_43810)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43800 = x_43798 + x_43799;
                                
                                x_43798 = defunc_1_op_res_43800;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_43785)[sext_i32_i64(local_tid_43781)] =
                                    x_43798;
                            }
                        }
                        skip_waves_43811 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_43781 == 0) {
                            ((__global float *) mem_42333)[gtid_38647] =
                                x_43798;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_38706
}
__kernel void mainzisegred_large_38681(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_43723_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_43721_backing_aligned_1,
                                       int64_t N_29559, int64_t m_29560,
                                       int64_t i32_res_29569,
                                       int64_t num_groups_38693,
                                       int64_t groups_per_segment_43707,
                                       int64_t elements_per_thread_43708,
                                       int64_t virt_num_groups_43709,
                                       int64_t threads_per_segment_43711,
                                       __global unsigned char *images_mem_41421,
                                       __global unsigned char *mem_42329,
                                       __global
                                       unsigned char *segred_tmp_mem_43712,
                                       __global
                                       unsigned char *mainzicounter_mem_43714)
{
    #define segred_group_sizze_38692 (mainzisegred_group_sizze_38675)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_43723_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_43723_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_43721_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43721_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43716;
    int32_t local_tid_43717;
    int64_t group_sizze_43720;
    int32_t wave_sizze_43719;
    int32_t group_tid_43718;
    
    global_tid_43716 = get_global_id(0);
    local_tid_43717 = get_local_id(0);
    group_sizze_43720 = get_local_size(0);
    wave_sizze_43719 = LOCKSTEP_WIDTH;
    group_tid_43718 = get_group_id(0);
    
    int32_t phys_tid_38681 = global_tid_43716;
    __local char *red_arr_mem_43721;
    
    red_arr_mem_43721 = (__local char *) red_arr_mem_43721_backing_0;
    
    __local char *sync_arr_mem_43723;
    
    sync_arr_mem_43723 = (__local char *) sync_arr_mem_43723_backing_1;
    
    int32_t phys_group_id_43725;
    
    phys_group_id_43725 = get_group_id(0);
    for (int32_t i_43726 = 0; i_43726 <
         sdiv_up32(sext_i64_i32(virt_num_groups_43709) - phys_group_id_43725,
                   sext_i64_i32(num_groups_38693)); i_43726++) {
        int32_t virt_group_id_43727 = phys_group_id_43725 + i_43726 *
                sext_i64_i32(num_groups_38693);
        int32_t flat_segment_id_43728 = squot32(virt_group_id_43727,
                                                sext_i64_i32(groups_per_segment_43707));
        int64_t global_tid_43729 = srem64(sext_i32_i64(virt_group_id_43727) *
                                          segred_group_sizze_38692 +
                                          sext_i32_i64(local_tid_43717),
                                          segred_group_sizze_38692 *
                                          groups_per_segment_43707);
        int64_t slice_43730 = m_29560;
        int64_t gtid_38672 = sext_i32_i64(flat_segment_id_43728);
        int64_t remnant_43731 = sext_i32_i64(flat_segment_id_43728) -
                gtid_38672;
        int64_t gtid_38680;
        int32_t x_acc_43732;
        int64_t chunk_sizze_43733 = smin64(elements_per_thread_43708,
                                           sdiv_up64(i32_res_29569 -
                                                     global_tid_43729,
                                                     threads_per_segment_43711));
        int32_t x_38696;
        int32_t x_38697;
        
        // neutral-initialise the accumulators
        {
            x_acc_43732 = 0;
        }
        for (int64_t i_43737 = 0; i_43737 < chunk_sizze_43733; i_43737++) {
            gtid_38680 = global_tid_43729 + threads_per_segment_43711 * i_43737;
            // apply map function
            {
                float x_38700 = ((__global
                                  float *) images_mem_41421)[gtid_38672 *
                                                             N_29559 +
                                                             gtid_38680];
                bool isnan_res_38701;
                
                isnan_res_38701 = futrts_isnan32(x_38700);
                
                bool cond_38702 = !isnan_res_38701;
                int32_t defunc_0_f_res_38703 = btoi_bool_i32(cond_38702);
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_38696 = x_acc_43732;
                }
                // load new values
                {
                    x_38697 = defunc_0_f_res_38703;
                }
                // apply reduction operator
                {
                    int32_t defunc_1_op_res_38698 = add32(x_38696, x_38697);
                    
                    // store in accumulator
                    {
                        x_acc_43732 = defunc_1_op_res_38698;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_38696 = x_acc_43732;
            ((__local
              int32_t *) red_arr_mem_43721)[sext_i32_i64(local_tid_43717)] =
                x_38696;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_43738;
        int32_t skip_waves_43739 = 1;
        int32_t x_43734;
        int32_t x_43735;
        
        offset_43738 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_43717,
                      sext_i64_i32(segred_group_sizze_38692))) {
                x_43734 = ((__local
                            int32_t *) red_arr_mem_43721)[sext_i32_i64(local_tid_43717 +
                                                          offset_43738)];
            }
        }
        offset_43738 = 1;
        while (slt32(offset_43738, wave_sizze_43719)) {
            if (slt32(local_tid_43717 + offset_43738,
                      sext_i64_i32(segred_group_sizze_38692)) &&
                ((local_tid_43717 - squot32(local_tid_43717, wave_sizze_43719) *
                  wave_sizze_43719) & (2 * offset_43738 - 1)) == 0) {
                // read array element
                {
                    x_43735 = ((volatile __local
                                int32_t *) red_arr_mem_43721)[sext_i32_i64(local_tid_43717 +
                                                              offset_43738)];
                }
                // apply reduction operation
                {
                    int32_t defunc_1_op_res_43736 = add32(x_43734, x_43735);
                    
                    x_43734 = defunc_1_op_res_43736;
                }
                // write result of operation
                {
                    ((volatile __local
                      int32_t *) red_arr_mem_43721)[sext_i32_i64(local_tid_43717)] =
                        x_43734;
                }
            }
            offset_43738 *= 2;
        }
        while (slt32(skip_waves_43739,
                     squot32(sext_i64_i32(segred_group_sizze_38692) +
                             wave_sizze_43719 - 1, wave_sizze_43719))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_43738 = skip_waves_43739 * wave_sizze_43719;
            if (slt32(local_tid_43717 + offset_43738,
                      sext_i64_i32(segred_group_sizze_38692)) &&
                ((local_tid_43717 - squot32(local_tid_43717, wave_sizze_43719) *
                  wave_sizze_43719) == 0 && (squot32(local_tid_43717,
                                                     wave_sizze_43719) & (2 *
                                                                          skip_waves_43739 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_43735 = ((__local
                                int32_t *) red_arr_mem_43721)[sext_i32_i64(local_tid_43717 +
                                                              offset_43738)];
                }
                // apply reduction operation
                {
                    int32_t defunc_1_op_res_43736 = add32(x_43734, x_43735);
                    
                    x_43734 = defunc_1_op_res_43736;
                }
                // write result of operation
                {
                    ((__local
                      int32_t *) red_arr_mem_43721)[sext_i32_i64(local_tid_43717)] =
                        x_43734;
                }
            }
            skip_waves_43739 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_43717) == (int64_t) 0) {
                x_acc_43732 = x_43734;
            }
        }
        if (groups_per_segment_43707 == (int64_t) 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_43717 == 0) {
                    ((__global int32_t *) mem_42329)[gtid_38672] = x_acc_43732;
                }
            }
        } else {
            int32_t old_counter_43740;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_43717 == 0) {
                    ((__global
                      int32_t *) segred_tmp_mem_43712)[sext_i32_i64(virt_group_id_43727)] =
                        x_acc_43732;
                    mem_fence_global();
                    old_counter_43740 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_43714)[sext_i32_i64(srem32(flat_segment_id_43728,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_43723)[(int64_t) 0] =
                        old_counter_43740 == groups_per_segment_43707 -
                        (int64_t) 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_43741 = ((__local
                                         bool *) sync_arr_mem_43723)[(int64_t) 0];
            
            if (is_last_group_43741) {
                if (local_tid_43717 == 0) {
                    old_counter_43740 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_43714)[sext_i32_i64(srem32(flat_segment_id_43728,
                                                                                                     10240))],
                                              (int) ((int64_t) 0 -
                                                     groups_per_segment_43707));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_43742 =
                            sdiv_up64(groups_per_segment_43707,
                                      segred_group_sizze_38692);
                    
                    x_38696 = 0;
                    for (int64_t i_43743 = 0; i_43743 < read_per_thread_43742;
                         i_43743++) {
                        int64_t group_res_id_43744 =
                                sext_i32_i64(local_tid_43717) *
                                read_per_thread_43742 + i_43743;
                        int64_t index_of_group_res_43745 =
                                sext_i32_i64(flat_segment_id_43728) *
                                groups_per_segment_43707 + group_res_id_43744;
                        
                        if (slt64(group_res_id_43744,
                                  groups_per_segment_43707)) {
                            x_38697 = ((__global
                                        int32_t *) segred_tmp_mem_43712)[index_of_group_res_43745];
                            
                            int32_t defunc_1_op_res_38698 = add32(x_38696,
                                                                  x_38697);
                            
                            x_38696 = defunc_1_op_res_38698;
                        }
                    }
                }
                ((__local
                  int32_t *) red_arr_mem_43721)[sext_i32_i64(local_tid_43717)] =
                    x_38696;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_43746;
                    int32_t skip_waves_43747 = 1;
                    int32_t x_43734;
                    int32_t x_43735;
                    
                    offset_43746 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_43717,
                                  sext_i64_i32(segred_group_sizze_38692))) {
                            x_43734 = ((__local
                                        int32_t *) red_arr_mem_43721)[sext_i32_i64(local_tid_43717 +
                                                                      offset_43746)];
                        }
                    }
                    offset_43746 = 1;
                    while (slt32(offset_43746, wave_sizze_43719)) {
                        if (slt32(local_tid_43717 + offset_43746,
                                  sext_i64_i32(segred_group_sizze_38692)) &&
                            ((local_tid_43717 - squot32(local_tid_43717,
                                                        wave_sizze_43719) *
                              wave_sizze_43719) & (2 * offset_43746 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_43735 = ((volatile __local
                                            int32_t *) red_arr_mem_43721)[sext_i32_i64(local_tid_43717 +
                                                                          offset_43746)];
                            }
                            // apply reduction operation
                            {
                                int32_t defunc_1_op_res_43736 = add32(x_43734,
                                                                      x_43735);
                                
                                x_43734 = defunc_1_op_res_43736;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  int32_t *) red_arr_mem_43721)[sext_i32_i64(local_tid_43717)] =
                                    x_43734;
                            }
                        }
                        offset_43746 *= 2;
                    }
                    while (slt32(skip_waves_43747,
                                 squot32(sext_i64_i32(segred_group_sizze_38692) +
                                         wave_sizze_43719 - 1,
                                         wave_sizze_43719))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_43746 = skip_waves_43747 * wave_sizze_43719;
                        if (slt32(local_tid_43717 + offset_43746,
                                  sext_i64_i32(segred_group_sizze_38692)) &&
                            ((local_tid_43717 - squot32(local_tid_43717,
                                                        wave_sizze_43719) *
                              wave_sizze_43719) == 0 &&
                             (squot32(local_tid_43717, wave_sizze_43719) & (2 *
                                                                            skip_waves_43747 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_43735 = ((__local
                                            int32_t *) red_arr_mem_43721)[sext_i32_i64(local_tid_43717 +
                                                                          offset_43746)];
                            }
                            // apply reduction operation
                            {
                                int32_t defunc_1_op_res_43736 = add32(x_43734,
                                                                      x_43735);
                                
                                x_43734 = defunc_1_op_res_43736;
                            }
                            // write result of operation
                            {
                                ((__local
                                  int32_t *) red_arr_mem_43721)[sext_i32_i64(local_tid_43717)] =
                                    x_43734;
                            }
                        }
                        skip_waves_43747 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_43717 == 0) {
                            ((__global int32_t *) mem_42329)[gtid_38672] =
                                x_43734;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_38692
}
__kernel void mainzisegred_large_38828(__global int *global_failure,
                                       int failure_is_an_option, __global
                                       int64_t *global_failure_args,
                                       __local volatile
                                       int64_t *sync_arr_mem_43905_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_43903_backing_aligned_1,
                                       int64_t N_29559, int64_t m_29560,
                                       int64_t i32_res_29960,
                                       int64_t num_groups_38850,
                                       int64_t groups_per_segment_43889,
                                       int64_t elements_per_thread_43890,
                                       int64_t virt_num_groups_43891,
                                       int64_t threads_per_segment_43893,
                                       __global
                                       unsigned char *defunc_4_map_res_mem_42266,
                                       __global
                                       unsigned char *defunc_3_map_res_mem_42344,
                                       __global
                                       unsigned char *defunc_3_map_res_mem_42345,
                                       __global unsigned char *mem_42382,
                                       __global
                                       unsigned char *segred_tmp_mem_43894,
                                       __global
                                       unsigned char *mainzicounter_mem_43896)
{
    #define segred_group_sizze_38849 (mainzisegred_group_sizze_38822)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_43905_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_43905_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_43903_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43903_backing_aligned_1;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43898;
    int32_t local_tid_43899;
    int64_t group_sizze_43902;
    int32_t wave_sizze_43901;
    int32_t group_tid_43900;
    
    global_tid_43898 = get_global_id(0);
    local_tid_43899 = get_local_id(0);
    group_sizze_43902 = get_local_size(0);
    wave_sizze_43901 = LOCKSTEP_WIDTH;
    group_tid_43900 = get_group_id(0);
    
    int32_t phys_tid_38828 = global_tid_43898;
    __local char *red_arr_mem_43903;
    
    red_arr_mem_43903 = (__local char *) red_arr_mem_43903_backing_0;
    
    __local char *sync_arr_mem_43905;
    
    sync_arr_mem_43905 = (__local char *) sync_arr_mem_43905_backing_1;
    
    int32_t phys_group_id_43907;
    
    phys_group_id_43907 = get_group_id(0);
    for (int32_t i_43908 = 0; i_43908 <
         sdiv_up32(sext_i64_i32(virt_num_groups_43891) - phys_group_id_43907,
                   sext_i64_i32(num_groups_38850)); i_43908++) {
        int32_t virt_group_id_43909 = phys_group_id_43907 + i_43908 *
                sext_i64_i32(num_groups_38850);
        int32_t flat_segment_id_43910 = squot32(virt_group_id_43909,
                                                sext_i64_i32(groups_per_segment_43889));
        int64_t global_tid_43911 = srem64(sext_i32_i64(virt_group_id_43909) *
                                          segred_group_sizze_38849 +
                                          sext_i32_i64(local_tid_43899),
                                          segred_group_sizze_38849 *
                                          groups_per_segment_43889);
        int64_t slice_43912 = m_29560;
        int64_t gtid_38819 = sext_i32_i64(flat_segment_id_43910);
        int64_t remnant_43913 = sext_i32_i64(flat_segment_id_43910) -
                gtid_38819;
        int64_t gtid_38827;
        float x_acc_43914;
        int64_t chunk_sizze_43915 = smin64(elements_per_thread_43890,
                                           sdiv_up64(i32_res_29960 -
                                                     global_tid_43911,
                                                     threads_per_segment_43893));
        float x_38853;
        float x_38854;
        
        // neutral-initialise the accumulators
        {
            x_acc_43914 = 0.0F;
        }
        for (int64_t i_43919 = 0; i_43919 < chunk_sizze_43915; i_43919++) {
            gtid_38827 = global_tid_43911 + threads_per_segment_43893 * i_43919;
            // apply map function
            {
                int32_t x_38858 = ((__global
                                    int32_t *) defunc_3_map_res_mem_42344)[gtid_38819];
                int32_t index_primexp_39441 = sext_i64_i32(gtid_38827);
                bool cond_38860 = slt32(index_primexp_39441, x_38858);
                float defunc_0_f_res_38861;
                
                if (cond_38860) {
                    int32_t x_38857 = ((__global
                                        int32_t *) defunc_3_map_res_mem_42345)[gtid_38819];
                    int32_t x_38862 = add32(x_38857, index_primexp_39441);
                    int32_t x_38863 = sub32(x_38862, x_38858);
                    int32_t i_38864 = add32(1, x_38863);
                    int64_t i_38865 = sext_i32_i64(i_38864);
                    bool x_38866 = sle64((int64_t) 0, i_38865);
                    bool y_38867 = slt64(i_38865, N_29559);
                    bool bounds_check_38868 = x_38866 && y_38867;
                    bool index_certs_38869;
                    
                    if (!bounds_check_38868) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          23) == -1) {
                                global_failure_args[0] = i_38865;
                                global_failure_args[1] = N_29559;
                                ;
                            }
                            local_failure = true;
                            goto error_0;
                        }
                    }
                    
                    float defunc_0_f_res_t_res_38870 = ((__global
                                                         float *) defunc_4_map_res_mem_42266)[gtid_38819 *
                                                                                              N_29559 +
                                                                                              i_38865];
                    
                    defunc_0_f_res_38861 = defunc_0_f_res_t_res_38870;
                } else {
                    defunc_0_f_res_38861 = 0.0F;
                }
                // save map-out results
                { }
                // load accumulator
                {
                    x_38853 = x_acc_43914;
                }
                // load new values
                {
                    x_38854 = defunc_0_f_res_38861;
                }
                // apply reduction operator
                {
                    float defunc_1_op_res_38855 = x_38853 + x_38854;
                    
                    // store in accumulator
                    {
                        x_acc_43914 = defunc_1_op_res_38855;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_38853 = x_acc_43914;
            ((__local
              float *) red_arr_mem_43903)[sext_i32_i64(local_tid_43899)] =
                x_38853;
        }
        
      error_0:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_43920;
        int32_t skip_waves_43921 = 1;
        float x_43916;
        float x_43917;
        
        offset_43920 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_43899,
                      sext_i64_i32(segred_group_sizze_38849))) {
                x_43916 = ((__local
                            float *) red_arr_mem_43903)[sext_i32_i64(local_tid_43899 +
                                                        offset_43920)];
            }
        }
        offset_43920 = 1;
        while (slt32(offset_43920, wave_sizze_43901)) {
            if (slt32(local_tid_43899 + offset_43920,
                      sext_i64_i32(segred_group_sizze_38849)) &&
                ((local_tid_43899 - squot32(local_tid_43899, wave_sizze_43901) *
                  wave_sizze_43901) & (2 * offset_43920 - 1)) == 0) {
                // read array element
                {
                    x_43917 = ((volatile __local
                                float *) red_arr_mem_43903)[sext_i32_i64(local_tid_43899 +
                                                            offset_43920)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43918 = x_43916 + x_43917;
                    
                    x_43916 = defunc_1_op_res_43918;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_43903)[sext_i32_i64(local_tid_43899)] =
                        x_43916;
                }
            }
            offset_43920 *= 2;
        }
        while (slt32(skip_waves_43921,
                     squot32(sext_i64_i32(segred_group_sizze_38849) +
                             wave_sizze_43901 - 1, wave_sizze_43901))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_43920 = skip_waves_43921 * wave_sizze_43901;
            if (slt32(local_tid_43899 + offset_43920,
                      sext_i64_i32(segred_group_sizze_38849)) &&
                ((local_tid_43899 - squot32(local_tid_43899, wave_sizze_43901) *
                  wave_sizze_43901) == 0 && (squot32(local_tid_43899,
                                                     wave_sizze_43901) & (2 *
                                                                          skip_waves_43921 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_43917 = ((__local
                                float *) red_arr_mem_43903)[sext_i32_i64(local_tid_43899 +
                                                            offset_43920)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43918 = x_43916 + x_43917;
                    
                    x_43916 = defunc_1_op_res_43918;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_43903)[sext_i32_i64(local_tid_43899)] =
                        x_43916;
                }
            }
            skip_waves_43921 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_43899) == (int64_t) 0) {
                x_acc_43914 = x_43916;
            }
        }
        if (groups_per_segment_43889 == (int64_t) 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_43899 == 0) {
                    ((__global float *) mem_42382)[gtid_38819] = x_acc_43914;
                }
            }
        } else {
            int32_t old_counter_43922;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_43899 == 0) {
                    ((__global
                      float *) segred_tmp_mem_43894)[sext_i32_i64(virt_group_id_43909)] =
                        x_acc_43914;
                    mem_fence_global();
                    old_counter_43922 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_43896)[sext_i32_i64(srem32(flat_segment_id_43910,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_43905)[(int64_t) 0] =
                        old_counter_43922 == groups_per_segment_43889 -
                        (int64_t) 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_43923 = ((__local
                                         bool *) sync_arr_mem_43905)[(int64_t) 0];
            
            if (is_last_group_43923) {
                if (local_tid_43899 == 0) {
                    old_counter_43922 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_43896)[sext_i32_i64(srem32(flat_segment_id_43910,
                                                                                                     10240))],
                                              (int) ((int64_t) 0 -
                                                     groups_per_segment_43889));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_43924 =
                            sdiv_up64(groups_per_segment_43889,
                                      segred_group_sizze_38849);
                    
                    x_38853 = 0.0F;
                    for (int64_t i_43925 = 0; i_43925 < read_per_thread_43924;
                         i_43925++) {
                        int64_t group_res_id_43926 =
                                sext_i32_i64(local_tid_43899) *
                                read_per_thread_43924 + i_43925;
                        int64_t index_of_group_res_43927 =
                                sext_i32_i64(flat_segment_id_43910) *
                                groups_per_segment_43889 + group_res_id_43926;
                        
                        if (slt64(group_res_id_43926,
                                  groups_per_segment_43889)) {
                            x_38854 = ((__global
                                        float *) segred_tmp_mem_43894)[index_of_group_res_43927];
                            
                            float defunc_1_op_res_38855 = x_38853 + x_38854;
                            
                            x_38853 = defunc_1_op_res_38855;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_43903)[sext_i32_i64(local_tid_43899)] =
                    x_38853;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_43928;
                    int32_t skip_waves_43929 = 1;
                    float x_43916;
                    float x_43917;
                    
                    offset_43928 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_43899,
                                  sext_i64_i32(segred_group_sizze_38849))) {
                            x_43916 = ((__local
                                        float *) red_arr_mem_43903)[sext_i32_i64(local_tid_43899 +
                                                                    offset_43928)];
                        }
                    }
                    offset_43928 = 1;
                    while (slt32(offset_43928, wave_sizze_43901)) {
                        if (slt32(local_tid_43899 + offset_43928,
                                  sext_i64_i32(segred_group_sizze_38849)) &&
                            ((local_tid_43899 - squot32(local_tid_43899,
                                                        wave_sizze_43901) *
                              wave_sizze_43901) & (2 * offset_43928 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_43917 = ((volatile __local
                                            float *) red_arr_mem_43903)[sext_i32_i64(local_tid_43899 +
                                                                        offset_43928)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43918 = x_43916 + x_43917;
                                
                                x_43916 = defunc_1_op_res_43918;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43903)[sext_i32_i64(local_tid_43899)] =
                                    x_43916;
                            }
                        }
                        offset_43928 *= 2;
                    }
                    while (slt32(skip_waves_43929,
                                 squot32(sext_i64_i32(segred_group_sizze_38849) +
                                         wave_sizze_43901 - 1,
                                         wave_sizze_43901))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_43928 = skip_waves_43929 * wave_sizze_43901;
                        if (slt32(local_tid_43899 + offset_43928,
                                  sext_i64_i32(segred_group_sizze_38849)) &&
                            ((local_tid_43899 - squot32(local_tid_43899,
                                                        wave_sizze_43901) *
                              wave_sizze_43901) == 0 &&
                             (squot32(local_tid_43899, wave_sizze_43901) & (2 *
                                                                            skip_waves_43929 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_43917 = ((__local
                                            float *) red_arr_mem_43903)[sext_i32_i64(local_tid_43899 +
                                                                        offset_43928)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43918 = x_43916 + x_43917;
                                
                                x_43916 = defunc_1_op_res_43918;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_43903)[sext_i32_i64(local_tid_43899)] =
                                    x_43916;
                            }
                        }
                        skip_waves_43929 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_43899 == 0) {
                            ((__global float *) mem_42382)[gtid_38819] =
                                x_43916;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_38849
}
__kernel void mainzisegred_large_39111(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_44098_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_44096_backing_aligned_1,
                                       __local volatile
                                       int64_t *red_arr_mem_44094_backing_aligned_2,
                                       __local volatile
                                       int64_t *red_arr_mem_44092_backing_aligned_3,
                                       int64_t m_29560,
                                       int64_t iota32_arg_29989,
                                       int64_t num_groups_39298,
                                       int64_t groups_per_segment_44074,
                                       int64_t elements_per_thread_44075,
                                       int64_t virt_num_groups_44076, __global
                                       unsigned char *mem_42390, __global
                                       unsigned char *mem_42406, __global
                                       unsigned char *mem_42409, __global
                                       unsigned char *mem_42414, __global
                                       unsigned char *mem_42417, __global
                                       unsigned char *mem_42420, __global
                                       unsigned char *mem_42423, __global
                                       unsigned char *segred_tmp_mem_44079,
                                       __global
                                       unsigned char *segred_tmp_mem_44081,
                                       __global
                                       unsigned char *segred_tmp_mem_44083,
                                       __global
                                       unsigned char *mainzicounter_mem_44085)
{
    #define segred_group_sizze_39297 (mainzisegred_group_sizze_39105)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_44098_backing_3 =
                          (__local volatile
                           char *) sync_arr_mem_44098_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_44096_backing_2 =
                          (__local volatile
                           char *) red_arr_mem_44096_backing_aligned_1;
    __local volatile char *restrict red_arr_mem_44094_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_44094_backing_aligned_2;
    __local volatile char *restrict red_arr_mem_44092_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_44092_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_44087;
    int32_t local_tid_44088;
    int64_t group_sizze_44091;
    int32_t wave_sizze_44090;
    int32_t group_tid_44089;
    
    global_tid_44087 = get_global_id(0);
    local_tid_44088 = get_local_id(0);
    group_sizze_44091 = get_local_size(0);
    wave_sizze_44090 = LOCKSTEP_WIDTH;
    group_tid_44089 = get_group_id(0);
    
    int32_t phys_tid_39111 = global_tid_44087;
    __local char *red_arr_mem_44092;
    
    red_arr_mem_44092 = (__local char *) red_arr_mem_44092_backing_0;
    
    __local char *red_arr_mem_44094;
    
    red_arr_mem_44094 = (__local char *) red_arr_mem_44094_backing_1;
    
    __local char *red_arr_mem_44096;
    
    red_arr_mem_44096 = (__local char *) red_arr_mem_44096_backing_2;
    
    __local char *sync_arr_mem_44098;
    
    sync_arr_mem_44098 = (__local char *) sync_arr_mem_44098_backing_3;
    
    int32_t phys_group_id_44100;
    
    phys_group_id_44100 = get_group_id(0);
    for (int32_t i_44101 = 0; i_44101 <
         sdiv_up32(sext_i64_i32(virt_num_groups_44076) - phys_group_id_44100,
                   sext_i64_i32(num_groups_39298)); i_44101++) {
        int32_t virt_group_id_44102 = phys_group_id_44100 + i_44101 *
                sext_i64_i32(num_groups_39298);
        int32_t flat_segment_id_44103 = squot32(virt_group_id_44102,
                                                sext_i64_i32(groups_per_segment_44074));
        int64_t global_tid_44104 = srem64(sext_i32_i64(virt_group_id_44102) *
                                          segred_group_sizze_39297 +
                                          sext_i32_i64(local_tid_44088),
                                          segred_group_sizze_39297 *
                                          groups_per_segment_44074);
        int64_t slice_44105 = m_29560;
        int64_t gtid_39102 = sext_i32_i64(flat_segment_id_44103);
        int64_t remnant_44106 = sext_i32_i64(flat_segment_id_44103) -
                gtid_39102;
        int64_t gtid_39110;
        bool x_acc_44107;
        int32_t x_acc_44108;
        float x_acc_44109;
        int64_t chunk_sizze_44110;
        int64_t starting_point_44111 = global_tid_44104 *
                elements_per_thread_44075;
        int64_t remaining_elements_44112 = iota32_arg_29989 -
                starting_point_44111;
        
        if (sle64(remaining_elements_44112, (int64_t) 0) ||
            sle64(iota32_arg_29989, starting_point_44111)) {
            chunk_sizze_44110 = (int64_t) 0;
        } else {
            if (slt64(iota32_arg_29989, (global_tid_44104 + (int64_t) 1) *
                      elements_per_thread_44075)) {
                chunk_sizze_44110 = iota32_arg_29989 - global_tid_44104 *
                    elements_per_thread_44075;
            } else {
                chunk_sizze_44110 = elements_per_thread_44075;
            }
        }
        
        bool x_39303;
        int32_t x_39304;
        float x_39305;
        bool x_39306;
        int32_t x_39307;
        float x_39308;
        
        // neutral-initialise the accumulators
        {
            x_acc_44107 = 0;
            x_acc_44108 = -1;
            x_acc_44109 = 0.0F;
        }
        for (int64_t i_44127 = 0; i_44127 < elements_per_thread_44075;
             i_44127++) {
            gtid_39110 = sext_i32_i64(local_tid_44088) +
                (squot64(global_tid_44104, segred_group_sizze_39297) *
                 elements_per_thread_44075 + i_44127) *
                segred_group_sizze_39297;
            if (slt64(gtid_39110, iota32_arg_29989)) {
                // apply map function
                {
                    int32_t y_39317 = ((__global
                                        int32_t *) mem_42409)[gtid_39102];
                    float y_39318 = ((__global float *) mem_42406)[gtid_39102];
                    float x_39322 = ((__global float *) mem_42414)[gtid_39102 *
                                                                   iota32_arg_29989 +
                                                                   gtid_39110];
                    float x_39323 = ((__global float *) mem_42390)[gtid_39110];
                    int32_t index_primexp_39455 = sext_i64_i32(gtid_39110);
                    float defunc_0_f_res_39326 = x_39322 / y_39318;
                    bool cond_39327 = slt32(index_primexp_39455, y_39317);
                    bool isnan_res_39328;
                    
                    isnan_res_39328 = futrts_isnan32(defunc_0_f_res_39326);
                    
                    bool cond_t_res_39329 = !isnan_res_39328;
                    bool x_39330 = cond_39327 && cond_t_res_39329;
                    float abs_res_39331 = (float) fabs(defunc_0_f_res_39326);
                    bool defunc_2_f_res_t_res_39332 = x_39323 < abs_res_39331;
                    bool x_39333 = x_39330 && defunc_2_f_res_t_res_39332;
                    float defunc_1_f_res_39334;
                    
                    if (cond_39327) {
                        defunc_1_f_res_39334 = defunc_0_f_res_39326;
                    } else {
                        defunc_1_f_res_39334 = 0.0F;
                    }
                    // save map-out results
                    { }
                    // load accumulator
                    {
                        x_39303 = x_acc_44107;
                        x_39304 = x_acc_44108;
                        x_39305 = x_acc_44109;
                    }
                    // load new values
                    {
                        x_39306 = x_39333;
                        x_39307 = index_primexp_39455;
                        x_39308 = defunc_1_f_res_39334;
                    }
                    // apply reduction operator
                    {
                        bool defunc_1_op_res_39309;
                        int32_t defunc_1_op_res_39310;
                        
                        if (x_39303) {
                            defunc_1_op_res_39309 = x_39303;
                            defunc_1_op_res_39310 = x_39304;
                        } else {
                            bool x_39311 = x_39306 && x_39306;
                            bool x_39312 = !x_39306;
                            bool y_39313 = x_39303 && x_39312;
                            bool defunc_1_op_res_f_res_39314 = x_39311 ||
                                 y_39313;
                            int32_t defunc_1_op_res_f_res_39315;
                            
                            if (x_39306) {
                                defunc_1_op_res_f_res_39315 = x_39307;
                            } else {
                                defunc_1_op_res_f_res_39315 = x_39304;
                            }
                            defunc_1_op_res_39309 = defunc_1_op_res_f_res_39314;
                            defunc_1_op_res_39310 = defunc_1_op_res_f_res_39315;
                        }
                        
                        float defunc_1_op_res_39316 = x_39305 + x_39308;
                        
                        // store in accumulator
                        {
                            x_acc_44107 = defunc_1_op_res_39309;
                            x_acc_44108 = defunc_1_op_res_39310;
                            x_acc_44109 = defunc_1_op_res_39316;
                        }
                    }
                }
            }
            // to reduce current chunk, first store our result in memory
            {
                x_39303 = x_acc_44107;
                x_39304 = x_acc_44108;
                x_39305 = x_acc_44109;
                ((__local
                  bool *) red_arr_mem_44092)[sext_i32_i64(local_tid_44088)] =
                    x_39303;
                ((__local
                  int32_t *) red_arr_mem_44094)[sext_i32_i64(local_tid_44088)] =
                    x_39304;
                ((__local
                  float *) red_arr_mem_44096)[sext_i32_i64(local_tid_44088)] =
                    x_39305;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int32_t offset_44128;
            int32_t skip_waves_44129 = 1;
            bool x_44113;
            int32_t x_44114;
            float x_44115;
            bool x_44116;
            int32_t x_44117;
            float x_44118;
            
            offset_44128 = 0;
            // participating threads read initial accumulator
            {
                if (slt32(local_tid_44088,
                          sext_i64_i32(segred_group_sizze_39297))) {
                    x_44113 = ((__local
                                bool *) red_arr_mem_44092)[sext_i32_i64(local_tid_44088 +
                                                           offset_44128)];
                    x_44114 = ((__local
                                int32_t *) red_arr_mem_44094)[sext_i32_i64(local_tid_44088 +
                                                              offset_44128)];
                    x_44115 = ((__local
                                float *) red_arr_mem_44096)[sext_i32_i64(local_tid_44088 +
                                                            offset_44128)];
                }
            }
            offset_44128 = 1;
            while (slt32(offset_44128, wave_sizze_44090)) {
                if (slt32(local_tid_44088 + offset_44128,
                          sext_i64_i32(segred_group_sizze_39297)) &&
                    ((local_tid_44088 - squot32(local_tid_44088,
                                                wave_sizze_44090) *
                      wave_sizze_44090) & (2 * offset_44128 - 1)) == 0) {
                    // read array element
                    {
                        x_44116 = ((volatile __local
                                    bool *) red_arr_mem_44092)[sext_i32_i64(local_tid_44088 +
                                                               offset_44128)];
                        x_44117 = ((volatile __local
                                    int32_t *) red_arr_mem_44094)[sext_i32_i64(local_tid_44088 +
                                                                  offset_44128)];
                        x_44118 = ((volatile __local
                                    float *) red_arr_mem_44096)[sext_i32_i64(local_tid_44088 +
                                                                offset_44128)];
                    }
                    // apply reduction operation
                    {
                        bool defunc_1_op_res_44119;
                        int32_t defunc_1_op_res_44120;
                        
                        if (x_44113) {
                            defunc_1_op_res_44119 = x_44113;
                            defunc_1_op_res_44120 = x_44114;
                        } else {
                            bool x_44121 = x_44116 && x_44116;
                            bool x_44122 = !x_44116;
                            bool y_44123 = x_44113 && x_44122;
                            bool defunc_1_op_res_f_res_44124 = x_44121 ||
                                 y_44123;
                            int32_t defunc_1_op_res_f_res_44125;
                            
                            if (x_44116) {
                                defunc_1_op_res_f_res_44125 = x_44117;
                            } else {
                                defunc_1_op_res_f_res_44125 = x_44114;
                            }
                            defunc_1_op_res_44119 = defunc_1_op_res_f_res_44124;
                            defunc_1_op_res_44120 = defunc_1_op_res_f_res_44125;
                        }
                        
                        float defunc_1_op_res_44126 = x_44115 + x_44118;
                        
                        x_44113 = defunc_1_op_res_44119;
                        x_44114 = defunc_1_op_res_44120;
                        x_44115 = defunc_1_op_res_44126;
                    }
                    // write result of operation
                    {
                        ((volatile __local
                          bool *) red_arr_mem_44092)[sext_i32_i64(local_tid_44088)] =
                            x_44113;
                        ((volatile __local
                          int32_t *) red_arr_mem_44094)[sext_i32_i64(local_tid_44088)] =
                            x_44114;
                        ((volatile __local
                          float *) red_arr_mem_44096)[sext_i32_i64(local_tid_44088)] =
                            x_44115;
                    }
                }
                offset_44128 *= 2;
            }
            while (slt32(skip_waves_44129,
                         squot32(sext_i64_i32(segred_group_sizze_39297) +
                                 wave_sizze_44090 - 1, wave_sizze_44090))) {
                barrier(CLK_LOCAL_MEM_FENCE);
                offset_44128 = skip_waves_44129 * wave_sizze_44090;
                if (slt32(local_tid_44088 + offset_44128,
                          sext_i64_i32(segred_group_sizze_39297)) &&
                    ((local_tid_44088 - squot32(local_tid_44088,
                                                wave_sizze_44090) *
                      wave_sizze_44090) == 0 && (squot32(local_tid_44088,
                                                         wave_sizze_44090) &
                                                 (2 * skip_waves_44129 - 1)) ==
                     0)) {
                    // read array element
                    {
                        x_44116 = ((__local
                                    bool *) red_arr_mem_44092)[sext_i32_i64(local_tid_44088 +
                                                               offset_44128)];
                        x_44117 = ((__local
                                    int32_t *) red_arr_mem_44094)[sext_i32_i64(local_tid_44088 +
                                                                  offset_44128)];
                        x_44118 = ((__local
                                    float *) red_arr_mem_44096)[sext_i32_i64(local_tid_44088 +
                                                                offset_44128)];
                    }
                    // apply reduction operation
                    {
                        bool defunc_1_op_res_44119;
                        int32_t defunc_1_op_res_44120;
                        
                        if (x_44113) {
                            defunc_1_op_res_44119 = x_44113;
                            defunc_1_op_res_44120 = x_44114;
                        } else {
                            bool x_44121 = x_44116 && x_44116;
                            bool x_44122 = !x_44116;
                            bool y_44123 = x_44113 && x_44122;
                            bool defunc_1_op_res_f_res_44124 = x_44121 ||
                                 y_44123;
                            int32_t defunc_1_op_res_f_res_44125;
                            
                            if (x_44116) {
                                defunc_1_op_res_f_res_44125 = x_44117;
                            } else {
                                defunc_1_op_res_f_res_44125 = x_44114;
                            }
                            defunc_1_op_res_44119 = defunc_1_op_res_f_res_44124;
                            defunc_1_op_res_44120 = defunc_1_op_res_f_res_44125;
                        }
                        
                        float defunc_1_op_res_44126 = x_44115 + x_44118;
                        
                        x_44113 = defunc_1_op_res_44119;
                        x_44114 = defunc_1_op_res_44120;
                        x_44115 = defunc_1_op_res_44126;
                    }
                    // write result of operation
                    {
                        ((__local
                          bool *) red_arr_mem_44092)[sext_i32_i64(local_tid_44088)] =
                            x_44113;
                        ((__local
                          int32_t *) red_arr_mem_44094)[sext_i32_i64(local_tid_44088)] =
                            x_44114;
                        ((__local
                          float *) red_arr_mem_44096)[sext_i32_i64(local_tid_44088)] =
                            x_44115;
                    }
                }
                skip_waves_44129 *= 2;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread saves the result in accumulator
            {
                if (sext_i32_i64(local_tid_44088) == (int64_t) 0) {
                    x_acc_44107 = x_44113;
                    x_acc_44108 = x_44114;
                    x_acc_44109 = x_44115;
                }
            }
            // first thread keeps accumulator; others reset to neutral element
            {
                if (!(sext_i32_i64(local_tid_44088) == (int64_t) 0)) {
                    x_acc_44107 = 0;
                    x_acc_44108 = -1;
                    x_acc_44109 = 0.0F;
                }
            }
        }
        x_39303 = x_acc_44107;
        x_39304 = x_acc_44108;
        x_39305 = x_acc_44109;
        if (groups_per_segment_44074 == (int64_t) 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_44088 == 0) {
                    ((__global bool *) mem_42417)[gtid_39102] = x_acc_44107;
                    ((__global int32_t *) mem_42420)[gtid_39102] = x_acc_44108;
                    ((__global float *) mem_42423)[gtid_39102] = x_acc_44109;
                }
            }
        } else {
            int32_t old_counter_44130;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_44088 == 0) {
                    ((__global
                      bool *) segred_tmp_mem_44079)[sext_i32_i64(virt_group_id_44102)] =
                        x_acc_44107;
                    ((__global
                      int32_t *) segred_tmp_mem_44081)[sext_i32_i64(virt_group_id_44102)] =
                        x_acc_44108;
                    ((__global
                      float *) segred_tmp_mem_44083)[sext_i32_i64(virt_group_id_44102)] =
                        x_acc_44109;
                    mem_fence_global();
                    old_counter_44130 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_44085)[sext_i32_i64(srem32(flat_segment_id_44103,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_44098)[(int64_t) 0] =
                        old_counter_44130 == groups_per_segment_44074 -
                        (int64_t) 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_44131 = ((__local
                                         bool *) sync_arr_mem_44098)[(int64_t) 0];
            
            if (is_last_group_44131) {
                if (local_tid_44088 == 0) {
                    old_counter_44130 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_44085)[sext_i32_i64(srem32(flat_segment_id_44103,
                                                                                                     10240))],
                                              (int) ((int64_t) 0 -
                                                     groups_per_segment_44074));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_44132 =
                            sdiv_up64(groups_per_segment_44074,
                                      segred_group_sizze_39297);
                    
                    x_39303 = 0;
                    x_39304 = -1;
                    x_39305 = 0.0F;
                    for (int64_t i_44133 = 0; i_44133 < read_per_thread_44132;
                         i_44133++) {
                        int64_t group_res_id_44134 =
                                sext_i32_i64(local_tid_44088) *
                                read_per_thread_44132 + i_44133;
                        int64_t index_of_group_res_44135 =
                                sext_i32_i64(flat_segment_id_44103) *
                                groups_per_segment_44074 + group_res_id_44134;
                        
                        if (slt64(group_res_id_44134,
                                  groups_per_segment_44074)) {
                            x_39306 = ((__global
                                        bool *) segred_tmp_mem_44079)[index_of_group_res_44135];
                            x_39307 = ((__global
                                        int32_t *) segred_tmp_mem_44081)[index_of_group_res_44135];
                            x_39308 = ((__global
                                        float *) segred_tmp_mem_44083)[index_of_group_res_44135];
                            
                            bool defunc_1_op_res_39309;
                            int32_t defunc_1_op_res_39310;
                            
                            if (x_39303) {
                                defunc_1_op_res_39309 = x_39303;
                                defunc_1_op_res_39310 = x_39304;
                            } else {
                                bool x_39311 = x_39306 && x_39306;
                                bool x_39312 = !x_39306;
                                bool y_39313 = x_39303 && x_39312;
                                bool defunc_1_op_res_f_res_39314 = x_39311 ||
                                     y_39313;
                                int32_t defunc_1_op_res_f_res_39315;
                                
                                if (x_39306) {
                                    defunc_1_op_res_f_res_39315 = x_39307;
                                } else {
                                    defunc_1_op_res_f_res_39315 = x_39304;
                                }
                                defunc_1_op_res_39309 =
                                    defunc_1_op_res_f_res_39314;
                                defunc_1_op_res_39310 =
                                    defunc_1_op_res_f_res_39315;
                            }
                            
                            float defunc_1_op_res_39316 = x_39305 + x_39308;
                            
                            x_39303 = defunc_1_op_res_39309;
                            x_39304 = defunc_1_op_res_39310;
                            x_39305 = defunc_1_op_res_39316;
                        }
                    }
                }
                ((__local
                  bool *) red_arr_mem_44092)[sext_i32_i64(local_tid_44088)] =
                    x_39303;
                ((__local
                  int32_t *) red_arr_mem_44094)[sext_i32_i64(local_tid_44088)] =
                    x_39304;
                ((__local
                  float *) red_arr_mem_44096)[sext_i32_i64(local_tid_44088)] =
                    x_39305;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_44136;
                    int32_t skip_waves_44137 = 1;
                    bool x_44113;
                    int32_t x_44114;
                    float x_44115;
                    bool x_44116;
                    int32_t x_44117;
                    float x_44118;
                    
                    offset_44136 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_44088,
                                  sext_i64_i32(segred_group_sizze_39297))) {
                            x_44113 = ((__local
                                        bool *) red_arr_mem_44092)[sext_i32_i64(local_tid_44088 +
                                                                   offset_44136)];
                            x_44114 = ((__local
                                        int32_t *) red_arr_mem_44094)[sext_i32_i64(local_tid_44088 +
                                                                      offset_44136)];
                            x_44115 = ((__local
                                        float *) red_arr_mem_44096)[sext_i32_i64(local_tid_44088 +
                                                                    offset_44136)];
                        }
                    }
                    offset_44136 = 1;
                    while (slt32(offset_44136, wave_sizze_44090)) {
                        if (slt32(local_tid_44088 + offset_44136,
                                  sext_i64_i32(segred_group_sizze_39297)) &&
                            ((local_tid_44088 - squot32(local_tid_44088,
                                                        wave_sizze_44090) *
                              wave_sizze_44090) & (2 * offset_44136 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_44116 = ((volatile __local
                                            bool *) red_arr_mem_44092)[sext_i32_i64(local_tid_44088 +
                                                                       offset_44136)];
                                x_44117 = ((volatile __local
                                            int32_t *) red_arr_mem_44094)[sext_i32_i64(local_tid_44088 +
                                                                          offset_44136)];
                                x_44118 = ((volatile __local
                                            float *) red_arr_mem_44096)[sext_i32_i64(local_tid_44088 +
                                                                        offset_44136)];
                            }
                            // apply reduction operation
                            {
                                bool defunc_1_op_res_44119;
                                int32_t defunc_1_op_res_44120;
                                
                                if (x_44113) {
                                    defunc_1_op_res_44119 = x_44113;
                                    defunc_1_op_res_44120 = x_44114;
                                } else {
                                    bool x_44121 = x_44116 && x_44116;
                                    bool x_44122 = !x_44116;
                                    bool y_44123 = x_44113 && x_44122;
                                    bool defunc_1_op_res_f_res_44124 =
                                         x_44121 || y_44123;
                                    int32_t defunc_1_op_res_f_res_44125;
                                    
                                    if (x_44116) {
                                        defunc_1_op_res_f_res_44125 = x_44117;
                                    } else {
                                        defunc_1_op_res_f_res_44125 = x_44114;
                                    }
                                    defunc_1_op_res_44119 =
                                        defunc_1_op_res_f_res_44124;
                                    defunc_1_op_res_44120 =
                                        defunc_1_op_res_f_res_44125;
                                }
                                
                                float defunc_1_op_res_44126 = x_44115 + x_44118;
                                
                                x_44113 = defunc_1_op_res_44119;
                                x_44114 = defunc_1_op_res_44120;
                                x_44115 = defunc_1_op_res_44126;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  bool *) red_arr_mem_44092)[sext_i32_i64(local_tid_44088)] =
                                    x_44113;
                                ((volatile __local
                                  int32_t *) red_arr_mem_44094)[sext_i32_i64(local_tid_44088)] =
                                    x_44114;
                                ((volatile __local
                                  float *) red_arr_mem_44096)[sext_i32_i64(local_tid_44088)] =
                                    x_44115;
                            }
                        }
                        offset_44136 *= 2;
                    }
                    while (slt32(skip_waves_44137,
                                 squot32(sext_i64_i32(segred_group_sizze_39297) +
                                         wave_sizze_44090 - 1,
                                         wave_sizze_44090))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_44136 = skip_waves_44137 * wave_sizze_44090;
                        if (slt32(local_tid_44088 + offset_44136,
                                  sext_i64_i32(segred_group_sizze_39297)) &&
                            ((local_tid_44088 - squot32(local_tid_44088,
                                                        wave_sizze_44090) *
                              wave_sizze_44090) == 0 &&
                             (squot32(local_tid_44088, wave_sizze_44090) & (2 *
                                                                            skip_waves_44137 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_44116 = ((__local
                                            bool *) red_arr_mem_44092)[sext_i32_i64(local_tid_44088 +
                                                                       offset_44136)];
                                x_44117 = ((__local
                                            int32_t *) red_arr_mem_44094)[sext_i32_i64(local_tid_44088 +
                                                                          offset_44136)];
                                x_44118 = ((__local
                                            float *) red_arr_mem_44096)[sext_i32_i64(local_tid_44088 +
                                                                        offset_44136)];
                            }
                            // apply reduction operation
                            {
                                bool defunc_1_op_res_44119;
                                int32_t defunc_1_op_res_44120;
                                
                                if (x_44113) {
                                    defunc_1_op_res_44119 = x_44113;
                                    defunc_1_op_res_44120 = x_44114;
                                } else {
                                    bool x_44121 = x_44116 && x_44116;
                                    bool x_44122 = !x_44116;
                                    bool y_44123 = x_44113 && x_44122;
                                    bool defunc_1_op_res_f_res_44124 =
                                         x_44121 || y_44123;
                                    int32_t defunc_1_op_res_f_res_44125;
                                    
                                    if (x_44116) {
                                        defunc_1_op_res_f_res_44125 = x_44117;
                                    } else {
                                        defunc_1_op_res_f_res_44125 = x_44114;
                                    }
                                    defunc_1_op_res_44119 =
                                        defunc_1_op_res_f_res_44124;
                                    defunc_1_op_res_44120 =
                                        defunc_1_op_res_f_res_44125;
                                }
                                
                                float defunc_1_op_res_44126 = x_44115 + x_44118;
                                
                                x_44113 = defunc_1_op_res_44119;
                                x_44114 = defunc_1_op_res_44120;
                                x_44115 = defunc_1_op_res_44126;
                            }
                            // write result of operation
                            {
                                ((__local
                                  bool *) red_arr_mem_44092)[sext_i32_i64(local_tid_44088)] =
                                    x_44113;
                                ((__local
                                  int32_t *) red_arr_mem_44094)[sext_i32_i64(local_tid_44088)] =
                                    x_44114;
                                ((__local
                                  float *) red_arr_mem_44096)[sext_i32_i64(local_tid_44088)] =
                                    x_44115;
                            }
                        }
                        skip_waves_44137 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_44088 == 0) {
                            ((__global bool *) mem_42417)[gtid_39102] = x_44113;
                            ((__global int32_t *) mem_42420)[gtid_39102] =
                                x_44114;
                            ((__global float *) mem_42423)[gtid_39102] =
                                x_44115;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_39297
}
__kernel void mainzisegred_nonseg_38754(__global int *global_failure,
                                        __local volatile
                                        int64_t *red_arr_mem_43835_backing_aligned_0,
                                        __local volatile
                                        int64_t *sync_arr_mem_43833_backing_aligned_1,
                                        int64_t m_29560,
                                        int64_t num_groups_38749,
                                        int64_t num_threads_43827, __global
                                        unsigned char *defunc_3_map_res_mem_42344,
                                        __global unsigned char *mem_42349,
                                        __global
                                        unsigned char *mainzicounter_mem_43823,
                                        __global
                                        unsigned char *segred_tmp_mem_43825)
{
    #define segred_group_sizze_38747 (mainzisegred_group_sizze_38746)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_43835_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_43835_backing_aligned_0;
    __local volatile char *restrict sync_arr_mem_43833_backing_0 =
                          (__local volatile
                           char *) sync_arr_mem_43833_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43828;
    int32_t local_tid_43829;
    int64_t group_sizze_43832;
    int32_t wave_sizze_43831;
    int32_t group_tid_43830;
    
    global_tid_43828 = get_global_id(0);
    local_tid_43829 = get_local_id(0);
    group_sizze_43832 = get_local_size(0);
    wave_sizze_43831 = LOCKSTEP_WIDTH;
    group_tid_43830 = get_group_id(0);
    
    int32_t phys_tid_38754 = global_tid_43828;
    __local char *sync_arr_mem_43833;
    
    sync_arr_mem_43833 = (__local char *) sync_arr_mem_43833_backing_0;
    
    __local char *red_arr_mem_43835;
    
    red_arr_mem_43835 = (__local char *) red_arr_mem_43835_backing_1;
    
    int64_t dummy_38752 = (int64_t) 0;
    int64_t gtid_38753 = (int64_t) 0;
    int32_t x_acc_43837;
    int64_t chunk_sizze_43838 = smin64(sdiv_up64(m_29560,
                                                 sext_i32_i64(sext_i64_i32(segred_group_sizze_38747 *
                                                 num_groups_38749))),
                                       sdiv_up64(m_29560 - phys_tid_38754,
                                                 num_threads_43827));
    int32_t x_29956;
    int32_t x_29957;
    
    // neutral-initialise the accumulators
    {
        x_acc_43837 = 0;
    }
    for (int64_t i_43842 = 0; i_43842 < chunk_sizze_43838; i_43842++) {
        gtid_38753 = phys_tid_38754 + num_threads_43827 * i_43842;
        // apply map function
        {
            int32_t x_29959 = ((__global
                                int32_t *) defunc_3_map_res_mem_42344)[gtid_38753];
            
            // save map-out results
            { }
            // load accumulator
            {
                x_29956 = x_acc_43837;
            }
            // load new values
            {
                x_29957 = x_29959;
            }
            // apply reduction operator
            {
                int32_t defunc_1_op_res_29958 = smax32(x_29956, x_29957);
                
                // store in accumulator
                {
                    x_acc_43837 = defunc_1_op_res_29958;
                }
            }
        }
    }
    // to reduce current chunk, first store our result in memory
    {
        x_29956 = x_acc_43837;
        ((__local int32_t *) red_arr_mem_43835)[sext_i32_i64(local_tid_43829)] =
            x_29956;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_43843;
    int32_t skip_waves_43844 = 1;
    int32_t x_43839;
    int32_t x_43840;
    
    offset_43843 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_43829, sext_i64_i32(segred_group_sizze_38747))) {
            x_43839 = ((__local
                        int32_t *) red_arr_mem_43835)[sext_i32_i64(local_tid_43829 +
                                                      offset_43843)];
        }
    }
    offset_43843 = 1;
    while (slt32(offset_43843, wave_sizze_43831)) {
        if (slt32(local_tid_43829 + offset_43843,
                  sext_i64_i32(segred_group_sizze_38747)) && ((local_tid_43829 -
                                                               squot32(local_tid_43829,
                                                                       wave_sizze_43831) *
                                                               wave_sizze_43831) &
                                                              (2 *
                                                               offset_43843 -
                                                               1)) == 0) {
            // read array element
            {
                x_43840 = ((volatile __local
                            int32_t *) red_arr_mem_43835)[sext_i32_i64(local_tid_43829 +
                                                          offset_43843)];
            }
            // apply reduction operation
            {
                int32_t defunc_1_op_res_43841 = smax32(x_43839, x_43840);
                
                x_43839 = defunc_1_op_res_43841;
            }
            // write result of operation
            {
                ((volatile __local
                  int32_t *) red_arr_mem_43835)[sext_i32_i64(local_tid_43829)] =
                    x_43839;
            }
        }
        offset_43843 *= 2;
    }
    while (slt32(skip_waves_43844,
                 squot32(sext_i64_i32(segred_group_sizze_38747) +
                         wave_sizze_43831 - 1, wave_sizze_43831))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_43843 = skip_waves_43844 * wave_sizze_43831;
        if (slt32(local_tid_43829 + offset_43843,
                  sext_i64_i32(segred_group_sizze_38747)) && ((local_tid_43829 -
                                                               squot32(local_tid_43829,
                                                                       wave_sizze_43831) *
                                                               wave_sizze_43831) ==
                                                              0 &&
                                                              (squot32(local_tid_43829,
                                                                       wave_sizze_43831) &
                                                               (2 *
                                                                skip_waves_43844 -
                                                                1)) == 0)) {
            // read array element
            {
                x_43840 = ((__local
                            int32_t *) red_arr_mem_43835)[sext_i32_i64(local_tid_43829 +
                                                          offset_43843)];
            }
            // apply reduction operation
            {
                int32_t defunc_1_op_res_43841 = smax32(x_43839, x_43840);
                
                x_43839 = defunc_1_op_res_43841;
            }
            // write result of operation
            {
                ((__local
                  int32_t *) red_arr_mem_43835)[sext_i32_i64(local_tid_43829)] =
                    x_43839;
            }
        }
        skip_waves_43844 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // first thread saves the result in accumulator
    {
        if (sext_i32_i64(local_tid_43829) == (int64_t) 0) {
            x_acc_43837 = x_43839;
        }
    }
    
    int32_t old_counter_43845;
    
    // first thread in group saves group result to global memory
    {
        if (local_tid_43829 == 0) {
            ((__global
              int32_t *) segred_tmp_mem_43825)[sext_i32_i64(group_tid_43830)] =
                x_acc_43837;
            mem_fence_global();
            old_counter_43845 = atomic_add_i32_global(&((volatile __global
                                                         int *) mainzicounter_mem_43823)[(int64_t) 0],
                                                      (int) 1);
            ((__local bool *) sync_arr_mem_43833)[(int64_t) 0] =
                old_counter_43845 == num_groups_38749 - (int64_t) 1;
        }
    }
    barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    
    bool is_last_group_43846 = ((__local
                                 bool *) sync_arr_mem_43833)[(int64_t) 0];
    
    if (is_last_group_43846) {
        if (local_tid_43829 == 0) {
            old_counter_43845 = atomic_add_i32_global(&((volatile __global
                                                         int *) mainzicounter_mem_43823)[(int64_t) 0],
                                                      (int) ((int64_t) 0 -
                                                             num_groups_38749));
        }
        // read in the per-group-results
        {
            int64_t read_per_thread_43847 = sdiv_up64(num_groups_38749,
                                                      segred_group_sizze_38747);
            
            x_29956 = 0;
            for (int64_t i_43848 = 0; i_43848 < read_per_thread_43847;
                 i_43848++) {
                int64_t group_res_id_43849 = sext_i32_i64(local_tid_43829) *
                        read_per_thread_43847 + i_43848;
                int64_t index_of_group_res_43850 = group_res_id_43849;
                
                if (slt64(group_res_id_43849, num_groups_38749)) {
                    x_29957 = ((__global
                                int32_t *) segred_tmp_mem_43825)[index_of_group_res_43850];
                    
                    int32_t defunc_1_op_res_29958 = smax32(x_29956, x_29957);
                    
                    x_29956 = defunc_1_op_res_29958;
                }
            }
        }
        ((__local int32_t *) red_arr_mem_43835)[sext_i32_i64(local_tid_43829)] =
            x_29956;
        barrier(CLK_LOCAL_MEM_FENCE);
        // reduce the per-group results
        {
            int32_t offset_43851;
            int32_t skip_waves_43852 = 1;
            int32_t x_43839;
            int32_t x_43840;
            
            offset_43851 = 0;
            // participating threads read initial accumulator
            {
                if (slt32(local_tid_43829,
                          sext_i64_i32(segred_group_sizze_38747))) {
                    x_43839 = ((__local
                                int32_t *) red_arr_mem_43835)[sext_i32_i64(local_tid_43829 +
                                                              offset_43851)];
                }
            }
            offset_43851 = 1;
            while (slt32(offset_43851, wave_sizze_43831)) {
                if (slt32(local_tid_43829 + offset_43851,
                          sext_i64_i32(segred_group_sizze_38747)) &&
                    ((local_tid_43829 - squot32(local_tid_43829,
                                                wave_sizze_43831) *
                      wave_sizze_43831) & (2 * offset_43851 - 1)) == 0) {
                    // read array element
                    {
                        x_43840 = ((volatile __local
                                    int32_t *) red_arr_mem_43835)[sext_i32_i64(local_tid_43829 +
                                                                  offset_43851)];
                    }
                    // apply reduction operation
                    {
                        int32_t defunc_1_op_res_43841 = smax32(x_43839,
                                                               x_43840);
                        
                        x_43839 = defunc_1_op_res_43841;
                    }
                    // write result of operation
                    {
                        ((volatile __local
                          int32_t *) red_arr_mem_43835)[sext_i32_i64(local_tid_43829)] =
                            x_43839;
                    }
                }
                offset_43851 *= 2;
            }
            while (slt32(skip_waves_43852,
                         squot32(sext_i64_i32(segred_group_sizze_38747) +
                                 wave_sizze_43831 - 1, wave_sizze_43831))) {
                barrier(CLK_LOCAL_MEM_FENCE);
                offset_43851 = skip_waves_43852 * wave_sizze_43831;
                if (slt32(local_tid_43829 + offset_43851,
                          sext_i64_i32(segred_group_sizze_38747)) &&
                    ((local_tid_43829 - squot32(local_tid_43829,
                                                wave_sizze_43831) *
                      wave_sizze_43831) == 0 && (squot32(local_tid_43829,
                                                         wave_sizze_43831) &
                                                 (2 * skip_waves_43852 - 1)) ==
                     0)) {
                    // read array element
                    {
                        x_43840 = ((__local
                                    int32_t *) red_arr_mem_43835)[sext_i32_i64(local_tid_43829 +
                                                                  offset_43851)];
                    }
                    // apply reduction operation
                    {
                        int32_t defunc_1_op_res_43841 = smax32(x_43839,
                                                               x_43840);
                        
                        x_43839 = defunc_1_op_res_43841;
                    }
                    // write result of operation
                    {
                        ((__local
                          int32_t *) red_arr_mem_43835)[sext_i32_i64(local_tid_43829)] =
                            x_43839;
                    }
                }
                skip_waves_43852 *= 2;
            }
            // and back to memory with the final result
            {
                if (local_tid_43829 == 0) {
                    ((__global int32_t *) mem_42349)[(int64_t) 0] = x_43839;
                }
            }
        }
    }
    
  error_1:
    return;
    #undef segred_group_sizze_38747
}
__kernel void mainzisegred_small_36970(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_42989_backing_aligned_0,
                                       int64_t N_29559, int64_t m_29560,
                                       int64_t i32_res_29569,
                                       int64_t i32_res_29575,
                                       int64_t num_groups_37109,
                                       int64_t segment_sizze_nonzzero_42982,
                                       __global unsigned char *images_mem_41421,
                                       __global
                                       unsigned char *binop_p_mem_41432,
                                       __global unsigned char *mem_41579,
                                       __global unsigned char *mem_41585)
{
    #define segred_group_sizze_37108 (mainzisegred_group_sizze_36964)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_42989_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_42989_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_42984;
    int32_t local_tid_42985;
    int64_t group_sizze_42988;
    int32_t wave_sizze_42987;
    int32_t group_tid_42986;
    
    global_tid_42984 = get_global_id(0);
    local_tid_42985 = get_local_id(0);
    group_sizze_42988 = get_local_size(0);
    wave_sizze_42987 = LOCKSTEP_WIDTH;
    group_tid_42986 = get_group_id(0);
    
    int32_t phys_tid_36970 = global_tid_42984;
    __local char *red_arr_mem_42989;
    
    red_arr_mem_42989 = (__local char *) red_arr_mem_42989_backing_0;
    
    int32_t phys_group_id_42991;
    
    phys_group_id_42991 = get_group_id(0);
    for (int32_t i_42992 = 0; i_42992 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_29560 * i32_res_29575 *
                                          i32_res_29575,
                                          squot64(segred_group_sizze_37108,
                                                  segment_sizze_nonzzero_42982))) -
                   phys_group_id_42991, sext_i64_i32(num_groups_37109));
         i_42992++) {
        int32_t virt_group_id_42993 = phys_group_id_42991 + i_42992 *
                sext_i64_i32(num_groups_37109);
        int64_t slice_42994 = i32_res_29575;
        int64_t slice_42995 = i32_res_29575 * slice_42994;
        int64_t slice_42996 = m_29560 * slice_42995;
        int64_t gtid_36957 = squot64(squot64(sext_i32_i64(local_tid_42985),
                                             segment_sizze_nonzzero_42982) +
                                     sext_i32_i64(virt_group_id_42993) *
                                     squot64(segred_group_sizze_37108,
                                             segment_sizze_nonzzero_42982),
                                     slice_42995);
        int64_t remnant_42997 = squot64(sext_i32_i64(local_tid_42985),
                                        segment_sizze_nonzzero_42982) +
                sext_i32_i64(virt_group_id_42993) *
                squot64(segred_group_sizze_37108,
                        segment_sizze_nonzzero_42982) - gtid_36957 *
                slice_42995;
        int64_t gtid_36958 = squot64(remnant_42997, slice_42994);
        int64_t remnant_42998 = remnant_42997 - gtid_36958 * slice_42994;
        int64_t gtid_36959 = remnant_42998;
        int64_t remnant_42999 = remnant_42998 - gtid_36959;
        int64_t gtid_36969 = srem64(sext_i32_i64(local_tid_42985),
                                    i32_res_29569);
        
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, i32_res_29569) && (((slt64(gtid_36957,
                                                              m_29560) &&
                                                        slt64(gtid_36958,
                                                              i32_res_29575)) &&
                                                       slt64(gtid_36959,
                                                             i32_res_29575)) &&
                                                      slt64(sext_i32_i64(local_tid_42985),
                                                            i32_res_29569 *
                                                            squot64(segred_group_sizze_37108,
                                                                    segment_sizze_nonzzero_42982)))) {
                float x_37118 = ((__global
                                  float *) images_mem_41421)[gtid_36957 *
                                                             N_29559 +
                                                             gtid_36969];
                float x_37119 = ((__global
                                  float *) binop_p_mem_41432)[gtid_36958 *
                                                              N_29559 +
                                                              gtid_36969];
                float x_37120 = ((__global float *) mem_41579)[gtid_36959 *
                                                               N_29559 +
                                                               gtid_36969];
                float x_37121 = x_37119 * x_37120;
                bool isnan_res_37122;
                
                isnan_res_37122 = futrts_isnan32(x_37118);
                
                float y_37123;
                
                if (isnan_res_37122) {
                    y_37123 = 0.0F;
                } else {
                    y_37123 = 1.0F;
                }
                
                float defunc_2_f_res_37124 = x_37121 * y_37123;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_42989)[sext_i32_i64(local_tid_42985)] =
                        defunc_2_f_res_37124;
                }
            } else {
                ((__local
                  float *) red_arr_mem_42989)[sext_i32_i64(local_tid_42985)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, i32_res_29569)) {
            // perform segmented scan to imitate reduction
            {
                float x_37112;
                float x_37113;
                float x_43000;
                float x_43001;
                bool ltid_in_bounds_43003 = slt64(sext_i32_i64(local_tid_42985),
                                                  i32_res_29569 *
                                                  squot64(segred_group_sizze_37108,
                                                          segment_sizze_nonzzero_42982));
                int32_t skip_threads_43004;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_43003) {
                        x_37113 = ((volatile __local
                                    float *) red_arr_mem_42989)[sext_i32_i64(local_tid_42985)];
                        if ((local_tid_42985 - squot32(local_tid_42985, 32) *
                             32) == 0) {
                            x_37112 = x_37113;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_43004 = 1;
                    while (slt32(skip_threads_43004, 32)) {
                        if (sle32(skip_threads_43004, local_tid_42985 -
                                  squot32(local_tid_42985, 32) * 32) &&
                            ltid_in_bounds_43003) {
                            // read operands
                            {
                                x_37112 = ((volatile __local
                                            float *) red_arr_mem_42989)[sext_i32_i64(local_tid_42985) -
                                                                        sext_i32_i64(skip_threads_43004)];
                            }
                            // perform operation
                            {
                                bool inactive_43005 =
                                     slt64(srem64(sext_i32_i64(local_tid_42985),
                                                  i32_res_29569),
                                           sext_i32_i64(local_tid_42985) -
                                           sext_i32_i64(local_tid_42985 -
                                           skip_threads_43004));
                                
                                if (inactive_43005) {
                                    x_37112 = x_37113;
                                }
                                if (!inactive_43005) {
                                    float defunc_1_op_res_37114 = x_37112 +
                                          x_37113;
                                    
                                    x_37112 = defunc_1_op_res_37114;
                                }
                            }
                        }
                        if (sle32(wave_sizze_42987, skip_threads_43004)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_43004, local_tid_42985 -
                                  squot32(local_tid_42985, 32) * 32) &&
                            ltid_in_bounds_43003) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_42989)[sext_i32_i64(local_tid_42985)] =
                                    x_37112;
                                x_37113 = x_37112;
                            }
                        }
                        if (sle32(wave_sizze_42987, skip_threads_43004)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_43004 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_42985 - squot32(local_tid_42985, 32) * 32) ==
                        31 && ltid_in_bounds_43003) {
                        ((volatile __local
                          float *) red_arr_mem_42989)[sext_i32_i64(squot32(local_tid_42985,
                                                                           32))] =
                            x_37112;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_43006;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_42985, 32) == 0 &&
                            ltid_in_bounds_43003) {
                            x_43001 = ((volatile __local
                                        float *) red_arr_mem_42989)[sext_i32_i64(local_tid_42985)];
                            if ((local_tid_42985 - squot32(local_tid_42985,
                                                           32) * 32) == 0) {
                                x_43000 = x_43001;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_43006 = 1;
                        while (slt32(skip_threads_43006, 32)) {
                            if (sle32(skip_threads_43006, local_tid_42985 -
                                      squot32(local_tid_42985, 32) * 32) &&
                                (squot32(local_tid_42985, 32) == 0 &&
                                 ltid_in_bounds_43003)) {
                                // read operands
                                {
                                    x_43000 = ((volatile __local
                                                float *) red_arr_mem_42989)[sext_i32_i64(local_tid_42985) -
                                                                            sext_i32_i64(skip_threads_43006)];
                                }
                                // perform operation
                                {
                                    bool inactive_43007 =
                                         slt64(srem64(sext_i32_i64(local_tid_42985 *
                                                      32 + 32 - 1),
                                                      i32_res_29569),
                                               sext_i32_i64(local_tid_42985 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_42985 -
                                                             skip_threads_43006) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_43007) {
                                        x_43000 = x_43001;
                                    }
                                    if (!inactive_43007) {
                                        float defunc_1_op_res_43002 = x_43000 +
                                              x_43001;
                                        
                                        x_43000 = defunc_1_op_res_43002;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_42987, skip_threads_43006)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_43006, local_tid_42985 -
                                      squot32(local_tid_42985, 32) * 32) &&
                                (squot32(local_tid_42985, 32) == 0 &&
                                 ltid_in_bounds_43003)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_42989)[sext_i32_i64(local_tid_42985)] =
                                        x_43000;
                                    x_43001 = x_43000;
                                }
                            }
                            if (sle32(wave_sizze_42987, skip_threads_43006)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_43006 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_42985, 32) == 0 ||
                          !ltid_in_bounds_43003)) {
                        // read operands
                        {
                            x_37113 = x_37112;
                            x_37112 = ((__local
                                        float *) red_arr_mem_42989)[sext_i32_i64(squot32(local_tid_42985,
                                                                                         32)) -
                                                                    (int64_t) 1];
                        }
                        // perform operation
                        {
                            bool inactive_43008 =
                                 slt64(srem64(sext_i32_i64(local_tid_42985),
                                              i32_res_29569),
                                       sext_i32_i64(local_tid_42985) -
                                       sext_i32_i64(squot32(local_tid_42985,
                                                            32) * 32 - 1));
                            
                            if (inactive_43008) {
                                x_37112 = x_37113;
                            }
                            if (!inactive_43008) {
                                float defunc_1_op_res_37114 = x_37112 + x_37113;
                                
                                x_37112 = defunc_1_op_res_37114;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_42989)[sext_i32_i64(local_tid_42985)] =
                                x_37112;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_42985, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_42989)[sext_i32_i64(local_tid_42985)] =
                            x_37113;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_42993) *
                      squot64(segred_group_sizze_37108,
                              segment_sizze_nonzzero_42982) +
                      sext_i32_i64(local_tid_42985), m_29560 * i32_res_29575 *
                      i32_res_29575) && slt64(sext_i32_i64(local_tid_42985),
                                              squot64(segred_group_sizze_37108,
                                                      segment_sizze_nonzzero_42982))) {
                ((__global
                  float *) mem_41585)[squot64(sext_i32_i64(virt_group_id_42993) *
                                              squot64(segred_group_sizze_37108,
                                                      segment_sizze_nonzzero_42982) +
                                              sext_i32_i64(local_tid_42985),
                                              i32_res_29575 * i32_res_29575) *
                                      (i32_res_29575 * i32_res_29575) +
                                      squot64(sext_i32_i64(virt_group_id_42993) *
                                              squot64(segred_group_sizze_37108,
                                                      segment_sizze_nonzzero_42982) +
                                              sext_i32_i64(local_tid_42985) -
                                              squot64(sext_i32_i64(virt_group_id_42993) *
                                                      squot64(segred_group_sizze_37108,
                                                              segment_sizze_nonzzero_42982) +
                                                      sext_i32_i64(local_tid_42985),
                                                      i32_res_29575 *
                                                      i32_res_29575) *
                                              (i32_res_29575 * i32_res_29575),
                                              i32_res_29575) * i32_res_29575 +
                                      (sext_i32_i64(virt_group_id_42993) *
                                       squot64(segred_group_sizze_37108,
                                               segment_sizze_nonzzero_42982) +
                                       sext_i32_i64(local_tid_42985) -
                                       squot64(sext_i32_i64(virt_group_id_42993) *
                                               squot64(segred_group_sizze_37108,
                                                       segment_sizze_nonzzero_42982) +
                                               sext_i32_i64(local_tid_42985),
                                               i32_res_29575 * i32_res_29575) *
                                       (i32_res_29575 * i32_res_29575) -
                                       squot64(sext_i32_i64(virt_group_id_42993) *
                                               squot64(segred_group_sizze_37108,
                                                       segment_sizze_nonzzero_42982) +
                                               sext_i32_i64(local_tid_42985) -
                                               squot64(sext_i32_i64(virt_group_id_42993) *
                                                       squot64(segred_group_sizze_37108,
                                                               segment_sizze_nonzzero_42982) +
                                                       sext_i32_i64(local_tid_42985),
                                                       i32_res_29575 *
                                                       i32_res_29575) *
                                               (i32_res_29575 * i32_res_29575),
                                               i32_res_29575) *
                                       i32_res_29575)] = ((__local
                                                           float *) red_arr_mem_42989)[(sext_i32_i64(local_tid_42985) +
                                                                                        (int64_t) 1) *
                                                                                       segment_sizze_nonzzero_42982 -
                                                                                       (int64_t) 1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_37108
}
__kernel void mainzisegred_small_37934(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_43227_backing_aligned_0,
                                       int64_t N_29559, int64_t m_29560,
                                       int64_t i32_res_29569,
                                       int64_t i32_res_29575,
                                       int64_t num_groups_37987,
                                       int64_t segment_sizze_nonzzero_43220,
                                       __global unsigned char *images_mem_41421,
                                       __global
                                       unsigned char *binop_p_mem_41432,
                                       __global unsigned char *mem_41907)
{
    #define segred_group_sizze_37986 (mainzisegred_group_sizze_37928)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_43227_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43227_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43222;
    int32_t local_tid_43223;
    int64_t group_sizze_43226;
    int32_t wave_sizze_43225;
    int32_t group_tid_43224;
    
    global_tid_43222 = get_global_id(0);
    local_tid_43223 = get_local_id(0);
    group_sizze_43226 = get_local_size(0);
    wave_sizze_43225 = LOCKSTEP_WIDTH;
    group_tid_43224 = get_group_id(0);
    
    int32_t phys_tid_37934 = global_tid_43222;
    __local char *red_arr_mem_43227;
    
    red_arr_mem_43227 = (__local char *) red_arr_mem_43227_backing_0;
    
    int32_t phys_group_id_43229;
    
    phys_group_id_43229 = get_group_id(0);
    for (int32_t i_43230 = 0; i_43230 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_29560 * i32_res_29575,
                                          squot64(segred_group_sizze_37986,
                                                  segment_sizze_nonzzero_43220))) -
                   phys_group_id_43229, sext_i64_i32(num_groups_37987));
         i_43230++) {
        int32_t virt_group_id_43231 = phys_group_id_43229 + i_43230 *
                sext_i64_i32(num_groups_37987);
        int64_t slice_43232 = i32_res_29575;
        int64_t slice_43233 = m_29560 * slice_43232;
        int64_t gtid_37923 = squot64(squot64(sext_i32_i64(local_tid_43223),
                                             segment_sizze_nonzzero_43220) +
                                     sext_i32_i64(virt_group_id_43231) *
                                     squot64(segred_group_sizze_37986,
                                             segment_sizze_nonzzero_43220),
                                     slice_43232);
        int64_t remnant_43234 = squot64(sext_i32_i64(local_tid_43223),
                                        segment_sizze_nonzzero_43220) +
                sext_i32_i64(virt_group_id_43231) *
                squot64(segred_group_sizze_37986,
                        segment_sizze_nonzzero_43220) - gtid_37923 *
                slice_43232;
        int64_t gtid_37924 = remnant_43234;
        int64_t remnant_43235 = remnant_43234 - gtid_37924;
        int64_t gtid_37933 = srem64(sext_i32_i64(local_tid_43223),
                                    i32_res_29569);
        
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, i32_res_29569) && ((slt64(gtid_37923,
                                                             m_29560) &&
                                                       slt64(gtid_37924,
                                                             i32_res_29575)) &&
                                                      slt64(sext_i32_i64(local_tid_43223),
                                                            i32_res_29569 *
                                                            squot64(segred_group_sizze_37986,
                                                                    segment_sizze_nonzzero_43220)))) {
                float x_37996 = ((__global
                                  float *) images_mem_41421)[gtid_37923 *
                                                             N_29559 +
                                                             gtid_37933];
                bool isnan_res_37997;
                
                isnan_res_37997 = futrts_isnan32(x_37996);
                
                float defunc_1_f_res_37998;
                
                if (isnan_res_37997) {
                    defunc_1_f_res_37998 = 0.0F;
                } else {
                    float x_37995 = ((__global
                                      float *) binop_p_mem_41432)[gtid_37924 *
                                                                  N_29559 +
                                                                  gtid_37933];
                    float defunc_1_f_res_f_res_37999 = x_37995 * x_37996;
                    
                    defunc_1_f_res_37998 = defunc_1_f_res_f_res_37999;
                }
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_43227)[sext_i32_i64(local_tid_43223)] =
                        defunc_1_f_res_37998;
                }
            } else {
                ((__local
                  float *) red_arr_mem_43227)[sext_i32_i64(local_tid_43223)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, i32_res_29569)) {
            // perform segmented scan to imitate reduction
            {
                float x_37990;
                float x_37991;
                float x_43236;
                float x_43237;
                bool ltid_in_bounds_43239 = slt64(sext_i32_i64(local_tid_43223),
                                                  i32_res_29569 *
                                                  squot64(segred_group_sizze_37986,
                                                          segment_sizze_nonzzero_43220));
                int32_t skip_threads_43240;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_43239) {
                        x_37991 = ((volatile __local
                                    float *) red_arr_mem_43227)[sext_i32_i64(local_tid_43223)];
                        if ((local_tid_43223 - squot32(local_tid_43223, 32) *
                             32) == 0) {
                            x_37990 = x_37991;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_43240 = 1;
                    while (slt32(skip_threads_43240, 32)) {
                        if (sle32(skip_threads_43240, local_tid_43223 -
                                  squot32(local_tid_43223, 32) * 32) &&
                            ltid_in_bounds_43239) {
                            // read operands
                            {
                                x_37990 = ((volatile __local
                                            float *) red_arr_mem_43227)[sext_i32_i64(local_tid_43223) -
                                                                        sext_i32_i64(skip_threads_43240)];
                            }
                            // perform operation
                            {
                                bool inactive_43241 =
                                     slt64(srem64(sext_i32_i64(local_tid_43223),
                                                  i32_res_29569),
                                           sext_i32_i64(local_tid_43223) -
                                           sext_i32_i64(local_tid_43223 -
                                           skip_threads_43240));
                                
                                if (inactive_43241) {
                                    x_37990 = x_37991;
                                }
                                if (!inactive_43241) {
                                    float defunc_1_op_res_37992 = x_37990 +
                                          x_37991;
                                    
                                    x_37990 = defunc_1_op_res_37992;
                                }
                            }
                        }
                        if (sle32(wave_sizze_43225, skip_threads_43240)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_43240, local_tid_43223 -
                                  squot32(local_tid_43223, 32) * 32) &&
                            ltid_in_bounds_43239) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43227)[sext_i32_i64(local_tid_43223)] =
                                    x_37990;
                                x_37991 = x_37990;
                            }
                        }
                        if (sle32(wave_sizze_43225, skip_threads_43240)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_43240 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_43223 - squot32(local_tid_43223, 32) * 32) ==
                        31 && ltid_in_bounds_43239) {
                        ((volatile __local
                          float *) red_arr_mem_43227)[sext_i32_i64(squot32(local_tid_43223,
                                                                           32))] =
                            x_37990;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_43242;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_43223, 32) == 0 &&
                            ltid_in_bounds_43239) {
                            x_43237 = ((volatile __local
                                        float *) red_arr_mem_43227)[sext_i32_i64(local_tid_43223)];
                            if ((local_tid_43223 - squot32(local_tid_43223,
                                                           32) * 32) == 0) {
                                x_43236 = x_43237;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_43242 = 1;
                        while (slt32(skip_threads_43242, 32)) {
                            if (sle32(skip_threads_43242, local_tid_43223 -
                                      squot32(local_tid_43223, 32) * 32) &&
                                (squot32(local_tid_43223, 32) == 0 &&
                                 ltid_in_bounds_43239)) {
                                // read operands
                                {
                                    x_43236 = ((volatile __local
                                                float *) red_arr_mem_43227)[sext_i32_i64(local_tid_43223) -
                                                                            sext_i32_i64(skip_threads_43242)];
                                }
                                // perform operation
                                {
                                    bool inactive_43243 =
                                         slt64(srem64(sext_i32_i64(local_tid_43223 *
                                                      32 + 32 - 1),
                                                      i32_res_29569),
                                               sext_i32_i64(local_tid_43223 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_43223 -
                                                             skip_threads_43242) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_43243) {
                                        x_43236 = x_43237;
                                    }
                                    if (!inactive_43243) {
                                        float defunc_1_op_res_43238 = x_43236 +
                                              x_43237;
                                        
                                        x_43236 = defunc_1_op_res_43238;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_43225, skip_threads_43242)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_43242, local_tid_43223 -
                                      squot32(local_tid_43223, 32) * 32) &&
                                (squot32(local_tid_43223, 32) == 0 &&
                                 ltid_in_bounds_43239)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_43227)[sext_i32_i64(local_tid_43223)] =
                                        x_43236;
                                    x_43237 = x_43236;
                                }
                            }
                            if (sle32(wave_sizze_43225, skip_threads_43242)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_43242 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_43223, 32) == 0 ||
                          !ltid_in_bounds_43239)) {
                        // read operands
                        {
                            x_37991 = x_37990;
                            x_37990 = ((__local
                                        float *) red_arr_mem_43227)[sext_i32_i64(squot32(local_tid_43223,
                                                                                         32)) -
                                                                    (int64_t) 1];
                        }
                        // perform operation
                        {
                            bool inactive_43244 =
                                 slt64(srem64(sext_i32_i64(local_tid_43223),
                                              i32_res_29569),
                                       sext_i32_i64(local_tid_43223) -
                                       sext_i32_i64(squot32(local_tid_43223,
                                                            32) * 32 - 1));
                            
                            if (inactive_43244) {
                                x_37990 = x_37991;
                            }
                            if (!inactive_43244) {
                                float defunc_1_op_res_37992 = x_37990 + x_37991;
                                
                                x_37990 = defunc_1_op_res_37992;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_43227)[sext_i32_i64(local_tid_43223)] =
                                x_37990;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_43223, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_43227)[sext_i32_i64(local_tid_43223)] =
                            x_37991;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_43231) *
                      squot64(segred_group_sizze_37986,
                              segment_sizze_nonzzero_43220) +
                      sext_i32_i64(local_tid_43223), m_29560 * i32_res_29575) &&
                slt64(sext_i32_i64(local_tid_43223),
                      squot64(segred_group_sizze_37986,
                              segment_sizze_nonzzero_43220))) {
                ((__global
                  float *) mem_41907)[squot64(sext_i32_i64(virt_group_id_43231) *
                                              squot64(segred_group_sizze_37986,
                                                      segment_sizze_nonzzero_43220) +
                                              sext_i32_i64(local_tid_43223),
                                              i32_res_29575) * i32_res_29575 +
                                      (sext_i32_i64(virt_group_id_43231) *
                                       squot64(segred_group_sizze_37986,
                                               segment_sizze_nonzzero_43220) +
                                       sext_i32_i64(local_tid_43223) -
                                       squot64(sext_i32_i64(virt_group_id_43231) *
                                               squot64(segred_group_sizze_37986,
                                                       segment_sizze_nonzzero_43220) +
                                               sext_i32_i64(local_tid_43223),
                                               i32_res_29575) *
                                       i32_res_29575)] = ((__local
                                                           float *) red_arr_mem_43227)[(sext_i32_i64(local_tid_43223) +
                                                                                        (int64_t) 1) *
                                                                                       segment_sizze_nonzzero_43220 -
                                                                                       (int64_t) 1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_37986
}
__kernel void mainzisegred_small_38071(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_43330_backing_aligned_0,
                                       int64_t m_29560, int64_t i32_res_29575,
                                       int64_t num_groups_38120,
                                       int64_t segment_sizze_nonzzero_43323,
                                       __global
                                       unsigned char *defunc_3_map_res_mem_41687,
                                       __global
                                       unsigned char *defunc_3_map_res_mem_41914,
                                       __global unsigned char *mem_41979)
{
    #define segred_group_sizze_38119 (mainzisegred_group_sizze_38065)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_43330_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43330_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43325;
    int32_t local_tid_43326;
    int64_t group_sizze_43329;
    int32_t wave_sizze_43328;
    int32_t group_tid_43327;
    
    global_tid_43325 = get_global_id(0);
    local_tid_43326 = get_local_id(0);
    group_sizze_43329 = get_local_size(0);
    wave_sizze_43328 = LOCKSTEP_WIDTH;
    group_tid_43327 = get_group_id(0);
    
    int32_t phys_tid_38071 = global_tid_43325;
    __local char *red_arr_mem_43330;
    
    red_arr_mem_43330 = (__local char *) red_arr_mem_43330_backing_0;
    
    int32_t phys_group_id_43332;
    
    phys_group_id_43332 = get_group_id(0);
    for (int32_t i_43333 = 0; i_43333 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_29560 * i32_res_29575,
                                          squot64(segred_group_sizze_38119,
                                                  segment_sizze_nonzzero_43323))) -
                   phys_group_id_43332, sext_i64_i32(num_groups_38120));
         i_43333++) {
        int32_t virt_group_id_43334 = phys_group_id_43332 + i_43333 *
                sext_i64_i32(num_groups_38120);
        int64_t slice_43335 = i32_res_29575;
        int64_t slice_43336 = m_29560 * slice_43335;
        int64_t gtid_38060 = squot64(squot64(sext_i32_i64(local_tid_43326),
                                             segment_sizze_nonzzero_43323) +
                                     sext_i32_i64(virt_group_id_43334) *
                                     squot64(segred_group_sizze_38119,
                                             segment_sizze_nonzzero_43323),
                                     slice_43335);
        int64_t remnant_43337 = squot64(sext_i32_i64(local_tid_43326),
                                        segment_sizze_nonzzero_43323) +
                sext_i32_i64(virt_group_id_43334) *
                squot64(segred_group_sizze_38119,
                        segment_sizze_nonzzero_43323) - gtid_38060 *
                slice_43335;
        int64_t gtid_38061 = remnant_43337;
        int64_t remnant_43338 = remnant_43337 - gtid_38061;
        int64_t gtid_38070 = srem64(sext_i32_i64(local_tid_43326),
                                    i32_res_29575);
        
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, i32_res_29575) && ((slt64(gtid_38060,
                                                             m_29560) &&
                                                       slt64(gtid_38061,
                                                             i32_res_29575)) &&
                                                      slt64(sext_i32_i64(local_tid_43326),
                                                            i32_res_29575 *
                                                            squot64(segred_group_sizze_38119,
                                                                    segment_sizze_nonzzero_43323)))) {
                float x_38129 = ((__global
                                  float *) defunc_3_map_res_mem_41914)[gtid_38060 *
                                                                       i32_res_29575 +
                                                                       gtid_38070];
                float x_38130 = ((__global
                                  float *) defunc_3_map_res_mem_41687)[gtid_38060 *
                                                                       (i32_res_29575 *
                                                                        i32_res_29575) +
                                                                       gtid_38061 *
                                                                       i32_res_29575 +
                                                                       gtid_38070];
                float defunc_1_f_res_38131 = x_38129 * x_38130;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_43330)[sext_i32_i64(local_tid_43326)] =
                        defunc_1_f_res_38131;
                }
            } else {
                ((__local
                  float *) red_arr_mem_43330)[sext_i32_i64(local_tid_43326)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, i32_res_29575)) {
            // perform segmented scan to imitate reduction
            {
                float x_38123;
                float x_38124;
                float x_43339;
                float x_43340;
                bool ltid_in_bounds_43342 = slt64(sext_i32_i64(local_tid_43326),
                                                  i32_res_29575 *
                                                  squot64(segred_group_sizze_38119,
                                                          segment_sizze_nonzzero_43323));
                int32_t skip_threads_43343;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_43342) {
                        x_38124 = ((volatile __local
                                    float *) red_arr_mem_43330)[sext_i32_i64(local_tid_43326)];
                        if ((local_tid_43326 - squot32(local_tid_43326, 32) *
                             32) == 0) {
                            x_38123 = x_38124;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_43343 = 1;
                    while (slt32(skip_threads_43343, 32)) {
                        if (sle32(skip_threads_43343, local_tid_43326 -
                                  squot32(local_tid_43326, 32) * 32) &&
                            ltid_in_bounds_43342) {
                            // read operands
                            {
                                x_38123 = ((volatile __local
                                            float *) red_arr_mem_43330)[sext_i32_i64(local_tid_43326) -
                                                                        sext_i32_i64(skip_threads_43343)];
                            }
                            // perform operation
                            {
                                bool inactive_43344 =
                                     slt64(srem64(sext_i32_i64(local_tid_43326),
                                                  i32_res_29575),
                                           sext_i32_i64(local_tid_43326) -
                                           sext_i32_i64(local_tid_43326 -
                                           skip_threads_43343));
                                
                                if (inactive_43344) {
                                    x_38123 = x_38124;
                                }
                                if (!inactive_43344) {
                                    float defunc_1_op_res_38125 = x_38123 +
                                          x_38124;
                                    
                                    x_38123 = defunc_1_op_res_38125;
                                }
                            }
                        }
                        if (sle32(wave_sizze_43328, skip_threads_43343)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_43343, local_tid_43326 -
                                  squot32(local_tid_43326, 32) * 32) &&
                            ltid_in_bounds_43342) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43330)[sext_i32_i64(local_tid_43326)] =
                                    x_38123;
                                x_38124 = x_38123;
                            }
                        }
                        if (sle32(wave_sizze_43328, skip_threads_43343)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_43343 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_43326 - squot32(local_tid_43326, 32) * 32) ==
                        31 && ltid_in_bounds_43342) {
                        ((volatile __local
                          float *) red_arr_mem_43330)[sext_i32_i64(squot32(local_tid_43326,
                                                                           32))] =
                            x_38123;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_43345;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_43326, 32) == 0 &&
                            ltid_in_bounds_43342) {
                            x_43340 = ((volatile __local
                                        float *) red_arr_mem_43330)[sext_i32_i64(local_tid_43326)];
                            if ((local_tid_43326 - squot32(local_tid_43326,
                                                           32) * 32) == 0) {
                                x_43339 = x_43340;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_43345 = 1;
                        while (slt32(skip_threads_43345, 32)) {
                            if (sle32(skip_threads_43345, local_tid_43326 -
                                      squot32(local_tid_43326, 32) * 32) &&
                                (squot32(local_tid_43326, 32) == 0 &&
                                 ltid_in_bounds_43342)) {
                                // read operands
                                {
                                    x_43339 = ((volatile __local
                                                float *) red_arr_mem_43330)[sext_i32_i64(local_tid_43326) -
                                                                            sext_i32_i64(skip_threads_43345)];
                                }
                                // perform operation
                                {
                                    bool inactive_43346 =
                                         slt64(srem64(sext_i32_i64(local_tid_43326 *
                                                      32 + 32 - 1),
                                                      i32_res_29575),
                                               sext_i32_i64(local_tid_43326 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_43326 -
                                                             skip_threads_43345) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_43346) {
                                        x_43339 = x_43340;
                                    }
                                    if (!inactive_43346) {
                                        float defunc_1_op_res_43341 = x_43339 +
                                              x_43340;
                                        
                                        x_43339 = defunc_1_op_res_43341;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_43328, skip_threads_43345)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_43345, local_tid_43326 -
                                      squot32(local_tid_43326, 32) * 32) &&
                                (squot32(local_tid_43326, 32) == 0 &&
                                 ltid_in_bounds_43342)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_43330)[sext_i32_i64(local_tid_43326)] =
                                        x_43339;
                                    x_43340 = x_43339;
                                }
                            }
                            if (sle32(wave_sizze_43328, skip_threads_43345)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_43345 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_43326, 32) == 0 ||
                          !ltid_in_bounds_43342)) {
                        // read operands
                        {
                            x_38124 = x_38123;
                            x_38123 = ((__local
                                        float *) red_arr_mem_43330)[sext_i32_i64(squot32(local_tid_43326,
                                                                                         32)) -
                                                                    (int64_t) 1];
                        }
                        // perform operation
                        {
                            bool inactive_43347 =
                                 slt64(srem64(sext_i32_i64(local_tid_43326),
                                              i32_res_29575),
                                       sext_i32_i64(local_tid_43326) -
                                       sext_i32_i64(squot32(local_tid_43326,
                                                            32) * 32 - 1));
                            
                            if (inactive_43347) {
                                x_38123 = x_38124;
                            }
                            if (!inactive_43347) {
                                float defunc_1_op_res_38125 = x_38123 + x_38124;
                                
                                x_38123 = defunc_1_op_res_38125;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_43330)[sext_i32_i64(local_tid_43326)] =
                                x_38123;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_43326, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_43330)[sext_i32_i64(local_tid_43326)] =
                            x_38124;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_43334) *
                      squot64(segred_group_sizze_38119,
                              segment_sizze_nonzzero_43323) +
                      sext_i32_i64(local_tid_43326), m_29560 * i32_res_29575) &&
                slt64(sext_i32_i64(local_tid_43326),
                      squot64(segred_group_sizze_38119,
                              segment_sizze_nonzzero_43323))) {
                ((__global
                  float *) mem_41979)[squot64(sext_i32_i64(virt_group_id_43334) *
                                              squot64(segred_group_sizze_38119,
                                                      segment_sizze_nonzzero_43323) +
                                              sext_i32_i64(local_tid_43326),
                                              i32_res_29575) * i32_res_29575 +
                                      (sext_i32_i64(virt_group_id_43334) *
                                       squot64(segred_group_sizze_38119,
                                               segment_sizze_nonzzero_43323) +
                                       sext_i32_i64(local_tid_43326) -
                                       squot64(sext_i32_i64(virt_group_id_43334) *
                                               squot64(segred_group_sizze_38119,
                                                       segment_sizze_nonzzero_43323) +
                                               sext_i32_i64(local_tid_43326),
                                               i32_res_29575) *
                                       i32_res_29575)] = ((__local
                                                           float *) red_arr_mem_43330)[(sext_i32_i64(local_tid_43326) +
                                                                                        (int64_t) 1) *
                                                                                       segment_sizze_nonzzero_43323 -
                                                                                       (int64_t) 1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_38119
}
__kernel void mainzisegred_small_38201(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_43477_backing_aligned_0,
                                       int64_t N_29559, int64_t m_29560,
                                       int64_t i32_res_29575,
                                       int64_t num_groups_38248,
                                       int64_t segment_sizze_nonzzero_43470,
                                       __global unsigned char *mem_41440,
                                       __global
                                       unsigned char *defunc_4_map_res_mem_41986,
                                       __global unsigned char *mem_42209)
{
    #define segred_group_sizze_38247 (mainzisegred_group_sizze_38195)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_43477_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43477_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43472;
    int32_t local_tid_43473;
    int64_t group_sizze_43476;
    int32_t wave_sizze_43475;
    int32_t group_tid_43474;
    
    global_tid_43472 = get_global_id(0);
    local_tid_43473 = get_local_id(0);
    group_sizze_43476 = get_local_size(0);
    wave_sizze_43475 = LOCKSTEP_WIDTH;
    group_tid_43474 = get_group_id(0);
    
    int32_t phys_tid_38201 = global_tid_43472;
    __local char *red_arr_mem_43477;
    
    red_arr_mem_43477 = (__local char *) red_arr_mem_43477_backing_0;
    
    int32_t phys_group_id_43479;
    
    phys_group_id_43479 = get_group_id(0);
    for (int32_t i_43480 = 0; i_43480 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_29560 * N_29559,
                                          squot64(segred_group_sizze_38247,
                                                  segment_sizze_nonzzero_43470))) -
                   phys_group_id_43479, sext_i64_i32(num_groups_38248));
         i_43480++) {
        int32_t virt_group_id_43481 = phys_group_id_43479 + i_43480 *
                sext_i64_i32(num_groups_38248);
        int64_t slice_43482 = N_29559;
        int64_t slice_43483 = m_29560 * slice_43482;
        int64_t gtid_38190 = squot64(squot64(sext_i32_i64(local_tid_43473),
                                             segment_sizze_nonzzero_43470) +
                                     sext_i32_i64(virt_group_id_43481) *
                                     squot64(segred_group_sizze_38247,
                                             segment_sizze_nonzzero_43470),
                                     slice_43482);
        int64_t remnant_43484 = squot64(sext_i32_i64(local_tid_43473),
                                        segment_sizze_nonzzero_43470) +
                sext_i32_i64(virt_group_id_43481) *
                squot64(segred_group_sizze_38247,
                        segment_sizze_nonzzero_43470) - gtid_38190 *
                slice_43482;
        int64_t gtid_38191 = remnant_43484;
        int64_t remnant_43485 = remnant_43484 - gtid_38191;
        int64_t gtid_38200 = srem64(sext_i32_i64(local_tid_43473),
                                    i32_res_29575);
        
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, i32_res_29575) && ((slt64(gtid_38190,
                                                             m_29560) &&
                                                       slt64(gtid_38191,
                                                             N_29559)) &&
                                                      slt64(sext_i32_i64(local_tid_43473),
                                                            i32_res_29575 *
                                                            squot64(segred_group_sizze_38247,
                                                                    segment_sizze_nonzzero_43470)))) {
                float x_38256 = ((__global
                                  float *) defunc_4_map_res_mem_41986)[gtid_38190 *
                                                                       i32_res_29575 +
                                                                       gtid_38200];
                float x_38257 = ((__global float *) mem_41440)[gtid_38191 *
                                                               i32_res_29575 +
                                                               gtid_38200];
                float defunc_1_f_res_38258 = x_38256 * x_38257;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_43477)[sext_i32_i64(local_tid_43473)] =
                        defunc_1_f_res_38258;
                }
            } else {
                ((__local
                  float *) red_arr_mem_43477)[sext_i32_i64(local_tid_43473)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, i32_res_29575)) {
            // perform segmented scan to imitate reduction
            {
                float x_38251;
                float x_38252;
                float x_43486;
                float x_43487;
                bool ltid_in_bounds_43489 = slt64(sext_i32_i64(local_tid_43473),
                                                  i32_res_29575 *
                                                  squot64(segred_group_sizze_38247,
                                                          segment_sizze_nonzzero_43470));
                int32_t skip_threads_43490;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_43489) {
                        x_38252 = ((volatile __local
                                    float *) red_arr_mem_43477)[sext_i32_i64(local_tid_43473)];
                        if ((local_tid_43473 - squot32(local_tid_43473, 32) *
                             32) == 0) {
                            x_38251 = x_38252;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_43490 = 1;
                    while (slt32(skip_threads_43490, 32)) {
                        if (sle32(skip_threads_43490, local_tid_43473 -
                                  squot32(local_tid_43473, 32) * 32) &&
                            ltid_in_bounds_43489) {
                            // read operands
                            {
                                x_38251 = ((volatile __local
                                            float *) red_arr_mem_43477)[sext_i32_i64(local_tid_43473) -
                                                                        sext_i32_i64(skip_threads_43490)];
                            }
                            // perform operation
                            {
                                bool inactive_43491 =
                                     slt64(srem64(sext_i32_i64(local_tid_43473),
                                                  i32_res_29575),
                                           sext_i32_i64(local_tid_43473) -
                                           sext_i32_i64(local_tid_43473 -
                                           skip_threads_43490));
                                
                                if (inactive_43491) {
                                    x_38251 = x_38252;
                                }
                                if (!inactive_43491) {
                                    float defunc_1_op_res_38253 = x_38251 +
                                          x_38252;
                                    
                                    x_38251 = defunc_1_op_res_38253;
                                }
                            }
                        }
                        if (sle32(wave_sizze_43475, skip_threads_43490)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_43490, local_tid_43473 -
                                  squot32(local_tid_43473, 32) * 32) &&
                            ltid_in_bounds_43489) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43477)[sext_i32_i64(local_tid_43473)] =
                                    x_38251;
                                x_38252 = x_38251;
                            }
                        }
                        if (sle32(wave_sizze_43475, skip_threads_43490)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_43490 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_43473 - squot32(local_tid_43473, 32) * 32) ==
                        31 && ltid_in_bounds_43489) {
                        ((volatile __local
                          float *) red_arr_mem_43477)[sext_i32_i64(squot32(local_tid_43473,
                                                                           32))] =
                            x_38251;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_43492;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_43473, 32) == 0 &&
                            ltid_in_bounds_43489) {
                            x_43487 = ((volatile __local
                                        float *) red_arr_mem_43477)[sext_i32_i64(local_tid_43473)];
                            if ((local_tid_43473 - squot32(local_tid_43473,
                                                           32) * 32) == 0) {
                                x_43486 = x_43487;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_43492 = 1;
                        while (slt32(skip_threads_43492, 32)) {
                            if (sle32(skip_threads_43492, local_tid_43473 -
                                      squot32(local_tid_43473, 32) * 32) &&
                                (squot32(local_tid_43473, 32) == 0 &&
                                 ltid_in_bounds_43489)) {
                                // read operands
                                {
                                    x_43486 = ((volatile __local
                                                float *) red_arr_mem_43477)[sext_i32_i64(local_tid_43473) -
                                                                            sext_i32_i64(skip_threads_43492)];
                                }
                                // perform operation
                                {
                                    bool inactive_43493 =
                                         slt64(srem64(sext_i32_i64(local_tid_43473 *
                                                      32 + 32 - 1),
                                                      i32_res_29575),
                                               sext_i32_i64(local_tid_43473 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_43473 -
                                                             skip_threads_43492) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_43493) {
                                        x_43486 = x_43487;
                                    }
                                    if (!inactive_43493) {
                                        float defunc_1_op_res_43488 = x_43486 +
                                              x_43487;
                                        
                                        x_43486 = defunc_1_op_res_43488;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_43475, skip_threads_43492)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_43492, local_tid_43473 -
                                      squot32(local_tid_43473, 32) * 32) &&
                                (squot32(local_tid_43473, 32) == 0 &&
                                 ltid_in_bounds_43489)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_43477)[sext_i32_i64(local_tid_43473)] =
                                        x_43486;
                                    x_43487 = x_43486;
                                }
                            }
                            if (sle32(wave_sizze_43475, skip_threads_43492)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_43492 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_43473, 32) == 0 ||
                          !ltid_in_bounds_43489)) {
                        // read operands
                        {
                            x_38252 = x_38251;
                            x_38251 = ((__local
                                        float *) red_arr_mem_43477)[sext_i32_i64(squot32(local_tid_43473,
                                                                                         32)) -
                                                                    (int64_t) 1];
                        }
                        // perform operation
                        {
                            bool inactive_43494 =
                                 slt64(srem64(sext_i32_i64(local_tid_43473),
                                              i32_res_29575),
                                       sext_i32_i64(local_tid_43473) -
                                       sext_i32_i64(squot32(local_tid_43473,
                                                            32) * 32 - 1));
                            
                            if (inactive_43494) {
                                x_38251 = x_38252;
                            }
                            if (!inactive_43494) {
                                float defunc_1_op_res_38253 = x_38251 + x_38252;
                                
                                x_38251 = defunc_1_op_res_38253;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_43477)[sext_i32_i64(local_tid_43473)] =
                                x_38251;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_43473, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_43477)[sext_i32_i64(local_tid_43473)] =
                            x_38252;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_43481) *
                      squot64(segred_group_sizze_38247,
                              segment_sizze_nonzzero_43470) +
                      sext_i32_i64(local_tid_43473), m_29560 * N_29559) &&
                slt64(sext_i32_i64(local_tid_43473),
                      squot64(segred_group_sizze_38247,
                              segment_sizze_nonzzero_43470))) {
                ((__global
                  float *) mem_42209)[squot64(sext_i32_i64(virt_group_id_43481) *
                                              squot64(segred_group_sizze_38247,
                                                      segment_sizze_nonzzero_43470) +
                                              sext_i32_i64(local_tid_43473),
                                              N_29559) * N_29559 +
                                      (sext_i32_i64(virt_group_id_43481) *
                                       squot64(segred_group_sizze_38247,
                                               segment_sizze_nonzzero_43470) +
                                       sext_i32_i64(local_tid_43473) -
                                       squot64(sext_i32_i64(virt_group_id_43481) *
                                               squot64(segred_group_sizze_38247,
                                                       segment_sizze_nonzzero_43470) +
                                               sext_i32_i64(local_tid_43473),
                                               N_29559) * N_29559)] = ((__local
                                                                        float *) red_arr_mem_43477)[(sext_i32_i64(local_tid_43473) +
                                                                                                     (int64_t) 1) *
                                                                                                    segment_sizze_nonzzero_43470 -
                                                                                                    (int64_t) 1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_38247
}
__kernel void mainzisegred_small_38656(__global int *global_failure,
                                       int failure_is_an_option, __global
                                       int64_t *global_failure_args,
                                       __local volatile
                                       int64_t *red_arr_mem_43755_backing_aligned_0,
                                       int64_t N_29559, int64_t m_29560,
                                       int64_t i32_res_29569,
                                       int64_t num_groups_38707,
                                       int64_t segment_sizze_nonzzero_43748,
                                       __global
                                       unsigned char *defunc_4_map_res_mem_42266,
                                       __global unsigned char *mem_42329,
                                       __global unsigned char *mem_42333)
{
    #define segred_group_sizze_38706 (mainzisegred_group_sizze_38650)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_43755_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43755_backing_aligned_0;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43750;
    int32_t local_tid_43751;
    int64_t group_sizze_43754;
    int32_t wave_sizze_43753;
    int32_t group_tid_43752;
    
    global_tid_43750 = get_global_id(0);
    local_tid_43751 = get_local_id(0);
    group_sizze_43754 = get_local_size(0);
    wave_sizze_43753 = LOCKSTEP_WIDTH;
    group_tid_43752 = get_group_id(0);
    
    int32_t phys_tid_38656 = global_tid_43750;
    __local char *red_arr_mem_43755;
    
    red_arr_mem_43755 = (__local char *) red_arr_mem_43755_backing_0;
    
    int32_t phys_group_id_43757;
    
    phys_group_id_43757 = get_group_id(0);
    for (int32_t i_43758 = 0; i_43758 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_29560,
                                          squot64(segred_group_sizze_38706,
                                                  segment_sizze_nonzzero_43748))) -
                   phys_group_id_43757, sext_i64_i32(num_groups_38707));
         i_43758++) {
        int32_t virt_group_id_43759 = phys_group_id_43757 + i_43758 *
                sext_i64_i32(num_groups_38707);
        int64_t slice_43760 = m_29560;
        int64_t gtid_38647 = squot64(sext_i32_i64(local_tid_43751),
                                     segment_sizze_nonzzero_43748) +
                sext_i32_i64(virt_group_id_43759) *
                squot64(segred_group_sizze_38706, segment_sizze_nonzzero_43748);
        int64_t remnant_43761 = squot64(sext_i32_i64(local_tid_43751),
                                        segment_sizze_nonzzero_43748) +
                sext_i32_i64(virt_group_id_43759) *
                squot64(segred_group_sizze_38706,
                        segment_sizze_nonzzero_43748) - gtid_38647;
        int64_t gtid_38655 = srem64(sext_i32_i64(local_tid_43751),
                                    i32_res_29569);
        
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, i32_res_29569) && (slt64(gtid_38647,
                                                            m_29560) &&
                                                      slt64(sext_i32_i64(local_tid_43751),
                                                            i32_res_29569 *
                                                            squot64(segred_group_sizze_38706,
                                                                    segment_sizze_nonzzero_43748)))) {
                int32_t defunc_0_f_res_38714 = ((__global
                                                 int32_t *) mem_42329)[gtid_38647];
                int32_t index_primexp_39436 = sext_i64_i32(gtid_38655);
                bool cond_38716 = slt32(index_primexp_39436,
                                        defunc_0_f_res_38714);
                float defunc_0_f_res_38717;
                
                if (cond_38716) {
                    int64_t i_38718 = sext_i32_i64(index_primexp_39436);
                    bool x_38719 = sle64((int64_t) 0, i_38718);
                    bool y_38720 = slt64(i_38718, N_29559);
                    bool bounds_check_38721 = x_38719 && y_38720;
                    bool index_certs_38722;
                    
                    if (!bounds_check_38721) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          18) == -1) {
                                global_failure_args[0] = i_38718;
                                global_failure_args[1] = N_29559;
                                ;
                            }
                            local_failure = true;
                            goto error_0;
                        }
                    }
                    
                    float defunc_0_f_res_t_res_38723 = ((__global
                                                         float *) defunc_4_map_res_mem_42266)[gtid_38647 *
                                                                                              N_29559 +
                                                                                              i_38718];
                    
                    defunc_0_f_res_38717 = defunc_0_f_res_t_res_38723;
                } else {
                    defunc_0_f_res_38717 = 0.0F;
                }
                
                float defunc_0_f_res_38724 = defunc_0_f_res_38717 *
                      defunc_0_f_res_38717;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_43755)[sext_i32_i64(local_tid_43751)] =
                        defunc_0_f_res_38724;
                }
            } else {
                ((__local
                  float *) red_arr_mem_43755)[sext_i32_i64(local_tid_43751)] =
                    0.0F;
            }
        }
        
      error_0:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, i32_res_29569)) {
            // perform segmented scan to imitate reduction
            {
                float x_38710;
                float x_38711;
                float x_43762;
                float x_43763;
                bool ltid_in_bounds_43765 = slt64(sext_i32_i64(local_tid_43751),
                                                  i32_res_29569 *
                                                  squot64(segred_group_sizze_38706,
                                                          segment_sizze_nonzzero_43748));
                int32_t skip_threads_43766;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_43765) {
                        x_38711 = ((volatile __local
                                    float *) red_arr_mem_43755)[sext_i32_i64(local_tid_43751)];
                        if ((local_tid_43751 - squot32(local_tid_43751, 32) *
                             32) == 0) {
                            x_38710 = x_38711;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_43766 = 1;
                    while (slt32(skip_threads_43766, 32)) {
                        if (sle32(skip_threads_43766, local_tid_43751 -
                                  squot32(local_tid_43751, 32) * 32) &&
                            ltid_in_bounds_43765) {
                            // read operands
                            {
                                x_38710 = ((volatile __local
                                            float *) red_arr_mem_43755)[sext_i32_i64(local_tid_43751) -
                                                                        sext_i32_i64(skip_threads_43766)];
                            }
                            // perform operation
                            {
                                bool inactive_43767 =
                                     slt64(srem64(sext_i32_i64(local_tid_43751),
                                                  i32_res_29569),
                                           sext_i32_i64(local_tid_43751) -
                                           sext_i32_i64(local_tid_43751 -
                                           skip_threads_43766));
                                
                                if (inactive_43767) {
                                    x_38710 = x_38711;
                                }
                                if (!inactive_43767) {
                                    float defunc_1_op_res_38712 = x_38710 +
                                          x_38711;
                                    
                                    x_38710 = defunc_1_op_res_38712;
                                }
                            }
                        }
                        if (sle32(wave_sizze_43753, skip_threads_43766)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_43766, local_tid_43751 -
                                  squot32(local_tid_43751, 32) * 32) &&
                            ltid_in_bounds_43765) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43755)[sext_i32_i64(local_tid_43751)] =
                                    x_38710;
                                x_38711 = x_38710;
                            }
                        }
                        if (sle32(wave_sizze_43753, skip_threads_43766)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_43766 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_43751 - squot32(local_tid_43751, 32) * 32) ==
                        31 && ltid_in_bounds_43765) {
                        ((volatile __local
                          float *) red_arr_mem_43755)[sext_i32_i64(squot32(local_tid_43751,
                                                                           32))] =
                            x_38710;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_43768;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_43751, 32) == 0 &&
                            ltid_in_bounds_43765) {
                            x_43763 = ((volatile __local
                                        float *) red_arr_mem_43755)[sext_i32_i64(local_tid_43751)];
                            if ((local_tid_43751 - squot32(local_tid_43751,
                                                           32) * 32) == 0) {
                                x_43762 = x_43763;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_43768 = 1;
                        while (slt32(skip_threads_43768, 32)) {
                            if (sle32(skip_threads_43768, local_tid_43751 -
                                      squot32(local_tid_43751, 32) * 32) &&
                                (squot32(local_tid_43751, 32) == 0 &&
                                 ltid_in_bounds_43765)) {
                                // read operands
                                {
                                    x_43762 = ((volatile __local
                                                float *) red_arr_mem_43755)[sext_i32_i64(local_tid_43751) -
                                                                            sext_i32_i64(skip_threads_43768)];
                                }
                                // perform operation
                                {
                                    bool inactive_43769 =
                                         slt64(srem64(sext_i32_i64(local_tid_43751 *
                                                      32 + 32 - 1),
                                                      i32_res_29569),
                                               sext_i32_i64(local_tid_43751 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_43751 -
                                                             skip_threads_43768) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_43769) {
                                        x_43762 = x_43763;
                                    }
                                    if (!inactive_43769) {
                                        float defunc_1_op_res_43764 = x_43762 +
                                              x_43763;
                                        
                                        x_43762 = defunc_1_op_res_43764;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_43753, skip_threads_43768)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_43768, local_tid_43751 -
                                      squot32(local_tid_43751, 32) * 32) &&
                                (squot32(local_tid_43751, 32) == 0 &&
                                 ltid_in_bounds_43765)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_43755)[sext_i32_i64(local_tid_43751)] =
                                        x_43762;
                                    x_43763 = x_43762;
                                }
                            }
                            if (sle32(wave_sizze_43753, skip_threads_43768)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_43768 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_43751, 32) == 0 ||
                          !ltid_in_bounds_43765)) {
                        // read operands
                        {
                            x_38711 = x_38710;
                            x_38710 = ((__local
                                        float *) red_arr_mem_43755)[sext_i32_i64(squot32(local_tid_43751,
                                                                                         32)) -
                                                                    (int64_t) 1];
                        }
                        // perform operation
                        {
                            bool inactive_43770 =
                                 slt64(srem64(sext_i32_i64(local_tid_43751),
                                              i32_res_29569),
                                       sext_i32_i64(local_tid_43751) -
                                       sext_i32_i64(squot32(local_tid_43751,
                                                            32) * 32 - 1));
                            
                            if (inactive_43770) {
                                x_38710 = x_38711;
                            }
                            if (!inactive_43770) {
                                float defunc_1_op_res_38712 = x_38710 + x_38711;
                                
                                x_38710 = defunc_1_op_res_38712;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_43755)[sext_i32_i64(local_tid_43751)] =
                                x_38710;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_43751, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_43755)[sext_i32_i64(local_tid_43751)] =
                            x_38711;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_43759) *
                      squot64(segred_group_sizze_38706,
                              segment_sizze_nonzzero_43748) +
                      sext_i32_i64(local_tid_43751), m_29560) &&
                slt64(sext_i32_i64(local_tid_43751),
                      squot64(segred_group_sizze_38706,
                              segment_sizze_nonzzero_43748))) {
                ((__global
                  float *) mem_42333)[sext_i32_i64(virt_group_id_43759) *
                                      squot64(segred_group_sizze_38706,
                                              segment_sizze_nonzzero_43748) +
                                      sext_i32_i64(local_tid_43751)] = ((__local
                                                                         float *) red_arr_mem_43755)[(sext_i32_i64(local_tid_43751) +
                                                                                                      (int64_t) 1) *
                                                                                                     segment_sizze_nonzzero_43748 -
                                                                                                     (int64_t) 1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_38706
}
__kernel void mainzisegred_small_38681(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_43691_backing_aligned_0,
                                       int64_t N_29559, int64_t m_29560,
                                       int64_t i32_res_29569,
                                       int64_t num_groups_38693,
                                       int64_t segment_sizze_nonzzero_43684,
                                       __global unsigned char *images_mem_41421,
                                       __global unsigned char *mem_42329)
{
    #define segred_group_sizze_38692 (mainzisegred_group_sizze_38675)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_43691_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43691_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43686;
    int32_t local_tid_43687;
    int64_t group_sizze_43690;
    int32_t wave_sizze_43689;
    int32_t group_tid_43688;
    
    global_tid_43686 = get_global_id(0);
    local_tid_43687 = get_local_id(0);
    group_sizze_43690 = get_local_size(0);
    wave_sizze_43689 = LOCKSTEP_WIDTH;
    group_tid_43688 = get_group_id(0);
    
    int32_t phys_tid_38681 = global_tid_43686;
    __local char *red_arr_mem_43691;
    
    red_arr_mem_43691 = (__local char *) red_arr_mem_43691_backing_0;
    
    int32_t phys_group_id_43693;
    
    phys_group_id_43693 = get_group_id(0);
    for (int32_t i_43694 = 0; i_43694 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_29560,
                                          squot64(segred_group_sizze_38692,
                                                  segment_sizze_nonzzero_43684))) -
                   phys_group_id_43693, sext_i64_i32(num_groups_38693));
         i_43694++) {
        int32_t virt_group_id_43695 = phys_group_id_43693 + i_43694 *
                sext_i64_i32(num_groups_38693);
        int64_t slice_43696 = m_29560;
        int64_t gtid_38672 = squot64(sext_i32_i64(local_tid_43687),
                                     segment_sizze_nonzzero_43684) +
                sext_i32_i64(virt_group_id_43695) *
                squot64(segred_group_sizze_38692, segment_sizze_nonzzero_43684);
        int64_t remnant_43697 = squot64(sext_i32_i64(local_tid_43687),
                                        segment_sizze_nonzzero_43684) +
                sext_i32_i64(virt_group_id_43695) *
                squot64(segred_group_sizze_38692,
                        segment_sizze_nonzzero_43684) - gtid_38672;
        int64_t gtid_38680 = srem64(sext_i32_i64(local_tid_43687),
                                    i32_res_29569);
        
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, i32_res_29569) && (slt64(gtid_38672,
                                                            m_29560) &&
                                                      slt64(sext_i32_i64(local_tid_43687),
                                                            i32_res_29569 *
                                                            squot64(segred_group_sizze_38692,
                                                                    segment_sizze_nonzzero_43684)))) {
                float x_38700 = ((__global
                                  float *) images_mem_41421)[gtid_38672 *
                                                             N_29559 +
                                                             gtid_38680];
                bool isnan_res_38701;
                
                isnan_res_38701 = futrts_isnan32(x_38700);
                
                bool cond_38702 = !isnan_res_38701;
                int32_t defunc_0_f_res_38703 = btoi_bool_i32(cond_38702);
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      int32_t *) red_arr_mem_43691)[sext_i32_i64(local_tid_43687)] =
                        defunc_0_f_res_38703;
                }
            } else {
                ((__local
                  int32_t *) red_arr_mem_43691)[sext_i32_i64(local_tid_43687)] =
                    0;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, i32_res_29569)) {
            // perform segmented scan to imitate reduction
            {
                int32_t x_38696;
                int32_t x_38697;
                int32_t x_43698;
                int32_t x_43699;
                bool ltid_in_bounds_43701 = slt64(sext_i32_i64(local_tid_43687),
                                                  i32_res_29569 *
                                                  squot64(segred_group_sizze_38692,
                                                          segment_sizze_nonzzero_43684));
                int32_t skip_threads_43702;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_43701) {
                        x_38697 = ((volatile __local
                                    int32_t *) red_arr_mem_43691)[sext_i32_i64(local_tid_43687)];
                        if ((local_tid_43687 - squot32(local_tid_43687, 32) *
                             32) == 0) {
                            x_38696 = x_38697;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_43702 = 1;
                    while (slt32(skip_threads_43702, 32)) {
                        if (sle32(skip_threads_43702, local_tid_43687 -
                                  squot32(local_tid_43687, 32) * 32) &&
                            ltid_in_bounds_43701) {
                            // read operands
                            {
                                x_38696 = ((volatile __local
                                            int32_t *) red_arr_mem_43691)[sext_i32_i64(local_tid_43687) -
                                                                          sext_i32_i64(skip_threads_43702)];
                            }
                            // perform operation
                            {
                                bool inactive_43703 =
                                     slt64(srem64(sext_i32_i64(local_tid_43687),
                                                  i32_res_29569),
                                           sext_i32_i64(local_tid_43687) -
                                           sext_i32_i64(local_tid_43687 -
                                           skip_threads_43702));
                                
                                if (inactive_43703) {
                                    x_38696 = x_38697;
                                }
                                if (!inactive_43703) {
                                    int32_t defunc_1_op_res_38698 =
                                            add32(x_38696, x_38697);
                                    
                                    x_38696 = defunc_1_op_res_38698;
                                }
                            }
                        }
                        if (sle32(wave_sizze_43689, skip_threads_43702)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_43702, local_tid_43687 -
                                  squot32(local_tid_43687, 32) * 32) &&
                            ltid_in_bounds_43701) {
                            // write result
                            {
                                ((volatile __local
                                  int32_t *) red_arr_mem_43691)[sext_i32_i64(local_tid_43687)] =
                                    x_38696;
                                x_38697 = x_38696;
                            }
                        }
                        if (sle32(wave_sizze_43689, skip_threads_43702)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_43702 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_43687 - squot32(local_tid_43687, 32) * 32) ==
                        31 && ltid_in_bounds_43701) {
                        ((volatile __local
                          int32_t *) red_arr_mem_43691)[sext_i32_i64(squot32(local_tid_43687,
                                                                             32))] =
                            x_38696;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_43704;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_43687, 32) == 0 &&
                            ltid_in_bounds_43701) {
                            x_43699 = ((volatile __local
                                        int32_t *) red_arr_mem_43691)[sext_i32_i64(local_tid_43687)];
                            if ((local_tid_43687 - squot32(local_tid_43687,
                                                           32) * 32) == 0) {
                                x_43698 = x_43699;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_43704 = 1;
                        while (slt32(skip_threads_43704, 32)) {
                            if (sle32(skip_threads_43704, local_tid_43687 -
                                      squot32(local_tid_43687, 32) * 32) &&
                                (squot32(local_tid_43687, 32) == 0 &&
                                 ltid_in_bounds_43701)) {
                                // read operands
                                {
                                    x_43698 = ((volatile __local
                                                int32_t *) red_arr_mem_43691)[sext_i32_i64(local_tid_43687) -
                                                                              sext_i32_i64(skip_threads_43704)];
                                }
                                // perform operation
                                {
                                    bool inactive_43705 =
                                         slt64(srem64(sext_i32_i64(local_tid_43687 *
                                                      32 + 32 - 1),
                                                      i32_res_29569),
                                               sext_i32_i64(local_tid_43687 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_43687 -
                                                             skip_threads_43704) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_43705) {
                                        x_43698 = x_43699;
                                    }
                                    if (!inactive_43705) {
                                        int32_t defunc_1_op_res_43700 =
                                                add32(x_43698, x_43699);
                                        
                                        x_43698 = defunc_1_op_res_43700;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_43689, skip_threads_43704)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_43704, local_tid_43687 -
                                      squot32(local_tid_43687, 32) * 32) &&
                                (squot32(local_tid_43687, 32) == 0 &&
                                 ltid_in_bounds_43701)) {
                                // write result
                                {
                                    ((volatile __local
                                      int32_t *) red_arr_mem_43691)[sext_i32_i64(local_tid_43687)] =
                                        x_43698;
                                    x_43699 = x_43698;
                                }
                            }
                            if (sle32(wave_sizze_43689, skip_threads_43704)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_43704 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_43687, 32) == 0 ||
                          !ltid_in_bounds_43701)) {
                        // read operands
                        {
                            x_38697 = x_38696;
                            x_38696 = ((__local
                                        int32_t *) red_arr_mem_43691)[sext_i32_i64(squot32(local_tid_43687,
                                                                                           32)) -
                                                                      (int64_t) 1];
                        }
                        // perform operation
                        {
                            bool inactive_43706 =
                                 slt64(srem64(sext_i32_i64(local_tid_43687),
                                              i32_res_29569),
                                       sext_i32_i64(local_tid_43687) -
                                       sext_i32_i64(squot32(local_tid_43687,
                                                            32) * 32 - 1));
                            
                            if (inactive_43706) {
                                x_38696 = x_38697;
                            }
                            if (!inactive_43706) {
                                int32_t defunc_1_op_res_38698 = add32(x_38696,
                                                                      x_38697);
                                
                                x_38696 = defunc_1_op_res_38698;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              int32_t *) red_arr_mem_43691)[sext_i32_i64(local_tid_43687)] =
                                x_38696;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_43687, 32) == 0) {
                        ((__local
                          int32_t *) red_arr_mem_43691)[sext_i32_i64(local_tid_43687)] =
                            x_38697;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_43695) *
                      squot64(segred_group_sizze_38692,
                              segment_sizze_nonzzero_43684) +
                      sext_i32_i64(local_tid_43687), m_29560) &&
                slt64(sext_i32_i64(local_tid_43687),
                      squot64(segred_group_sizze_38692,
                              segment_sizze_nonzzero_43684))) {
                ((__global
                  int32_t *) mem_42329)[sext_i32_i64(virt_group_id_43695) *
                                        squot64(segred_group_sizze_38692,
                                                segment_sizze_nonzzero_43684) +
                                        sext_i32_i64(local_tid_43687)] =
                    ((__local
                      int32_t *) red_arr_mem_43691)[(sext_i32_i64(local_tid_43687) +
                                                     (int64_t) 1) *
                                                    segment_sizze_nonzzero_43684 -
                                                    (int64_t) 1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_38692
}
__kernel void mainzisegred_small_38828(__global int *global_failure,
                                       int failure_is_an_option, __global
                                       int64_t *global_failure_args,
                                       __local volatile
                                       int64_t *red_arr_mem_43873_backing_aligned_0,
                                       int64_t N_29559, int64_t m_29560,
                                       int64_t i32_res_29960,
                                       int64_t num_groups_38850,
                                       int64_t segment_sizze_nonzzero_43866,
                                       __global
                                       unsigned char *defunc_4_map_res_mem_42266,
                                       __global
                                       unsigned char *defunc_3_map_res_mem_42344,
                                       __global
                                       unsigned char *defunc_3_map_res_mem_42345,
                                       __global unsigned char *mem_42382)
{
    #define segred_group_sizze_38849 (mainzisegred_group_sizze_38822)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_43873_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43873_backing_aligned_0;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43868;
    int32_t local_tid_43869;
    int64_t group_sizze_43872;
    int32_t wave_sizze_43871;
    int32_t group_tid_43870;
    
    global_tid_43868 = get_global_id(0);
    local_tid_43869 = get_local_id(0);
    group_sizze_43872 = get_local_size(0);
    wave_sizze_43871 = LOCKSTEP_WIDTH;
    group_tid_43870 = get_group_id(0);
    
    int32_t phys_tid_38828 = global_tid_43868;
    __local char *red_arr_mem_43873;
    
    red_arr_mem_43873 = (__local char *) red_arr_mem_43873_backing_0;
    
    int32_t phys_group_id_43875;
    
    phys_group_id_43875 = get_group_id(0);
    for (int32_t i_43876 = 0; i_43876 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_29560,
                                          squot64(segred_group_sizze_38849,
                                                  segment_sizze_nonzzero_43866))) -
                   phys_group_id_43875, sext_i64_i32(num_groups_38850));
         i_43876++) {
        int32_t virt_group_id_43877 = phys_group_id_43875 + i_43876 *
                sext_i64_i32(num_groups_38850);
        int64_t slice_43878 = m_29560;
        int64_t gtid_38819 = squot64(sext_i32_i64(local_tid_43869),
                                     segment_sizze_nonzzero_43866) +
                sext_i32_i64(virt_group_id_43877) *
                squot64(segred_group_sizze_38849, segment_sizze_nonzzero_43866);
        int64_t remnant_43879 = squot64(sext_i32_i64(local_tid_43869),
                                        segment_sizze_nonzzero_43866) +
                sext_i32_i64(virt_group_id_43877) *
                squot64(segred_group_sizze_38849,
                        segment_sizze_nonzzero_43866) - gtid_38819;
        int64_t gtid_38827 = srem64(sext_i32_i64(local_tid_43869),
                                    i32_res_29960);
        
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, i32_res_29960) && (slt64(gtid_38819,
                                                            m_29560) &&
                                                      slt64(sext_i32_i64(local_tid_43869),
                                                            i32_res_29960 *
                                                            squot64(segred_group_sizze_38849,
                                                                    segment_sizze_nonzzero_43866)))) {
                int32_t x_38858 = ((__global
                                    int32_t *) defunc_3_map_res_mem_42344)[gtid_38819];
                int32_t index_primexp_39441 = sext_i64_i32(gtid_38827);
                bool cond_38860 = slt32(index_primexp_39441, x_38858);
                float defunc_0_f_res_38861;
                
                if (cond_38860) {
                    int32_t x_38857 = ((__global
                                        int32_t *) defunc_3_map_res_mem_42345)[gtid_38819];
                    int32_t x_38862 = add32(x_38857, index_primexp_39441);
                    int32_t x_38863 = sub32(x_38862, x_38858);
                    int32_t i_38864 = add32(1, x_38863);
                    int64_t i_38865 = sext_i32_i64(i_38864);
                    bool x_38866 = sle64((int64_t) 0, i_38865);
                    bool y_38867 = slt64(i_38865, N_29559);
                    bool bounds_check_38868 = x_38866 && y_38867;
                    bool index_certs_38869;
                    
                    if (!bounds_check_38868) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          22) == -1) {
                                global_failure_args[0] = i_38865;
                                global_failure_args[1] = N_29559;
                                ;
                            }
                            local_failure = true;
                            goto error_0;
                        }
                    }
                    
                    float defunc_0_f_res_t_res_38870 = ((__global
                                                         float *) defunc_4_map_res_mem_42266)[gtid_38819 *
                                                                                              N_29559 +
                                                                                              i_38865];
                    
                    defunc_0_f_res_38861 = defunc_0_f_res_t_res_38870;
                } else {
                    defunc_0_f_res_38861 = 0.0F;
                }
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_43873)[sext_i32_i64(local_tid_43869)] =
                        defunc_0_f_res_38861;
                }
            } else {
                ((__local
                  float *) red_arr_mem_43873)[sext_i32_i64(local_tid_43869)] =
                    0.0F;
            }
        }
        
      error_0:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, i32_res_29960)) {
            // perform segmented scan to imitate reduction
            {
                float x_38853;
                float x_38854;
                float x_43880;
                float x_43881;
                bool ltid_in_bounds_43883 = slt64(sext_i32_i64(local_tid_43869),
                                                  i32_res_29960 *
                                                  squot64(segred_group_sizze_38849,
                                                          segment_sizze_nonzzero_43866));
                int32_t skip_threads_43884;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_43883) {
                        x_38854 = ((volatile __local
                                    float *) red_arr_mem_43873)[sext_i32_i64(local_tid_43869)];
                        if ((local_tid_43869 - squot32(local_tid_43869, 32) *
                             32) == 0) {
                            x_38853 = x_38854;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_43884 = 1;
                    while (slt32(skip_threads_43884, 32)) {
                        if (sle32(skip_threads_43884, local_tid_43869 -
                                  squot32(local_tid_43869, 32) * 32) &&
                            ltid_in_bounds_43883) {
                            // read operands
                            {
                                x_38853 = ((volatile __local
                                            float *) red_arr_mem_43873)[sext_i32_i64(local_tid_43869) -
                                                                        sext_i32_i64(skip_threads_43884)];
                            }
                            // perform operation
                            {
                                bool inactive_43885 =
                                     slt64(srem64(sext_i32_i64(local_tid_43869),
                                                  i32_res_29960),
                                           sext_i32_i64(local_tid_43869) -
                                           sext_i32_i64(local_tid_43869 -
                                           skip_threads_43884));
                                
                                if (inactive_43885) {
                                    x_38853 = x_38854;
                                }
                                if (!inactive_43885) {
                                    float defunc_1_op_res_38855 = x_38853 +
                                          x_38854;
                                    
                                    x_38853 = defunc_1_op_res_38855;
                                }
                            }
                        }
                        if (sle32(wave_sizze_43871, skip_threads_43884)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_43884, local_tid_43869 -
                                  squot32(local_tid_43869, 32) * 32) &&
                            ltid_in_bounds_43883) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43873)[sext_i32_i64(local_tid_43869)] =
                                    x_38853;
                                x_38854 = x_38853;
                            }
                        }
                        if (sle32(wave_sizze_43871, skip_threads_43884)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_43884 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_43869 - squot32(local_tid_43869, 32) * 32) ==
                        31 && ltid_in_bounds_43883) {
                        ((volatile __local
                          float *) red_arr_mem_43873)[sext_i32_i64(squot32(local_tid_43869,
                                                                           32))] =
                            x_38853;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_43886;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_43869, 32) == 0 &&
                            ltid_in_bounds_43883) {
                            x_43881 = ((volatile __local
                                        float *) red_arr_mem_43873)[sext_i32_i64(local_tid_43869)];
                            if ((local_tid_43869 - squot32(local_tid_43869,
                                                           32) * 32) == 0) {
                                x_43880 = x_43881;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_43886 = 1;
                        while (slt32(skip_threads_43886, 32)) {
                            if (sle32(skip_threads_43886, local_tid_43869 -
                                      squot32(local_tid_43869, 32) * 32) &&
                                (squot32(local_tid_43869, 32) == 0 &&
                                 ltid_in_bounds_43883)) {
                                // read operands
                                {
                                    x_43880 = ((volatile __local
                                                float *) red_arr_mem_43873)[sext_i32_i64(local_tid_43869) -
                                                                            sext_i32_i64(skip_threads_43886)];
                                }
                                // perform operation
                                {
                                    bool inactive_43887 =
                                         slt64(srem64(sext_i32_i64(local_tid_43869 *
                                                      32 + 32 - 1),
                                                      i32_res_29960),
                                               sext_i32_i64(local_tid_43869 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_43869 -
                                                             skip_threads_43886) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_43887) {
                                        x_43880 = x_43881;
                                    }
                                    if (!inactive_43887) {
                                        float defunc_1_op_res_43882 = x_43880 +
                                              x_43881;
                                        
                                        x_43880 = defunc_1_op_res_43882;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_43871, skip_threads_43886)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_43886, local_tid_43869 -
                                      squot32(local_tid_43869, 32) * 32) &&
                                (squot32(local_tid_43869, 32) == 0 &&
                                 ltid_in_bounds_43883)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_43873)[sext_i32_i64(local_tid_43869)] =
                                        x_43880;
                                    x_43881 = x_43880;
                                }
                            }
                            if (sle32(wave_sizze_43871, skip_threads_43886)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_43886 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_43869, 32) == 0 ||
                          !ltid_in_bounds_43883)) {
                        // read operands
                        {
                            x_38854 = x_38853;
                            x_38853 = ((__local
                                        float *) red_arr_mem_43873)[sext_i32_i64(squot32(local_tid_43869,
                                                                                         32)) -
                                                                    (int64_t) 1];
                        }
                        // perform operation
                        {
                            bool inactive_43888 =
                                 slt64(srem64(sext_i32_i64(local_tid_43869),
                                              i32_res_29960),
                                       sext_i32_i64(local_tid_43869) -
                                       sext_i32_i64(squot32(local_tid_43869,
                                                            32) * 32 - 1));
                            
                            if (inactive_43888) {
                                x_38853 = x_38854;
                            }
                            if (!inactive_43888) {
                                float defunc_1_op_res_38855 = x_38853 + x_38854;
                                
                                x_38853 = defunc_1_op_res_38855;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_43873)[sext_i32_i64(local_tid_43869)] =
                                x_38853;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_43869, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_43873)[sext_i32_i64(local_tid_43869)] =
                            x_38854;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_43877) *
                      squot64(segred_group_sizze_38849,
                              segment_sizze_nonzzero_43866) +
                      sext_i32_i64(local_tid_43869), m_29560) &&
                slt64(sext_i32_i64(local_tid_43869),
                      squot64(segred_group_sizze_38849,
                              segment_sizze_nonzzero_43866))) {
                ((__global
                  float *) mem_42382)[sext_i32_i64(virt_group_id_43877) *
                                      squot64(segred_group_sizze_38849,
                                              segment_sizze_nonzzero_43866) +
                                      sext_i32_i64(local_tid_43869)] = ((__local
                                                                         float *) red_arr_mem_43873)[(sext_i32_i64(local_tid_43869) +
                                                                                                      (int64_t) 1) *
                                                                                                     segment_sizze_nonzzero_43866 -
                                                                                                     (int64_t) 1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_38849
}
__kernel void mainzisegred_small_39111(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_44047_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_44045_backing_aligned_1,
                                       __local volatile
                                       int64_t *red_arr_mem_44043_backing_aligned_2,
                                       int64_t m_29560,
                                       int64_t iota32_arg_29989,
                                       int64_t num_groups_39298,
                                       int64_t segment_sizze_nonzzero_44036,
                                       __global unsigned char *mem_42390,
                                       __global unsigned char *mem_42406,
                                       __global unsigned char *mem_42409,
                                       __global unsigned char *mem_42414,
                                       __global unsigned char *mem_42417,
                                       __global unsigned char *mem_42420,
                                       __global unsigned char *mem_42423)
{
    #define segred_group_sizze_39297 (mainzisegred_group_sizze_39105)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_44047_backing_2 =
                          (__local volatile
                           char *) red_arr_mem_44047_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_44045_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_44045_backing_aligned_1;
    __local volatile char *restrict red_arr_mem_44043_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_44043_backing_aligned_2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_44038;
    int32_t local_tid_44039;
    int64_t group_sizze_44042;
    int32_t wave_sizze_44041;
    int32_t group_tid_44040;
    
    global_tid_44038 = get_global_id(0);
    local_tid_44039 = get_local_id(0);
    group_sizze_44042 = get_local_size(0);
    wave_sizze_44041 = LOCKSTEP_WIDTH;
    group_tid_44040 = get_group_id(0);
    
    int32_t phys_tid_39111 = global_tid_44038;
    __local char *red_arr_mem_44043;
    
    red_arr_mem_44043 = (__local char *) red_arr_mem_44043_backing_0;
    
    __local char *red_arr_mem_44045;
    
    red_arr_mem_44045 = (__local char *) red_arr_mem_44045_backing_1;
    
    __local char *red_arr_mem_44047;
    
    red_arr_mem_44047 = (__local char *) red_arr_mem_44047_backing_2;
    
    int32_t phys_group_id_44049;
    
    phys_group_id_44049 = get_group_id(0);
    for (int32_t i_44050 = 0; i_44050 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_29560,
                                          squot64(segred_group_sizze_39297,
                                                  segment_sizze_nonzzero_44036))) -
                   phys_group_id_44049, sext_i64_i32(num_groups_39298));
         i_44050++) {
        int32_t virt_group_id_44051 = phys_group_id_44049 + i_44050 *
                sext_i64_i32(num_groups_39298);
        int64_t slice_44052 = m_29560;
        int64_t gtid_39102 = squot64(sext_i32_i64(local_tid_44039),
                                     segment_sizze_nonzzero_44036) +
                sext_i32_i64(virt_group_id_44051) *
                squot64(segred_group_sizze_39297, segment_sizze_nonzzero_44036);
        int64_t remnant_44053 = squot64(sext_i32_i64(local_tid_44039),
                                        segment_sizze_nonzzero_44036) +
                sext_i32_i64(virt_group_id_44051) *
                squot64(segred_group_sizze_39297,
                        segment_sizze_nonzzero_44036) - gtid_39102;
        int64_t gtid_39110 = srem64(sext_i32_i64(local_tid_44039),
                                    iota32_arg_29989);
        
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, iota32_arg_29989) && (slt64(gtid_39102,
                                                               m_29560) &&
                                                         slt64(sext_i32_i64(local_tid_44039),
                                                               iota32_arg_29989 *
                                                               squot64(segred_group_sizze_39297,
                                                                       segment_sizze_nonzzero_44036)))) {
                int32_t y_39317 = ((__global int32_t *) mem_42409)[gtid_39102];
                float y_39318 = ((__global float *) mem_42406)[gtid_39102];
                float x_39322 = ((__global float *) mem_42414)[gtid_39102 *
                                                               iota32_arg_29989 +
                                                               gtid_39110];
                float x_39323 = ((__global float *) mem_42390)[gtid_39110];
                int32_t index_primexp_39455 = sext_i64_i32(gtid_39110);
                float defunc_0_f_res_39326 = x_39322 / y_39318;
                bool cond_39327 = slt32(index_primexp_39455, y_39317);
                bool isnan_res_39328;
                
                isnan_res_39328 = futrts_isnan32(defunc_0_f_res_39326);
                
                bool cond_t_res_39329 = !isnan_res_39328;
                bool x_39330 = cond_39327 && cond_t_res_39329;
                float abs_res_39331 = (float) fabs(defunc_0_f_res_39326);
                bool defunc_2_f_res_t_res_39332 = x_39323 < abs_res_39331;
                bool x_39333 = x_39330 && defunc_2_f_res_t_res_39332;
                float defunc_1_f_res_39334;
                
                if (cond_39327) {
                    defunc_1_f_res_39334 = defunc_0_f_res_39326;
                } else {
                    defunc_1_f_res_39334 = 0.0F;
                }
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      bool *) red_arr_mem_44043)[sext_i32_i64(local_tid_44039)] =
                        x_39333;
                    ((__local
                      int32_t *) red_arr_mem_44045)[sext_i32_i64(local_tid_44039)] =
                        index_primexp_39455;
                    ((__local
                      float *) red_arr_mem_44047)[sext_i32_i64(local_tid_44039)] =
                        defunc_1_f_res_39334;
                }
            } else {
                ((__local
                  bool *) red_arr_mem_44043)[sext_i32_i64(local_tid_44039)] = 0;
                ((__local
                  int32_t *) red_arr_mem_44045)[sext_i32_i64(local_tid_44039)] =
                    -1;
                ((__local
                  float *) red_arr_mem_44047)[sext_i32_i64(local_tid_44039)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, iota32_arg_29989)) {
            // perform segmented scan to imitate reduction
            {
                bool x_39303;
                int32_t x_39304;
                float x_39305;
                bool x_39306;
                int32_t x_39307;
                float x_39308;
                bool x_44054;
                int32_t x_44055;
                float x_44056;
                bool x_44057;
                int32_t x_44058;
                float x_44059;
                bool ltid_in_bounds_44068 = slt64(sext_i32_i64(local_tid_44039),
                                                  iota32_arg_29989 *
                                                  squot64(segred_group_sizze_39297,
                                                          segment_sizze_nonzzero_44036));
                int32_t skip_threads_44069;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_44068) {
                        x_39306 = ((volatile __local
                                    bool *) red_arr_mem_44043)[sext_i32_i64(local_tid_44039)];
                        x_39307 = ((volatile __local
                                    int32_t *) red_arr_mem_44045)[sext_i32_i64(local_tid_44039)];
                        x_39308 = ((volatile __local
                                    float *) red_arr_mem_44047)[sext_i32_i64(local_tid_44039)];
                        if ((local_tid_44039 - squot32(local_tid_44039, 32) *
                             32) == 0) {
                            x_39303 = x_39306;
                            x_39304 = x_39307;
                            x_39305 = x_39308;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_44069 = 1;
                    while (slt32(skip_threads_44069, 32)) {
                        if (sle32(skip_threads_44069, local_tid_44039 -
                                  squot32(local_tid_44039, 32) * 32) &&
                            ltid_in_bounds_44068) {
                            // read operands
                            {
                                x_39303 = ((volatile __local
                                            bool *) red_arr_mem_44043)[sext_i32_i64(local_tid_44039) -
                                                                       sext_i32_i64(skip_threads_44069)];
                                x_39304 = ((volatile __local
                                            int32_t *) red_arr_mem_44045)[sext_i32_i64(local_tid_44039) -
                                                                          sext_i32_i64(skip_threads_44069)];
                                x_39305 = ((volatile __local
                                            float *) red_arr_mem_44047)[sext_i32_i64(local_tid_44039) -
                                                                        sext_i32_i64(skip_threads_44069)];
                            }
                            // perform operation
                            {
                                bool inactive_44070 =
                                     slt64(srem64(sext_i32_i64(local_tid_44039),
                                                  iota32_arg_29989),
                                           sext_i32_i64(local_tid_44039) -
                                           sext_i32_i64(local_tid_44039 -
                                           skip_threads_44069));
                                
                                if (inactive_44070) {
                                    x_39303 = x_39306;
                                    x_39304 = x_39307;
                                    x_39305 = x_39308;
                                }
                                if (!inactive_44070) {
                                    bool defunc_1_op_res_39309;
                                    int32_t defunc_1_op_res_39310;
                                    
                                    if (x_39303) {
                                        defunc_1_op_res_39309 = x_39303;
                                        defunc_1_op_res_39310 = x_39304;
                                    } else {
                                        bool x_39311 = x_39306 && x_39306;
                                        bool x_39312 = !x_39306;
                                        bool y_39313 = x_39303 && x_39312;
                                        bool defunc_1_op_res_f_res_39314 =
                                             x_39311 || y_39313;
                                        int32_t defunc_1_op_res_f_res_39315;
                                        
                                        if (x_39306) {
                                            defunc_1_op_res_f_res_39315 =
                                                x_39307;
                                        } else {
                                            defunc_1_op_res_f_res_39315 =
                                                x_39304;
                                        }
                                        defunc_1_op_res_39309 =
                                            defunc_1_op_res_f_res_39314;
                                        defunc_1_op_res_39310 =
                                            defunc_1_op_res_f_res_39315;
                                    }
                                    
                                    float defunc_1_op_res_39316 = x_39305 +
                                          x_39308;
                                    
                                    x_39303 = defunc_1_op_res_39309;
                                    x_39304 = defunc_1_op_res_39310;
                                    x_39305 = defunc_1_op_res_39316;
                                }
                            }
                        }
                        if (sle32(wave_sizze_44041, skip_threads_44069)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_44069, local_tid_44039 -
                                  squot32(local_tid_44039, 32) * 32) &&
                            ltid_in_bounds_44068) {
                            // write result
                            {
                                ((volatile __local
                                  bool *) red_arr_mem_44043)[sext_i32_i64(local_tid_44039)] =
                                    x_39303;
                                x_39306 = x_39303;
                                ((volatile __local
                                  int32_t *) red_arr_mem_44045)[sext_i32_i64(local_tid_44039)] =
                                    x_39304;
                                x_39307 = x_39304;
                                ((volatile __local
                                  float *) red_arr_mem_44047)[sext_i32_i64(local_tid_44039)] =
                                    x_39305;
                                x_39308 = x_39305;
                            }
                        }
                        if (sle32(wave_sizze_44041, skip_threads_44069)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_44069 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_44039 - squot32(local_tid_44039, 32) * 32) ==
                        31 && ltid_in_bounds_44068) {
                        ((volatile __local
                          bool *) red_arr_mem_44043)[sext_i32_i64(squot32(local_tid_44039,
                                                                          32))] =
                            x_39303;
                        ((volatile __local
                          int32_t *) red_arr_mem_44045)[sext_i32_i64(squot32(local_tid_44039,
                                                                             32))] =
                            x_39304;
                        ((volatile __local
                          float *) red_arr_mem_44047)[sext_i32_i64(squot32(local_tid_44039,
                                                                           32))] =
                            x_39305;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_44071;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_44039, 32) == 0 &&
                            ltid_in_bounds_44068) {
                            x_44057 = ((volatile __local
                                        bool *) red_arr_mem_44043)[sext_i32_i64(local_tid_44039)];
                            x_44058 = ((volatile __local
                                        int32_t *) red_arr_mem_44045)[sext_i32_i64(local_tid_44039)];
                            x_44059 = ((volatile __local
                                        float *) red_arr_mem_44047)[sext_i32_i64(local_tid_44039)];
                            if ((local_tid_44039 - squot32(local_tid_44039,
                                                           32) * 32) == 0) {
                                x_44054 = x_44057;
                                x_44055 = x_44058;
                                x_44056 = x_44059;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_44071 = 1;
                        while (slt32(skip_threads_44071, 32)) {
                            if (sle32(skip_threads_44071, local_tid_44039 -
                                      squot32(local_tid_44039, 32) * 32) &&
                                (squot32(local_tid_44039, 32) == 0 &&
                                 ltid_in_bounds_44068)) {
                                // read operands
                                {
                                    x_44054 = ((volatile __local
                                                bool *) red_arr_mem_44043)[sext_i32_i64(local_tid_44039) -
                                                                           sext_i32_i64(skip_threads_44071)];
                                    x_44055 = ((volatile __local
                                                int32_t *) red_arr_mem_44045)[sext_i32_i64(local_tid_44039) -
                                                                              sext_i32_i64(skip_threads_44071)];
                                    x_44056 = ((volatile __local
                                                float *) red_arr_mem_44047)[sext_i32_i64(local_tid_44039) -
                                                                            sext_i32_i64(skip_threads_44071)];
                                }
                                // perform operation
                                {
                                    bool inactive_44072 =
                                         slt64(srem64(sext_i32_i64(local_tid_44039 *
                                                      32 + 32 - 1),
                                                      iota32_arg_29989),
                                               sext_i32_i64(local_tid_44039 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_44039 -
                                                             skip_threads_44071) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_44072) {
                                        x_44054 = x_44057;
                                        x_44055 = x_44058;
                                        x_44056 = x_44059;
                                    }
                                    if (!inactive_44072) {
                                        bool defunc_1_op_res_44060;
                                        int32_t defunc_1_op_res_44061;
                                        
                                        if (x_44054) {
                                            defunc_1_op_res_44060 = x_44054;
                                            defunc_1_op_res_44061 = x_44055;
                                        } else {
                                            bool x_44062 = x_44057 && x_44057;
                                            bool x_44063 = !x_44057;
                                            bool y_44064 = x_44054 && x_44063;
                                            bool defunc_1_op_res_f_res_44065 =
                                                 x_44062 || y_44064;
                                            int32_t defunc_1_op_res_f_res_44066;
                                            
                                            if (x_44057) {
                                                defunc_1_op_res_f_res_44066 =
                                                    x_44058;
                                            } else {
                                                defunc_1_op_res_f_res_44066 =
                                                    x_44055;
                                            }
                                            defunc_1_op_res_44060 =
                                                defunc_1_op_res_f_res_44065;
                                            defunc_1_op_res_44061 =
                                                defunc_1_op_res_f_res_44066;
                                        }
                                        
                                        float defunc_1_op_res_44067 = x_44056 +
                                              x_44059;
                                        
                                        x_44054 = defunc_1_op_res_44060;
                                        x_44055 = defunc_1_op_res_44061;
                                        x_44056 = defunc_1_op_res_44067;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_44041, skip_threads_44071)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_44071, local_tid_44039 -
                                      squot32(local_tid_44039, 32) * 32) &&
                                (squot32(local_tid_44039, 32) == 0 &&
                                 ltid_in_bounds_44068)) {
                                // write result
                                {
                                    ((volatile __local
                                      bool *) red_arr_mem_44043)[sext_i32_i64(local_tid_44039)] =
                                        x_44054;
                                    x_44057 = x_44054;
                                    ((volatile __local
                                      int32_t *) red_arr_mem_44045)[sext_i32_i64(local_tid_44039)] =
                                        x_44055;
                                    x_44058 = x_44055;
                                    ((volatile __local
                                      float *) red_arr_mem_44047)[sext_i32_i64(local_tid_44039)] =
                                        x_44056;
                                    x_44059 = x_44056;
                                }
                            }
                            if (sle32(wave_sizze_44041, skip_threads_44071)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_44071 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_44039, 32) == 0 ||
                          !ltid_in_bounds_44068)) {
                        // read operands
                        {
                            x_39306 = x_39303;
                            x_39307 = x_39304;
                            x_39308 = x_39305;
                            x_39303 = ((__local
                                        bool *) red_arr_mem_44043)[sext_i32_i64(squot32(local_tid_44039,
                                                                                        32)) -
                                                                   (int64_t) 1];
                            x_39304 = ((__local
                                        int32_t *) red_arr_mem_44045)[sext_i32_i64(squot32(local_tid_44039,
                                                                                           32)) -
                                                                      (int64_t) 1];
                            x_39305 = ((__local
                                        float *) red_arr_mem_44047)[sext_i32_i64(squot32(local_tid_44039,
                                                                                         32)) -
                                                                    (int64_t) 1];
                        }
                        // perform operation
                        {
                            bool inactive_44073 =
                                 slt64(srem64(sext_i32_i64(local_tid_44039),
                                              iota32_arg_29989),
                                       sext_i32_i64(local_tid_44039) -
                                       sext_i32_i64(squot32(local_tid_44039,
                                                            32) * 32 - 1));
                            
                            if (inactive_44073) {
                                x_39303 = x_39306;
                                x_39304 = x_39307;
                                x_39305 = x_39308;
                            }
                            if (!inactive_44073) {
                                bool defunc_1_op_res_39309;
                                int32_t defunc_1_op_res_39310;
                                
                                if (x_39303) {
                                    defunc_1_op_res_39309 = x_39303;
                                    defunc_1_op_res_39310 = x_39304;
                                } else {
                                    bool x_39311 = x_39306 && x_39306;
                                    bool x_39312 = !x_39306;
                                    bool y_39313 = x_39303 && x_39312;
                                    bool defunc_1_op_res_f_res_39314 =
                                         x_39311 || y_39313;
                                    int32_t defunc_1_op_res_f_res_39315;
                                    
                                    if (x_39306) {
                                        defunc_1_op_res_f_res_39315 = x_39307;
                                    } else {
                                        defunc_1_op_res_f_res_39315 = x_39304;
                                    }
                                    defunc_1_op_res_39309 =
                                        defunc_1_op_res_f_res_39314;
                                    defunc_1_op_res_39310 =
                                        defunc_1_op_res_f_res_39315;
                                }
                                
                                float defunc_1_op_res_39316 = x_39305 + x_39308;
                                
                                x_39303 = defunc_1_op_res_39309;
                                x_39304 = defunc_1_op_res_39310;
                                x_39305 = defunc_1_op_res_39316;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              bool *) red_arr_mem_44043)[sext_i32_i64(local_tid_44039)] =
                                x_39303;
                            ((__local
                              int32_t *) red_arr_mem_44045)[sext_i32_i64(local_tid_44039)] =
                                x_39304;
                            ((__local
                              float *) red_arr_mem_44047)[sext_i32_i64(local_tid_44039)] =
                                x_39305;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_44039, 32) == 0) {
                        ((__local
                          bool *) red_arr_mem_44043)[sext_i32_i64(local_tid_44039)] =
                            x_39306;
                        ((__local
                          int32_t *) red_arr_mem_44045)[sext_i32_i64(local_tid_44039)] =
                            x_39307;
                        ((__local
                          float *) red_arr_mem_44047)[sext_i32_i64(local_tid_44039)] =
                            x_39308;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_44051) *
                      squot64(segred_group_sizze_39297,
                              segment_sizze_nonzzero_44036) +
                      sext_i32_i64(local_tid_44039), m_29560) &&
                slt64(sext_i32_i64(local_tid_44039),
                      squot64(segred_group_sizze_39297,
                              segment_sizze_nonzzero_44036))) {
                ((__global
                  bool *) mem_42417)[sext_i32_i64(virt_group_id_44051) *
                                     squot64(segred_group_sizze_39297,
                                             segment_sizze_nonzzero_44036) +
                                     sext_i32_i64(local_tid_44039)] = ((__local
                                                                        bool *) red_arr_mem_44043)[(sext_i32_i64(local_tid_44039) +
                                                                                                    (int64_t) 1) *
                                                                                                   segment_sizze_nonzzero_44036 -
                                                                                                   (int64_t) 1];
                ((__global
                  int32_t *) mem_42420)[sext_i32_i64(virt_group_id_44051) *
                                        squot64(segred_group_sizze_39297,
                                                segment_sizze_nonzzero_44036) +
                                        sext_i32_i64(local_tid_44039)] =
                    ((__local
                      int32_t *) red_arr_mem_44045)[(sext_i32_i64(local_tid_44039) +
                                                     (int64_t) 1) *
                                                    segment_sizze_nonzzero_44036 -
                                                    (int64_t) 1];
                ((__global
                  float *) mem_42423)[sext_i32_i64(virt_group_id_44051) *
                                      squot64(segred_group_sizze_39297,
                                              segment_sizze_nonzzero_44036) +
                                      sext_i32_i64(local_tid_44039)] = ((__local
                                                                         float *) red_arr_mem_44047)[(sext_i32_i64(local_tid_44039) +
                                                                                                      (int64_t) 1) *
                                                                                                     segment_sizze_nonzzero_44036 -
                                                                                                     (int64_t) 1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_39297
}
__kernel void mainDetailedziscan_stage1_32013(__global int *global_failure,
                                              __local volatile
                                              int64_t *scan_arr_mem_43580_backing_aligned_0,
                                              int64_t N_28169, int64_t m_28170,
                                              int32_t num_threads_43574,
                                              __global
                                              unsigned char *images_mem_41421,
                                              __global
                                              unsigned char *defunc_3_map_res_mem_42216,
                                              __global unsigned char *mem_42247,
                                              __global unsigned char *mem_42251)
{
    #define segscan_group_sizze_32030 (mainDetailedzisegscan_group_sizze_32007)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_43580_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_43580_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43575;
    int32_t local_tid_43576;
    int64_t group_sizze_43579;
    int32_t wave_sizze_43578;
    int32_t group_tid_43577;
    
    global_tid_43575 = get_global_id(0);
    local_tid_43576 = get_local_id(0);
    group_sizze_43579 = get_local_size(0);
    wave_sizze_43578 = LOCKSTEP_WIDTH;
    group_tid_43577 = get_group_id(0);
    
    int32_t phys_tid_32013 = global_tid_43575;
    __local char *scan_arr_mem_43580;
    
    scan_arr_mem_43580 = (__local char *) scan_arr_mem_43580_backing_0;
    
    int64_t x_32035;
    int64_t x_32036;
    
    x_32035 = (int64_t) 0;
    for (int64_t j_43582 = 0; j_43582 < sdiv_up64(m_28170 * N_28169,
                                                  sext_i32_i64(num_threads_43574));
         j_43582++) {
        int64_t chunk_offset_43583 = segscan_group_sizze_32030 * j_43582 +
                sext_i32_i64(group_tid_43577) * (segscan_group_sizze_32030 *
                                                 sdiv_up64(m_28170 * N_28169,
                                                           sext_i32_i64(num_threads_43574)));
        int64_t flat_idx_43584 = chunk_offset_43583 +
                sext_i32_i64(local_tid_43576);
        int64_t gtid_32004 = squot64(flat_idx_43584, N_28169);
        int64_t gtid_32012 = flat_idx_43584 - squot64(flat_idx_43584, N_28169) *
                N_28169;
        
        // threads in bounds read input
        {
            if (slt64(gtid_32004, m_28170) && slt64(gtid_32012, N_28169)) {
                float x_32040 = ((__global
                                  float *) images_mem_41421)[gtid_32004 *
                                                             N_28169 +
                                                             gtid_32012];
                bool isnan_res_32042;
                
                isnan_res_32042 = futrts_isnan32(x_32040);
                
                bool cond_32043 = !isnan_res_32042;
                float defunc_1_f_res_32044;
                
                if (cond_32043) {
                    float x_32041 = ((__global
                                      float *) defunc_3_map_res_mem_42216)[gtid_32004 *
                                                                           N_28169 +
                                                                           gtid_32012];
                    float defunc_1_f_res_t_res_32045 = x_32040 - x_32041;
                    
                    defunc_1_f_res_32044 = defunc_1_f_res_t_res_32045;
                } else {
                    defunc_1_f_res_32044 = NAN;
                }
                
                bool isnan_res_32046;
                
                isnan_res_32046 = futrts_isnan32(defunc_1_f_res_32044);
                
                bool defunc_0_p_res_32047 = !isnan_res_32046;
                int64_t defunc_0_f_res_32048 =
                        btoi_bool_i64(defunc_0_p_res_32047);
                
                // write to-scan values to parameters
                {
                    x_32036 = defunc_0_f_res_32048;
                }
                // write mapped values results to global memory
                {
                    ((__global float *) mem_42251)[gtid_32004 * N_28169 +
                                                   gtid_32012] =
                        defunc_1_f_res_32044;
                }
            }
        }
        // do one intra-group scan operation
        {
            // maybe restore some to-scan values to parameters, or read neutral
            {
                if (!(slt64(gtid_32004, m_28170) && slt64(gtid_32012,
                                                          N_28169))) {
                    x_32036 = (int64_t) 0;
                }
            }
            // combine with carry and write to local memory
            {
                int64_t defunc_1_op_res_32037 = add64(x_32035, x_32036);
                
                ((__local
                  int64_t *) scan_arr_mem_43580)[sext_i32_i64(local_tid_43576)] =
                    defunc_1_op_res_32037;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int64_t x_43585;
            int64_t x_43586;
            int64_t x_43588;
            int64_t x_43589;
            bool ltid_in_bounds_43591 = slt64(sext_i32_i64(local_tid_43576),
                                              segscan_group_sizze_32030);
            int32_t skip_threads_43592;
            
            // read input for in-block scan
            {
                if (ltid_in_bounds_43591) {
                    x_43586 = ((volatile __local
                                int64_t *) scan_arr_mem_43580)[sext_i32_i64(local_tid_43576)];
                    if ((local_tid_43576 - squot32(local_tid_43576, 32) * 32) ==
                        0) {
                        x_43585 = x_43586;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_43592 = 1;
                while (slt32(skip_threads_43592, 32)) {
                    if (sle32(skip_threads_43592, local_tid_43576 -
                              squot32(local_tid_43576, 32) * 32) &&
                        ltid_in_bounds_43591) {
                        // read operands
                        {
                            x_43585 = ((volatile __local
                                        int64_t *) scan_arr_mem_43580)[sext_i32_i64(local_tid_43576) -
                                                                       sext_i32_i64(skip_threads_43592)];
                        }
                        // perform operation
                        {
                            bool inactive_43593 =
                                 slt64(srem64(sext_i32_i64(local_tid_43576) +
                                              chunk_offset_43583, N_28169),
                                       sext_i32_i64(local_tid_43576) +
                                       chunk_offset_43583 -
                                       (sext_i32_i64(local_tid_43576 -
                                        skip_threads_43592) +
                                        chunk_offset_43583));
                            
                            if (inactive_43593) {
                                x_43585 = x_43586;
                            }
                            if (!inactive_43593) {
                                int64_t defunc_1_op_res_43587 = add64(x_43585,
                                                                      x_43586);
                                
                                x_43585 = defunc_1_op_res_43587;
                            }
                        }
                    }
                    if (sle32(wave_sizze_43578, skip_threads_43592)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_43592, local_tid_43576 -
                              squot32(local_tid_43576, 32) * 32) &&
                        ltid_in_bounds_43591) {
                        // write result
                        {
                            ((volatile __local
                              int64_t *) scan_arr_mem_43580)[sext_i32_i64(local_tid_43576)] =
                                x_43585;
                            x_43586 = x_43585;
                        }
                    }
                    if (sle32(wave_sizze_43578, skip_threads_43592)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_43592 *= 2;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // last thread of block 'i' writes its result to offset 'i'
            {
                if ((local_tid_43576 - squot32(local_tid_43576, 32) * 32) ==
                    31 && ltid_in_bounds_43591) {
                    ((volatile __local
                      int64_t *) scan_arr_mem_43580)[sext_i32_i64(squot32(local_tid_43576,
                                                                          32))] =
                        x_43585;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
            {
                int32_t skip_threads_43594;
                
                // read input for in-block scan
                {
                    if (squot32(local_tid_43576, 32) == 0 &&
                        ltid_in_bounds_43591) {
                        x_43589 = ((volatile __local
                                    int64_t *) scan_arr_mem_43580)[sext_i32_i64(local_tid_43576)];
                        if ((local_tid_43576 - squot32(local_tid_43576, 32) *
                             32) == 0) {
                            x_43588 = x_43589;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_43594 = 1;
                    while (slt32(skip_threads_43594, 32)) {
                        if (sle32(skip_threads_43594, local_tid_43576 -
                                  squot32(local_tid_43576, 32) * 32) &&
                            (squot32(local_tid_43576, 32) == 0 &&
                             ltid_in_bounds_43591)) {
                            // read operands
                            {
                                x_43588 = ((volatile __local
                                            int64_t *) scan_arr_mem_43580)[sext_i32_i64(local_tid_43576) -
                                                                           sext_i32_i64(skip_threads_43594)];
                            }
                            // perform operation
                            {
                                bool inactive_43595 =
                                     slt64(srem64(sext_i32_i64(local_tid_43576 *
                                                  32 + 32 - 1) +
                                                  chunk_offset_43583, N_28169),
                                           sext_i32_i64(local_tid_43576 * 32 +
                                           32 - 1) + chunk_offset_43583 -
                                           (sext_i32_i64((local_tid_43576 -
                                                          skip_threads_43594) *
                                            32 + 32 - 1) + chunk_offset_43583));
                                
                                if (inactive_43595) {
                                    x_43588 = x_43589;
                                }
                                if (!inactive_43595) {
                                    int64_t defunc_1_op_res_43590 =
                                            add64(x_43588, x_43589);
                                    
                                    x_43588 = defunc_1_op_res_43590;
                                }
                            }
                        }
                        if (sle32(wave_sizze_43578, skip_threads_43594)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_43594, local_tid_43576 -
                                  squot32(local_tid_43576, 32) * 32) &&
                            (squot32(local_tid_43576, 32) == 0 &&
                             ltid_in_bounds_43591)) {
                            // write result
                            {
                                ((volatile __local
                                  int64_t *) scan_arr_mem_43580)[sext_i32_i64(local_tid_43576)] =
                                    x_43588;
                                x_43589 = x_43588;
                            }
                        }
                        if (sle32(wave_sizze_43578, skip_threads_43594)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_43594 *= 2;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // carry-in for every block except the first
            {
                if (!(squot32(local_tid_43576, 32) == 0 ||
                      !ltid_in_bounds_43591)) {
                    // read operands
                    {
                        x_43586 = x_43585;
                        x_43585 = ((__local
                                    int64_t *) scan_arr_mem_43580)[sext_i32_i64(squot32(local_tid_43576,
                                                                                        32)) -
                                                                   (int64_t) 1];
                    }
                    // perform operation
                    {
                        bool inactive_43596 =
                             slt64(srem64(sext_i32_i64(local_tid_43576) +
                                          chunk_offset_43583, N_28169),
                                   sext_i32_i64(local_tid_43576) +
                                   chunk_offset_43583 -
                                   (sext_i32_i64(squot32(local_tid_43576, 32) *
                                    32 - 1) + chunk_offset_43583));
                        
                        if (inactive_43596) {
                            x_43585 = x_43586;
                        }
                        if (!inactive_43596) {
                            int64_t defunc_1_op_res_43587 = add64(x_43585,
                                                                  x_43586);
                            
                            x_43585 = defunc_1_op_res_43587;
                        }
                    }
                    // write final result
                    {
                        ((__local
                          int64_t *) scan_arr_mem_43580)[sext_i32_i64(local_tid_43576)] =
                            x_43585;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // restore correct values for first block
            {
                if (squot32(local_tid_43576, 32) == 0) {
                    ((__local
                      int64_t *) scan_arr_mem_43580)[sext_i32_i64(local_tid_43576)] =
                        x_43586;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // threads in bounds write partial scan result
            {
                if (slt64(gtid_32004, m_28170) && slt64(gtid_32012, N_28169)) {
                    ((__global int64_t *) mem_42247)[gtid_32004 * N_28169 +
                                                     gtid_32012] = ((__local
                                                                     int64_t *) scan_arr_mem_43580)[sext_i32_i64(local_tid_43576)];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread reads last element as carry-in for next iteration
            {
                bool crosses_segment_43597 = slt64(srem64(chunk_offset_43583 +
                                                          segscan_group_sizze_32030,
                                                          N_28169),
                                                   chunk_offset_43583 +
                                                   segscan_group_sizze_32030 -
                                                   (chunk_offset_43583 +
                                                    segscan_group_sizze_32030 -
                                                    (int64_t) 1));
                bool should_load_carry_43598 = local_tid_43576 == 0 &&
                     !crosses_segment_43597;
                
                if (should_load_carry_43598) {
                    x_32035 = ((__local
                                int64_t *) scan_arr_mem_43580)[segscan_group_sizze_32030 -
                                                               (int64_t) 1];
                }
                if (!should_load_carry_43598) {
                    x_32035 = (int64_t) 0;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
  error_1:
    return;
    #undef segscan_group_sizze_32030
}
__kernel void mainDetailedziscan_stage1_33341(__global int *global_failure,
                                              int failure_is_an_option, __global
                                              int64_t *global_failure_args,
                                              __local volatile
                                              int64_t *scan_arr_mem_44055_backing_aligned_0,
                                              int64_t N_28169, int64_t m_28170,
                                              int64_t iota32_arg_28630,
                                              int32_t num_threads_44049,
                                              __global
                                              unsigned char *defunc_4_map_res_mem_42266,
                                              __global
                                              unsigned char *defunc_3_map_res_mem_42344,
                                              __global
                                              unsigned char *defunc_3_map_res_mem_42345,
                                              __global
                                              unsigned char *defunc_0_f_res_mem_42383,
                                              __global unsigned char *mem_42522,
                                              __global unsigned char *mem_42527)
{
    #define segscan_group_sizze_33389 (mainDetailedzisegscan_group_sizze_33335)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_44055_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_44055_backing_aligned_0;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_44050;
    int32_t local_tid_44051;
    int64_t group_sizze_44054;
    int32_t wave_sizze_44053;
    int32_t group_tid_44052;
    
    global_tid_44050 = get_global_id(0);
    local_tid_44051 = get_local_id(0);
    group_sizze_44054 = get_local_size(0);
    wave_sizze_44053 = LOCKSTEP_WIDTH;
    group_tid_44052 = get_group_id(0);
    
    int32_t phys_tid_33341 = global_tid_44050;
    __local char *scan_arr_mem_44055;
    
    scan_arr_mem_44055 = (__local char *) scan_arr_mem_44055_backing_0;
    
    float x_33393;
    float x_33394;
    
    x_33393 = 0.0F;
    for (int64_t j_44057 = 0; j_44057 < sdiv_up64(m_28170 * iota32_arg_28630,
                                                  sext_i32_i64(num_threads_44049));
         j_44057++) {
        int64_t chunk_offset_44058 = segscan_group_sizze_33389 * j_44057 +
                sext_i32_i64(group_tid_44052) * (segscan_group_sizze_33389 *
                                                 sdiv_up64(m_28170 *
                                                           iota32_arg_28630,
                                                           sext_i32_i64(num_threads_44049)));
        int64_t flat_idx_44059 = chunk_offset_44058 +
                sext_i32_i64(local_tid_44051);
        int64_t gtid_33332 = squot64(flat_idx_44059, iota32_arg_28630);
        int64_t gtid_33340 = flat_idx_44059 - squot64(flat_idx_44059,
                                                      iota32_arg_28630) *
                iota32_arg_28630;
        
        // threads in bounds read input
        {
            if (slt64(gtid_33332, m_28170) && slt64(gtid_33340,
                                                    iota32_arg_28630)) {
                int32_t y_33400 = ((__global int32_t *) mem_42522)[gtid_33332];
                int32_t index_primexp_39462 = sext_i64_i32(gtid_33340);
                bool cond_33402 = sle32(y_33400, index_primexp_39462);
                float defunc_0_f_res_33403;
                
                if (cond_33402) {
                    defunc_0_f_res_33403 = 0.0F;
                } else {
                    bool cond_33404 = index_primexp_39462 == 0;
                    float defunc_0_f_res_f_res_33405;
                    
                    if (cond_33404) {
                        float x_33398 = ((__global
                                          float *) defunc_0_f_res_mem_42383)[gtid_33332];
                        
                        defunc_0_f_res_f_res_33405 = x_33398;
                    } else {
                        int32_t x_33396 = ((__global
                                            int32_t *) defunc_3_map_res_mem_42345)[gtid_33332];
                        int32_t x_33397 = ((__global
                                            int32_t *) defunc_3_map_res_mem_42344)[gtid_33332];
                        int32_t i_33406 = add32(x_33396, index_primexp_39462);
                        int64_t i_33407 = sext_i32_i64(i_33406);
                        bool x_33408 = sle64((int64_t) 0, i_33407);
                        bool y_33409 = slt64(i_33407, N_28169);
                        bool bounds_check_33410 = x_33408 && y_33409;
                        bool index_certs_33411;
                        
                        if (!bounds_check_33410) {
                            {
                                if (atomic_cmpxchg_i32_global(global_failure,
                                                              -1, 75) == -1) {
                                    global_failure_args[0] = i_33407;
                                    global_failure_args[1] = N_28169;
                                    ;
                                }
                                local_failure = true;
                                goto error_0;
                            }
                        }
                        
                        float x_33412 = ((__global
                                          float *) defunc_4_map_res_mem_42266)[gtid_33332 *
                                                                               N_28169 +
                                                                               i_33407];
                        int32_t x_33413 = sub32(x_33396, x_33397);
                        int32_t i_33414 = add32(x_33413, index_primexp_39462);
                        int64_t i_33415 = sext_i32_i64(i_33414);
                        bool x_33416 = sle64((int64_t) 0, i_33415);
                        bool y_33417 = slt64(i_33415, N_28169);
                        bool bounds_check_33418 = x_33416 && y_33417;
                        bool index_certs_33419;
                        
                        if (!bounds_check_33418) {
                            {
                                if (atomic_cmpxchg_i32_global(global_failure,
                                                              -1, 76) == -1) {
                                    global_failure_args[0] = i_33415;
                                    global_failure_args[1] = N_28169;
                                    ;
                                }
                                local_failure = true;
                                goto error_0;
                            }
                        }
                        
                        float y_33420 = ((__global
                                          float *) defunc_4_map_res_mem_42266)[gtid_33332 *
                                                                               N_28169 +
                                                                               i_33415];
                        float defunc_0_f_res_f_res_f_res_33421 = x_33412 -
                              y_33420;
                        
                        defunc_0_f_res_f_res_33405 =
                            defunc_0_f_res_f_res_f_res_33421;
                    }
                    defunc_0_f_res_33403 = defunc_0_f_res_f_res_33405;
                }
                // write to-scan values to parameters
                {
                    x_33394 = defunc_0_f_res_33403;
                }
                // write mapped values results to global memory
                { }
            }
        }
        // do one intra-group scan operation
        {
            // maybe restore some to-scan values to parameters, or read neutral
            {
                if (!(slt64(gtid_33332, m_28170) && slt64(gtid_33340,
                                                          iota32_arg_28630))) {
                    x_33394 = 0.0F;
                }
            }
            // combine with carry and write to local memory
            {
                float defunc_1_op_res_33395 = x_33393 + x_33394;
                
                ((__local
                  float *) scan_arr_mem_44055)[sext_i32_i64(local_tid_44051)] =
                    defunc_1_op_res_33395;
            }
            
          error_0:
            barrier(CLK_LOCAL_MEM_FENCE);
            if (local_failure)
                return;
            barrier(CLK_LOCAL_MEM_FENCE);
            
            float x_44060;
            float x_44061;
            float x_44063;
            float x_44064;
            bool ltid_in_bounds_44066 = slt64(sext_i32_i64(local_tid_44051),
                                              segscan_group_sizze_33389);
            int32_t skip_threads_44067;
            
            // read input for in-block scan
            {
                if (ltid_in_bounds_44066) {
                    x_44061 = ((volatile __local
                                float *) scan_arr_mem_44055)[sext_i32_i64(local_tid_44051)];
                    if ((local_tid_44051 - squot32(local_tid_44051, 32) * 32) ==
                        0) {
                        x_44060 = x_44061;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_44067 = 1;
                while (slt32(skip_threads_44067, 32)) {
                    if (sle32(skip_threads_44067, local_tid_44051 -
                              squot32(local_tid_44051, 32) * 32) &&
                        ltid_in_bounds_44066) {
                        // read operands
                        {
                            x_44060 = ((volatile __local
                                        float *) scan_arr_mem_44055)[sext_i32_i64(local_tid_44051) -
                                                                     sext_i32_i64(skip_threads_44067)];
                        }
                        // perform operation
                        {
                            bool inactive_44068 =
                                 slt64(srem64(sext_i32_i64(local_tid_44051) +
                                              chunk_offset_44058,
                                              iota32_arg_28630),
                                       sext_i32_i64(local_tid_44051) +
                                       chunk_offset_44058 -
                                       (sext_i32_i64(local_tid_44051 -
                                        skip_threads_44067) +
                                        chunk_offset_44058));
                            
                            if (inactive_44068) {
                                x_44060 = x_44061;
                            }
                            if (!inactive_44068) {
                                float defunc_1_op_res_44062 = x_44060 + x_44061;
                                
                                x_44060 = defunc_1_op_res_44062;
                            }
                        }
                    }
                    if (sle32(wave_sizze_44053, skip_threads_44067)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_44067, local_tid_44051 -
                              squot32(local_tid_44051, 32) * 32) &&
                        ltid_in_bounds_44066) {
                        // write result
                        {
                            ((volatile __local
                              float *) scan_arr_mem_44055)[sext_i32_i64(local_tid_44051)] =
                                x_44060;
                            x_44061 = x_44060;
                        }
                    }
                    if (sle32(wave_sizze_44053, skip_threads_44067)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_44067 *= 2;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // last thread of block 'i' writes its result to offset 'i'
            {
                if ((local_tid_44051 - squot32(local_tid_44051, 32) * 32) ==
                    31 && ltid_in_bounds_44066) {
                    ((volatile __local
                      float *) scan_arr_mem_44055)[sext_i32_i64(squot32(local_tid_44051,
                                                                        32))] =
                        x_44060;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
            {
                int32_t skip_threads_44069;
                
                // read input for in-block scan
                {
                    if (squot32(local_tid_44051, 32) == 0 &&
                        ltid_in_bounds_44066) {
                        x_44064 = ((volatile __local
                                    float *) scan_arr_mem_44055)[sext_i32_i64(local_tid_44051)];
                        if ((local_tid_44051 - squot32(local_tid_44051, 32) *
                             32) == 0) {
                            x_44063 = x_44064;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_44069 = 1;
                    while (slt32(skip_threads_44069, 32)) {
                        if (sle32(skip_threads_44069, local_tid_44051 -
                                  squot32(local_tid_44051, 32) * 32) &&
                            (squot32(local_tid_44051, 32) == 0 &&
                             ltid_in_bounds_44066)) {
                            // read operands
                            {
                                x_44063 = ((volatile __local
                                            float *) scan_arr_mem_44055)[sext_i32_i64(local_tid_44051) -
                                                                         sext_i32_i64(skip_threads_44069)];
                            }
                            // perform operation
                            {
                                bool inactive_44070 =
                                     slt64(srem64(sext_i32_i64(local_tid_44051 *
                                                  32 + 32 - 1) +
                                                  chunk_offset_44058,
                                                  iota32_arg_28630),
                                           sext_i32_i64(local_tid_44051 * 32 +
                                           32 - 1) + chunk_offset_44058 -
                                           (sext_i32_i64((local_tid_44051 -
                                                          skip_threads_44069) *
                                            32 + 32 - 1) + chunk_offset_44058));
                                
                                if (inactive_44070) {
                                    x_44063 = x_44064;
                                }
                                if (!inactive_44070) {
                                    float defunc_1_op_res_44065 = x_44063 +
                                          x_44064;
                                    
                                    x_44063 = defunc_1_op_res_44065;
                                }
                            }
                        }
                        if (sle32(wave_sizze_44053, skip_threads_44069)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_44069, local_tid_44051 -
                                  squot32(local_tid_44051, 32) * 32) &&
                            (squot32(local_tid_44051, 32) == 0 &&
                             ltid_in_bounds_44066)) {
                            // write result
                            {
                                ((volatile __local
                                  float *) scan_arr_mem_44055)[sext_i32_i64(local_tid_44051)] =
                                    x_44063;
                                x_44064 = x_44063;
                            }
                        }
                        if (sle32(wave_sizze_44053, skip_threads_44069)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_44069 *= 2;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // carry-in for every block except the first
            {
                if (!(squot32(local_tid_44051, 32) == 0 ||
                      !ltid_in_bounds_44066)) {
                    // read operands
                    {
                        x_44061 = x_44060;
                        x_44060 = ((__local
                                    float *) scan_arr_mem_44055)[sext_i32_i64(squot32(local_tid_44051,
                                                                                      32)) -
                                                                 (int64_t) 1];
                    }
                    // perform operation
                    {
                        bool inactive_44071 =
                             slt64(srem64(sext_i32_i64(local_tid_44051) +
                                          chunk_offset_44058, iota32_arg_28630),
                                   sext_i32_i64(local_tid_44051) +
                                   chunk_offset_44058 -
                                   (sext_i32_i64(squot32(local_tid_44051, 32) *
                                    32 - 1) + chunk_offset_44058));
                        
                        if (inactive_44071) {
                            x_44060 = x_44061;
                        }
                        if (!inactive_44071) {
                            float defunc_1_op_res_44062 = x_44060 + x_44061;
                            
                            x_44060 = defunc_1_op_res_44062;
                        }
                    }
                    // write final result
                    {
                        ((__local
                          float *) scan_arr_mem_44055)[sext_i32_i64(local_tid_44051)] =
                            x_44060;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // restore correct values for first block
            {
                if (squot32(local_tid_44051, 32) == 0) {
                    ((__local
                      float *) scan_arr_mem_44055)[sext_i32_i64(local_tid_44051)] =
                        x_44061;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // threads in bounds write partial scan result
            {
                if (slt64(gtid_33332, m_28170) && slt64(gtid_33340,
                                                        iota32_arg_28630)) {
                    ((__global float *) mem_42527)[gtid_33332 *
                                                   iota32_arg_28630 +
                                                   gtid_33340] = ((__local
                                                                   float *) scan_arr_mem_44055)[sext_i32_i64(local_tid_44051)];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread reads last element as carry-in for next iteration
            {
                bool crosses_segment_44072 = slt64(srem64(chunk_offset_44058 +
                                                          segscan_group_sizze_33389,
                                                          iota32_arg_28630),
                                                   chunk_offset_44058 +
                                                   segscan_group_sizze_33389 -
                                                   (chunk_offset_44058 +
                                                    segscan_group_sizze_33389 -
                                                    (int64_t) 1));
                bool should_load_carry_44073 = local_tid_44051 == 0 &&
                     !crosses_segment_44072;
                
                if (should_load_carry_44073) {
                    x_33393 = ((__local
                                float *) scan_arr_mem_44055)[segscan_group_sizze_33389 -
                                                             (int64_t) 1];
                }
                if (!should_load_carry_44073) {
                    x_33393 = 0.0F;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
  error_1:
    return;
    #undef segscan_group_sizze_33389
}
__kernel void mainDetailedziscan_stage2_32013(__global int *global_failure,
                                              __local volatile
                                              int64_t *scan_arr_mem_43604_backing_aligned_0,
                                              int64_t N_28169, int64_t m_28170,
                                              int64_t stage1_num_groups_43573,
                                              int32_t num_threads_43574,
                                              __global unsigned char *mem_42247)
{
    #define segscan_group_sizze_32030 (mainDetailedzisegscan_group_sizze_32007)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_43604_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_43604_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43599;
    int32_t local_tid_43600;
    int64_t group_sizze_43603;
    int32_t wave_sizze_43602;
    int32_t group_tid_43601;
    
    global_tid_43599 = get_global_id(0);
    local_tid_43600 = get_local_id(0);
    group_sizze_43603 = get_local_size(0);
    wave_sizze_43602 = LOCKSTEP_WIDTH;
    group_tid_43601 = get_group_id(0);
    
    int32_t phys_tid_32013 = global_tid_43599;
    __local char *scan_arr_mem_43604;
    
    scan_arr_mem_43604 = (__local char *) scan_arr_mem_43604_backing_0;
    
    int64_t flat_idx_43606 = (sext_i32_i64(local_tid_43600) + (int64_t) 1) *
            (segscan_group_sizze_32030 * sdiv_up64(m_28170 * N_28169,
                                                   sext_i32_i64(num_threads_43574))) -
            (int64_t) 1;
    int64_t gtid_32004 = squot64(flat_idx_43606, N_28169);
    int64_t gtid_32012 = flat_idx_43606 - squot64(flat_idx_43606, N_28169) *
            N_28169;
    
    // threads in bound read carries; others get neutral element
    {
        if (slt64(gtid_32004, m_28170) && slt64(gtid_32012, N_28169)) {
            ((__local
              int64_t *) scan_arr_mem_43604)[sext_i32_i64(local_tid_43600)] =
                ((__global int64_t *) mem_42247)[gtid_32004 * N_28169 +
                                                 gtid_32012];
        } else {
            ((__local
              int64_t *) scan_arr_mem_43604)[sext_i32_i64(local_tid_43600)] =
                (int64_t) 0;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t x_32035;
    int64_t x_32036;
    int64_t x_43607;
    int64_t x_43608;
    bool ltid_in_bounds_43610 = slt64(sext_i32_i64(local_tid_43600),
                                      stage1_num_groups_43573);
    int32_t skip_threads_43611;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_43610) {
            x_32036 = ((volatile __local
                        int64_t *) scan_arr_mem_43604)[sext_i32_i64(local_tid_43600)];
            if ((local_tid_43600 - squot32(local_tid_43600, 32) * 32) == 0) {
                x_32035 = x_32036;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_43611 = 1;
        while (slt32(skip_threads_43611, 32)) {
            if (sle32(skip_threads_43611, local_tid_43600 -
                      squot32(local_tid_43600, 32) * 32) &&
                ltid_in_bounds_43610) {
                // read operands
                {
                    x_32035 = ((volatile __local
                                int64_t *) scan_arr_mem_43604)[sext_i32_i64(local_tid_43600) -
                                                               sext_i32_i64(skip_threads_43611)];
                }
                // perform operation
                {
                    bool inactive_43612 =
                         slt64(srem64((sext_i32_i64(local_tid_43600) +
                                       (int64_t) 1) *
                                      (segscan_group_sizze_32030 *
                                       sdiv_up64(m_28170 * N_28169,
                                                 sext_i32_i64(num_threads_43574))) -
                                      (int64_t) 1, N_28169),
                               (sext_i32_i64(local_tid_43600) + (int64_t) 1) *
                               (segscan_group_sizze_32030 * sdiv_up64(m_28170 *
                                                                      N_28169,
                                                                      sext_i32_i64(num_threads_43574))) -
                               (int64_t) 1 - ((sext_i32_i64(local_tid_43600 -
                                               skip_threads_43611) +
                                               (int64_t) 1) *
                                              (segscan_group_sizze_32030 *
                                               sdiv_up64(m_28170 * N_28169,
                                                         sext_i32_i64(num_threads_43574))) -
                                              (int64_t) 1));
                    
                    if (inactive_43612) {
                        x_32035 = x_32036;
                    }
                    if (!inactive_43612) {
                        int64_t defunc_1_op_res_32037 = add64(x_32035, x_32036);
                        
                        x_32035 = defunc_1_op_res_32037;
                    }
                }
            }
            if (sle32(wave_sizze_43602, skip_threads_43611)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_43611, local_tid_43600 -
                      squot32(local_tid_43600, 32) * 32) &&
                ltid_in_bounds_43610) {
                // write result
                {
                    ((volatile __local
                      int64_t *) scan_arr_mem_43604)[sext_i32_i64(local_tid_43600)] =
                        x_32035;
                    x_32036 = x_32035;
                }
            }
            if (sle32(wave_sizze_43602, skip_threads_43611)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_43611 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_43600 - squot32(local_tid_43600, 32) * 32) == 31 &&
            ltid_in_bounds_43610) {
            ((volatile __local
              int64_t *) scan_arr_mem_43604)[sext_i32_i64(squot32(local_tid_43600,
                                                                  32))] =
                x_32035;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_43613;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_43600, 32) == 0 && ltid_in_bounds_43610) {
                x_43608 = ((volatile __local
                            int64_t *) scan_arr_mem_43604)[sext_i32_i64(local_tid_43600)];
                if ((local_tid_43600 - squot32(local_tid_43600, 32) * 32) ==
                    0) {
                    x_43607 = x_43608;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_43613 = 1;
            while (slt32(skip_threads_43613, 32)) {
                if (sle32(skip_threads_43613, local_tid_43600 -
                          squot32(local_tid_43600, 32) * 32) &&
                    (squot32(local_tid_43600, 32) == 0 &&
                     ltid_in_bounds_43610)) {
                    // read operands
                    {
                        x_43607 = ((volatile __local
                                    int64_t *) scan_arr_mem_43604)[sext_i32_i64(local_tid_43600) -
                                                                   sext_i32_i64(skip_threads_43613)];
                    }
                    // perform operation
                    {
                        bool inactive_43614 =
                             slt64(srem64((sext_i32_i64(local_tid_43600 * 32 +
                                           32 - 1) + (int64_t) 1) *
                                          (segscan_group_sizze_32030 *
                                           sdiv_up64(m_28170 * N_28169,
                                                     sext_i32_i64(num_threads_43574))) -
                                          (int64_t) 1, N_28169),
                                   (sext_i32_i64(local_tid_43600 * 32 + 32 -
                                    1) + (int64_t) 1) *
                                   (segscan_group_sizze_32030 *
                                    sdiv_up64(m_28170 * N_28169,
                                              sext_i32_i64(num_threads_43574))) -
                                   (int64_t) 1 -
                                   ((sext_i32_i64((local_tid_43600 -
                                                   skip_threads_43613) * 32 +
                                     32 - 1) + (int64_t) 1) *
                                    (segscan_group_sizze_32030 *
                                     sdiv_up64(m_28170 * N_28169,
                                               sext_i32_i64(num_threads_43574))) -
                                    (int64_t) 1));
                        
                        if (inactive_43614) {
                            x_43607 = x_43608;
                        }
                        if (!inactive_43614) {
                            int64_t defunc_1_op_res_43609 = add64(x_43607,
                                                                  x_43608);
                            
                            x_43607 = defunc_1_op_res_43609;
                        }
                    }
                }
                if (sle32(wave_sizze_43602, skip_threads_43613)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_43613, local_tid_43600 -
                          squot32(local_tid_43600, 32) * 32) &&
                    (squot32(local_tid_43600, 32) == 0 &&
                     ltid_in_bounds_43610)) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) scan_arr_mem_43604)[sext_i32_i64(local_tid_43600)] =
                            x_43607;
                        x_43608 = x_43607;
                    }
                }
                if (sle32(wave_sizze_43602, skip_threads_43613)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_43613 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_43600, 32) == 0 || !ltid_in_bounds_43610)) {
            // read operands
            {
                x_32036 = x_32035;
                x_32035 = ((__local
                            int64_t *) scan_arr_mem_43604)[sext_i32_i64(squot32(local_tid_43600,
                                                                                32)) -
                                                           (int64_t) 1];
            }
            // perform operation
            {
                bool inactive_43615 =
                     slt64(srem64((sext_i32_i64(local_tid_43600) +
                                   (int64_t) 1) * (segscan_group_sizze_32030 *
                                                   sdiv_up64(m_28170 * N_28169,
                                                             sext_i32_i64(num_threads_43574))) -
                                  (int64_t) 1, N_28169),
                           (sext_i32_i64(local_tid_43600) + (int64_t) 1) *
                           (segscan_group_sizze_32030 * sdiv_up64(m_28170 *
                                                                  N_28169,
                                                                  sext_i32_i64(num_threads_43574))) -
                           (int64_t) 1 - ((sext_i32_i64(squot32(local_tid_43600,
                                                                32) * 32 - 1) +
                                           (int64_t) 1) *
                                          (segscan_group_sizze_32030 *
                                           sdiv_up64(m_28170 * N_28169,
                                                     sext_i32_i64(num_threads_43574))) -
                                          (int64_t) 1));
                
                if (inactive_43615) {
                    x_32035 = x_32036;
                }
                if (!inactive_43615) {
                    int64_t defunc_1_op_res_32037 = add64(x_32035, x_32036);
                    
                    x_32035 = defunc_1_op_res_32037;
                }
            }
            // write final result
            {
                ((__local
                  int64_t *) scan_arr_mem_43604)[sext_i32_i64(local_tid_43600)] =
                    x_32035;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_43600, 32) == 0) {
            ((__local
              int64_t *) scan_arr_mem_43604)[sext_i32_i64(local_tid_43600)] =
                x_32036;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // threads in bounds write scanned carries
    {
        if (slt64(gtid_32004, m_28170) && slt64(gtid_32012, N_28169)) {
            ((__global int64_t *) mem_42247)[gtid_32004 * N_28169 +
                                             gtid_32012] = ((__local
                                                             int64_t *) scan_arr_mem_43604)[sext_i32_i64(local_tid_43600)];
        }
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_32030
}
__kernel void mainDetailedziscan_stage2_33341(__global int *global_failure,
                                              __local volatile
                                              int64_t *scan_arr_mem_44079_backing_aligned_0,
                                              int64_t m_28170,
                                              int64_t iota32_arg_28630,
                                              int64_t stage1_num_groups_44048,
                                              int32_t num_threads_44049,
                                              __global unsigned char *mem_42527)
{
    #define segscan_group_sizze_33389 (mainDetailedzisegscan_group_sizze_33335)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_44079_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_44079_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_44074;
    int32_t local_tid_44075;
    int64_t group_sizze_44078;
    int32_t wave_sizze_44077;
    int32_t group_tid_44076;
    
    global_tid_44074 = get_global_id(0);
    local_tid_44075 = get_local_id(0);
    group_sizze_44078 = get_local_size(0);
    wave_sizze_44077 = LOCKSTEP_WIDTH;
    group_tid_44076 = get_group_id(0);
    
    int32_t phys_tid_33341 = global_tid_44074;
    __local char *scan_arr_mem_44079;
    
    scan_arr_mem_44079 = (__local char *) scan_arr_mem_44079_backing_0;
    
    int64_t flat_idx_44081 = (sext_i32_i64(local_tid_44075) + (int64_t) 1) *
            (segscan_group_sizze_33389 * sdiv_up64(m_28170 * iota32_arg_28630,
                                                   sext_i32_i64(num_threads_44049))) -
            (int64_t) 1;
    int64_t gtid_33332 = squot64(flat_idx_44081, iota32_arg_28630);
    int64_t gtid_33340 = flat_idx_44081 - squot64(flat_idx_44081,
                                                  iota32_arg_28630) *
            iota32_arg_28630;
    
    // threads in bound read carries; others get neutral element
    {
        if (slt64(gtid_33332, m_28170) && slt64(gtid_33340, iota32_arg_28630)) {
            ((__local
              float *) scan_arr_mem_44079)[sext_i32_i64(local_tid_44075)] =
                ((__global float *) mem_42527)[gtid_33332 * iota32_arg_28630 +
                                               gtid_33340];
        } else {
            ((__local
              float *) scan_arr_mem_44079)[sext_i32_i64(local_tid_44075)] =
                0.0F;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float x_33393;
    float x_33394;
    float x_44082;
    float x_44083;
    bool ltid_in_bounds_44085 = slt64(sext_i32_i64(local_tid_44075),
                                      stage1_num_groups_44048);
    int32_t skip_threads_44086;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_44085) {
            x_33394 = ((volatile __local
                        float *) scan_arr_mem_44079)[sext_i32_i64(local_tid_44075)];
            if ((local_tid_44075 - squot32(local_tid_44075, 32) * 32) == 0) {
                x_33393 = x_33394;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_44086 = 1;
        while (slt32(skip_threads_44086, 32)) {
            if (sle32(skip_threads_44086, local_tid_44075 -
                      squot32(local_tid_44075, 32) * 32) &&
                ltid_in_bounds_44085) {
                // read operands
                {
                    x_33393 = ((volatile __local
                                float *) scan_arr_mem_44079)[sext_i32_i64(local_tid_44075) -
                                                             sext_i32_i64(skip_threads_44086)];
                }
                // perform operation
                {
                    bool inactive_44087 =
                         slt64(srem64((sext_i32_i64(local_tid_44075) +
                                       (int64_t) 1) *
                                      (segscan_group_sizze_33389 *
                                       sdiv_up64(m_28170 * iota32_arg_28630,
                                                 sext_i32_i64(num_threads_44049))) -
                                      (int64_t) 1, iota32_arg_28630),
                               (sext_i32_i64(local_tid_44075) + (int64_t) 1) *
                               (segscan_group_sizze_33389 * sdiv_up64(m_28170 *
                                                                      iota32_arg_28630,
                                                                      sext_i32_i64(num_threads_44049))) -
                               (int64_t) 1 - ((sext_i32_i64(local_tid_44075 -
                                               skip_threads_44086) +
                                               (int64_t) 1) *
                                              (segscan_group_sizze_33389 *
                                               sdiv_up64(m_28170 *
                                                         iota32_arg_28630,
                                                         sext_i32_i64(num_threads_44049))) -
                                              (int64_t) 1));
                    
                    if (inactive_44087) {
                        x_33393 = x_33394;
                    }
                    if (!inactive_44087) {
                        float defunc_1_op_res_33395 = x_33393 + x_33394;
                        
                        x_33393 = defunc_1_op_res_33395;
                    }
                }
            }
            if (sle32(wave_sizze_44077, skip_threads_44086)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_44086, local_tid_44075 -
                      squot32(local_tid_44075, 32) * 32) &&
                ltid_in_bounds_44085) {
                // write result
                {
                    ((volatile __local
                      float *) scan_arr_mem_44079)[sext_i32_i64(local_tid_44075)] =
                        x_33393;
                    x_33394 = x_33393;
                }
            }
            if (sle32(wave_sizze_44077, skip_threads_44086)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_44086 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_44075 - squot32(local_tid_44075, 32) * 32) == 31 &&
            ltid_in_bounds_44085) {
            ((volatile __local
              float *) scan_arr_mem_44079)[sext_i32_i64(squot32(local_tid_44075,
                                                                32))] = x_33393;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_44088;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_44075, 32) == 0 && ltid_in_bounds_44085) {
                x_44083 = ((volatile __local
                            float *) scan_arr_mem_44079)[sext_i32_i64(local_tid_44075)];
                if ((local_tid_44075 - squot32(local_tid_44075, 32) * 32) ==
                    0) {
                    x_44082 = x_44083;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_44088 = 1;
            while (slt32(skip_threads_44088, 32)) {
                if (sle32(skip_threads_44088, local_tid_44075 -
                          squot32(local_tid_44075, 32) * 32) &&
                    (squot32(local_tid_44075, 32) == 0 &&
                     ltid_in_bounds_44085)) {
                    // read operands
                    {
                        x_44082 = ((volatile __local
                                    float *) scan_arr_mem_44079)[sext_i32_i64(local_tid_44075) -
                                                                 sext_i32_i64(skip_threads_44088)];
                    }
                    // perform operation
                    {
                        bool inactive_44089 =
                             slt64(srem64((sext_i32_i64(local_tid_44075 * 32 +
                                           32 - 1) + (int64_t) 1) *
                                          (segscan_group_sizze_33389 *
                                           sdiv_up64(m_28170 * iota32_arg_28630,
                                                     sext_i32_i64(num_threads_44049))) -
                                          (int64_t) 1, iota32_arg_28630),
                                   (sext_i32_i64(local_tid_44075 * 32 + 32 -
                                    1) + (int64_t) 1) *
                                   (segscan_group_sizze_33389 *
                                    sdiv_up64(m_28170 * iota32_arg_28630,
                                              sext_i32_i64(num_threads_44049))) -
                                   (int64_t) 1 -
                                   ((sext_i32_i64((local_tid_44075 -
                                                   skip_threads_44088) * 32 +
                                     32 - 1) + (int64_t) 1) *
                                    (segscan_group_sizze_33389 *
                                     sdiv_up64(m_28170 * iota32_arg_28630,
                                               sext_i32_i64(num_threads_44049))) -
                                    (int64_t) 1));
                        
                        if (inactive_44089) {
                            x_44082 = x_44083;
                        }
                        if (!inactive_44089) {
                            float defunc_1_op_res_44084 = x_44082 + x_44083;
                            
                            x_44082 = defunc_1_op_res_44084;
                        }
                    }
                }
                if (sle32(wave_sizze_44077, skip_threads_44088)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_44088, local_tid_44075 -
                          squot32(local_tid_44075, 32) * 32) &&
                    (squot32(local_tid_44075, 32) == 0 &&
                     ltid_in_bounds_44085)) {
                    // write result
                    {
                        ((volatile __local
                          float *) scan_arr_mem_44079)[sext_i32_i64(local_tid_44075)] =
                            x_44082;
                        x_44083 = x_44082;
                    }
                }
                if (sle32(wave_sizze_44077, skip_threads_44088)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_44088 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_44075, 32) == 0 || !ltid_in_bounds_44085)) {
            // read operands
            {
                x_33394 = x_33393;
                x_33393 = ((__local
                            float *) scan_arr_mem_44079)[sext_i32_i64(squot32(local_tid_44075,
                                                                              32)) -
                                                         (int64_t) 1];
            }
            // perform operation
            {
                bool inactive_44090 =
                     slt64(srem64((sext_i32_i64(local_tid_44075) +
                                   (int64_t) 1) * (segscan_group_sizze_33389 *
                                                   sdiv_up64(m_28170 *
                                                             iota32_arg_28630,
                                                             sext_i32_i64(num_threads_44049))) -
                                  (int64_t) 1, iota32_arg_28630),
                           (sext_i32_i64(local_tid_44075) + (int64_t) 1) *
                           (segscan_group_sizze_33389 * sdiv_up64(m_28170 *
                                                                  iota32_arg_28630,
                                                                  sext_i32_i64(num_threads_44049))) -
                           (int64_t) 1 - ((sext_i32_i64(squot32(local_tid_44075,
                                                                32) * 32 - 1) +
                                           (int64_t) 1) *
                                          (segscan_group_sizze_33389 *
                                           sdiv_up64(m_28170 * iota32_arg_28630,
                                                     sext_i32_i64(num_threads_44049))) -
                                          (int64_t) 1));
                
                if (inactive_44090) {
                    x_33393 = x_33394;
                }
                if (!inactive_44090) {
                    float defunc_1_op_res_33395 = x_33393 + x_33394;
                    
                    x_33393 = defunc_1_op_res_33395;
                }
            }
            // write final result
            {
                ((__local
                  float *) scan_arr_mem_44079)[sext_i32_i64(local_tid_44075)] =
                    x_33393;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_44075, 32) == 0) {
            ((__local
              float *) scan_arr_mem_44079)[sext_i32_i64(local_tid_44075)] =
                x_33394;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // threads in bounds write scanned carries
    {
        if (slt64(gtid_33332, m_28170) && slt64(gtid_33340, iota32_arg_28630)) {
            ((__global float *) mem_42527)[gtid_33332 * iota32_arg_28630 +
                                           gtid_33340] = ((__local
                                                           float *) scan_arr_mem_44079)[sext_i32_i64(local_tid_44075)];
        }
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_33389
}
__kernel void mainDetailedziscan_stage3_32013(__global int *global_failure,
                                              int64_t N_28169, int64_t m_28170,
                                              int64_t num_groups_32031,
                                              int32_t num_threads_43574,
                                              int32_t required_groups_43616,
                                              __global unsigned char *mem_42247)
{
    #define segscan_group_sizze_32030 (mainDetailedzisegscan_group_sizze_32007)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43617;
    int32_t local_tid_43618;
    int64_t group_sizze_43621;
    int32_t wave_sizze_43620;
    int32_t group_tid_43619;
    
    global_tid_43617 = get_global_id(0);
    local_tid_43618 = get_local_id(0);
    group_sizze_43621 = get_local_size(0);
    wave_sizze_43620 = LOCKSTEP_WIDTH;
    group_tid_43619 = get_group_id(0);
    
    int32_t phys_tid_32013 = global_tid_43617;
    int32_t phys_group_id_43622;
    
    phys_group_id_43622 = get_group_id(0);
    for (int32_t i_43623 = 0; i_43623 < sdiv_up32(required_groups_43616 -
                                                  phys_group_id_43622,
                                                  sext_i64_i32(num_groups_32031));
         i_43623++) {
        int32_t virt_group_id_43624 = phys_group_id_43622 + i_43623 *
                sext_i64_i32(num_groups_32031);
        int64_t flat_idx_43625 = sext_i32_i64(virt_group_id_43624) *
                segscan_group_sizze_32030 + sext_i32_i64(local_tid_43618);
        int64_t gtid_32004 = squot64(flat_idx_43625, N_28169);
        int64_t gtid_32012 = flat_idx_43625 - squot64(flat_idx_43625, N_28169) *
                N_28169;
        int64_t orig_group_43626 = squot64(flat_idx_43625,
                                           segscan_group_sizze_32030 *
                                           sdiv_up64(m_28170 * N_28169,
                                                     sext_i32_i64(num_threads_43574)));
        int64_t carry_in_flat_idx_43627 = orig_group_43626 *
                (segscan_group_sizze_32030 * sdiv_up64(m_28170 * N_28169,
                                                       sext_i32_i64(num_threads_43574))) -
                (int64_t) 1;
        
        if (slt64(gtid_32004, m_28170) && slt64(gtid_32012, N_28169)) {
            if (!(orig_group_43626 == (int64_t) 0 || (flat_idx_43625 ==
                                                      (orig_group_43626 +
                                                       (int64_t) 1) *
                                                      (segscan_group_sizze_32030 *
                                                       sdiv_up64(m_28170 *
                                                                 N_28169,
                                                                 sext_i32_i64(num_threads_43574))) -
                                                      (int64_t) 1 ||
                                                      slt64(srem64(flat_idx_43625,
                                                                   N_28169),
                                                            flat_idx_43625 -
                                                            carry_in_flat_idx_43627)))) {
                int64_t x_32035;
                int64_t x_32036;
                
                x_32035 = ((__global
                            int64_t *) mem_42247)[squot64(carry_in_flat_idx_43627,
                                                          N_28169) * N_28169 +
                                                  (carry_in_flat_idx_43627 -
                                                   squot64(carry_in_flat_idx_43627,
                                                           N_28169) * N_28169)];
                x_32036 = ((__global int64_t *) mem_42247)[gtid_32004 *
                                                           N_28169 +
                                                           gtid_32012];
                
                int64_t defunc_1_op_res_32037 = add64(x_32035, x_32036);
                
                x_32035 = defunc_1_op_res_32037;
                ((__global int64_t *) mem_42247)[gtid_32004 * N_28169 +
                                                 gtid_32012] = x_32035;
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_32030
}
__kernel void mainDetailedziscan_stage3_33341(__global int *global_failure,
                                              int64_t m_28170,
                                              int64_t iota32_arg_28630,
                                              int64_t num_groups_33390,
                                              int32_t num_threads_44049,
                                              int32_t required_groups_44091,
                                              __global unsigned char *mem_42527)
{
    #define segscan_group_sizze_33389 (mainDetailedzisegscan_group_sizze_33335)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_44092;
    int32_t local_tid_44093;
    int64_t group_sizze_44096;
    int32_t wave_sizze_44095;
    int32_t group_tid_44094;
    
    global_tid_44092 = get_global_id(0);
    local_tid_44093 = get_local_id(0);
    group_sizze_44096 = get_local_size(0);
    wave_sizze_44095 = LOCKSTEP_WIDTH;
    group_tid_44094 = get_group_id(0);
    
    int32_t phys_tid_33341 = global_tid_44092;
    int32_t phys_group_id_44097;
    
    phys_group_id_44097 = get_group_id(0);
    for (int32_t i_44098 = 0; i_44098 < sdiv_up32(required_groups_44091 -
                                                  phys_group_id_44097,
                                                  sext_i64_i32(num_groups_33390));
         i_44098++) {
        int32_t virt_group_id_44099 = phys_group_id_44097 + i_44098 *
                sext_i64_i32(num_groups_33390);
        int64_t flat_idx_44100 = sext_i32_i64(virt_group_id_44099) *
                segscan_group_sizze_33389 + sext_i32_i64(local_tid_44093);
        int64_t gtid_33332 = squot64(flat_idx_44100, iota32_arg_28630);
        int64_t gtid_33340 = flat_idx_44100 - squot64(flat_idx_44100,
                                                      iota32_arg_28630) *
                iota32_arg_28630;
        int64_t orig_group_44101 = squot64(flat_idx_44100,
                                           segscan_group_sizze_33389 *
                                           sdiv_up64(m_28170 * iota32_arg_28630,
                                                     sext_i32_i64(num_threads_44049)));
        int64_t carry_in_flat_idx_44102 = orig_group_44101 *
                (segscan_group_sizze_33389 * sdiv_up64(m_28170 *
                                                       iota32_arg_28630,
                                                       sext_i32_i64(num_threads_44049))) -
                (int64_t) 1;
        
        if (slt64(gtid_33332, m_28170) && slt64(gtid_33340, iota32_arg_28630)) {
            if (!(orig_group_44101 == (int64_t) 0 || (flat_idx_44100 ==
                                                      (orig_group_44101 +
                                                       (int64_t) 1) *
                                                      (segscan_group_sizze_33389 *
                                                       sdiv_up64(m_28170 *
                                                                 iota32_arg_28630,
                                                                 sext_i32_i64(num_threads_44049))) -
                                                      (int64_t) 1 ||
                                                      slt64(srem64(flat_idx_44100,
                                                                   iota32_arg_28630),
                                                            flat_idx_44100 -
                                                            carry_in_flat_idx_44102)))) {
                float x_33393;
                float x_33394;
                
                x_33393 = ((__global
                            float *) mem_42527)[squot64(carry_in_flat_idx_44102,
                                                        iota32_arg_28630) *
                                                iota32_arg_28630 +
                                                (carry_in_flat_idx_44102 -
                                                 squot64(carry_in_flat_idx_44102,
                                                         iota32_arg_28630) *
                                                 iota32_arg_28630)];
                x_33394 = ((__global float *) mem_42527)[gtid_33332 *
                                                         iota32_arg_28630 +
                                                         gtid_33340];
                
                float defunc_1_op_res_33395 = x_33393 + x_33394;
                
                x_33393 = defunc_1_op_res_33395;
                ((__global float *) mem_42527)[gtid_33332 * iota32_arg_28630 +
                                               gtid_33340] = x_33393;
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_33389
}
__kernel void mainDetailedzisegmap_30229(__global int *global_failure,
                                         int64_t N_28169, float freq_28174,
                                         int64_t i32_res_28185, __global
                                         unsigned char *mappingindices_mem_41420,
                                         __global unsigned char *mem_41426)
{
    #define segmap_group_sizze_30299 (mainDetailedzisegmap_group_sizze_30232)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_42888;
    int32_t local_tid_42889;
    int64_t group_sizze_42892;
    int32_t wave_sizze_42891;
    int32_t group_tid_42890;
    
    global_tid_42888 = get_global_id(0);
    local_tid_42889 = get_local_id(0);
    group_sizze_42892 = get_local_size(0);
    wave_sizze_42891 = LOCKSTEP_WIDTH;
    group_tid_42890 = get_group_id(0);
    
    int32_t phys_tid_30229 = global_tid_42888;
    int64_t global_tid_42893 = sext_i32_i64(group_tid_42890) *
            segmap_group_sizze_30299 + sext_i32_i64(local_tid_42889);
    int64_t slice_42894 = N_28169;
    int64_t slice_42895 = i32_res_28185 * slice_42894;
    int64_t gtid_30227 = squot64(global_tid_42893, slice_42894);
    int64_t remnant_42896 = global_tid_42893 - gtid_30227 * slice_42894;
    int64_t gtid_30228 = remnant_42896;
    int64_t remnant_42897 = remnant_42896 - gtid_30228;
    
    if (slt64(gtid_30227, i32_res_28185) && slt64(gtid_30228, N_28169)) {
        int32_t index_primexp_39391 = sext_i64_i32(gtid_30227);
        bool index_primexp_39388 = index_primexp_39391 == 0;
        float defunc_0_f_res_30305;
        
        if (index_primexp_39388) {
            defunc_0_f_res_30305 = 1.0F;
        } else {
            int32_t x_30304 = ((__global
                                int32_t *) mappingindices_mem_41420)[gtid_30228];
            bool cond_30306 = index_primexp_39391 == 1;
            float defunc_0_f_res_f_res_30307;
            
            if (cond_30306) {
                float i32_res_30308 = sitofp_i32_f32(x_30304);
                
                defunc_0_f_res_f_res_30307 = i32_res_30308;
            } else {
                int32_t r32_arg_30309 = sdiv32(index_primexp_39391, 2);
                float i32_res_30310 = sitofp_i32_f32(r32_arg_30309);
                float i32_res_30311 = sitofp_i32_f32(x_30304);
                float x_30312 = 6.2831855F * i32_res_30310;
                float x_30313 = i32_res_30311 * x_30312;
                float angle_30314 = x_30313 / freq_28174;
                int32_t x_30315 = smod32(index_primexp_39391, 2);
                bool cond_30316 = x_30315 == 0;
                float defunc_0_f_res_f_res_f_res_30317;
                
                if (cond_30316) {
                    float sin_res_30318;
                    
                    sin_res_30318 = futrts_sin32(angle_30314);
                    defunc_0_f_res_f_res_f_res_30317 = sin_res_30318;
                } else {
                    float cos_res_30319;
                    
                    cos_res_30319 = futrts_cos32(angle_30314);
                    defunc_0_f_res_f_res_f_res_30317 = cos_res_30319;
                }
                defunc_0_f_res_f_res_30307 = defunc_0_f_res_f_res_f_res_30317;
            }
            defunc_0_f_res_30305 = defunc_0_f_res_f_res_30307;
        }
        ((__global float *) mem_41426)[gtid_30227 * N_28169 + gtid_30228] =
            defunc_0_f_res_30305;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_30299
}
__kernel void mainDetailedzisegmap_30333(__global int *global_failure,
                                         int64_t N_28169, float freq_28174,
                                         int64_t i32_res_28185, __global
                                         unsigned char *mappingindices_mem_41420,
                                         __global unsigned char *mem_41431)
{
    #define segmap_group_sizze_30399 (mainDetailedzisegmap_group_sizze_30336)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_42898;
    int32_t local_tid_42899;
    int64_t group_sizze_42902;
    int32_t wave_sizze_42901;
    int32_t group_tid_42900;
    
    global_tid_42898 = get_global_id(0);
    local_tid_42899 = get_local_id(0);
    group_sizze_42902 = get_local_size(0);
    wave_sizze_42901 = LOCKSTEP_WIDTH;
    group_tid_42900 = get_group_id(0);
    
    int32_t phys_tid_30333 = global_tid_42898;
    int64_t global_tid_42903 = sext_i32_i64(group_tid_42900) *
            segmap_group_sizze_30399 + sext_i32_i64(local_tid_42899);
    int64_t slice_42904 = N_28169;
    int64_t slice_42905 = i32_res_28185 * slice_42904;
    int64_t gtid_30331 = squot64(global_tid_42903, slice_42904);
    int64_t remnant_42906 = global_tid_42903 - gtid_30331 * slice_42904;
    int64_t gtid_30332 = remnant_42906;
    int64_t remnant_42907 = remnant_42906 - gtid_30332;
    
    if (slt64(gtid_30331, i32_res_28185) && slt64(gtid_30332, N_28169)) {
        int32_t index_primexp_39400 = sext_i64_i32(gtid_30331);
        bool index_primexp_39397 = index_primexp_39400 == 0;
        float defunc_0_f_res_30405;
        
        if (index_primexp_39397) {
            defunc_0_f_res_30405 = 1.0F;
        } else {
            int32_t x_30404 = ((__global
                                int32_t *) mappingindices_mem_41420)[gtid_30332];
            int32_t i_30406 = add32(1, index_primexp_39400);
            int32_t r32_arg_30407 = sdiv32(i_30406, 2);
            float i32_res_30408 = sitofp_i32_f32(r32_arg_30407);
            float i32_res_30409 = sitofp_i32_f32(x_30404);
            float x_30410 = 6.2831855F * i32_res_30408;
            float x_30411 = i32_res_30409 * x_30410;
            float angle_30412 = x_30411 / freq_28174;
            int32_t x_30413 = smod32(i_30406, 2);
            bool cond_30414 = x_30413 == 0;
            float defunc_0_f_res_f_res_30415;
            
            if (cond_30414) {
                float sin_res_30416;
                
                sin_res_30416 = futrts_sin32(angle_30412);
                defunc_0_f_res_f_res_30415 = sin_res_30416;
            } else {
                float cos_res_30417;
                
                cos_res_30417 = futrts_cos32(angle_30412);
                defunc_0_f_res_f_res_30415 = cos_res_30417;
            }
            defunc_0_f_res_30405 = defunc_0_f_res_f_res_30415;
        }
        ((__global float *) mem_41431)[gtid_30331 * N_28169 + gtid_30332] =
            defunc_0_f_res_30405;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_30399
}
__kernel void mainDetailedzisegmap_30429(__global int *global_failure,
                                         int64_t N_28169, int64_t i32_res_28185,
                                         float i32_res_28250, __global
                                         unsigned char *mem_41435, __global
                                         unsigned char *mem_41440)
{
    #define segmap_group_sizze_30450 (mainDetailedzisegmap_group_sizze_30432)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_42908;
    int32_t local_tid_42909;
    int64_t group_sizze_42912;
    int32_t wave_sizze_42911;
    int32_t group_tid_42910;
    
    global_tid_42908 = get_global_id(0);
    local_tid_42909 = get_local_id(0);
    group_sizze_42912 = get_local_size(0);
    wave_sizze_42911 = LOCKSTEP_WIDTH;
    group_tid_42910 = get_group_id(0);
    
    int32_t phys_tid_30429 = global_tid_42908;
    int64_t global_tid_42913 = sext_i32_i64(group_tid_42910) *
            segmap_group_sizze_30450 + sext_i32_i64(local_tid_42909);
    int64_t slice_42914 = i32_res_28185;
    int64_t slice_42915 = N_28169 * slice_42914;
    int64_t gtid_30427 = squot64(global_tid_42913, slice_42914);
    int64_t remnant_42916 = global_tid_42913 - gtid_30427 * slice_42914;
    int64_t gtid_30428 = remnant_42916;
    int64_t remnant_42917 = remnant_42916 - gtid_30428;
    
    if (slt64(gtid_30427, N_28169) && slt64(gtid_30428, i32_res_28185)) {
        float x_30453 = ((__global float *) mem_41435)[gtid_30427 *
                                                       i32_res_28185 +
                                                       gtid_30428];
        float defunc_0_f_res_30454 = i32_res_28250 + x_30453;
        
        ((__global float *) mem_41440)[gtid_30427 * i32_res_28185 +
                                       gtid_30428] = defunc_0_f_res_30454;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_30450
}
__kernel void mainDetailedzisegmap_30459(__global int *global_failure,
                                         int64_t N_28169, int64_t m_28170,
                                         int32_t n_28173, int32_t k2p2zq_28183,
                                         int64_t i32_res_28185,
                                         int64_t num_groups_30484,
                                         int64_t num_threads_42725, __global
                                         unsigned char *binop_p_mem_41432,
                                         __global unsigned char *mem_41440,
                                         __global unsigned char *mem_41443,
                                         __global unsigned char *mem_41492,
                                         __global unsigned char *color_42657)
{
    #define segmap_group_sizze_30483 (mainDetailedzisegmap_group_sizze_30461)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_42921;
    int32_t local_tid_42922;
    int64_t group_sizze_42925;
    int32_t wave_sizze_42924;
    int32_t group_tid_42923;
    
    global_tid_42921 = get_global_id(0);
    local_tid_42922 = get_local_id(0);
    group_sizze_42925 = get_local_size(0);
    wave_sizze_42924 = LOCKSTEP_WIDTH;
    group_tid_42923 = get_group_id(0);
    
    int32_t phys_tid_30459 = global_tid_42921;
    int32_t phys_group_id_42926;
    
    phys_group_id_42926 = get_group_id(0);
    for (int32_t i_42927 = 0; i_42927 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_28170, segmap_group_sizze_30483)) -
                   phys_group_id_42926, sext_i64_i32(num_groups_30484));
         i_42927++) {
        int32_t virt_group_id_42928 = phys_group_id_42926 + i_42927 *
                sext_i64_i32(num_groups_30484);
        int64_t global_tid_42929 = sext_i32_i64(virt_group_id_42928) *
                segmap_group_sizze_30483 + sext_i32_i64(local_tid_42922);
        int64_t slice_42930 = m_28170;
        int64_t gtid_30458 = global_tid_42929;
        int64_t remnant_42931 = global_tid_42929 - gtid_30458;
        
        if (slt64(gtid_30458, m_28170)) {
            for (int32_t i_41400 = 0; i_41400 < k2p2zq_28183; i_41400++) {
                int64_t i_41334 = sext_i32_i64(i_41400);
                
                for (int32_t i_41399 = 0; i_41399 < k2p2zq_28183; i_41399++) {
                    int64_t i_41338 = sext_i32_i64(i_41399);
                    float defunc_2_reduce_res_30492;
                    float redout_41340 = 0.0F;
                    
                    for (int32_t i_41398 = 0; i_41398 < n_28173; i_41398++) {
                        int64_t i_41341 = sext_i32_i64(i_41398);
                        float x_30496 = ((__global float *) mem_41443)[i_41341 *
                                                                       m_28170 +
                                                                       gtid_30458];
                        float x_30497 = ((__global
                                          float *) binop_p_mem_41432)[i_41334 *
                                                                      N_28169 +
                                                                      i_41341];
                        float x_30498 = ((__global float *) mem_41440)[i_41341 *
                                                                       i32_res_28185 +
                                                                       i_41338];
                        float x_30499 = x_30497 * x_30498;
                        bool isnan_res_30500;
                        
                        isnan_res_30500 = futrts_isnan32(x_30496);
                        
                        float y_30501;
                        
                        if (isnan_res_30500) {
                            y_30501 = 0.0F;
                        } else {
                            y_30501 = 1.0F;
                        }
                        
                        float defunc_2_f_res_30502 = x_30499 * y_30501;
                        float defunc_1_op_res_30495 = defunc_2_f_res_30502 +
                              redout_41340;
                        float redout_tmp_42934 = defunc_1_op_res_30495;
                        
                        redout_41340 = redout_tmp_42934;
                    }
                    defunc_2_reduce_res_30492 = redout_41340;
                    ((__global float *) color_42657)[phys_tid_30459 + (i_41334 *
                                                                       (num_threads_42725 *
                                                                        i32_res_28185) +
                                                                       i_41338 *
                                                                       num_threads_42725)] =
                        defunc_2_reduce_res_30492;
                }
            }
            for (int64_t i_42935 = 0; i_42935 < i32_res_28185; i_42935++) {
                for (int64_t i_42936 = 0; i_42936 < i32_res_28185; i_42936++) {
                    ((__global float *) mem_41492)[i_42935 * (m_28170 *
                                                              i32_res_28185) +
                                                   i_42936 * m_28170 +
                                                   gtid_30458] = ((__global
                                                                   float *) color_42657)[phys_tid_30459 +
                                                                                         (i_42935 *
                                                                                          (num_threads_42725 *
                                                                                           i32_res_28185) +
                                                                                          i_42936 *
                                                                                          num_threads_42725)];
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_30483
}
__kernel void mainDetailedzisegmap_30505(__global int *global_failure,
                                         int64_t N_28169, int64_t m_28170,
                                         int32_t n_28173, int32_t k2p2zq_28183,
                                         int64_t i32_res_28185,
                                         int64_t num_groups_30661,
                                         int64_t num_threads_42727, __global
                                         unsigned char *images_mem_41421,
                                         __global unsigned char *mem_41435,
                                         __global unsigned char *mem_41440,
                                         __global unsigned char *mem_41512,
                                         __global unsigned char *color_42658)
{
    #define segmap_group_sizze_30660 (mainDetailedzisegmap_group_sizze_30508)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_42937;
    int32_t local_tid_42938;
    int64_t group_sizze_42941;
    int32_t wave_sizze_42940;
    int32_t group_tid_42939;
    
    global_tid_42937 = get_global_id(0);
    local_tid_42938 = get_local_id(0);
    group_sizze_42941 = get_local_size(0);
    wave_sizze_42940 = LOCKSTEP_WIDTH;
    group_tid_42939 = get_group_id(0);
    
    int32_t phys_tid_30505 = global_tid_42937;
    int32_t phys_group_id_42942;
    
    phys_group_id_42942 = get_group_id(0);
    for (int32_t i_42943 = 0; i_42943 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_28170 * i32_res_28185,
                                          segmap_group_sizze_30660)) -
                   phys_group_id_42942, sext_i64_i32(num_groups_30661));
         i_42943++) {
        int32_t virt_group_id_42944 = phys_group_id_42942 + i_42943 *
                sext_i64_i32(num_groups_30661);
        int64_t global_tid_42945 = sext_i32_i64(virt_group_id_42944) *
                segmap_group_sizze_30660 + sext_i32_i64(local_tid_42938);
        int64_t slice_42946 = i32_res_28185;
        int64_t slice_42947 = m_28170 * slice_42946;
        int64_t gtid_30503 = squot64(global_tid_42945, slice_42946);
        int64_t remnant_42948 = global_tid_42945 - gtid_30503 * slice_42946;
        int64_t gtid_30504 = remnant_42948;
        int64_t remnant_42949 = remnant_42948 - gtid_30504;
        
        if (slt64(gtid_30503, m_28170) && slt64(gtid_30504, i32_res_28185)) {
            for (int32_t i_41402 = 0; i_41402 < k2p2zq_28183; i_41402++) {
                int64_t i_41344 = sext_i32_i64(i_41402);
                float defunc_2_reduce_res_30672;
                float redout_41346 = 0.0F;
                
                for (int32_t i_41401 = 0; i_41401 < n_28173; i_41401++) {
                    int64_t i_41347 = sext_i32_i64(i_41401);
                    float x_30676 = ((__global
                                      float *) images_mem_41421)[gtid_30503 *
                                                                 N_28169 +
                                                                 i_41347];
                    float x_30677 = ((__global float *) mem_41435)[i_41347 *
                                                                   i32_res_28185 +
                                                                   gtid_30504];
                    float x_30678 = ((__global float *) mem_41440)[i_41347 *
                                                                   i32_res_28185 +
                                                                   i_41344];
                    float x_30679 = x_30677 * x_30678;
                    bool isnan_res_30680;
                    
                    isnan_res_30680 = futrts_isnan32(x_30676);
                    
                    float y_30681;
                    
                    if (isnan_res_30680) {
                        y_30681 = 0.0F;
                    } else {
                        y_30681 = 1.0F;
                    }
                    
                    float defunc_2_f_res_30682 = x_30679 * y_30681;
                    float defunc_1_op_res_30675 = defunc_2_f_res_30682 +
                          redout_41346;
                    float redout_tmp_42951 = defunc_1_op_res_30675;
                    
                    redout_41346 = redout_tmp_42951;
                }
                defunc_2_reduce_res_30672 = redout_41346;
                ((__global float *) color_42658)[phys_tid_30505 + i_41344 *
                                                 num_threads_42727] =
                    defunc_2_reduce_res_30672;
            }
            for (int64_t i_42952 = 0; i_42952 < i32_res_28185; i_42952++) {
                ((__global float *) mem_41512)[i_42952 * (i32_res_28185 *
                                                          m_28170) +
                                               gtid_30503 * i32_res_28185 +
                                               gtid_30504] = ((__global
                                                               float *) color_42658)[phys_tid_30505 +
                                                                                     i_42952 *
                                                                                     num_threads_42727];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_30660
}
__kernel void mainDetailedzisegmap_30908(__global int *global_failure,
                                         int64_t m_28170, int64_t i32_res_28185,
                                         int64_t nm_28315,
                                         int64_t i32_res_28330, int64_t x_28331,
                                         int64_t gauss_jordan_res_r_ixfn_41675,
                                         int64_t gauss_jordan_res_r_ixfn_41676,
                                         int64_t gauss_jordan_res_r_ixfn_41678,
                                         __global
                                         unsigned char *gauss_jordan_res_r_mem_41680,
                                         __global unsigned char *mem_41686)
{
    #define segmap_group_sizze_31458 (mainDetailedzisegmap_group_sizze_30912)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43142;
    int32_t local_tid_43143;
    int64_t group_sizze_43146;
    int32_t wave_sizze_43145;
    int32_t group_tid_43144;
    
    global_tid_43142 = get_global_id(0);
    local_tid_43143 = get_local_id(0);
    group_sizze_43146 = get_local_size(0);
    wave_sizze_43145 = LOCKSTEP_WIDTH;
    group_tid_43144 = get_group_id(0);
    
    int32_t phys_tid_30908 = global_tid_43142;
    int64_t global_tid_43147 = sext_i32_i64(group_tid_43144) *
            segmap_group_sizze_31458 + sext_i32_i64(local_tid_43143);
    int64_t slice_43148 = i32_res_28185;
    int64_t slice_43149 = i32_res_28185 * slice_43148;
    int64_t slice_43150 = m_28170 * slice_43149;
    int64_t gtid_30905 = squot64(global_tid_43147, slice_43149);
    int64_t remnant_43151 = global_tid_43147 - gtid_30905 * slice_43149;
    int64_t gtid_slice_30903 = squot64(remnant_43151, slice_43148);
    int64_t remnant_43152 = remnant_43151 - gtid_slice_30903 * slice_43148;
    int64_t gtid_slice_30904 = remnant_43152;
    int64_t remnant_43153 = remnant_43152 - gtid_slice_30904;
    
    if ((slt64(gtid_30905, m_28170) && slt64(gtid_slice_30903,
                                             i32_res_28185)) &&
        slt64(gtid_slice_30904, i32_res_28185)) {
        int64_t slice_31462 = i32_res_28185 + gtid_slice_30904;
        int64_t binop_x_39481 = x_28331 * gtid_30905;
        int64_t binop_y_39482 = i32_res_28330 * gtid_slice_30903;
        int64_t binop_x_39483 = binop_x_39481 + binop_y_39482;
        int64_t binop_x_39484 = slice_31462 + binop_x_39483;
        int64_t new_index_39485 = squot64(binop_x_39484, nm_28315);
        int64_t binop_y_39497 = nm_28315 * new_index_39485;
        int64_t new_index_39498 = binop_x_39484 - binop_y_39497;
        float v_31463 = ((__global
                          float *) gauss_jordan_res_r_mem_41680)[gauss_jordan_res_r_ixfn_41675 +
                                                                 (new_index_39485 *
                                                                  gauss_jordan_res_r_ixfn_41676 +
                                                                  new_index_39498 *
                                                                  gauss_jordan_res_r_ixfn_41678)];
        
        ((__global float *) mem_41686)[gtid_30905 * (i32_res_28185 *
                                                     i32_res_28185) +
                                       gtid_slice_30903 * i32_res_28185 +
                                       gtid_slice_30904] = v_31463;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_31458
}
__kernel void mainDetailedzisegmap_31029(__global int *global_failure,
                                         int64_t m_28170, int64_t nm_28315,
                                         int64_t ctx_param_ext_41635,
                                         int64_t ctx_param_ext_41636,
                                         int64_t ctx_param_ext_41638, __global
                                         unsigned char *mem_param_41640,
                                         __global unsigned char *mem_41663)
{
    #define segmap_group_sizze_31448 (mainDetailedzisegmap_group_sizze_31032)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43131;
    int32_t local_tid_43132;
    int64_t group_sizze_43135;
    int32_t wave_sizze_43134;
    int32_t group_tid_43133;
    
    global_tid_43131 = get_global_id(0);
    local_tid_43132 = get_local_id(0);
    group_sizze_43135 = get_local_size(0);
    wave_sizze_43134 = LOCKSTEP_WIDTH;
    group_tid_43133 = get_group_id(0);
    
    int32_t phys_tid_31029 = global_tid_43131;
    int64_t global_tid_43136 = sext_i32_i64(group_tid_43133) *
            segmap_group_sizze_31448 + sext_i32_i64(local_tid_43132);
    int64_t slice_43137 = nm_28315;
    int64_t slice_43138 = m_28170 * slice_43137;
    int64_t gtid_31027 = squot64(global_tid_43136, slice_43137);
    int64_t remnant_43139 = global_tid_43136 - gtid_31027 * slice_43137;
    int64_t gtid_31028 = remnant_43139;
    int64_t remnant_43140 = remnant_43139 - gtid_31028;
    
    if (slt64(gtid_31027, m_28170) && slt64(gtid_31028, nm_28315)) {
        float write_value_31452 = ((__global float *) mem_41663)[gtid_31027 *
                                                                 nm_28315 +
                                                                 gtid_31028];
        
        if ((sle64((int64_t) 0, gtid_31027) && slt64(gtid_31027, m_28170)) &&
            (sle64((int64_t) 0, gtid_31028) && slt64(gtid_31028, nm_28315))) {
            ((__global float *) mem_param_41640)[ctx_param_ext_41635 +
                                                 (gtid_31027 *
                                                  ctx_param_ext_41636 +
                                                  gtid_31028 *
                                                  ctx_param_ext_41638)] =
                write_value_31452;
        }
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_31448
}
__kernel void mainDetailedzisegmap_31049(__global int *global_failure,
                                         int failure_is_an_option, __global
                                         int64_t *global_failure_args,
                                         int64_t m_28170, int32_t k2p2zq_28183,
                                         int32_t m_28313, int64_t nm_28315,
                                         int32_t i_31319, int64_t i32_res_31321,
                                         int64_t ctx_param_ext_41635,
                                         int64_t ctx_param_ext_41636,
                                         int64_t ctx_param_ext_41638, __global
                                         unsigned char *mem_param_41640,
                                         __global unsigned char *mem_41658,
                                         __global unsigned char *mem_41663)
{
    #define segmap_group_sizze_31398 (mainDetailedzisegmap_group_sizze_31052)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43121;
    int32_t local_tid_43122;
    int64_t group_sizze_43125;
    int32_t wave_sizze_43124;
    int32_t group_tid_43123;
    
    global_tid_43121 = get_global_id(0);
    local_tid_43122 = get_local_id(0);
    group_sizze_43125 = get_local_size(0);
    wave_sizze_43124 = LOCKSTEP_WIDTH;
    group_tid_43123 = get_group_id(0);
    
    int32_t phys_tid_31049 = global_tid_43121;
    int64_t global_tid_43126 = sext_i32_i64(group_tid_43123) *
            segmap_group_sizze_31398 + sext_i32_i64(local_tid_43122);
    int64_t slice_43127 = nm_28315;
    int64_t slice_43128 = m_28170 * slice_43127;
    int64_t gtid_31047 = squot64(global_tid_43126, slice_43127);
    int64_t remnant_43129 = global_tid_43126 - gtid_31047 * slice_43127;
    int64_t gtid_31048 = remnant_43129;
    int64_t remnant_43130 = remnant_43129 - gtid_31048;
    
    if (slt64(gtid_31047, m_28170) && slt64(gtid_31048, nm_28315)) {
        bool cond_31403 = ((__global bool *) mem_41658)[gtid_31047];
        int32_t defunc_0_f_res_31405 = sext_i64_i32(gtid_31048);
        int32_t defunc_0_f_res_31406 = sdiv32(defunc_0_f_res_31405, m_28313);
        int32_t defunc_0_f_res_31407 = smod32(defunc_0_f_res_31405, m_28313);
        float defunc_0_f_res_31408;
        
        if (cond_31403) {
            int32_t x_31409 = mul32(m_28313, defunc_0_f_res_31406);
            int32_t i32_arg_31410 = add32(defunc_0_f_res_31407, x_31409);
            int64_t i32_res_31411 = sext_i32_i64(i32_arg_31410);
            bool x_31412 = sle64((int64_t) 0, i32_res_31411);
            bool y_31413 = slt64(i32_res_31411, nm_28315);
            bool bounds_check_31414 = x_31412 && y_31413;
            bool index_certs_31415;
            
            if (!bounds_check_31414) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 42) ==
                        -1) {
                        global_failure_args[0] = i32_res_31411;
                        global_failure_args[1] = nm_28315;
                        ;
                    }
                    return;
                }
            }
            
            float defunc_0_f_res_t_res_31416 = ((__global
                                                 float *) mem_param_41640)[ctx_param_ext_41635 +
                                                                           (gtid_31047 *
                                                                            ctx_param_ext_41636 +
                                                                            i32_res_31411 *
                                                                            ctx_param_ext_41638)];
            
            defunc_0_f_res_31408 = defunc_0_f_res_t_res_31416;
        } else {
            float v1_31402 = ((__global
                               float *) mem_param_41640)[ctx_param_ext_41635 +
                                                         (gtid_31047 *
                                                          ctx_param_ext_41636 +
                                                          i32_res_31321 *
                                                          ctx_param_ext_41638)];
            int64_t i32_res_31417 = sext_i32_i64(defunc_0_f_res_31407);
            bool x_31418 = sle64((int64_t) 0, i32_res_31417);
            bool y_31419 = slt64(i32_res_31417, nm_28315);
            bool bounds_check_31420 = x_31418 && y_31419;
            bool index_certs_31421;
            
            if (!bounds_check_31420) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 43) ==
                        -1) {
                        global_failure_args[0] = i32_res_31417;
                        global_failure_args[1] = nm_28315;
                        ;
                    }
                    return;
                }
            }
            
            float x_31422 = ((__global
                              float *) mem_param_41640)[ctx_param_ext_41635 +
                                                        (gtid_31047 *
                                                         ctx_param_ext_41636 +
                                                         i32_res_31417 *
                                                         ctx_param_ext_41638)];
            float x_31423 = x_31422 / v1_31402;
            int32_t y_31424 = sub32(k2p2zq_28183, 1);
            bool cond_31425 = slt32(defunc_0_f_res_31406, y_31424);
            float defunc_0_f_res_f_res_31426;
            
            if (cond_31425) {
                int32_t x_31427 = add32(1, defunc_0_f_res_31406);
                int32_t x_31428 = mul32(m_28313, x_31427);
                int32_t i32_arg_31429 = add32(defunc_0_f_res_31407, x_31428);
                int64_t i32_res_31430 = sext_i32_i64(i32_arg_31429);
                bool x_31431 = sle64((int64_t) 0, i32_res_31430);
                bool y_31432 = slt64(i32_res_31430, nm_28315);
                bool bounds_check_31433 = x_31431 && y_31432;
                bool index_certs_31434;
                
                if (!bounds_check_31433) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 44) ==
                            -1) {
                            global_failure_args[0] = i32_res_31430;
                            global_failure_args[1] = nm_28315;
                            ;
                        }
                        return;
                    }
                }
                
                float x_31435 = ((__global
                                  float *) mem_param_41640)[ctx_param_ext_41635 +
                                                            (gtid_31047 *
                                                             ctx_param_ext_41636 +
                                                             i32_res_31430 *
                                                             ctx_param_ext_41638)];
                int32_t i32_arg_31436 = add32(i_31319, x_31428);
                int64_t i32_res_31437 = sext_i32_i64(i32_arg_31436);
                bool x_31438 = sle64((int64_t) 0, i32_res_31437);
                bool y_31439 = slt64(i32_res_31437, nm_28315);
                bool bounds_check_31440 = x_31438 && y_31439;
                bool index_certs_31441;
                
                if (!bounds_check_31440) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 45) ==
                            -1) {
                            global_failure_args[0] = i32_res_31437;
                            global_failure_args[1] = nm_28315;
                            ;
                        }
                        return;
                    }
                }
                
                float x_31442 = ((__global
                                  float *) mem_param_41640)[ctx_param_ext_41635 +
                                                            (gtid_31047 *
                                                             ctx_param_ext_41636 +
                                                             i32_res_31437 *
                                                             ctx_param_ext_41638)];
                float y_31443 = x_31423 * x_31442;
                float defunc_0_f_res_f_res_t_res_31444 = x_31435 - y_31443;
                
                defunc_0_f_res_f_res_31426 = defunc_0_f_res_f_res_t_res_31444;
            } else {
                defunc_0_f_res_f_res_31426 = x_31423;
            }
            defunc_0_f_res_31408 = defunc_0_f_res_f_res_31426;
        }
        ((__global float *) mem_41663)[gtid_31047 * nm_28315 + gtid_31048] =
            defunc_0_f_res_31408;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_31398
}
__kernel void mainDetailedzisegmap_31149(__global int *global_failure,
                                         int64_t m_28170, int64_t i32_res_31321,
                                         int64_t ctx_param_ext_41635,
                                         int64_t ctx_param_ext_41636,
                                         int64_t ctx_param_ext_41638, __global
                                         unsigned char *mem_param_41640,
                                         __global unsigned char *mem_41658)
{
    #define segmap_group_sizze_31385 (mainDetailedzisegmap_group_sizze_31151)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43113;
    int32_t local_tid_43114;
    int64_t group_sizze_43117;
    int32_t wave_sizze_43116;
    int32_t group_tid_43115;
    
    global_tid_43113 = get_global_id(0);
    local_tid_43114 = get_local_id(0);
    group_sizze_43117 = get_local_size(0);
    wave_sizze_43116 = LOCKSTEP_WIDTH;
    group_tid_43115 = get_group_id(0);
    
    int32_t phys_tid_31149 = global_tid_43113;
    int64_t global_tid_43118 = sext_i32_i64(group_tid_43115) *
            segmap_group_sizze_31385 + sext_i32_i64(local_tid_43114);
    int64_t slice_43119 = m_28170;
    int64_t gtid_31148 = global_tid_43118;
    int64_t remnant_43120 = global_tid_43118 - gtid_31148;
    
    if (slt64(gtid_31148, m_28170)) {
        float v1_31390 = ((__global
                           float *) mem_param_41640)[ctx_param_ext_41635 +
                                                     (gtid_31148 *
                                                      ctx_param_ext_41636 +
                                                      i32_res_31321 *
                                                      ctx_param_ext_41638)];
        bool cond_31391 = v1_31390 == 0.0F;
        
        ((__global bool *) mem_41658)[gtid_31148] = cond_31391;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_31385
}
__kernel void mainDetailedzisegmap_31237(__global int *global_failure,
                                         int failure_is_an_option, __global
                                         int64_t *global_failure_args,
                                         int64_t m_28170, int32_t k2p2zq_28183,
                                         int64_t i32_res_28185, int32_t m_28313,
                                         int64_t nm_28315, __global
                                         unsigned char *defunc_3_map_res_mem_41600,
                                         __global unsigned char *mem_41632)
{
    #define segmap_group_sizze_31294 (mainDetailedzisegmap_group_sizze_31240)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43079;
    int32_t local_tid_43080;
    int64_t group_sizze_43083;
    int32_t wave_sizze_43082;
    int32_t group_tid_43081;
    
    global_tid_43079 = get_global_id(0);
    local_tid_43080 = get_local_id(0);
    group_sizze_43083 = get_local_size(0);
    wave_sizze_43082 = LOCKSTEP_WIDTH;
    group_tid_43081 = get_group_id(0);
    
    int32_t phys_tid_31237 = global_tid_43079;
    int64_t global_tid_43084 = sext_i32_i64(group_tid_43081) *
            segmap_group_sizze_31294 + sext_i32_i64(local_tid_43080);
    int64_t slice_43085 = nm_28315;
    int64_t slice_43086 = m_28170 * slice_43085;
    int64_t gtid_31235 = squot64(global_tid_43084, slice_43085);
    int64_t remnant_43087 = global_tid_43084 - gtid_31235 * slice_43085;
    int64_t gtid_31236 = remnant_43087;
    int64_t remnant_43088 = remnant_43087 - gtid_31236;
    
    if (slt64(gtid_31235, m_28170) && slt64(gtid_31236, nm_28315)) {
        int32_t index_primexp_39412 = sext_i64_i32(gtid_31236);
        int32_t defunc_0_f_res_31299 = sdiv32(index_primexp_39412, m_28313);
        int32_t defunc_0_f_res_31300 = smod32(index_primexp_39412, m_28313);
        bool cond_31301 = slt32(defunc_0_f_res_31300, k2p2zq_28183);
        float defunc_0_f_res_31302;
        
        if (cond_31301) {
            int64_t i_31303 = sext_i32_i64(defunc_0_f_res_31299);
            bool x_31304 = sle64((int64_t) 0, i_31303);
            bool y_31305 = slt64(i_31303, i32_res_28185);
            bool bounds_check_31306 = x_31304 && y_31305;
            int64_t j_31307 = sext_i32_i64(defunc_0_f_res_31300);
            bool x_31308 = sle64((int64_t) 0, j_31307);
            bool y_31309 = slt64(j_31307, i32_res_28185);
            bool bounds_check_31310 = x_31308 && y_31309;
            bool index_ok_31311 = bounds_check_31306 && bounds_check_31310;
            bool index_certs_31312;
            
            if (!index_ok_31311) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 37) ==
                        -1) {
                        global_failure_args[0] = i_31303;
                        global_failure_args[1] = j_31307;
                        global_failure_args[2] = i32_res_28185;
                        global_failure_args[3] = i32_res_28185;
                        ;
                    }
                    return;
                }
            }
            
            float defunc_0_f_res_t_res_31313 = ((__global
                                                 float *) defunc_3_map_res_mem_41600)[gtid_31235 *
                                                                                      (i32_res_28185 *
                                                                                       i32_res_28185) +
                                                                                      i_31303 *
                                                                                      i32_res_28185 +
                                                                                      j_31307];
            
            defunc_0_f_res_31302 = defunc_0_f_res_t_res_31313;
        } else {
            int32_t y_31314 = add32(k2p2zq_28183, defunc_0_f_res_31299);
            bool cond_31315 = defunc_0_f_res_31300 == y_31314;
            float defunc_0_f_res_f_res_31316;
            
            if (cond_31315) {
                defunc_0_f_res_f_res_31316 = 1.0F;
            } else {
                defunc_0_f_res_f_res_31316 = 0.0F;
            }
            defunc_0_f_res_31302 = defunc_0_f_res_f_res_31316;
        }
        ((__global float *) mem_41632)[gtid_31235 * nm_28315 + gtid_31236] =
            defunc_0_f_res_31302;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_31294
}
__kernel void mainDetailedzisegmap_31468(__global int *global_failure,
                                         int64_t N_28169, int64_t m_28170,
                                         int32_t n_28173, int32_t k2p2zq_28183,
                                         int64_t i32_res_28185,
                                         int64_t num_groups_31489,
                                         int64_t num_threads_42738, __global
                                         unsigned char *binop_p_mem_41432,
                                         __global unsigned char *mem_41690,
                                         __global unsigned char *mem_41709,
                                         __global unsigned char *color_42670)
{
    #define segmap_group_sizze_31488 (mainDetailedzisegmap_group_sizze_31470)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43157;
    int32_t local_tid_43158;
    int64_t group_sizze_43161;
    int32_t wave_sizze_43160;
    int32_t group_tid_43159;
    
    global_tid_43157 = get_global_id(0);
    local_tid_43158 = get_local_id(0);
    group_sizze_43161 = get_local_size(0);
    wave_sizze_43160 = LOCKSTEP_WIDTH;
    group_tid_43159 = get_group_id(0);
    
    int32_t phys_tid_31468 = global_tid_43157;
    int32_t phys_group_id_43162;
    
    phys_group_id_43162 = get_group_id(0);
    for (int32_t i_43163 = 0; i_43163 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_28170, segmap_group_sizze_31488)) -
                   phys_group_id_43162, sext_i64_i32(num_groups_31489));
         i_43163++) {
        int32_t virt_group_id_43164 = phys_group_id_43162 + i_43163 *
                sext_i64_i32(num_groups_31489);
        int64_t global_tid_43165 = sext_i32_i64(virt_group_id_43164) *
                segmap_group_sizze_31488 + sext_i32_i64(local_tid_43158);
        int64_t slice_43166 = m_28170;
        int64_t gtid_31467 = global_tid_43165;
        int64_t remnant_43167 = global_tid_43165 - gtid_31467;
        
        if (slt64(gtid_31467, m_28170)) {
            for (int32_t i_41404 = 0; i_41404 < k2p2zq_28183; i_41404++) {
                int64_t i_41350 = sext_i32_i64(i_41404);
                float defunc_2_reduce_res_31495;
                float redout_41352 = 0.0F;
                
                for (int32_t i_41403 = 0; i_41403 < n_28173; i_41403++) {
                    int64_t i_41353 = sext_i32_i64(i_41403);
                    float x_31500 = ((__global float *) mem_41690)[i_41353 *
                                                                   m_28170 +
                                                                   gtid_31467];
                    bool isnan_res_31501;
                    
                    isnan_res_31501 = futrts_isnan32(x_31500);
                    
                    float defunc_1_f_res_31502;
                    
                    if (isnan_res_31501) {
                        defunc_1_f_res_31502 = 0.0F;
                    } else {
                        float x_31499 = ((__global
                                          float *) binop_p_mem_41432)[i_41350 *
                                                                      N_28169 +
                                                                      i_41353];
                        float defunc_1_f_res_f_res_31503 = x_31499 * x_31500;
                        
                        defunc_1_f_res_31502 = defunc_1_f_res_f_res_31503;
                    }
                    
                    float defunc_1_op_res_31498 = defunc_1_f_res_31502 +
                          redout_41352;
                    float redout_tmp_43169 = defunc_1_op_res_31498;
                    
                    redout_41352 = redout_tmp_43169;
                }
                defunc_2_reduce_res_31495 = redout_41352;
                ((__global float *) color_42670)[phys_tid_31468 + i_41350 *
                                                 num_threads_42738] =
                    defunc_2_reduce_res_31495;
            }
            for (int64_t i_43170 = 0; i_43170 < i32_res_28185; i_43170++) {
                ((__global float *) mem_41709)[i_43170 * m_28170 + gtid_31467] =
                    ((__global float *) color_42670)[phys_tid_31468 + i_43170 *
                                                     num_threads_42738];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_31488
}
__kernel void mainDetailedzisegmap_31609(__global int *global_failure,
                                         int64_t m_28170, int32_t k2p2zq_28183,
                                         int64_t i32_res_28185,
                                         int64_t num_groups_31629,
                                         int64_t num_threads_42742, __global
                                         unsigned char *mem_41918, __global
                                         unsigned char *mem_41921, __global
                                         unsigned char *mem_41940, __global
                                         unsigned char *color_42683)
{
    #define segmap_group_sizze_31628 (mainDetailedzisegmap_group_sizze_31611)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43304;
    int32_t local_tid_43305;
    int64_t group_sizze_43308;
    int32_t wave_sizze_43307;
    int32_t group_tid_43306;
    
    global_tid_43304 = get_global_id(0);
    local_tid_43305 = get_local_id(0);
    group_sizze_43308 = get_local_size(0);
    wave_sizze_43307 = LOCKSTEP_WIDTH;
    group_tid_43306 = get_group_id(0);
    
    int32_t phys_tid_31609 = global_tid_43304;
    int32_t phys_group_id_43309;
    
    phys_group_id_43309 = get_group_id(0);
    for (int32_t i_43310 = 0; i_43310 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_28170, segmap_group_sizze_31628)) -
                   phys_group_id_43309, sext_i64_i32(num_groups_31629));
         i_43310++) {
        int32_t virt_group_id_43311 = phys_group_id_43309 + i_43310 *
                sext_i64_i32(num_groups_31629);
        int64_t global_tid_43312 = sext_i32_i64(virt_group_id_43311) *
                segmap_group_sizze_31628 + sext_i32_i64(local_tid_43305);
        int64_t slice_43313 = m_28170;
        int64_t gtid_31608 = global_tid_43312;
        int64_t remnant_43314 = global_tid_43312 - gtid_31608;
        
        if (slt64(gtid_31608, m_28170)) {
            for (int32_t i_41406 = 0; i_41406 < k2p2zq_28183; i_41406++) {
                int64_t i_41356 = sext_i32_i64(i_41406);
                float defunc_0_f_res_31636;
                float redout_41358 = 0.0F;
                
                for (int32_t i_41405 = 0; i_41405 < k2p2zq_28183; i_41405++) {
                    int64_t i_41359 = sext_i32_i64(i_41405);
                    float x_31640 = ((__global float *) mem_41921)[i_41359 *
                                                                   m_28170 +
                                                                   gtid_31608];
                    float x_31641 = ((__global float *) mem_41918)[i_41356 *
                                                                   (m_28170 *
                                                                    i32_res_28185) +
                                                                   i_41359 *
                                                                   m_28170 +
                                                                   gtid_31608];
                    float defunc_1_f_res_31642 = x_31640 * x_31641;
                    float defunc_1_op_res_31639 = defunc_1_f_res_31642 +
                          redout_41358;
                    float redout_tmp_43316 = defunc_1_op_res_31639;
                    
                    redout_41358 = redout_tmp_43316;
                }
                defunc_0_f_res_31636 = redout_41358;
                ((__global float *) color_42683)[phys_tid_31609 + i_41356 *
                                                 num_threads_42742] =
                    defunc_0_f_res_31636;
            }
            for (int64_t i_43317 = 0; i_43317 < i32_res_28185; i_43317++) {
                ((__global float *) mem_41940)[i_43317 * m_28170 + gtid_31608] =
                    ((__global float *) color_42683)[phys_tid_31609 + i_43317 *
                                                     num_threads_42742];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_31628
}
__kernel void mainDetailedzisegmap_31741(__global int *global_failure,
                                         int64_t N_28169, int64_t m_28170,
                                         int32_t k2p2zq_28183,
                                         int64_t i32_res_28185,
                                         int64_t num_groups_31760,
                                         int64_t num_threads_42746, __global
                                         unsigned char *mem_41440, __global
                                         unsigned char *mem_41989, __global
                                         unsigned char *mem_42008, __global
                                         unsigned char *color_42688)
{
    #define segmap_group_sizze_31759 (mainDetailedzisegmap_group_sizze_31743)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43407;
    int32_t local_tid_43408;
    int64_t group_sizze_43411;
    int32_t wave_sizze_43410;
    int32_t group_tid_43409;
    
    global_tid_43407 = get_global_id(0);
    local_tid_43408 = get_local_id(0);
    group_sizze_43411 = get_local_size(0);
    wave_sizze_43410 = LOCKSTEP_WIDTH;
    group_tid_43409 = get_group_id(0);
    
    int32_t phys_tid_31741 = global_tid_43407;
    int32_t phys_group_id_43412;
    
    phys_group_id_43412 = get_group_id(0);
    for (int32_t i_43413 = 0; i_43413 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_28170, segmap_group_sizze_31759)) -
                   phys_group_id_43412, sext_i64_i32(num_groups_31760));
         i_43413++) {
        int32_t virt_group_id_43414 = phys_group_id_43412 + i_43413 *
                sext_i64_i32(num_groups_31760);
        int64_t global_tid_43415 = sext_i32_i64(virt_group_id_43414) *
                segmap_group_sizze_31759 + sext_i32_i64(local_tid_43408);
        int64_t slice_43416 = m_28170;
        int64_t gtid_31740 = global_tid_43415;
        int64_t remnant_43417 = global_tid_43415 - gtid_31740;
        
        if (slt64(gtid_31740, m_28170)) {
            for (int64_t i_41366 = 0; i_41366 < N_28169; i_41366++) {
                float defunc_0_f_res_31766;
                float redout_41368 = 0.0F;
                
                for (int32_t i_41409 = 0; i_41409 < k2p2zq_28183; i_41409++) {
                    int64_t i_41369 = sext_i32_i64(i_41409);
                    float x_31770 = ((__global float *) mem_41989)[i_41369 *
                                                                   m_28170 +
                                                                   gtid_31740];
                    float x_31771 = ((__global float *) mem_41440)[i_41366 *
                                                                   i32_res_28185 +
                                                                   i_41369];
                    float defunc_1_f_res_31772 = x_31770 * x_31771;
                    float defunc_1_op_res_31769 = defunc_1_f_res_31772 +
                          redout_41368;
                    float redout_tmp_43419 = defunc_1_op_res_31769;
                    
                    redout_41368 = redout_tmp_43419;
                }
                defunc_0_f_res_31766 = redout_41368;
                ((__global float *) color_42688)[phys_tid_31741 + i_41366 *
                                                 num_threads_42746] =
                    defunc_0_f_res_31766;
            }
            for (int64_t i_43420 = 0; i_43420 < N_28169; i_43420++) {
                ((__global float *) mem_42008)[i_43420 * m_28170 + gtid_31740] =
                    ((__global float *) color_42688)[phys_tid_31741 + i_43420 *
                                                     num_threads_42746];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_31759
}
__kernel void mainDetailedzisegmap_31934(__global int *global_failure,
                                         int64_t N_28169, int64_t m_28170,
                                         __global unsigned char *mem_42247,
                                         __global unsigned char *mem_42251,
                                         __global unsigned char *mem_42259,
                                         __global unsigned char *mem_42263)
{
    #define segmap_group_sizze_32080 (mainDetailedzisegmap_group_sizze_31937)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43654;
    int32_t local_tid_43655;
    int64_t group_sizze_43658;
    int32_t wave_sizze_43657;
    int32_t group_tid_43656;
    
    global_tid_43654 = get_global_id(0);
    local_tid_43655 = get_local_id(0);
    group_sizze_43658 = get_local_size(0);
    wave_sizze_43657 = LOCKSTEP_WIDTH;
    group_tid_43656 = get_group_id(0);
    
    int32_t phys_tid_31934 = global_tid_43654;
    int64_t global_tid_43659 = sext_i32_i64(group_tid_43656) *
            segmap_group_sizze_32080 + sext_i32_i64(local_tid_43655);
    int64_t slice_43660 = N_28169;
    int64_t slice_43661 = m_28170 * slice_43660;
    int64_t gtid_31932 = squot64(global_tid_43659, slice_43660);
    int64_t remnant_43662 = global_tid_43659 - gtid_31932 * slice_43660;
    int64_t gtid_31933 = remnant_43662;
    int64_t remnant_43663 = remnant_43662 - gtid_31933;
    
    if (slt64(gtid_31932, m_28170) && slt64(gtid_31933, N_28169)) {
        float x_32084 = ((__global float *) mem_42251)[gtid_31932 * N_28169 +
                                                       gtid_31933];
        int32_t index_primexp_39428 = sext_i64_i32(gtid_31933);
        bool isnan_res_32087;
        
        isnan_res_32087 = futrts_isnan32(x_32084);
        
        bool defunc_0_p_res_32088 = !isnan_res_32087;
        int64_t defunc_1_f_res_32089;
        
        if (defunc_0_p_res_32088) {
            int64_t x_32085 = ((__global int64_t *) mem_42247)[gtid_31932 *
                                                               N_28169 +
                                                               gtid_31933];
            int64_t defunc_1_f_res_t_res_32090 = sub64(x_32085, (int64_t) 1);
            
            defunc_1_f_res_32089 = defunc_1_f_res_t_res_32090;
        } else {
            defunc_1_f_res_32089 = (int64_t) -1;
        }
        if ((sle64((int64_t) 0, gtid_31932) && slt64(gtid_31932, m_28170)) &&
            (sle64((int64_t) 0, defunc_1_f_res_32089) &&
             slt64(defunc_1_f_res_32089, N_28169))) {
            ((__global int32_t *) mem_42263)[gtid_31932 * N_28169 +
                                             defunc_1_f_res_32089] =
                index_primexp_39428;
        }
        if ((sle64((int64_t) 0, gtid_31932) && slt64(gtid_31932, m_28170)) &&
            (sle64((int64_t) 0, defunc_1_f_res_32089) &&
             slt64(defunc_1_f_res_32089, N_28169))) {
            ((__global float *) mem_42259)[gtid_31932 * N_28169 +
                                           defunc_1_f_res_32089] = x_32084;
        }
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32080
}
__kernel void mainDetailedzisegmap_31996(__global int *global_failure,
                                         int64_t N_28169, int64_t m_28170,
                                         int64_t i_28472, __global
                                         unsigned char *mem_42247, __global
                                         unsigned char *mem_42255)
{
    #define segmap_group_sizze_32050 (mainDetailedzisegmap_group_sizze_31998)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43628;
    int32_t local_tid_43629;
    int64_t group_sizze_43632;
    int32_t wave_sizze_43631;
    int32_t group_tid_43630;
    
    global_tid_43628 = get_global_id(0);
    local_tid_43629 = get_local_id(0);
    group_sizze_43632 = get_local_size(0);
    wave_sizze_43631 = LOCKSTEP_WIDTH;
    group_tid_43630 = get_group_id(0);
    
    int32_t phys_tid_31996 = global_tid_43628;
    int64_t global_tid_43633 = sext_i32_i64(group_tid_43630) *
            segmap_group_sizze_32050 + sext_i32_i64(local_tid_43629);
    int64_t slice_43634 = m_28170;
    int64_t gtid_31995 = global_tid_43633;
    int64_t remnant_43635 = global_tid_43633 - gtid_31995;
    
    if (slt64(gtid_31995, m_28170)) {
        int64_t last_res_32054 = ((__global int64_t *) mem_42247)[gtid_31995 *
                                                                  N_28169 +
                                                                  i_28472];
        int32_t defunc_0_f_res_32055 = sext_i64_i32(last_res_32054);
        
        ((__global int32_t *) mem_42255)[gtid_31995] = defunc_0_f_res_32055;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32050
}
__kernel void mainDetailedzisegmap_32237(__global int *global_failure,
                                         int64_t m_28170, float hfrac_28175,
                                         int32_t k2p2_28181, __global
                                         unsigned char *mem_42329, __global
                                         unsigned char *mem_42333, __global
                                         unsigned char *mem_42337, __global
                                         unsigned char *mem_42340)
{
    #define segmap_group_sizze_32330 (mainDetailedzisegmap_group_sizze_32239)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43824;
    int32_t local_tid_43825;
    int64_t group_sizze_43828;
    int32_t wave_sizze_43827;
    int32_t group_tid_43826;
    
    global_tid_43824 = get_global_id(0);
    local_tid_43825 = get_local_id(0);
    group_sizze_43828 = get_local_size(0);
    wave_sizze_43827 = LOCKSTEP_WIDTH;
    group_tid_43826 = get_group_id(0);
    
    int32_t phys_tid_32237 = global_tid_43824;
    int64_t global_tid_43829 = sext_i32_i64(group_tid_43826) *
            segmap_group_sizze_32330 + sext_i32_i64(local_tid_43825);
    int64_t slice_43830 = m_28170;
    int64_t gtid_32236 = global_tid_43829;
    int64_t remnant_43831 = global_tid_43829 - gtid_32236;
    
    if (slt64(gtid_32236, m_28170)) {
        int32_t defunc_0_f_res_32334 = ((__global
                                         int32_t *) mem_42329)[gtid_32236];
        float defunc_0_f_res_32335 = ((__global float *) mem_42333)[gtid_32236];
        int32_t r32_arg_32336 = sub32(defunc_0_f_res_32334, k2p2_28181);
        float i32_res_32337 = sitofp_i32_f32(r32_arg_32336);
        float sqrt_arg_32338 = defunc_0_f_res_32335 / i32_res_32337;
        float sqrt_res_32339;
        
        sqrt_res_32339 = futrts_sqrt32(sqrt_arg_32338);
        
        float i32_res_32340 = sitofp_i32_f32(defunc_0_f_res_32334);
        float t32_arg_32341 = hfrac_28175 * i32_res_32340;
        int32_t f32_res_32342 = fptosi_f32_i32(t32_arg_32341);
        
        ((__global int32_t *) mem_42337)[gtid_32236] = f32_res_32342;
        ((__global float *) mem_42340)[gtid_32236] = sqrt_res_32339;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32330
}
__kernel void mainDetailedzisegmap_32477(__global int *global_failure,
                                         int failure_is_an_option, __global
                                         int64_t *global_failure_args,
                                         int64_t N_28169, int32_t n_28173,
                                         float lam_28176,
                                         int64_t iota32_arg_28600,
                                         float i32_res_28612, __global
                                         unsigned char *mappingindices_mem_41420,
                                         __global unsigned char *mem_42387)
{
    #define segmap_group_sizze_32499 (mainDetailedzisegmap_group_sizze_32479)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43943;
    int32_t local_tid_43944;
    int64_t group_sizze_43947;
    int32_t wave_sizze_43946;
    int32_t group_tid_43945;
    
    global_tid_43943 = get_global_id(0);
    local_tid_43944 = get_local_id(0);
    group_sizze_43947 = get_local_size(0);
    wave_sizze_43946 = LOCKSTEP_WIDTH;
    group_tid_43945 = get_group_id(0);
    
    int32_t phys_tid_32477 = global_tid_43943;
    int64_t global_tid_43948 = sext_i32_i64(group_tid_43945) *
            segmap_group_sizze_32499 + sext_i32_i64(local_tid_43944);
    int64_t slice_43949 = iota32_arg_28600;
    int64_t gtid_32476 = global_tid_43948;
    int64_t remnant_43950 = global_tid_43948 - gtid_32476;
    
    if (slt64(gtid_32476, iota32_arg_28600)) {
        int32_t defunc_0_f_res_32503 = sext_i64_i32(gtid_32476);
        int32_t i_32504 = add32(n_28173, defunc_0_f_res_32503);
        int64_t i_32505 = sext_i32_i64(i_32504);
        bool x_32506 = sle64((int64_t) 0, i_32505);
        bool y_32507 = slt64(i_32505, N_28169);
        bool bounds_check_32508 = x_32506 && y_32507;
        bool index_certs_32509;
        
        if (!bounds_check_32508) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 55) == -1) {
                    global_failure_args[0] = i_32505;
                    global_failure_args[1] = N_28169;
                    ;
                }
                return;
            }
        }
        
        int32_t time_32510 = ((__global
                               int32_t *) mappingindices_mem_41420)[i_32505];
        float i32_res_32511 = sitofp_i32_f32(time_32510);
        float logplus_arg_32512 = i32_res_32511 / i32_res_28612;
        bool cond_32513 = 2.7182817F < logplus_arg_32512;
        float logplus_res_32514;
        
        if (cond_32513) {
            float log_res_32515;
            
            log_res_32515 = futrts_log32(logplus_arg_32512);
            logplus_res_32514 = log_res_32515;
        } else {
            logplus_res_32514 = 1.0F;
        }
        
        float sqrt_res_32516;
        
        sqrt_res_32516 = futrts_sqrt32(logplus_res_32514);
        
        float defunc_0_f_res_32517 = lam_28176 * sqrt_res_32516;
        
        ((__global float *) mem_42387)[gtid_32476] = defunc_0_f_res_32517;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32499
}
__kernel void mainDetailedzisegmap_32535(__global int *global_failure,
                                         int failure_is_an_option, __global
                                         int64_t *global_failure_args,
                                         int64_t m_28170,
                                         int64_t iota32_arg_28600,
                                         int64_t iota32_arg_28630,
                                         int64_t distance_28640,
                                         int64_t num_threads_42765, __global
                                         unsigned char *defunc_4_map_res_mem_42265,
                                         __global
                                         unsigned char *defunc_3_map_res_mem_42345,
                                         __global unsigned char *mem_42391,
                                         __global unsigned char *mem_42399,
                                         __global unsigned char *mem_42433,
                                         __global unsigned char *color_42716)
{
    #define segmap_group_sizze_32735 (mainDetailedzisegmap_group_sizze_32537)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43969;
    int32_t local_tid_43970;
    int64_t group_sizze_43973;
    int32_t wave_sizze_43972;
    int32_t group_tid_43971;
    
    global_tid_43969 = get_global_id(0);
    local_tid_43970 = get_local_id(0);
    group_sizze_43973 = get_local_size(0);
    wave_sizze_43972 = LOCKSTEP_WIDTH;
    group_tid_43971 = get_group_id(0);
    
    int32_t phys_tid_32535 = global_tid_43969;
    int64_t global_tid_43974 = sext_i32_i64(group_tid_43971) *
            segmap_group_sizze_32735 + sext_i32_i64(local_tid_43970);
    int64_t slice_43975 = m_28170;
    int64_t gtid_32534 = global_tid_43974;
    int64_t remnant_43976 = global_tid_43974 - gtid_32534;
    
    if (slt64(gtid_32534, m_28170)) {
        int32_t x_32738 = ((__global
                            int32_t *) defunc_4_map_res_mem_42265)[gtid_32534];
        int32_t x_32739 = ((__global
                            int32_t *) defunc_3_map_res_mem_42345)[gtid_32534];
        int32_t y_32740 = ((__global int32_t *) mem_42391)[gtid_32534];
        
        for (int64_t i_43977 = 0; i_43977 < iota32_arg_28630; i_43977++) {
            ((__global float *) color_42716)[phys_tid_32535 + i_43977 *
                                             num_threads_42765] = ((__global
                                                                    float *) mem_42399)[gtid_32534 +
                                                                                        i_43977 *
                                                                                        m_28170];
        }
        for (int64_t i_32743 = 0; i_32743 < distance_28640; i_32743++) {
            int64_t index_primexp_32745 = add64((int64_t) 1, i_32743);
            bool cond_32746 = slt64((int64_t) 0, index_primexp_32745);
            bool loop_cond_32747;
            
            if (cond_32746) {
                bool x_32748 = sle64((int64_t) 0, index_primexp_32745);
                bool y_32749 = slt64(index_primexp_32745, iota32_arg_28630);
                bool bounds_check_32750 = x_32748 && y_32749;
                bool index_certs_32751;
                
                if (!bounds_check_32750) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 58) ==
                            -1) {
                            global_failure_args[0] = index_primexp_32745;
                            global_failure_args[1] = iota32_arg_28630;
                            ;
                        }
                        return;
                    }
                }
                
                float defunc_2_lifted_gt_arg_32752 = ((__global
                                                       float *) color_42716)[phys_tid_32535 +
                                                                             index_primexp_32745 *
                                                                             num_threads_42765];
                bool y_32753 = slt64(i_32743, iota32_arg_28630);
                bool index_certs_32754;
                
                if (!y_32753) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 59) ==
                            -1) {
                            global_failure_args[0] = i_32743;
                            global_failure_args[1] = iota32_arg_28630;
                            ;
                        }
                        return;
                    }
                }
                
                float defunc_1_lifted_gt_arg_32755 = ((__global
                                                       float *) color_42716)[phys_tid_32535 +
                                                                             i_32743 *
                                                                             num_threads_42765];
                bool defunc_1_zlze_res_32756 = defunc_1_lifted_gt_arg_32755 <=
                     defunc_2_lifted_gt_arg_32752;
                bool defunc_2_lifted_gt_res_32757 = !defunc_1_zlze_res_32756;
                
                loop_cond_32747 = defunc_2_lifted_gt_res_32757;
            } else {
                loop_cond_32747 = 0;
            }
            
            bool xszq_32758;
            int64_t xszq_32759;
            bool loop_while_32761;
            int64_t j_32762;
            
            loop_while_32761 = loop_cond_32747;
            j_32762 = index_primexp_32745;
            while (loop_while_32761) {
                int64_t loopres_32764 = sub64(j_32762, (int64_t) 1);
                bool x_32765 = sle64((int64_t) 0, j_32762);
                bool y_32766 = slt64(j_32762, iota32_arg_28630);
                bool bounds_check_32767 = x_32765 && y_32766;
                bool index_certs_32768;
                
                if (!bounds_check_32767) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 60) ==
                            -1) {
                            global_failure_args[0] = j_32762;
                            global_failure_args[1] = iota32_arg_28630;
                            ;
                        }
                        return;
                    }
                }
                
                float copy_arg_32769 = ((__global
                                         float *) color_42716)[phys_tid_32535 +
                                                               j_32762 *
                                                               num_threads_42765];
                bool x_32770 = sle64((int64_t) 0, loopres_32764);
                bool y_32771 = slt64(loopres_32764, iota32_arg_28630);
                bool bounds_check_32772 = x_32770 && y_32771;
                bool index_certs_32773;
                
                if (!bounds_check_32772) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 61) ==
                            -1) {
                            global_failure_args[0] = loopres_32764;
                            global_failure_args[1] = iota32_arg_28630;
                            ;
                        }
                        return;
                    }
                }
                
                float copy_arg_32774 = ((__global
                                         float *) color_42716)[phys_tid_32535 +
                                                               loopres_32764 *
                                                               num_threads_42765];
                
                ((__global float *) color_42716)[phys_tid_32535 + j_32762 *
                                                 num_threads_42765] =
                    copy_arg_32774;
                ((__global float *) color_42716)[phys_tid_32535 +
                                                 loopres_32764 *
                                                 num_threads_42765] =
                    copy_arg_32769;
                
                bool cond_32777 = slt64((int64_t) 0, loopres_32764);
                bool loop_cond_32778;
                
                if (cond_32777) {
                    bool index_certs_32779;
                    
                    if (!bounds_check_32772) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          62) == -1) {
                                global_failure_args[0] = loopres_32764;
                                global_failure_args[1] = iota32_arg_28630;
                                ;
                            }
                            return;
                        }
                    }
                    
                    float defunc_2_lifted_gt_arg_32780 = ((__global
                                                           float *) color_42716)[phys_tid_32535 +
                                                                                 loopres_32764 *
                                                                                 num_threads_42765];
                    int64_t i_32781 = sub64(loopres_32764, (int64_t) 1);
                    bool x_32782 = sle64((int64_t) 0, i_32781);
                    bool y_32783 = slt64(i_32781, iota32_arg_28630);
                    bool bounds_check_32784 = x_32782 && y_32783;
                    bool index_certs_32785;
                    
                    if (!bounds_check_32784) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          63) == -1) {
                                global_failure_args[0] = i_32781;
                                global_failure_args[1] = iota32_arg_28630;
                                ;
                            }
                            return;
                        }
                    }
                    
                    float defunc_1_lifted_gt_arg_32786 = ((__global
                                                           float *) color_42716)[phys_tid_32535 +
                                                                                 i_32781 *
                                                                                 num_threads_42765];
                    bool defunc_1_zlze_res_32787 =
                         defunc_1_lifted_gt_arg_32786 <=
                         defunc_2_lifted_gt_arg_32780;
                    bool defunc_2_lifted_gt_res_32788 =
                         !defunc_1_zlze_res_32787;
                    
                    loop_cond_32778 = defunc_2_lifted_gt_res_32788;
                } else {
                    loop_cond_32778 = 0;
                }
                
                bool loop_while_tmp_43979 = loop_cond_32778;
                int64_t j_tmp_43980 = loopres_32764;
                
                loop_while_32761 = loop_while_tmp_43979;
                j_32762 = j_tmp_43980;
            }
            xszq_32758 = loop_while_32761;
            xszq_32759 = j_32762;
        }
        
        int32_t i_32789 = sdiv32(y_32740, 2);
        int32_t j_32790 = sub32(i_32789, 1);
        bool cond_32791 = x_32738 == x_32739;
        float defunc_0_f_res_32792;
        
        if (cond_32791) {
            defunc_0_f_res_32792 = 0.0F;
        } else {
            int32_t x_32793 = smod32(y_32740, 2);
            bool cond_32794 = x_32793 == 0;
            float defunc_0_f_res_f_res_32795;
            
            if (cond_32794) {
                int64_t j_32796 = sext_i32_i64(j_32790);
                bool x_32797 = sle64((int64_t) 0, j_32796);
                bool y_32798 = slt64(j_32796, iota32_arg_28600);
                bool bounds_check_32799 = x_32797 && y_32798;
                bool index_certs_32800;
                
                if (!bounds_check_32799) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 64) ==
                            -1) {
                            global_failure_args[0] = j_32796;
                            global_failure_args[1] = iota32_arg_28600;
                            ;
                        }
                        return;
                    }
                }
                
                float x_32801 = ((__global
                                  float *) color_42716)[phys_tid_32535 +
                                                        j_32796 *
                                                        num_threads_42765];
                int64_t i_32802 = sext_i32_i64(i_32789);
                bool x_32803 = sle64((int64_t) 0, i_32802);
                bool y_32804 = slt64(i_32802, iota32_arg_28600);
                bool bounds_check_32805 = x_32803 && y_32804;
                bool index_certs_32806;
                
                if (!bounds_check_32805) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 65) ==
                            -1) {
                            global_failure_args[0] = i_32802;
                            global_failure_args[1] = iota32_arg_28600;
                            ;
                        }
                        return;
                    }
                }
                
                float y_32807 = ((__global
                                  float *) color_42716)[phys_tid_32535 +
                                                        i_32802 *
                                                        num_threads_42765];
                float x_32808 = x_32801 + y_32807;
                float defunc_0_f_res_f_res_t_res_32809 = x_32808 / 2.0F;
                
                defunc_0_f_res_f_res_32795 = defunc_0_f_res_f_res_t_res_32809;
            } else {
                int64_t i_32810 = sext_i32_i64(i_32789);
                bool x_32811 = sle64((int64_t) 0, i_32810);
                bool y_32812 = slt64(i_32810, iota32_arg_28600);
                bool bounds_check_32813 = x_32811 && y_32812;
                bool index_certs_32814;
                
                if (!bounds_check_32813) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 66) ==
                            -1) {
                            global_failure_args[0] = i_32810;
                            global_failure_args[1] = iota32_arg_28600;
                            ;
                        }
                        return;
                    }
                }
                
                float defunc_0_f_res_f_res_f_res_32815 = ((__global
                                                           float *) color_42716)[phys_tid_32535 +
                                                                                 i_32810 *
                                                                                 num_threads_42765];
                
                defunc_0_f_res_f_res_32795 = defunc_0_f_res_f_res_f_res_32815;
            }
            defunc_0_f_res_32792 = defunc_0_f_res_f_res_32795;
        }
        ((__global float *) mem_42433)[gtid_32534] = defunc_0_f_res_32792;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32735
}
__kernel void mainDetailedzisegmap_32628(__global int *global_failure,
                                         int failure_is_an_option, __global
                                         int64_t *global_failure_args,
                                         int64_t N_28169, int64_t m_28170,
                                         int64_t iota32_arg_28630, __global
                                         unsigned char *defunc_4_map_res_mem_42266,
                                         __global
                                         unsigned char *defunc_3_map_res_mem_42345,
                                         __global unsigned char *mem_42391,
                                         __global unsigned char *mem_42396)
{
    #define segmap_group_sizze_32707 (mainDetailedzisegmap_group_sizze_32631)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43959;
    int32_t local_tid_43960;
    int64_t group_sizze_43963;
    int32_t wave_sizze_43962;
    int32_t group_tid_43961;
    
    global_tid_43959 = get_global_id(0);
    local_tid_43960 = get_local_id(0);
    group_sizze_43963 = get_local_size(0);
    wave_sizze_43962 = LOCKSTEP_WIDTH;
    group_tid_43961 = get_group_id(0);
    
    int32_t phys_tid_32628 = global_tid_43959;
    int64_t global_tid_43964 = sext_i32_i64(group_tid_43961) *
            segmap_group_sizze_32707 + sext_i32_i64(local_tid_43960);
    int64_t slice_43965 = iota32_arg_28630;
    int64_t slice_43966 = m_28170 * slice_43965;
    int64_t gtid_32626 = squot64(global_tid_43964, slice_43965);
    int64_t remnant_43967 = global_tid_43964 - gtid_32626 * slice_43965;
    int64_t gtid_32627 = remnant_43967;
    int64_t remnant_43968 = remnant_43967 - gtid_32627;
    
    if (slt64(gtid_32626, m_28170) && slt64(gtid_32627, iota32_arg_28630)) {
        int32_t x_32710 = ((__global
                            int32_t *) defunc_3_map_res_mem_42345)[gtid_32626];
        int32_t y_32712 = ((__global int32_t *) mem_42391)[gtid_32626];
        int32_t index_primexp_39448 = sext_i64_i32(gtid_32627);
        bool cond_32714 = slt32(index_primexp_39448, y_32712);
        bool cond_32715;
        
        if (cond_32714) {
            int32_t i_32716 = add32(x_32710, index_primexp_39448);
            int64_t i_32717 = sext_i32_i64(i_32716);
            bool x_32718 = sle64((int64_t) 0, i_32717);
            bool y_32719 = slt64(i_32717, N_28169);
            bool bounds_check_32720 = x_32718 && y_32719;
            bool index_certs_32721;
            
            if (!bounds_check_32720) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 56) ==
                        -1) {
                        global_failure_args[0] = i_32717;
                        global_failure_args[1] = N_28169;
                        ;
                    }
                    return;
                }
            }
            
            float isnan_arg_32722 = ((__global
                                      float *) defunc_4_map_res_mem_42266)[gtid_32626 *
                                                                           N_28169 +
                                                                           i_32717];
            bool isnan_res_32723;
            
            isnan_res_32723 = futrts_isnan32(isnan_arg_32722);
            
            bool cond_t_res_32724 = !isnan_res_32723;
            
            cond_32715 = cond_t_res_32724;
        } else {
            cond_32715 = 0;
        }
        
        float defunc_0_f_res_32725;
        
        if (cond_32715) {
            int32_t i_32726 = add32(x_32710, index_primexp_39448);
            int64_t i_32727 = sext_i32_i64(i_32726);
            bool x_32728 = sle64((int64_t) 0, i_32727);
            bool y_32729 = slt64(i_32727, N_28169);
            bool bounds_check_32730 = x_32728 && y_32729;
            bool index_certs_32731;
            
            if (!bounds_check_32730) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 57) ==
                        -1) {
                        global_failure_args[0] = i_32727;
                        global_failure_args[1] = N_28169;
                        ;
                    }
                    return;
                }
            }
            
            float defunc_0_f_res_t_res_32732 = ((__global
                                                 float *) defunc_4_map_res_mem_42266)[gtid_32626 *
                                                                                      N_28169 +
                                                                                      i_32727];
            
            defunc_0_f_res_32725 = defunc_0_f_res_t_res_32732;
        } else {
            defunc_0_f_res_32725 = INFINITY;
        }
        ((__global float *) mem_42396)[gtid_32626 * iota32_arg_28630 +
                                       gtid_32627] = defunc_0_f_res_32725;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32707
}
__kernel void mainDetailedzisegmap_32686(__global int *global_failure,
                                         int64_t m_28170, __global
                                         unsigned char *defunc_4_map_res_mem_42265,
                                         __global
                                         unsigned char *defunc_3_map_res_mem_42345,
                                         __global unsigned char *mem_42391)
{
    #define segmap_group_sizze_32695 (mainDetailedzisegmap_group_sizze_32688)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43951;
    int32_t local_tid_43952;
    int64_t group_sizze_43955;
    int32_t wave_sizze_43954;
    int32_t group_tid_43953;
    
    global_tid_43951 = get_global_id(0);
    local_tid_43952 = get_local_id(0);
    group_sizze_43955 = get_local_size(0);
    wave_sizze_43954 = LOCKSTEP_WIDTH;
    group_tid_43953 = get_group_id(0);
    
    int32_t phys_tid_32686 = global_tid_43951;
    int64_t global_tid_43956 = sext_i32_i64(group_tid_43953) *
            segmap_group_sizze_32695 + sext_i32_i64(local_tid_43952);
    int64_t slice_43957 = m_28170;
    int64_t gtid_32685 = global_tid_43956;
    int64_t remnant_43958 = global_tid_43956 - gtid_32685;
    
    if (slt64(gtid_32685, m_28170)) {
        int32_t x_32698 = ((__global
                            int32_t *) defunc_4_map_res_mem_42265)[gtid_32685];
        int32_t x_32699 = ((__global
                            int32_t *) defunc_3_map_res_mem_42345)[gtid_32685];
        int32_t y_32700 = sub32(x_32698, x_32699);
        
        ((__global int32_t *) mem_42391)[gtid_32685] = y_32700;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32695
}
__kernel void mainDetailedzisegmap_32846(__global int *global_failure,
                                         int failure_is_an_option, __global
                                         int64_t *global_failure_args,
                                         int64_t N_28169, int64_t m_28170,
                                         int32_t n_28173,
                                         int64_t iota32_arg_28600,
                                         int64_t iota32_arg_28630,
                                         int64_t num_groups_32961,
                                         int64_t num_threads_42767, __global
                                         unsigned char *defunc_4_map_res_mem_42265,
                                         __global
                                         unsigned char *defunc_4_map_res_mem_42266,
                                         __global
                                         unsigned char *defunc_4_map_res_mem_42267,
                                         __global
                                         unsigned char *defunc_3_map_res_mem_42344,
                                         __global
                                         unsigned char *defunc_3_map_res_mem_42345,
                                         __global
                                         unsigned char *defunc_3_map_res_mem_42346,
                                         __global
                                         unsigned char *defunc_0_f_res_mem_42383,
                                         __global unsigned char *mem_42387,
                                         __global unsigned char *mem_42482,
                                         __global unsigned char *mem_42485,
                                         __global unsigned char *mem_42488,
                                         __global unsigned char *mem_42491,
                                         __global unsigned char *color_42717,
                                         __global unsigned char *color_42718)
{
    #define segmap_group_sizze_32960 (mainDetailedzisegmap_group_sizze_32848)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43986;
    int32_t local_tid_43987;
    int64_t group_sizze_43990;
    int32_t wave_sizze_43989;
    int32_t group_tid_43988;
    
    global_tid_43986 = get_global_id(0);
    local_tid_43987 = get_local_id(0);
    group_sizze_43990 = get_local_size(0);
    wave_sizze_43989 = LOCKSTEP_WIDTH;
    group_tid_43988 = get_group_id(0);
    
    int32_t phys_tid_32846 = global_tid_43986;
    int32_t phys_group_id_43991;
    
    phys_group_id_43991 = get_group_id(0);
    for (int32_t i_43992 = 0; i_43992 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_28170, segmap_group_sizze_32960)) -
                   phys_group_id_43991, sext_i64_i32(num_groups_32961));
         i_43992++) {
        int32_t virt_group_id_43993 = phys_group_id_43991 + i_43992 *
                sext_i64_i32(num_groups_32961);
        int64_t global_tid_43994 = sext_i32_i64(virt_group_id_43993) *
                segmap_group_sizze_32960 + sext_i32_i64(local_tid_43987);
        int64_t slice_43995 = m_28170;
        int64_t gtid_32845 = global_tid_43994;
        int64_t remnant_43996 = global_tid_43994 - gtid_32845;
        
        if (slt64(gtid_32845, m_28170)) {
            int32_t x_32967 = ((__global
                                int32_t *) defunc_4_map_res_mem_42265)[gtid_32845];
            int32_t x_32968 = ((__global
                                int32_t *) defunc_3_map_res_mem_42345)[gtid_32845];
            float x_32969 = ((__global
                              float *) defunc_3_map_res_mem_42346)[gtid_32845];
            int32_t x_32970 = ((__global
                                int32_t *) defunc_3_map_res_mem_42344)[gtid_32845];
            float x_32971 = ((__global
                              float *) defunc_0_f_res_mem_42383)[gtid_32845];
            int32_t y_32974 = sub32(x_32967, x_32968);
            float discard_41385;
            float scanacc_41381 = 0.0F;
            
            for (int64_t i_41383 = 0; i_41383 < iota32_arg_28630; i_41383++) {
                int32_t index_primexp_41411 = sext_i64_i32(i_41383);
                bool cond_32980 = sle32(y_32974, index_primexp_41411);
                float defunc_0_f_res_32981;
                
                if (cond_32980) {
                    defunc_0_f_res_32981 = 0.0F;
                } else {
                    bool cond_32982 = index_primexp_41411 == 0;
                    float defunc_0_f_res_f_res_32983;
                    
                    if (cond_32982) {
                        defunc_0_f_res_f_res_32983 = x_32971;
                    } else {
                        int32_t i_32984 = add32(x_32968, index_primexp_41411);
                        int64_t i_32985 = sext_i32_i64(i_32984);
                        bool x_32986 = sle64((int64_t) 0, i_32985);
                        bool y_32987 = slt64(i_32985, N_28169);
                        bool bounds_check_32988 = x_32986 && y_32987;
                        bool index_certs_32989;
                        
                        if (!bounds_check_32988) {
                            {
                                if (atomic_cmpxchg_i32_global(global_failure,
                                                              -1, 67) == -1) {
                                    global_failure_args[0] = i_32985;
                                    global_failure_args[1] = N_28169;
                                    ;
                                }
                                local_failure = true;
                                goto error_0;
                            }
                        }
                        
                        float x_32990 = ((__global
                                          float *) defunc_4_map_res_mem_42266)[gtid_32845 *
                                                                               N_28169 +
                                                                               i_32985];
                        int32_t x_32991 = sub32(x_32968, x_32970);
                        int32_t i_32992 = add32(x_32991, index_primexp_41411);
                        int64_t i_32993 = sext_i32_i64(i_32992);
                        bool x_32994 = sle64((int64_t) 0, i_32993);
                        bool y_32995 = slt64(i_32993, N_28169);
                        bool bounds_check_32996 = x_32994 && y_32995;
                        bool index_certs_32997;
                        
                        if (!bounds_check_32996) {
                            {
                                if (atomic_cmpxchg_i32_global(global_failure,
                                                              -1, 68) == -1) {
                                    global_failure_args[0] = i_32993;
                                    global_failure_args[1] = N_28169;
                                    ;
                                }
                                local_failure = true;
                                goto error_0;
                            }
                        }
                        
                        float y_32998 = ((__global
                                          float *) defunc_4_map_res_mem_42266)[gtid_32845 *
                                                                               N_28169 +
                                                                               i_32993];
                        float defunc_0_f_res_f_res_f_res_32999 = x_32990 -
                              y_32998;
                        
                        defunc_0_f_res_f_res_32983 =
                            defunc_0_f_res_f_res_f_res_32999;
                    }
                    defunc_0_f_res_32981 = defunc_0_f_res_f_res_32983;
                }
                
                float defunc_1_op_res_32978 = defunc_0_f_res_32981 +
                      scanacc_41381;
                
                ((__global float *) color_42717)[phys_tid_32846 + i_41383 *
                                                 num_threads_42767] =
                    defunc_1_op_res_32978;
                
                float scanacc_tmp_43997 = defunc_1_op_res_32978;
                
                scanacc_41381 = scanacc_tmp_43997;
            }
            discard_41385 = scanacc_41381;
            
            float i32_res_33000 = sitofp_i32_f32(x_32968);
            float sqrt_res_33001;
            
            sqrt_res_33001 = futrts_sqrt32(i32_res_33000);
            
            float y_33002 = x_32969 * sqrt_res_33001;
            bool defunc_0_f_res_33004;
            int32_t defunc_0_f_res_33005;
            float defunc_0_f_res_33006;
            bool redout_41387;
            int32_t redout_41388;
            float redout_41389;
            
            redout_41387 = 0;
            redout_41388 = -1;
            redout_41389 = 0.0F;
            for (int64_t i_41391 = 0; i_41391 < iota32_arg_28600; i_41391++) {
                float x_33022 = ((__global
                                  float *) color_42717)[phys_tid_32846 +
                                                        i_41391 *
                                                        num_threads_42767];
                float x_33023 = ((__global float *) mem_42387)[i_41391];
                int32_t index_primexp_41412 = sext_i64_i32(i_41391);
                int32_t x_33024 = index_primexp_41412;
                float defunc_0_f_res_33025 = x_33022 / y_33002;
                bool cond_33026 = slt32(index_primexp_41412, y_32974);
                bool isnan_res_33027;
                
                isnan_res_33027 = futrts_isnan32(defunc_0_f_res_33025);
                
                bool cond_t_res_33028 = !isnan_res_33027;
                bool x_33029 = cond_33026 && cond_t_res_33028;
                float abs_res_33030 = (float) fabs(defunc_0_f_res_33025);
                bool defunc_2_f_res_t_res_33031 = x_33023 < abs_res_33030;
                bool x_33032 = x_33029 && defunc_2_f_res_t_res_33031;
                float defunc_1_f_res_33033;
                
                if (cond_33026) {
                    defunc_1_f_res_33033 = defunc_0_f_res_33025;
                } else {
                    defunc_1_f_res_33033 = 0.0F;
                }
                
                bool defunc_1_op_res_33012;
                int32_t defunc_1_op_res_33013;
                
                if (redout_41387) {
                    defunc_1_op_res_33012 = redout_41387;
                    defunc_1_op_res_33013 = redout_41388;
                } else {
                    bool x_33014 = x_33032 && x_33032;
                    bool x_33015 = !x_33032;
                    bool y_33016 = x_33015 && redout_41387;
                    bool defunc_1_op_res_f_res_33017 = x_33014 || y_33016;
                    int32_t defunc_1_op_res_f_res_33018;
                    
                    if (x_33032) {
                        defunc_1_op_res_f_res_33018 = x_33024;
                    } else {
                        defunc_1_op_res_f_res_33018 = redout_41388;
                    }
                    defunc_1_op_res_33012 = defunc_1_op_res_f_res_33017;
                    defunc_1_op_res_33013 = defunc_1_op_res_f_res_33018;
                }
                
                float defunc_1_op_res_33021 = defunc_1_f_res_33033 +
                      redout_41389;
                
                ((__global float *) color_42718)[phys_tid_32846 + i_41391 *
                                                 num_threads_42767] =
                    defunc_0_f_res_33025;
                
                bool redout_tmp_43999 = defunc_1_op_res_33012;
                int32_t redout_tmp_44000 = defunc_1_op_res_33013;
                float redout_tmp_44001 = defunc_1_op_res_33021;
                
                redout_41387 = redout_tmp_43999;
                redout_41388 = redout_tmp_44000;
                redout_41389 = redout_tmp_44001;
            }
            defunc_0_f_res_33004 = redout_41387;
            defunc_0_f_res_33005 = redout_41388;
            defunc_0_f_res_33006 = redout_41389;
            
            bool cond_33034 = y_32974 == 0;
            float defunc_0_f_res_33035;
            
            if (cond_33034) {
                defunc_0_f_res_33035 = 0.0F;
            } else {
                float i32_res_33036 = sitofp_i32_f32(y_32974);
                float defunc_0_f_res_f_res_33037 = defunc_0_f_res_33006 /
                      i32_res_33036;
                
                defunc_0_f_res_33035 = defunc_0_f_res_f_res_33037;
            }
            
            bool cond_33038 = !defunc_0_f_res_33004;
            int32_t fst_breakzq_33039;
            
            if (cond_33038) {
                fst_breakzq_33039 = -1;
            } else {
                bool cond_33040 = slt32(defunc_0_f_res_33005, y_32974);
                int32_t adjustValInds_res_33041;
                
                if (cond_33040) {
                    int32_t i_33042 = add32(x_32968, defunc_0_f_res_33005);
                    int64_t i_33043 = sext_i32_i64(i_33042);
                    bool x_33044 = sle64((int64_t) 0, i_33043);
                    bool y_33045 = slt64(i_33043, N_28169);
                    bool bounds_check_33046 = x_33044 && y_33045;
                    bool index_certs_33047;
                    
                    if (!bounds_check_33046) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          69) == -1) {
                                global_failure_args[0] = i_33043;
                                global_failure_args[1] = N_28169;
                                ;
                            }
                            local_failure = true;
                            goto error_0;
                        }
                    }
                    
                    int32_t x_33048 = ((__global
                                        int32_t *) defunc_4_map_res_mem_42267)[gtid_32845 *
                                                                               N_28169 +
                                                                               i_33043];
                    int32_t adjustValInds_res_t_res_33049 = sub32(x_33048,
                                                                  n_28173);
                    
                    adjustValInds_res_33041 = adjustValInds_res_t_res_33049;
                } else {
                    adjustValInds_res_33041 = -1;
                }
                fst_breakzq_33039 = adjustValInds_res_33041;
            }
            
            bool cond_33050 = sle32(x_32968, 5);
            bool cond_f_res_33051 = sle32(y_32974, 5);
            bool x_33052 = !cond_33050;
            bool y_33053 = cond_f_res_33051 && x_33052;
            bool cond_33054 = cond_33050 || y_33053;
            int32_t fst_breakzq_33055;
            
            if (cond_33054) {
                fst_breakzq_33055 = -2;
            } else {
                fst_breakzq_33055 = fst_breakzq_33039;
            }
            for (int64_t i_44003 = 0; i_44003 < iota32_arg_28630; i_44003++) {
                ((__global float *) color_42717)[phys_tid_32846 + i_44003 *
                                                 num_threads_42767] = NAN;
            }
            for (int64_t write_iter_41393 = 0; write_iter_41393 <
                 iota32_arg_28630; write_iter_41393++) {
                int32_t index_primexp_41414 = sext_i64_i32(write_iter_41393);
                bool cond_33061 = slt32(index_primexp_41414, y_32974);
                int32_t defunc_0_f_res_33062;
                
                if (cond_33061) {
                    int32_t i_33063 = add32(x_32968, index_primexp_41414);
                    int64_t i_33064 = sext_i32_i64(i_33063);
                    bool x_33065 = sle64((int64_t) 0, i_33064);
                    bool y_33066 = slt64(i_33064, N_28169);
                    bool bounds_check_33067 = x_33065 && y_33066;
                    bool index_certs_33068;
                    
                    if (!bounds_check_33067) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          70) == -1) {
                                global_failure_args[0] = i_33064;
                                global_failure_args[1] = N_28169;
                                ;
                            }
                            local_failure = true;
                            goto error_0;
                        }
                    }
                    
                    int32_t x_33069 = ((__global
                                        int32_t *) defunc_4_map_res_mem_42267)[gtid_32845 *
                                                                               N_28169 +
                                                                               i_33064];
                    int32_t defunc_0_f_res_t_res_33070 = sub32(x_33069,
                                                               n_28173);
                    
                    defunc_0_f_res_33062 = defunc_0_f_res_t_res_33070;
                } else {
                    defunc_0_f_res_33062 = -1;
                }
                
                int64_t defunc_0_f_res_33071 =
                        sext_i32_i64(defunc_0_f_res_33062);
                
                if (sle64((int64_t) 0, defunc_0_f_res_33071) &&
                    slt64(defunc_0_f_res_33071, iota32_arg_28630)) {
                    for (int64_t i_44005 = 0; i_44005 < (int64_t) 1;
                         i_44005++) {
                        ((__global float *) color_42717)[phys_tid_32846 +
                                                         (defunc_0_f_res_33071 +
                                                          i_44005) *
                                                         num_threads_42767] =
                            ((__global float *) color_42718)[phys_tid_32846 +
                                                             num_threads_42767 *
                                                             write_iter_41393 +
                                                             i_44005 *
                                                             num_threads_42767];
                    }
                }
            }
            for (int64_t i_44006 = 0; i_44006 < iota32_arg_28600; i_44006++) {
                ((__global float *) mem_42482)[i_44006 * m_28170 + gtid_32845] =
                    ((__global float *) color_42717)[phys_tid_32846 + i_44006 *
                                                     num_threads_42767];
            }
            for (int64_t i_44007 = 0; i_44007 < iota32_arg_28600; i_44007++) {
                ((__global float *) mem_42485)[i_44007 * m_28170 + gtid_32845] =
                    ((__global float *) color_42718)[phys_tid_32846 + i_44007 *
                                                     num_threads_42767];
            }
            ((__global int32_t *) mem_42488)[gtid_32845] = fst_breakzq_33055;
            ((__global float *) mem_42491)[gtid_32845] = defunc_0_f_res_33035;
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_32960
}
__kernel void mainDetailedzisegmap_33196(__global int *global_failure,
                                         int failure_is_an_option, __global
                                         int64_t *global_failure_args,
                                         int64_t N_28169, int64_t m_28170,
                                         int32_t n_28173,
                                         int64_t iota32_arg_28600,
                                         int64_t iota32_arg_28630, __global
                                         unsigned char *defunc_4_map_res_mem_42267,
                                         __global
                                         unsigned char *defunc_3_map_res_mem_42345,
                                         __global unsigned char *mem_42522,
                                         __global unsigned char *mem_42544,
                                         __global unsigned char *mem_42555)
{
    #define segmap_group_sizze_33517 (mainDetailedzisegmap_group_sizze_33199)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_44221;
    int32_t local_tid_44222;
    int64_t group_sizze_44225;
    int32_t wave_sizze_44224;
    int32_t group_tid_44223;
    
    global_tid_44221 = get_global_id(0);
    local_tid_44222 = get_local_id(0);
    group_sizze_44225 = get_local_size(0);
    wave_sizze_44224 = LOCKSTEP_WIDTH;
    group_tid_44223 = get_group_id(0);
    
    int32_t phys_tid_33196 = global_tid_44221;
    int64_t global_tid_44226 = sext_i32_i64(group_tid_44223) *
            segmap_group_sizze_33517 + sext_i32_i64(local_tid_44222);
    int64_t slice_44227 = iota32_arg_28630;
    int64_t slice_44228 = m_28170 * slice_44227;
    int64_t gtid_33194 = squot64(global_tid_44226, slice_44227);
    int64_t remnant_44229 = global_tid_44226 - gtid_33194 * slice_44227;
    int64_t gtid_33195 = remnant_44229;
    int64_t remnant_44230 = remnant_44229 - gtid_33195;
    
    if (slt64(gtid_33194, m_28170) && slt64(gtid_33195, iota32_arg_28630)) {
        int32_t y_33522 = ((__global int32_t *) mem_42522)[gtid_33194];
        int32_t index_primexp_39478 = sext_i64_i32(gtid_33195);
        int64_t binop_x_39466 = iota32_arg_28630 * gtid_33194;
        int64_t binop_x_39467 = gtid_33195 + binop_x_39466;
        int64_t new_index_39468 = squot64(binop_x_39467, iota32_arg_28600);
        int64_t binop_y_39474 = iota32_arg_28600 * new_index_39468;
        int64_t new_index_39475 = binop_x_39467 - binop_y_39474;
        float write_value_33524 = ((__global
                                    float *) mem_42544)[new_index_39468 *
                                                        iota32_arg_28600 +
                                                        new_index_39475];
        bool cond_33525 = slt32(index_primexp_39478, y_33522);
        int32_t defunc_0_f_res_33526;
        
        if (cond_33525) {
            int32_t x_33520 = ((__global
                                int32_t *) defunc_3_map_res_mem_42345)[gtid_33194];
            int32_t i_33527 = add32(x_33520, index_primexp_39478);
            int64_t i_33528 = sext_i32_i64(i_33527);
            bool x_33529 = sle64((int64_t) 0, i_33528);
            bool y_33530 = slt64(i_33528, N_28169);
            bool bounds_check_33531 = x_33529 && y_33530;
            bool index_certs_33532;
            
            if (!bounds_check_33531) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 78) ==
                        -1) {
                        global_failure_args[0] = i_33528;
                        global_failure_args[1] = N_28169;
                        ;
                    }
                    return;
                }
            }
            
            int32_t x_33533 = ((__global
                                int32_t *) defunc_4_map_res_mem_42267)[gtid_33194 *
                                                                       N_28169 +
                                                                       i_33528];
            int32_t defunc_0_f_res_t_res_33534 = sub32(x_33533, n_28173);
            
            defunc_0_f_res_33526 = defunc_0_f_res_t_res_33534;
        } else {
            defunc_0_f_res_33526 = -1;
        }
        
        int64_t defunc_0_f_res_33535 = sext_i32_i64(defunc_0_f_res_33526);
        
        if ((sle64((int64_t) 0, gtid_33194) && slt64(gtid_33194, m_28170)) &&
            (sle64((int64_t) 0, defunc_0_f_res_33535) &&
             slt64(defunc_0_f_res_33535, iota32_arg_28630))) {
            ((__global float *) mem_42555)[gtid_33194 * iota32_arg_28630 +
                                           defunc_0_f_res_33535] =
                write_value_33524;
        }
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_33517
}
__kernel void mainDetailedzisegmap_33246(__global int *global_failure,
                                         int failure_is_an_option, __global
                                         int64_t *global_failure_args,
                                         int64_t N_28169, int64_t m_28170,
                                         int32_t n_28173, __global
                                         unsigned char *defunc_4_map_res_mem_42267,
                                         __global
                                         unsigned char *defunc_3_map_res_mem_42345,
                                         __global unsigned char *mem_42522,
                                         __global unsigned char *mem_42534,
                                         __global unsigned char *mem_42537,
                                         __global unsigned char *mem_42540,
                                         __global unsigned char *mem_42548,
                                         __global unsigned char *mem_42551)
{
    #define segmap_group_sizze_33471 (mainDetailedzisegmap_group_sizze_33248)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_44213;
    int32_t local_tid_44214;
    int64_t group_sizze_44217;
    int32_t wave_sizze_44216;
    int32_t group_tid_44215;
    
    global_tid_44213 = get_global_id(0);
    local_tid_44214 = get_local_id(0);
    group_sizze_44217 = get_local_size(0);
    wave_sizze_44216 = LOCKSTEP_WIDTH;
    group_tid_44215 = get_group_id(0);
    
    int32_t phys_tid_33246 = global_tid_44213;
    int64_t global_tid_44218 = sext_i32_i64(group_tid_44215) *
            segmap_group_sizze_33471 + sext_i32_i64(local_tid_44214);
    int64_t slice_44219 = m_28170;
    int64_t gtid_33245 = global_tid_44218;
    int64_t remnant_44220 = global_tid_44218 - gtid_33245;
    
    if (slt64(gtid_33245, m_28170)) {
        int32_t x_33475 = ((__global
                            int32_t *) defunc_3_map_res_mem_42345)[gtid_33245];
        int32_t y_33477 = ((__global int32_t *) mem_42522)[gtid_33245];
        bool defunc_0_f_res_33478 = ((__global bool *) mem_42534)[gtid_33245];
        bool cond_33481 = y_33477 == 0;
        float defunc_0_f_res_33482;
        
        if (cond_33481) {
            defunc_0_f_res_33482 = 0.0F;
        } else {
            float defunc_0_f_res_33480 = ((__global
                                           float *) mem_42540)[gtid_33245];
            float i32_res_33483 = sitofp_i32_f32(y_33477);
            float defunc_0_f_res_f_res_33484 = defunc_0_f_res_33480 /
                  i32_res_33483;
            
            defunc_0_f_res_33482 = defunc_0_f_res_f_res_33484;
        }
        
        bool cond_33485 = !defunc_0_f_res_33478;
        int32_t fst_breakzq_33486;
        
        if (cond_33485) {
            fst_breakzq_33486 = -1;
        } else {
            int32_t defunc_0_f_res_33479 = ((__global
                                             int32_t *) mem_42537)[gtid_33245];
            bool cond_33487 = slt32(defunc_0_f_res_33479, y_33477);
            int32_t adjustValInds_res_33488;
            
            if (cond_33487) {
                int32_t i_33489 = add32(x_33475, defunc_0_f_res_33479);
                int64_t i_33490 = sext_i32_i64(i_33489);
                bool x_33491 = sle64((int64_t) 0, i_33490);
                bool y_33492 = slt64(i_33490, N_28169);
                bool bounds_check_33493 = x_33491 && y_33492;
                bool index_certs_33494;
                
                if (!bounds_check_33493) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 77) ==
                            -1) {
                            global_failure_args[0] = i_33490;
                            global_failure_args[1] = N_28169;
                            ;
                        }
                        return;
                    }
                }
                
                int32_t x_33495 = ((__global
                                    int32_t *) defunc_4_map_res_mem_42267)[gtid_33245 *
                                                                           N_28169 +
                                                                           i_33490];
                int32_t adjustValInds_res_t_res_33496 = sub32(x_33495, n_28173);
                
                adjustValInds_res_33488 = adjustValInds_res_t_res_33496;
            } else {
                adjustValInds_res_33488 = -1;
            }
            fst_breakzq_33486 = adjustValInds_res_33488;
        }
        
        bool cond_33497 = sle32(x_33475, 5);
        bool cond_f_res_33498 = sle32(y_33477, 5);
        bool x_33499 = !cond_33497;
        bool y_33500 = cond_f_res_33498 && x_33499;
        bool cond_33501 = cond_33497 || y_33500;
        int32_t fst_breakzq_33502;
        
        if (cond_33501) {
            fst_breakzq_33502 = -2;
        } else {
            fst_breakzq_33502 = fst_breakzq_33486;
        }
        ((__global int32_t *) mem_42548)[gtid_33245] = fst_breakzq_33502;
        ((__global float *) mem_42551)[gtid_33245] = defunc_0_f_res_33482;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_33471
}
__kernel void mainDetailedzisegmap_33322(__global int *global_failure,
                                         int64_t m_28170, __global
                                         unsigned char *defunc_3_map_res_mem_42345,
                                         __global
                                         unsigned char *defunc_3_map_res_mem_42346,
                                         __global unsigned char *mem_42531)
{
    #define segmap_group_sizze_33423 (mainDetailedzisegmap_group_sizze_33324)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_44103;
    int32_t local_tid_44104;
    int64_t group_sizze_44107;
    int32_t wave_sizze_44106;
    int32_t group_tid_44105;
    
    global_tid_44103 = get_global_id(0);
    local_tid_44104 = get_local_id(0);
    group_sizze_44107 = get_local_size(0);
    wave_sizze_44106 = LOCKSTEP_WIDTH;
    group_tid_44105 = get_group_id(0);
    
    int32_t phys_tid_33322 = global_tid_44103;
    int64_t global_tid_44108 = sext_i32_i64(group_tid_44105) *
            segmap_group_sizze_33423 + sext_i32_i64(local_tid_44104);
    int64_t slice_44109 = m_28170;
    int64_t gtid_33321 = global_tid_44108;
    int64_t remnant_44110 = global_tid_44108 - gtid_33321;
    
    if (slt64(gtid_33321, m_28170)) {
        int32_t x_33426 = ((__global
                            int32_t *) defunc_3_map_res_mem_42345)[gtid_33321];
        float x_33427 = ((__global
                          float *) defunc_3_map_res_mem_42346)[gtid_33321];
        float i32_res_33428 = sitofp_i32_f32(x_33426);
        float sqrt_res_33429;
        
        sqrt_res_33429 = futrts_sqrt32(i32_res_33428);
        
        float y_33430 = x_33427 * sqrt_res_33429;
        
        ((__global float *) mem_42531)[gtid_33321] = y_33430;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_33423
}
__kernel void mainDetailedzisegmap_33372(__global int *global_failure,
                                         int64_t m_28170, __global
                                         unsigned char *defunc_4_map_res_mem_42265,
                                         __global
                                         unsigned char *defunc_3_map_res_mem_42345,
                                         __global unsigned char *mem_42522)
{
    #define segmap_group_sizze_33381 (mainDetailedzisegmap_group_sizze_33374)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_44039;
    int32_t local_tid_44040;
    int64_t group_sizze_44043;
    int32_t wave_sizze_44042;
    int32_t group_tid_44041;
    
    global_tid_44039 = get_global_id(0);
    local_tid_44040 = get_local_id(0);
    group_sizze_44043 = get_local_size(0);
    wave_sizze_44042 = LOCKSTEP_WIDTH;
    group_tid_44041 = get_group_id(0);
    
    int32_t phys_tid_33372 = global_tid_44039;
    int64_t global_tid_44044 = sext_i32_i64(group_tid_44041) *
            segmap_group_sizze_33381 + sext_i32_i64(local_tid_44040);
    int64_t slice_44045 = m_28170;
    int64_t gtid_33371 = global_tid_44044;
    int64_t remnant_44046 = global_tid_44044 - gtid_33371;
    
    if (slt64(gtid_33371, m_28170)) {
        int32_t x_33384 = ((__global
                            int32_t *) defunc_4_map_res_mem_42265)[gtid_33371];
        int32_t x_33385 = ((__global
                            int32_t *) defunc_3_map_res_mem_42345)[gtid_33371];
        int32_t y_33386 = sub32(x_33384, x_33385);
        
        ((__global int32_t *) mem_42522)[gtid_33371] = y_33386;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_33381
}
__kernel void mainDetailedzisegmap_intragroup_30816(__global
                                                    int *global_failure,
                                                    int failure_is_an_option,
                                                    __global
                                                    int64_t *global_failure_args,
                                                    __local volatile
                                                    int64_t *color_42667_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *color_42666_backing_aligned_1,
                                                    int64_t m_28170,
                                                    int32_t k2p2zq_28183,
                                                    int64_t i32_res_28185,
                                                    int32_t m_28313,
                                                    int64_t nm_28315,
                                                    int64_t i32_res_28330,
                                                    __global
                                                    unsigned char *defunc_3_map_res_mem_41600,
                                                    __global
                                                    unsigned char *mem_41627)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict color_42667_backing_1 = (__local volatile
                                                             char *) color_42667_backing_aligned_0;
    __local volatile char *restrict color_42666_backing_0 = (__local volatile
                                                             char *) color_42666_backing_aligned_1;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43069;
    int32_t local_tid_43070;
    int64_t group_sizze_43073;
    int32_t wave_sizze_43072;
    int32_t group_tid_43071;
    
    global_tid_43069 = get_global_id(0);
    local_tid_43070 = get_local_id(0);
    group_sizze_43073 = get_local_size(0);
    wave_sizze_43072 = LOCKSTEP_WIDTH;
    group_tid_43071 = get_group_id(0);
    
    int32_t phys_tid_30816 = group_tid_43071;
    int32_t ltid_pre_43074 = local_tid_43070;
    int64_t slice_43075 = m_28170;
    int64_t gtid_30746 = sext_i32_i64(group_tid_43071);
    int64_t remnant_43076 = sext_i32_i64(group_tid_43071) - gtid_30746;
    __local char *color_42666;
    
    color_42666 = (__local char *) color_42666_backing_0;
    
    __local char *color_42667;
    
    color_42667 = (__local char *) color_42667_backing_1;
    
    int64_t gtid_30749 = sext_i32_i64(ltid_pre_43074);
    int32_t phys_tid_30750 = local_tid_43070;
    int32_t index_primexp_39405 = sext_i64_i32(gtid_30749);
    int32_t defunc_0_f_res_30827 = sdiv32(index_primexp_39405, m_28313);
    int32_t defunc_0_f_res_30828 = smod32(index_primexp_39405, m_28313);
    bool cond_30829 = slt32(defunc_0_f_res_30828, k2p2zq_28183);
    float defunc_0_f_res_30830;
    
    if (cond_30829) {
        int64_t i_30831 = sext_i32_i64(defunc_0_f_res_30827);
        bool x_30832 = sle64((int64_t) 0, i_30831);
        bool y_30833 = slt64(i_30831, i32_res_28185);
        bool bounds_check_30834 = x_30832 && y_30833;
        int64_t j_30835 = sext_i32_i64(defunc_0_f_res_30828);
        bool x_30836 = sle64((int64_t) 0, j_30835);
        bool y_30837 = slt64(j_30835, i32_res_28185);
        bool bounds_check_30838 = x_30836 && y_30837;
        bool index_ok_30839 = bounds_check_30834 && bounds_check_30838;
        bool index_certs_30840;
        
        if (!index_ok_30839) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 31) == -1) {
                    global_failure_args[0] = i_30831;
                    global_failure_args[1] = j_30835;
                    global_failure_args[2] = i32_res_28185;
                    global_failure_args[3] = i32_res_28185;
                    ;
                }
                local_failure = true;
                goto error_0;
            }
        }
        
        float defunc_0_f_res_t_res_30841 = ((__global
                                             float *) defunc_3_map_res_mem_41600)[gtid_30746 *
                                                                                  (i32_res_28185 *
                                                                                   i32_res_28185) +
                                                                                  i_30831 *
                                                                                  i32_res_28185 +
                                                                                  j_30835];
        
        defunc_0_f_res_30830 = defunc_0_f_res_t_res_30841;
    } else {
        int32_t y_30842 = add32(k2p2zq_28183, defunc_0_f_res_30827);
        bool cond_30843 = defunc_0_f_res_30828 == y_30842;
        float defunc_0_f_res_f_res_30844;
        
        if (cond_30843) {
            defunc_0_f_res_f_res_30844 = 1.0F;
        } else {
            defunc_0_f_res_f_res_30844 = 0.0F;
        }
        defunc_0_f_res_30830 = defunc_0_f_res_f_res_30844;
    }
    ((__local float *) color_42667)[gtid_30749] = defunc_0_f_res_30830;
    
  error_0:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int32_t i_30846 = 0; i_30846 < k2p2zq_28183; i_30846++) {
        int64_t i32_res_30848 = sext_i32_i64(i_30846);
        bool x_30849 = sle64((int64_t) 0, i32_res_30848);
        bool y_30850 = slt64(i32_res_30848, nm_28315);
        bool bounds_check_30851 = x_30849 && y_30850;
        bool index_certs_30852;
        
        if (!bounds_check_30851) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 32) == -1) {
                    global_failure_args[0] = i32_res_30848;
                    global_failure_args[1] = nm_28315;
                    ;
                }
                local_failure = true;
                goto error_1;
            }
        }
        
        float v1_30853 = ((__local float *) color_42667)[i32_res_30848];
        bool cond_30854 = v1_30853 == 0.0F;
        int64_t gtid_30770 = sext_i32_i64(ltid_pre_43074);
        int32_t phys_tid_30771 = local_tid_43070;
        int32_t defunc_0_f_res_30857 = sext_i64_i32(gtid_30770);
        int32_t defunc_0_f_res_30858 = sdiv32(defunc_0_f_res_30857, m_28313);
        int32_t defunc_0_f_res_30859 = smod32(defunc_0_f_res_30857, m_28313);
        float defunc_0_f_res_30860;
        
        if (cond_30854) {
            int32_t x_30861 = mul32(m_28313, defunc_0_f_res_30858);
            int32_t i32_arg_30862 = add32(defunc_0_f_res_30859, x_30861);
            int64_t i32_res_30863 = sext_i32_i64(i32_arg_30862);
            bool x_30864 = sle64((int64_t) 0, i32_res_30863);
            bool y_30865 = slt64(i32_res_30863, nm_28315);
            bool bounds_check_30866 = x_30864 && y_30865;
            bool index_certs_30867;
            
            if (!bounds_check_30866) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 33) ==
                        -1) {
                        global_failure_args[0] = i32_res_30863;
                        global_failure_args[1] = nm_28315;
                        ;
                    }
                    local_failure = true;
                    goto error_1;
                }
            }
            
            float defunc_0_f_res_t_res_30868 = ((__local
                                                 float *) color_42667)[i32_res_30863];
            
            defunc_0_f_res_30860 = defunc_0_f_res_t_res_30868;
        } else {
            int64_t i32_res_30869 = sext_i32_i64(defunc_0_f_res_30859);
            bool x_30870 = sle64((int64_t) 0, i32_res_30869);
            bool y_30871 = slt64(i32_res_30869, nm_28315);
            bool bounds_check_30872 = x_30870 && y_30871;
            bool index_certs_30873;
            
            if (!bounds_check_30872) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 34) ==
                        -1) {
                        global_failure_args[0] = i32_res_30869;
                        global_failure_args[1] = nm_28315;
                        ;
                    }
                    local_failure = true;
                    goto error_1;
                }
            }
            
            float x_30874 = ((__local float *) color_42667)[i32_res_30869];
            float x_30875 = x_30874 / v1_30853;
            int32_t y_30876 = sub32(k2p2zq_28183, 1);
            bool cond_30877 = slt32(defunc_0_f_res_30858, y_30876);
            float defunc_0_f_res_f_res_30878;
            
            if (cond_30877) {
                int32_t x_30879 = add32(1, defunc_0_f_res_30858);
                int32_t x_30880 = mul32(m_28313, x_30879);
                int32_t i32_arg_30881 = add32(defunc_0_f_res_30859, x_30880);
                int64_t i32_res_30882 = sext_i32_i64(i32_arg_30881);
                bool x_30883 = sle64((int64_t) 0, i32_res_30882);
                bool y_30884 = slt64(i32_res_30882, nm_28315);
                bool bounds_check_30885 = x_30883 && y_30884;
                bool index_certs_30886;
                
                if (!bounds_check_30885) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 35) ==
                            -1) {
                            global_failure_args[0] = i32_res_30882;
                            global_failure_args[1] = nm_28315;
                            ;
                        }
                        local_failure = true;
                        goto error_1;
                    }
                }
                
                float x_30887 = ((__local float *) color_42667)[i32_res_30882];
                int32_t i32_arg_30888 = add32(i_30846, x_30880);
                int64_t i32_res_30889 = sext_i32_i64(i32_arg_30888);
                bool x_30890 = sle64((int64_t) 0, i32_res_30889);
                bool y_30891 = slt64(i32_res_30889, nm_28315);
                bool bounds_check_30892 = x_30890 && y_30891;
                bool index_certs_30893;
                
                if (!bounds_check_30892) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 36) ==
                            -1) {
                            global_failure_args[0] = i32_res_30889;
                            global_failure_args[1] = nm_28315;
                            ;
                        }
                        local_failure = true;
                        goto error_1;
                    }
                }
                
                float x_30894 = ((__local float *) color_42667)[i32_res_30889];
                float y_30895 = x_30875 * x_30894;
                float defunc_0_f_res_f_res_t_res_30896 = x_30887 - y_30895;
                
                defunc_0_f_res_f_res_30878 = defunc_0_f_res_f_res_t_res_30896;
            } else {
                defunc_0_f_res_f_res_30878 = x_30875;
            }
            defunc_0_f_res_30860 = defunc_0_f_res_f_res_30878;
        }
        ((__local float *) color_42666)[gtid_30770] = defunc_0_f_res_30860;
        
      error_1:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t write_i_30813 = sext_i32_i64(ltid_pre_43074);
        int32_t phys_tid_30814 = local_tid_43070;
        float write_value_30899 = ((__local
                                    float *) color_42666)[write_i_30813];
        
        if (sle64((int64_t) 0, write_i_30813) && slt64(write_i_30813,
                                                       nm_28315)) {
            ((__local float *) color_42667)[write_i_30813] = write_value_30899;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    for (int64_t i_43078 = 0; i_43078 < sdiv_up64(i32_res_28185 *
                                                  i32_res_28185 -
                                                  sext_i32_i64(local_tid_43070),
                                                  nm_28315); i_43078++) {
        ((__global float *) mem_41627)[gtid_30746 * (i32_res_28185 *
                                                     i32_res_28185) +
                                       squot64(i_43078 * nm_28315 +
                                               sext_i32_i64(local_tid_43070),
                                               i32_res_28185) * i32_res_28185 +
                                       (i_43078 * nm_28315 +
                                        sext_i32_i64(local_tid_43070) -
                                        squot64(i_43078 * nm_28315 +
                                                sext_i32_i64(local_tid_43070),
                                                i32_res_28185) *
                                        i32_res_28185)] = ((__local
                                                            float *) color_42667)[i32_res_28185 +
                                                                                  (squot64(i_43078 *
                                                                                           nm_28315 +
                                                                                           sext_i32_i64(local_tid_43070),
                                                                                           i32_res_28185) *
                                                                                   i32_res_28330 +
                                                                                   (i_43078 *
                                                                                    nm_28315 +
                                                                                    sext_i32_i64(local_tid_43070) -
                                                                                    squot64(i_43078 *
                                                                                            nm_28315 +
                                                                                            sext_i32_i64(local_tid_43070),
                                                                                            i32_res_28185) *
                                                                                    i32_res_28185))];
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_3:
    return;
}
__kernel void mainDetailedzisegmap_intragroup_30970(__global
                                                    int *global_failure,
                                                    int failure_is_an_option,
                                                    __global
                                                    int64_t *global_failure_args,
                                                    __local volatile
                                                    int64_t *color_42669_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *color_42668_backing_aligned_1,
                                                    int64_t m_28170,
                                                    int32_t k2p2zq_28183,
                                                    int32_t m_28313,
                                                    int64_t nm_28315,
                                                    int32_t i_31319,
                                                    int64_t i32_res_31321,
                                                    int64_t ctx_param_ext_41635,
                                                    int64_t ctx_param_ext_41636,
                                                    int64_t ctx_param_ext_41638,
                                                    __global
                                                    unsigned char *mem_param_41640,
                                                    __global
                                                    unsigned char *mem_41655)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict color_42669_backing_1 = (__local volatile
                                                             char *) color_42669_backing_aligned_0;
    __local volatile char *restrict color_42668_backing_0 = (__local volatile
                                                             char *) color_42668_backing_aligned_1;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43105;
    int32_t local_tid_43106;
    int64_t group_sizze_43109;
    int32_t wave_sizze_43108;
    int32_t group_tid_43107;
    
    global_tid_43105 = get_global_id(0);
    local_tid_43106 = get_local_id(0);
    group_sizze_43109 = get_local_size(0);
    wave_sizze_43108 = LOCKSTEP_WIDTH;
    group_tid_43107 = get_group_id(0);
    
    int32_t phys_tid_30970 = group_tid_43107;
    int32_t ltid_pre_43110 = local_tid_43106;
    int64_t slice_43111 = m_28170;
    int64_t gtid_30921 = sext_i32_i64(group_tid_43107);
    int64_t remnant_43112 = sext_i32_i64(group_tid_43107) - gtid_30921;
    __local char *color_42668;
    
    color_42668 = (__local char *) color_42668_backing_0;
    
    __local char *color_42669;
    
    color_42669 = (__local char *) color_42669_backing_1;
    ((__local float *) color_42669)[sext_i32_i64(local_tid_43106)] = ((__global
                                                                       float *) mem_param_41640)[ctx_param_ext_41635 +
                                                                                                 gtid_30921 *
                                                                                                 ctx_param_ext_41636 +
                                                                                                 sext_i32_i64(local_tid_43106) *
                                                                                                 ctx_param_ext_41638];
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float v1_31337 = ((__global float *) mem_param_41640)[ctx_param_ext_41635 +
                                                          (gtid_30921 *
                                                           ctx_param_ext_41636 +
                                                           i32_res_31321 *
                                                           ctx_param_ext_41638)];
    bool cond_31338 = v1_31337 == 0.0F;
    int64_t gtid_30924 = sext_i32_i64(ltid_pre_43110);
    int32_t phys_tid_30925 = local_tid_43106;
    int32_t defunc_0_f_res_31341 = sext_i64_i32(gtid_30924);
    int32_t defunc_0_f_res_31342 = sdiv32(defunc_0_f_res_31341, m_28313);
    int32_t defunc_0_f_res_31343 = smod32(defunc_0_f_res_31341, m_28313);
    float defunc_0_f_res_31344;
    
    if (cond_31338) {
        int32_t x_31345 = mul32(m_28313, defunc_0_f_res_31342);
        int32_t i32_arg_31346 = add32(defunc_0_f_res_31343, x_31345);
        int64_t i32_res_31347 = sext_i32_i64(i32_arg_31346);
        bool x_31348 = sle64((int64_t) 0, i32_res_31347);
        bool y_31349 = slt64(i32_res_31347, nm_28315);
        bool bounds_check_31350 = x_31348 && y_31349;
        bool index_certs_31351;
        
        if (!bounds_check_31350) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 38) == -1) {
                    global_failure_args[0] = i32_res_31347;
                    global_failure_args[1] = nm_28315;
                    ;
                }
                local_failure = true;
                goto error_0;
            }
        }
        
        float defunc_0_f_res_t_res_31352 = ((__local
                                             float *) color_42669)[i32_res_31347];
        
        defunc_0_f_res_31344 = defunc_0_f_res_t_res_31352;
    } else {
        int64_t i32_res_31353 = sext_i32_i64(defunc_0_f_res_31343);
        bool x_31354 = sle64((int64_t) 0, i32_res_31353);
        bool y_31355 = slt64(i32_res_31353, nm_28315);
        bool bounds_check_31356 = x_31354 && y_31355;
        bool index_certs_31357;
        
        if (!bounds_check_31356) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 39) == -1) {
                    global_failure_args[0] = i32_res_31353;
                    global_failure_args[1] = nm_28315;
                    ;
                }
                local_failure = true;
                goto error_0;
            }
        }
        
        float x_31358 = ((__global
                          float *) mem_param_41640)[ctx_param_ext_41635 +
                                                    (gtid_30921 *
                                                     ctx_param_ext_41636 +
                                                     i32_res_31353 *
                                                     ctx_param_ext_41638)];
        float x_31359 = x_31358 / v1_31337;
        int32_t y_31360 = sub32(k2p2zq_28183, 1);
        bool cond_31361 = slt32(defunc_0_f_res_31342, y_31360);
        float defunc_0_f_res_f_res_31362;
        
        if (cond_31361) {
            int32_t x_31363 = add32(1, defunc_0_f_res_31342);
            int32_t x_31364 = mul32(m_28313, x_31363);
            int32_t i32_arg_31365 = add32(defunc_0_f_res_31343, x_31364);
            int64_t i32_res_31366 = sext_i32_i64(i32_arg_31365);
            bool x_31367 = sle64((int64_t) 0, i32_res_31366);
            bool y_31368 = slt64(i32_res_31366, nm_28315);
            bool bounds_check_31369 = x_31367 && y_31368;
            bool index_certs_31370;
            
            if (!bounds_check_31369) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 40) ==
                        -1) {
                        global_failure_args[0] = i32_res_31366;
                        global_failure_args[1] = nm_28315;
                        ;
                    }
                    local_failure = true;
                    goto error_0;
                }
            }
            
            float x_31371 = ((__global
                              float *) mem_param_41640)[ctx_param_ext_41635 +
                                                        (gtid_30921 *
                                                         ctx_param_ext_41636 +
                                                         i32_res_31366 *
                                                         ctx_param_ext_41638)];
            int32_t i32_arg_31372 = add32(i_31319, x_31364);
            int64_t i32_res_31373 = sext_i32_i64(i32_arg_31372);
            bool x_31374 = sle64((int64_t) 0, i32_res_31373);
            bool y_31375 = slt64(i32_res_31373, nm_28315);
            bool bounds_check_31376 = x_31374 && y_31375;
            bool index_certs_31377;
            
            if (!bounds_check_31376) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 41) ==
                        -1) {
                        global_failure_args[0] = i32_res_31373;
                        global_failure_args[1] = nm_28315;
                        ;
                    }
                    local_failure = true;
                    goto error_0;
                }
            }
            
            float x_31378 = ((__global
                              float *) mem_param_41640)[ctx_param_ext_41635 +
                                                        (gtid_30921 *
                                                         ctx_param_ext_41636 +
                                                         i32_res_31373 *
                                                         ctx_param_ext_41638)];
            float y_31379 = x_31359 * x_31378;
            float defunc_0_f_res_f_res_t_res_31380 = x_31371 - y_31379;
            
            defunc_0_f_res_f_res_31362 = defunc_0_f_res_f_res_t_res_31380;
        } else {
            defunc_0_f_res_f_res_31362 = x_31359;
        }
        defunc_0_f_res_31344 = defunc_0_f_res_f_res_31362;
    }
    ((__local float *) color_42668)[gtid_30924] = defunc_0_f_res_31344;
    
  error_0:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t write_i_30967 = sext_i32_i64(ltid_pre_43110);
    int32_t phys_tid_30968 = local_tid_43106;
    float write_value_31383 = ((__local float *) color_42668)[write_i_30967];
    
    if (sle64((int64_t) 0, write_i_30967) && slt64(write_i_30967, nm_28315)) {
        ((__local float *) color_42669)[write_i_30967] = write_value_31383;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    ((__global float *) mem_41655)[gtid_30921 * nm_28315 +
                                   sext_i32_i64(local_tid_43106)] = ((__local
                                                                      float *) color_42669)[sext_i32_i64(local_tid_43106)];
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_2:
    return;
}
__kernel void mainDetailedzisegmap_intragroup_31888(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *color_42704_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *color_42703_backing_aligned_1,
                                                    __local volatile
                                                    int64_t *color_42702_backing_aligned_2,
                                                    __local volatile
                                                    int64_t *color_42701_backing_aligned_3,
                                                    int64_t N_28169,
                                                    int64_t m_28170,
                                                    int64_t i_28472, __global
                                                    unsigned char *images_mem_41421,
                                                    __global
                                                    unsigned char *defunc_3_map_res_mem_42216,
                                                    __global
                                                    unsigned char *mem_42234,
                                                    __global
                                                    unsigned char *mem_42238,
                                                    __global
                                                    unsigned char *mem_42242)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict color_42704_backing_3 = (__local volatile
                                                             char *) color_42704_backing_aligned_0;
    __local volatile char *restrict color_42703_backing_2 = (__local volatile
                                                             char *) color_42703_backing_aligned_1;
    __local volatile char *restrict color_42702_backing_1 = (__local volatile
                                                             char *) color_42702_backing_aligned_2;
    __local volatile char *restrict color_42701_backing_0 = (__local volatile
                                                             char *) color_42701_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43553;
    int32_t local_tid_43554;
    int64_t group_sizze_43557;
    int32_t wave_sizze_43556;
    int32_t group_tid_43555;
    
    global_tid_43553 = get_global_id(0);
    local_tid_43554 = get_local_id(0);
    group_sizze_43557 = get_local_size(0);
    wave_sizze_43556 = LOCKSTEP_WIDTH;
    group_tid_43555 = get_group_id(0);
    
    int32_t phys_tid_31888 = group_tid_43555;
    int32_t ltid_pre_43558 = local_tid_43554;
    int64_t slice_43559 = m_28170;
    int64_t gtid_31879 = sext_i32_i64(group_tid_43555);
    int64_t remnant_43560 = sext_i32_i64(group_tid_43555) - gtid_31879;
    __local char *color_42701;
    
    color_42701 = (__local char *) color_42701_backing_0;
    
    __local char *color_42702;
    
    color_42702 = (__local char *) color_42702_backing_1;
    
    __local char *color_42703;
    
    color_42703 = (__local char *) color_42703_backing_2;
    
    __local char *color_42704;
    
    color_42704 = (__local char *) color_42704_backing_3;
    
    int64_t gtid_31882 = sext_i32_i64(ltid_pre_43558);
    int32_t phys_tid_31883 = local_tid_43554;
    float x_31906 = ((__global float *) images_mem_41421)[gtid_31879 * N_28169 +
                                                          gtid_31882];
    bool isnan_res_31908;
    
    isnan_res_31908 = futrts_isnan32(x_31906);
    
    bool cond_31909 = !isnan_res_31908;
    float defunc_1_f_res_31910;
    
    if (cond_31909) {
        float x_31907 = ((__global
                          float *) defunc_3_map_res_mem_42216)[gtid_31879 *
                                                               N_28169 +
                                                               gtid_31882];
        float defunc_1_f_res_t_res_31911 = x_31906 - x_31907;
        
        defunc_1_f_res_31910 = defunc_1_f_res_t_res_31911;
    } else {
        defunc_1_f_res_31910 = NAN;
    }
    
    bool isnan_res_31912;
    
    isnan_res_31912 = futrts_isnan32(defunc_1_f_res_31910);
    
    bool defunc_0_p_res_31913 = !isnan_res_31912;
    int64_t defunc_0_f_res_31914 = btoi_bool_i64(defunc_0_p_res_31913);
    
    ((__local int64_t *) color_42704)[gtid_31882] = defunc_0_f_res_31914;
    ((__local float *) color_42703)[gtid_31882] = defunc_1_f_res_31910;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t dims_flat_43561 = N_28169;
    int64_t x_31903;
    int64_t x_31904;
    int64_t x_43563;
    int64_t x_43564;
    bool ltid_in_bounds_43566 = slt64(sext_i32_i64(local_tid_43554), N_28169);
    int32_t skip_threads_43567;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_43566) {
            x_31904 = ((volatile __local
                        int64_t *) color_42704)[sext_i32_i64(local_tid_43554)];
            if ((local_tid_43554 - squot32(local_tid_43554, 32) * 32) == 0) {
                x_31903 = x_31904;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_43567 = 1;
        while (slt32(skip_threads_43567, 32)) {
            if (sle32(skip_threads_43567, local_tid_43554 -
                      squot32(local_tid_43554, 32) * 32) &&
                ltid_in_bounds_43566) {
                // read operands
                {
                    x_31903 = ((volatile __local
                                int64_t *) color_42704)[sext_i32_i64(local_tid_43554) -
                                                        sext_i32_i64(skip_threads_43567)];
                }
                // perform operation
                {
                    bool inactive_43568 =
                         slt64(srem64(sext_i32_i64(local_tid_43554), N_28169),
                               sext_i32_i64(local_tid_43554) -
                               sext_i32_i64(local_tid_43554 -
                               skip_threads_43567));
                    
                    if (inactive_43568) {
                        x_31903 = x_31904;
                    }
                    if (!inactive_43568) {
                        int64_t defunc_1_op_res_31905 = add64(x_31903, x_31904);
                        
                        x_31903 = defunc_1_op_res_31905;
                    }
                }
            }
            if (sle32(wave_sizze_43556, skip_threads_43567)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_43567, local_tid_43554 -
                      squot32(local_tid_43554, 32) * 32) &&
                ltid_in_bounds_43566) {
                // write result
                {
                    ((volatile __local
                      int64_t *) color_42704)[sext_i32_i64(local_tid_43554)] =
                        x_31903;
                    x_31904 = x_31903;
                }
            }
            if (sle32(wave_sizze_43556, skip_threads_43567)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_43567 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_43554 - squot32(local_tid_43554, 32) * 32) == 31 &&
            ltid_in_bounds_43566) {
            ((volatile __local
              int64_t *) color_42704)[sext_i32_i64(squot32(local_tid_43554,
                                                           32))] = x_31903;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_43569;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_43554, 32) == 0 && ltid_in_bounds_43566) {
                x_43564 = ((volatile __local
                            int64_t *) color_42704)[sext_i32_i64(local_tid_43554)];
                if ((local_tid_43554 - squot32(local_tid_43554, 32) * 32) ==
                    0) {
                    x_43563 = x_43564;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_43569 = 1;
            while (slt32(skip_threads_43569, 32)) {
                if (sle32(skip_threads_43569, local_tid_43554 -
                          squot32(local_tid_43554, 32) * 32) &&
                    (squot32(local_tid_43554, 32) == 0 &&
                     ltid_in_bounds_43566)) {
                    // read operands
                    {
                        x_43563 = ((volatile __local
                                    int64_t *) color_42704)[sext_i32_i64(local_tid_43554) -
                                                            sext_i32_i64(skip_threads_43569)];
                    }
                    // perform operation
                    {
                        bool inactive_43570 =
                             slt64(srem64(sext_i32_i64(local_tid_43554 * 32 +
                                          32 - 1), N_28169),
                                   sext_i32_i64(local_tid_43554 * 32 + 32 - 1) -
                                   sext_i32_i64((local_tid_43554 -
                                                 skip_threads_43569) * 32 + 32 -
                                   1));
                        
                        if (inactive_43570) {
                            x_43563 = x_43564;
                        }
                        if (!inactive_43570) {
                            int64_t defunc_1_op_res_43565 = add64(x_43563,
                                                                  x_43564);
                            
                            x_43563 = defunc_1_op_res_43565;
                        }
                    }
                }
                if (sle32(wave_sizze_43556, skip_threads_43569)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_43569, local_tid_43554 -
                          squot32(local_tid_43554, 32) * 32) &&
                    (squot32(local_tid_43554, 32) == 0 &&
                     ltid_in_bounds_43566)) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) color_42704)[sext_i32_i64(local_tid_43554)] =
                            x_43563;
                        x_43564 = x_43563;
                    }
                }
                if (sle32(wave_sizze_43556, skip_threads_43569)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_43569 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_43554, 32) == 0 || !ltid_in_bounds_43566)) {
            // read operands
            {
                x_31904 = x_31903;
                x_31903 = ((__local
                            int64_t *) color_42704)[sext_i32_i64(squot32(local_tid_43554,
                                                                         32)) -
                                                    (int64_t) 1];
            }
            // perform operation
            {
                bool inactive_43571 =
                     slt64(srem64(sext_i32_i64(local_tid_43554), N_28169),
                           sext_i32_i64(local_tid_43554) -
                           sext_i32_i64(squot32(local_tid_43554, 32) * 32 - 1));
                
                if (inactive_43571) {
                    x_31903 = x_31904;
                }
                if (!inactive_43571) {
                    int64_t defunc_1_op_res_31905 = add64(x_31903, x_31904);
                    
                    x_31903 = defunc_1_op_res_31905;
                }
            }
            // write final result
            {
                ((__local
                  int64_t *) color_42704)[sext_i32_i64(local_tid_43554)] =
                    x_31903;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_43554, 32) == 0) {
            ((__local int64_t *) color_42704)[sext_i32_i64(local_tid_43554)] =
                x_31904;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t last_res_31915 = ((__local int64_t *) color_42704)[i_28472];
    int32_t defunc_0_f_res_31916 = sext_i64_i32(last_res_31915);
    
    ((__local float *) color_42702)[sext_i32_i64(local_tid_43554)] = NAN;
    barrier(CLK_LOCAL_MEM_FENCE);
    ((__local int32_t *) color_42701)[sext_i32_i64(local_tid_43554)] = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t write_i_31884 = sext_i32_i64(ltid_pre_43558);
    int32_t phys_tid_31885 = local_tid_43554;
    float x_31921 = ((__local float *) color_42703)[write_i_31884];
    int32_t index_primexp_39425 = sext_i64_i32(write_i_31884);
    bool isnan_res_31924;
    
    isnan_res_31924 = futrts_isnan32(x_31921);
    
    bool defunc_0_p_res_31925 = !isnan_res_31924;
    int64_t defunc_1_f_res_31926;
    
    if (defunc_0_p_res_31925) {
        int64_t x_31922 = ((__local int64_t *) color_42704)[write_i_31884];
        int64_t defunc_1_f_res_t_res_31927 = sub64(x_31922, (int64_t) 1);
        
        defunc_1_f_res_31926 = defunc_1_f_res_t_res_31927;
    } else {
        defunc_1_f_res_31926 = (int64_t) -1;
    }
    if (sle64((int64_t) 0, defunc_1_f_res_31926) && slt64(defunc_1_f_res_31926,
                                                          N_28169)) {
        ((__local int32_t *) color_42701)[defunc_1_f_res_31926] =
            index_primexp_39425;
    }
    if (sle64((int64_t) 0, defunc_1_f_res_31926) && slt64(defunc_1_f_res_31926,
                                                          N_28169)) {
        ((__local float *) color_42702)[defunc_1_f_res_31926] = x_31921;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_tid_43554 == 0) {
        ((__global int32_t *) mem_42234)[gtid_31879] = defunc_0_f_res_31916;
    }
    ((__global float *) mem_42238)[gtid_31879 * N_28169 +
                                   sext_i32_i64(local_tid_43554)] = ((__local
                                                                      float *) color_42702)[sext_i32_i64(local_tid_43554)];
    barrier(CLK_LOCAL_MEM_FENCE);
    ((__global int32_t *) mem_42242)[gtid_31879 * N_28169 +
                                     sext_i32_i64(local_tid_43554)] = ((__local
                                                                        int32_t *) color_42701)[sext_i32_i64(local_tid_43554)];
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_2:
    return;
}
__kernel void mainDetailedzisegmap_intragroup_32117(__global
                                                    int *global_failure,
                                                    int failure_is_an_option,
                                                    __global
                                                    int64_t *global_failure_args,
                                                    __local volatile
                                                    int64_t *red_arr_mem_43692_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *red_arr_mem_43688_backing_aligned_1,
                                                    int64_t N_28169,
                                                    int64_t m_28170,
                                                    float hfrac_28175,
                                                    int64_t i32_res_28179,
                                                    int32_t k2p2_28181, __global
                                                    unsigned char *images_mem_41421,
                                                    __global
                                                    unsigned char *defunc_4_map_res_mem_42266,
                                                    __global
                                                    unsigned char *mem_42319,
                                                    __global
                                                    unsigned char *mem_42322,
                                                    __global
                                                    unsigned char *mem_42325)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_43692_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_43692_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_43688_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43688_backing_aligned_1;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43680;
    int32_t local_tid_43681;
    int64_t group_sizze_43684;
    int32_t wave_sizze_43683;
    int32_t group_tid_43682;
    
    global_tid_43680 = get_global_id(0);
    local_tid_43681 = get_local_id(0);
    group_sizze_43684 = get_local_size(0);
    wave_sizze_43683 = LOCKSTEP_WIDTH;
    group_tid_43682 = get_group_id(0);
    
    int32_t phys_tid_32117 = group_tid_43682;
    int32_t ltid_pre_43685 = local_tid_43681;
    int64_t slice_43686 = m_28170;
    int64_t gtid_32108 = sext_i32_i64(group_tid_43682);
    int64_t remnant_43687 = sext_i32_i64(group_tid_43682) - gtid_32108;
    int32_t defunc_0_f_res_32206;
    int64_t gtid_32111 = sext_i32_i64(ltid_pre_43685);
    int32_t phys_tid_32112 = local_tid_43681;
    __local char *red_arr_mem_43688;
    
    red_arr_mem_43688 = (__local char *) red_arr_mem_43688_backing_0;
    
    float x_32210 = ((__global float *) images_mem_41421)[gtid_32108 * N_28169 +
                                                          gtid_32111];
    bool isnan_res_32211;
    
    isnan_res_32211 = futrts_isnan32(x_32210);
    
    bool cond_32212 = !isnan_res_32211;
    int32_t defunc_0_f_res_32213 = btoi_bool_i32(cond_32212);
    
    ((__local int32_t *) red_arr_mem_43688)[gtid_32111] = defunc_0_f_res_32213;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_43690;
    int32_t skip_waves_43691 = 1;
    int32_t x_32207;
    int32_t x_32208;
    
    offset_43690 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_43681, sext_i64_i32(i32_res_28179))) {
            x_32207 = ((__local
                        int32_t *) red_arr_mem_43688)[sext_i32_i64(local_tid_43681 +
                                                      offset_43690)];
        }
    }
    offset_43690 = 1;
    while (slt32(offset_43690, wave_sizze_43683)) {
        if (slt32(local_tid_43681 + offset_43690,
                  sext_i64_i32(i32_res_28179)) && ((local_tid_43681 -
                                                    squot32(local_tid_43681,
                                                            wave_sizze_43683) *
                                                    wave_sizze_43683) & (2 *
                                                                         offset_43690 -
                                                                         1)) ==
            0) {
            // read array element
            {
                x_32208 = ((volatile __local
                            int32_t *) red_arr_mem_43688)[sext_i32_i64(local_tid_43681 +
                                                          offset_43690)];
            }
            // apply reduction operation
            {
                int32_t defunc_1_op_res_32209 = add32(x_32207, x_32208);
                
                x_32207 = defunc_1_op_res_32209;
            }
            // write result of operation
            {
                ((volatile __local
                  int32_t *) red_arr_mem_43688)[sext_i32_i64(local_tid_43681)] =
                    x_32207;
            }
        }
        offset_43690 *= 2;
    }
    while (slt32(skip_waves_43691, squot32(sext_i64_i32(i32_res_28179) +
                                           wave_sizze_43683 - 1,
                                           wave_sizze_43683))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_43690 = skip_waves_43691 * wave_sizze_43683;
        if (slt32(local_tid_43681 + offset_43690,
                  sext_i64_i32(i32_res_28179)) && ((local_tid_43681 -
                                                    squot32(local_tid_43681,
                                                            wave_sizze_43683) *
                                                    wave_sizze_43683) == 0 &&
                                                   (squot32(local_tid_43681,
                                                            wave_sizze_43683) &
                                                    (2 * skip_waves_43691 -
                                                     1)) == 0)) {
            // read array element
            {
                x_32208 = ((__local
                            int32_t *) red_arr_mem_43688)[sext_i32_i64(local_tid_43681 +
                                                          offset_43690)];
            }
            // apply reduction operation
            {
                int32_t defunc_1_op_res_32209 = add32(x_32207, x_32208);
                
                x_32207 = defunc_1_op_res_32209;
            }
            // write result of operation
            {
                ((__local
                  int32_t *) red_arr_mem_43688)[sext_i32_i64(local_tid_43681)] =
                    x_32207;
            }
        }
        skip_waves_43691 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    defunc_0_f_res_32206 = ((__local int32_t *) red_arr_mem_43688)[(int64_t) 0];
    
    float defunc_0_f_res_32214;
    int64_t gtid_32113 = sext_i32_i64(ltid_pre_43685);
    int32_t phys_tid_32114 = local_tid_43681;
    __local char *red_arr_mem_43692;
    
    red_arr_mem_43692 = (__local char *) red_arr_mem_43692_backing_1;
    
    int32_t index_primexp_39433 = sext_i64_i32(gtid_32113);
    bool cond_32219 = slt32(index_primexp_39433, defunc_0_f_res_32206);
    float defunc_0_f_res_32220;
    
    if (cond_32219) {
        int64_t i_32221 = sext_i32_i64(index_primexp_39433);
        bool x_32222 = sle64((int64_t) 0, i_32221);
        bool y_32223 = slt64(i_32221, N_28169);
        bool bounds_check_32224 = x_32222 && y_32223;
        bool index_certs_32225;
        
        if (!bounds_check_32224) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 48) == -1) {
                    global_failure_args[0] = i_32221;
                    global_failure_args[1] = N_28169;
                    ;
                }
                local_failure = true;
                goto error_2;
            }
        }
        
        float defunc_0_f_res_t_res_32226 = ((__global
                                             float *) defunc_4_map_res_mem_42266)[gtid_32108 *
                                                                                  N_28169 +
                                                                                  i_32221];
        
        defunc_0_f_res_32220 = defunc_0_f_res_t_res_32226;
    } else {
        defunc_0_f_res_32220 = 0.0F;
    }
    
    float defunc_0_f_res_32227 = defunc_0_f_res_32220 * defunc_0_f_res_32220;
    
    ((__local float *) red_arr_mem_43692)[gtid_32113] = defunc_0_f_res_32227;
    
  error_2:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_43694;
    int32_t skip_waves_43695 = 1;
    float x_32215;
    float x_32216;
    
    offset_43694 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_43681, sext_i64_i32(i32_res_28179))) {
            x_32215 = ((__local
                        float *) red_arr_mem_43692)[sext_i32_i64(local_tid_43681 +
                                                    offset_43694)];
        }
    }
    offset_43694 = 1;
    while (slt32(offset_43694, wave_sizze_43683)) {
        if (slt32(local_tid_43681 + offset_43694,
                  sext_i64_i32(i32_res_28179)) && ((local_tid_43681 -
                                                    squot32(local_tid_43681,
                                                            wave_sizze_43683) *
                                                    wave_sizze_43683) & (2 *
                                                                         offset_43694 -
                                                                         1)) ==
            0) {
            // read array element
            {
                x_32216 = ((volatile __local
                            float *) red_arr_mem_43692)[sext_i32_i64(local_tid_43681 +
                                                        offset_43694)];
            }
            // apply reduction operation
            {
                float defunc_1_op_res_32217 = x_32215 + x_32216;
                
                x_32215 = defunc_1_op_res_32217;
            }
            // write result of operation
            {
                ((volatile __local
                  float *) red_arr_mem_43692)[sext_i32_i64(local_tid_43681)] =
                    x_32215;
            }
        }
        offset_43694 *= 2;
    }
    while (slt32(skip_waves_43695, squot32(sext_i64_i32(i32_res_28179) +
                                           wave_sizze_43683 - 1,
                                           wave_sizze_43683))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_43694 = skip_waves_43695 * wave_sizze_43683;
        if (slt32(local_tid_43681 + offset_43694,
                  sext_i64_i32(i32_res_28179)) && ((local_tid_43681 -
                                                    squot32(local_tid_43681,
                                                            wave_sizze_43683) *
                                                    wave_sizze_43683) == 0 &&
                                                   (squot32(local_tid_43681,
                                                            wave_sizze_43683) &
                                                    (2 * skip_waves_43695 -
                                                     1)) == 0)) {
            // read array element
            {
                x_32216 = ((__local
                            float *) red_arr_mem_43692)[sext_i32_i64(local_tid_43681 +
                                                        offset_43694)];
            }
            // apply reduction operation
            {
                float defunc_1_op_res_32217 = x_32215 + x_32216;
                
                x_32215 = defunc_1_op_res_32217;
            }
            // write result of operation
            {
                ((__local
                  float *) red_arr_mem_43692)[sext_i32_i64(local_tid_43681)] =
                    x_32215;
            }
        }
        skip_waves_43695 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    defunc_0_f_res_32214 = ((__local float *) red_arr_mem_43692)[(int64_t) 0];
    
    int32_t r32_arg_32228 = sub32(defunc_0_f_res_32206, k2p2_28181);
    float i32_res_32229 = sitofp_i32_f32(r32_arg_32228);
    float sqrt_arg_32230 = defunc_0_f_res_32214 / i32_res_32229;
    float sqrt_res_32231;
    
    sqrt_res_32231 = futrts_sqrt32(sqrt_arg_32230);
    
    float i32_res_32232 = sitofp_i32_f32(defunc_0_f_res_32206);
    float t32_arg_32233 = hfrac_28175 * i32_res_32232;
    int32_t f32_res_32234 = fptosi_f32_i32(t32_arg_32233);
    
    if (local_tid_43681 == 0) {
        ((__global int32_t *) mem_42319)[gtid_32108] = f32_res_32234;
    }
    if (local_tid_43681 == 0) {
        ((__global int32_t *) mem_42322)[gtid_32108] = defunc_0_f_res_32206;
    }
    if (local_tid_43681 == 0) {
        ((__global float *) mem_42325)[gtid_32108] = sqrt_res_32231;
    }
    
  error_4:
    return;
}
__kernel void mainDetailedzisegmap_intragroup_32842(__global
                                                    int *global_failure,
                                                    int failure_is_an_option,
                                                    __global
                                                    int64_t *global_failure_args,
                                                    __local volatile
                                                    int64_t *red_arr_mem_44032_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *red_arr_mem_44030_backing_aligned_1,
                                                    __local volatile
                                                    int64_t *red_arr_mem_44028_backing_aligned_2,
                                                    __local volatile
                                                    int64_t *color_42720_backing_aligned_3,
                                                    __local volatile
                                                    int64_t *color_42719_backing_aligned_4,
                                                    int64_t N_28169,
                                                    int64_t m_28170,
                                                    int32_t n_28173,
                                                    int64_t iota32_arg_28600,
                                                    int64_t iota32_arg_28630,
                                                    int64_t computed_group_sizze_32832,
                                                    __global
                                                    unsigned char *defunc_4_map_res_mem_42265,
                                                    __global
                                                    unsigned char *defunc_4_map_res_mem_42266,
                                                    __global
                                                    unsigned char *defunc_4_map_res_mem_42267,
                                                    __global
                                                    unsigned char *defunc_3_map_res_mem_42344,
                                                    __global
                                                    unsigned char *defunc_3_map_res_mem_42345,
                                                    __global
                                                    unsigned char *defunc_3_map_res_mem_42346,
                                                    __global
                                                    unsigned char *defunc_0_f_res_mem_42383,
                                                    __global
                                                    unsigned char *mem_42387,
                                                    __global
                                                    unsigned char *mem_42508,
                                                    __global
                                                    unsigned char *mem_42512,
                                                    __global
                                                    unsigned char *mem_42515,
                                                    __global
                                                    unsigned char *mem_42518)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_44032_backing_4 =
                          (__local volatile
                           char *) red_arr_mem_44032_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_44030_backing_3 =
                          (__local volatile
                           char *) red_arr_mem_44030_backing_aligned_1;
    __local volatile char *restrict red_arr_mem_44028_backing_2 =
                          (__local volatile
                           char *) red_arr_mem_44028_backing_aligned_2;
    __local volatile char *restrict color_42720_backing_1 = (__local volatile
                                                             char *) color_42720_backing_aligned_3;
    __local volatile char *restrict color_42719_backing_0 = (__local volatile
                                                             char *) color_42719_backing_aligned_4;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_44008;
    int32_t local_tid_44009;
    int64_t group_sizze_44012;
    int32_t wave_sizze_44011;
    int32_t group_tid_44010;
    
    global_tid_44008 = get_global_id(0);
    local_tid_44009 = get_local_id(0);
    group_sizze_44012 = get_local_size(0);
    wave_sizze_44011 = LOCKSTEP_WIDTH;
    group_tid_44010 = get_group_id(0);
    
    int32_t phys_tid_32842 = group_tid_44010;
    int32_t ltid_pre_44013 = local_tid_44009;
    int32_t ltid_pre_44014 = local_tid_44009;
    int64_t slice_44015 = m_28170;
    int64_t gtid_32830 = sext_i32_i64(group_tid_44010);
    int64_t remnant_44016 = sext_i32_i64(group_tid_44010) - gtid_32830;
    __local char *color_42719;
    
    color_42719 = (__local char *) color_42719_backing_0;
    
    __local char *color_42720;
    
    color_42720 = (__local char *) color_42720_backing_1;
    
    int32_t x_33082 = ((__global
                        int32_t *) defunc_4_map_res_mem_42265)[gtid_32830];
    int32_t x_33083 = ((__global
                        int32_t *) defunc_3_map_res_mem_42345)[gtid_32830];
    float x_33084 = ((__global float *) defunc_3_map_res_mem_42346)[gtid_32830];
    int32_t x_33085 = ((__global
                        int32_t *) defunc_3_map_res_mem_42344)[gtid_32830];
    float x_33086 = ((__global float *) defunc_0_f_res_mem_42383)[gtid_32830];
    int32_t y_33091 = sub32(x_33082, x_33083);
    int64_t gtid_32833 = sext_i32_i64(ltid_pre_44014);
    int32_t phys_tid_32834 = local_tid_44009;
    
    if (slt64(gtid_32833, iota32_arg_28630)) {
        int32_t index_primexp_39453 = sext_i64_i32(gtid_32833);
        bool cond_33097 = sle32(y_33091, index_primexp_39453);
        float defunc_0_f_res_33098;
        
        if (cond_33097) {
            defunc_0_f_res_33098 = 0.0F;
        } else {
            bool cond_33099 = index_primexp_39453 == 0;
            float defunc_0_f_res_f_res_33100;
            
            if (cond_33099) {
                defunc_0_f_res_f_res_33100 = x_33086;
            } else {
                int32_t i_33101 = add32(x_33083, index_primexp_39453);
                int64_t i_33102 = sext_i32_i64(i_33101);
                bool x_33103 = sle64((int64_t) 0, i_33102);
                bool y_33104 = slt64(i_33102, N_28169);
                bool bounds_check_33105 = x_33103 && y_33104;
                bool index_certs_33106;
                
                if (!bounds_check_33105) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 71) ==
                            -1) {
                            global_failure_args[0] = i_33102;
                            global_failure_args[1] = N_28169;
                            ;
                        }
                        local_failure = true;
                        goto error_0;
                    }
                }
                
                float x_33107 = ((__global
                                  float *) defunc_4_map_res_mem_42266)[gtid_32830 *
                                                                       N_28169 +
                                                                       i_33102];
                int32_t x_33108 = sub32(x_33083, x_33085);
                int32_t i_33109 = add32(x_33108, index_primexp_39453);
                int64_t i_33110 = sext_i32_i64(i_33109);
                bool x_33111 = sle64((int64_t) 0, i_33110);
                bool y_33112 = slt64(i_33110, N_28169);
                bool bounds_check_33113 = x_33111 && y_33112;
                bool index_certs_33114;
                
                if (!bounds_check_33113) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 72) ==
                            -1) {
                            global_failure_args[0] = i_33110;
                            global_failure_args[1] = N_28169;
                            ;
                        }
                        local_failure = true;
                        goto error_0;
                    }
                }
                
                float y_33115 = ((__global
                                  float *) defunc_4_map_res_mem_42266)[gtid_32830 *
                                                                       N_28169 +
                                                                       i_33110];
                float defunc_0_f_res_f_res_f_res_33116 = x_33107 - y_33115;
                
                defunc_0_f_res_f_res_33100 = defunc_0_f_res_f_res_f_res_33116;
            }
            defunc_0_f_res_33098 = defunc_0_f_res_f_res_33100;
        }
        ((__local float *) color_42719)[gtid_32833] = defunc_0_f_res_33098;
    }
    
  error_0:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t dims_flat_44017 = iota32_arg_28630;
    float x_33093;
    float x_33094;
    float x_44019;
    float x_44020;
    bool ltid_in_bounds_44022 = slt64(sext_i32_i64(local_tid_44009),
                                      iota32_arg_28630);
    int32_t skip_threads_44023;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_44022) {
            x_33094 = ((volatile __local
                        float *) color_42719)[sext_i32_i64(local_tid_44009)];
            if ((local_tid_44009 - squot32(local_tid_44009, 32) * 32) == 0) {
                x_33093 = x_33094;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_44023 = 1;
        while (slt32(skip_threads_44023, 32)) {
            if (sle32(skip_threads_44023, local_tid_44009 -
                      squot32(local_tid_44009, 32) * 32) &&
                ltid_in_bounds_44022) {
                // read operands
                {
                    x_33093 = ((volatile __local
                                float *) color_42719)[sext_i32_i64(local_tid_44009) -
                                                      sext_i32_i64(skip_threads_44023)];
                }
                // perform operation
                {
                    bool inactive_44024 =
                         slt64(srem64(sext_i32_i64(local_tid_44009),
                                      iota32_arg_28630),
                               sext_i32_i64(local_tid_44009) -
                               sext_i32_i64(local_tid_44009 -
                               skip_threads_44023));
                    
                    if (inactive_44024) {
                        x_33093 = x_33094;
                    }
                    if (!inactive_44024) {
                        float defunc_1_op_res_33095 = x_33093 + x_33094;
                        
                        x_33093 = defunc_1_op_res_33095;
                    }
                }
            }
            if (sle32(wave_sizze_44011, skip_threads_44023)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_44023, local_tid_44009 -
                      squot32(local_tid_44009, 32) * 32) &&
                ltid_in_bounds_44022) {
                // write result
                {
                    ((volatile __local
                      float *) color_42719)[sext_i32_i64(local_tid_44009)] =
                        x_33093;
                    x_33094 = x_33093;
                }
            }
            if (sle32(wave_sizze_44011, skip_threads_44023)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_44023 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_44009 - squot32(local_tid_44009, 32) * 32) == 31 &&
            ltid_in_bounds_44022) {
            ((volatile __local
              float *) color_42719)[sext_i32_i64(squot32(local_tid_44009,
                                                         32))] = x_33093;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_44025;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_44009, 32) == 0 && ltid_in_bounds_44022) {
                x_44020 = ((volatile __local
                            float *) color_42719)[sext_i32_i64(local_tid_44009)];
                if ((local_tid_44009 - squot32(local_tid_44009, 32) * 32) ==
                    0) {
                    x_44019 = x_44020;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_44025 = 1;
            while (slt32(skip_threads_44025, 32)) {
                if (sle32(skip_threads_44025, local_tid_44009 -
                          squot32(local_tid_44009, 32) * 32) &&
                    (squot32(local_tid_44009, 32) == 0 &&
                     ltid_in_bounds_44022)) {
                    // read operands
                    {
                        x_44019 = ((volatile __local
                                    float *) color_42719)[sext_i32_i64(local_tid_44009) -
                                                          sext_i32_i64(skip_threads_44025)];
                    }
                    // perform operation
                    {
                        bool inactive_44026 =
                             slt64(srem64(sext_i32_i64(local_tid_44009 * 32 +
                                          32 - 1), iota32_arg_28630),
                                   sext_i32_i64(local_tid_44009 * 32 + 32 - 1) -
                                   sext_i32_i64((local_tid_44009 -
                                                 skip_threads_44025) * 32 + 32 -
                                   1));
                        
                        if (inactive_44026) {
                            x_44019 = x_44020;
                        }
                        if (!inactive_44026) {
                            float defunc_1_op_res_44021 = x_44019 + x_44020;
                            
                            x_44019 = defunc_1_op_res_44021;
                        }
                    }
                }
                if (sle32(wave_sizze_44011, skip_threads_44025)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_44025, local_tid_44009 -
                          squot32(local_tid_44009, 32) * 32) &&
                    (squot32(local_tid_44009, 32) == 0 &&
                     ltid_in_bounds_44022)) {
                    // write result
                    {
                        ((volatile __local
                          float *) color_42719)[sext_i32_i64(local_tid_44009)] =
                            x_44019;
                        x_44020 = x_44019;
                    }
                }
                if (sle32(wave_sizze_44011, skip_threads_44025)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_44025 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_44009, 32) == 0 || !ltid_in_bounds_44022)) {
            // read operands
            {
                x_33094 = x_33093;
                x_33093 = ((__local
                            float *) color_42719)[sext_i32_i64(squot32(local_tid_44009,
                                                                       32)) -
                                                  (int64_t) 1];
            }
            // perform operation
            {
                bool inactive_44027 =
                     slt64(srem64(sext_i32_i64(local_tid_44009),
                                  iota32_arg_28630),
                           sext_i32_i64(local_tid_44009) -
                           sext_i32_i64(squot32(local_tid_44009, 32) * 32 - 1));
                
                if (inactive_44027) {
                    x_33093 = x_33094;
                }
                if (!inactive_44027) {
                    float defunc_1_op_res_33095 = x_33093 + x_33094;
                    
                    x_33093 = defunc_1_op_res_33095;
                }
            }
            // write final result
            {
                ((__local float *) color_42719)[sext_i32_i64(local_tid_44009)] =
                    x_33093;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_44009, 32) == 0) {
            ((__local float *) color_42719)[sext_i32_i64(local_tid_44009)] =
                x_33094;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float i32_res_33117 = sitofp_i32_f32(x_33083);
    float sqrt_res_33118;
    
    sqrt_res_33118 = futrts_sqrt32(i32_res_33117);
    
    float y_33119 = x_33084 * sqrt_res_33118;
    bool defunc_0_f_res_33121;
    int32_t defunc_0_f_res_33122;
    float defunc_0_f_res_33123;
    int64_t gtid_32835 = sext_i32_i64(ltid_pre_44013);
    int32_t phys_tid_32836 = local_tid_44009;
    __local char *red_arr_mem_44028;
    
    red_arr_mem_44028 = (__local char *) red_arr_mem_44028_backing_2;
    
    __local char *red_arr_mem_44030;
    
    red_arr_mem_44030 = (__local char *) red_arr_mem_44030_backing_3;
    
    __local char *red_arr_mem_44032;
    
    red_arr_mem_44032 = (__local char *) red_arr_mem_44032_backing_4;
    if (slt64(gtid_32835, iota32_arg_28600)) {
        float x_33139 = ((__local float *) color_42719)[gtid_32835];
        float x_33140 = ((__global float *) mem_42387)[gtid_32835];
        int32_t index_primexp_39456 = sext_i64_i32(gtid_32835);
        float defunc_0_f_res_33142 = x_33139 / y_33119;
        bool cond_33143 = slt32(index_primexp_39456, y_33091);
        bool isnan_res_33144;
        
        isnan_res_33144 = futrts_isnan32(defunc_0_f_res_33142);
        
        bool cond_t_res_33145 = !isnan_res_33144;
        bool x_33146 = cond_33143 && cond_t_res_33145;
        float abs_res_33147 = (float) fabs(defunc_0_f_res_33142);
        bool defunc_2_f_res_t_res_33148 = x_33140 < abs_res_33147;
        bool x_33149 = x_33146 && defunc_2_f_res_t_res_33148;
        float defunc_1_f_res_33150;
        
        if (cond_33143) {
            defunc_1_f_res_33150 = defunc_0_f_res_33142;
        } else {
            defunc_1_f_res_33150 = 0.0F;
        }
        ((__local bool *) red_arr_mem_44028)[gtid_32835] = x_33149;
        ((__local int32_t *) red_arr_mem_44030)[gtid_32835] =
            index_primexp_39456;
        ((__local float *) red_arr_mem_44032)[gtid_32835] =
            defunc_1_f_res_33150;
        ((__local float *) color_42720)[gtid_32835] = defunc_0_f_res_33142;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_44034;
    int32_t skip_waves_44035 = 1;
    bool x_33125;
    int32_t x_33126;
    float x_33127;
    bool x_33128;
    int32_t x_33129;
    float x_33130;
    
    offset_44034 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_44009, sext_i64_i32(iota32_arg_28600))) {
            x_33125 = ((__local
                        bool *) red_arr_mem_44028)[sext_i32_i64(local_tid_44009 +
                                                   offset_44034)];
            x_33126 = ((__local
                        int32_t *) red_arr_mem_44030)[sext_i32_i64(local_tid_44009 +
                                                      offset_44034)];
            x_33127 = ((__local
                        float *) red_arr_mem_44032)[sext_i32_i64(local_tid_44009 +
                                                    offset_44034)];
        }
    }
    offset_44034 = 1;
    while (slt32(offset_44034, wave_sizze_44011)) {
        if (slt32(local_tid_44009 + offset_44034,
                  sext_i64_i32(iota32_arg_28600)) && ((local_tid_44009 -
                                                       squot32(local_tid_44009,
                                                               wave_sizze_44011) *
                                                       wave_sizze_44011) & (2 *
                                                                            offset_44034 -
                                                                            1)) ==
            0) {
            // read array element
            {
                x_33128 = ((volatile __local
                            bool *) red_arr_mem_44028)[sext_i32_i64(local_tid_44009 +
                                                       offset_44034)];
                x_33129 = ((volatile __local
                            int32_t *) red_arr_mem_44030)[sext_i32_i64(local_tid_44009 +
                                                          offset_44034)];
                x_33130 = ((volatile __local
                            float *) red_arr_mem_44032)[sext_i32_i64(local_tid_44009 +
                                                        offset_44034)];
            }
            // apply reduction operation
            {
                bool defunc_1_op_res_33131;
                int32_t defunc_1_op_res_33132;
                
                if (x_33125) {
                    defunc_1_op_res_33131 = x_33125;
                    defunc_1_op_res_33132 = x_33126;
                } else {
                    bool x_33133 = x_33128 && x_33128;
                    bool x_33134 = !x_33128;
                    bool y_33135 = x_33125 && x_33134;
                    bool defunc_1_op_res_f_res_33136 = x_33133 || y_33135;
                    int32_t defunc_1_op_res_f_res_33137;
                    
                    if (x_33128) {
                        defunc_1_op_res_f_res_33137 = x_33129;
                    } else {
                        defunc_1_op_res_f_res_33137 = x_33126;
                    }
                    defunc_1_op_res_33131 = defunc_1_op_res_f_res_33136;
                    defunc_1_op_res_33132 = defunc_1_op_res_f_res_33137;
                }
                
                float defunc_1_op_res_33138 = x_33127 + x_33130;
                
                x_33125 = defunc_1_op_res_33131;
                x_33126 = defunc_1_op_res_33132;
                x_33127 = defunc_1_op_res_33138;
            }
            // write result of operation
            {
                ((volatile __local
                  bool *) red_arr_mem_44028)[sext_i32_i64(local_tid_44009)] =
                    x_33125;
                ((volatile __local
                  int32_t *) red_arr_mem_44030)[sext_i32_i64(local_tid_44009)] =
                    x_33126;
                ((volatile __local
                  float *) red_arr_mem_44032)[sext_i32_i64(local_tid_44009)] =
                    x_33127;
            }
        }
        offset_44034 *= 2;
    }
    while (slt32(skip_waves_44035,
                 squot32(sext_i64_i32(computed_group_sizze_32832) +
                         wave_sizze_44011 - 1, wave_sizze_44011))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_44034 = skip_waves_44035 * wave_sizze_44011;
        if (slt32(local_tid_44009 + offset_44034,
                  sext_i64_i32(iota32_arg_28600)) && ((local_tid_44009 -
                                                       squot32(local_tid_44009,
                                                               wave_sizze_44011) *
                                                       wave_sizze_44011) == 0 &&
                                                      (squot32(local_tid_44009,
                                                               wave_sizze_44011) &
                                                       (2 * skip_waves_44035 -
                                                        1)) == 0)) {
            // read array element
            {
                x_33128 = ((__local
                            bool *) red_arr_mem_44028)[sext_i32_i64(local_tid_44009 +
                                                       offset_44034)];
                x_33129 = ((__local
                            int32_t *) red_arr_mem_44030)[sext_i32_i64(local_tid_44009 +
                                                          offset_44034)];
                x_33130 = ((__local
                            float *) red_arr_mem_44032)[sext_i32_i64(local_tid_44009 +
                                                        offset_44034)];
            }
            // apply reduction operation
            {
                bool defunc_1_op_res_33131;
                int32_t defunc_1_op_res_33132;
                
                if (x_33125) {
                    defunc_1_op_res_33131 = x_33125;
                    defunc_1_op_res_33132 = x_33126;
                } else {
                    bool x_33133 = x_33128 && x_33128;
                    bool x_33134 = !x_33128;
                    bool y_33135 = x_33125 && x_33134;
                    bool defunc_1_op_res_f_res_33136 = x_33133 || y_33135;
                    int32_t defunc_1_op_res_f_res_33137;
                    
                    if (x_33128) {
                        defunc_1_op_res_f_res_33137 = x_33129;
                    } else {
                        defunc_1_op_res_f_res_33137 = x_33126;
                    }
                    defunc_1_op_res_33131 = defunc_1_op_res_f_res_33136;
                    defunc_1_op_res_33132 = defunc_1_op_res_f_res_33137;
                }
                
                float defunc_1_op_res_33138 = x_33127 + x_33130;
                
                x_33125 = defunc_1_op_res_33131;
                x_33126 = defunc_1_op_res_33132;
                x_33127 = defunc_1_op_res_33138;
            }
            // write result of operation
            {
                ((__local
                  bool *) red_arr_mem_44028)[sext_i32_i64(local_tid_44009)] =
                    x_33125;
                ((__local
                  int32_t *) red_arr_mem_44030)[sext_i32_i64(local_tid_44009)] =
                    x_33126;
                ((__local
                  float *) red_arr_mem_44032)[sext_i32_i64(local_tid_44009)] =
                    x_33127;
            }
        }
        skip_waves_44035 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    defunc_0_f_res_33121 = ((__local bool *) red_arr_mem_44028)[(int64_t) 0];
    defunc_0_f_res_33122 = ((__local int32_t *) red_arr_mem_44030)[(int64_t) 0];
    defunc_0_f_res_33123 = ((__local float *) red_arr_mem_44032)[(int64_t) 0];
    
    bool cond_33151 = y_33091 == 0;
    float defunc_0_f_res_33152;
    
    if (cond_33151) {
        defunc_0_f_res_33152 = 0.0F;
    } else {
        float i32_res_33153 = sitofp_i32_f32(y_33091);
        float defunc_0_f_res_f_res_33154 = defunc_0_f_res_33123 / i32_res_33153;
        
        defunc_0_f_res_33152 = defunc_0_f_res_f_res_33154;
    }
    
    bool cond_33155 = !defunc_0_f_res_33121;
    int32_t fst_breakzq_33156;
    
    if (cond_33155) {
        fst_breakzq_33156 = -1;
    } else {
        bool cond_33157 = slt32(defunc_0_f_res_33122, y_33091);
        int32_t adjustValInds_res_33158;
        
        if (cond_33157) {
            int32_t i_33159 = add32(x_33083, defunc_0_f_res_33122);
            int64_t i_33160 = sext_i32_i64(i_33159);
            bool x_33161 = sle64((int64_t) 0, i_33160);
            bool y_33162 = slt64(i_33160, N_28169);
            bool bounds_check_33163 = x_33161 && y_33162;
            bool index_certs_33164;
            
            if (!bounds_check_33163) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 73) ==
                        -1) {
                        global_failure_args[0] = i_33160;
                        global_failure_args[1] = N_28169;
                        ;
                    }
                    local_failure = true;
                    goto error_3;
                }
            }
            
            int32_t x_33165 = ((__global
                                int32_t *) defunc_4_map_res_mem_42267)[gtid_32830 *
                                                                       N_28169 +
                                                                       i_33160];
            int32_t adjustValInds_res_t_res_33166 = sub32(x_33165, n_28173);
            
            adjustValInds_res_33158 = adjustValInds_res_t_res_33166;
        } else {
            adjustValInds_res_33158 = -1;
        }
        fst_breakzq_33156 = adjustValInds_res_33158;
    }
    
    bool cond_33167 = sle32(x_33083, 5);
    bool cond_f_res_33168 = sle32(y_33091, 5);
    bool x_33169 = !cond_33167;
    bool y_33170 = cond_f_res_33168 && x_33169;
    bool cond_33171 = cond_33167 || y_33170;
    int32_t fst_breakzq_33172;
    
    if (cond_33171) {
        fst_breakzq_33172 = -2;
    } else {
        fst_breakzq_33172 = fst_breakzq_33156;
    }
    for (int64_t i_44036 = 0; i_44036 < sdiv_up64(iota32_arg_28630 -
                                                  sext_i32_i64(local_tid_44009),
                                                  computed_group_sizze_32832);
         i_44036++) {
        ((__local float *) color_42719)[i_44036 * computed_group_sizze_32832 +
                                        sext_i32_i64(local_tid_44009)] = NAN;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t write_i_32837 = sext_i32_i64(ltid_pre_44014);
    int32_t phys_tid_32838 = local_tid_44009;
    
    if (slt64(write_i_32837, iota32_arg_28630)) {
        int32_t index_primexp_39459 = sext_i64_i32(write_i_32837);
        float write_value_33177 = ((__local
                                    float *) color_42720)[write_i_32837];
        bool cond_33178 = slt32(index_primexp_39459, y_33091);
        int32_t defunc_0_f_res_33179;
        
        if (cond_33178) {
            int32_t i_33180 = add32(x_33083, index_primexp_39459);
            int64_t i_33181 = sext_i32_i64(i_33180);
            bool x_33182 = sle64((int64_t) 0, i_33181);
            bool y_33183 = slt64(i_33181, N_28169);
            bool bounds_check_33184 = x_33182 && y_33183;
            bool index_certs_33185;
            
            if (!bounds_check_33184) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 74) ==
                        -1) {
                        global_failure_args[0] = i_33181;
                        global_failure_args[1] = N_28169;
                        ;
                    }
                    local_failure = true;
                    goto error_3;
                }
            }
            
            int32_t x_33186 = ((__global
                                int32_t *) defunc_4_map_res_mem_42267)[gtid_32830 *
                                                                       N_28169 +
                                                                       i_33181];
            int32_t defunc_0_f_res_t_res_33187 = sub32(x_33186, n_28173);
            
            defunc_0_f_res_33179 = defunc_0_f_res_t_res_33187;
        } else {
            defunc_0_f_res_33179 = -1;
        }
        
        int64_t defunc_0_f_res_33188 = sext_i32_i64(defunc_0_f_res_33179);
        
        if (sle64((int64_t) 0, defunc_0_f_res_33188) &&
            slt64(defunc_0_f_res_33188, iota32_arg_28630)) {
            ((__local float *) color_42719)[defunc_0_f_res_33188] =
                write_value_33177;
        }
    }
    
  error_3:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int64_t i_44037 = 0; i_44037 < sdiv_up64(iota32_arg_28600 -
                                                  sext_i32_i64(local_tid_44009),
                                                  computed_group_sizze_32832);
         i_44037++) {
        ((__global float *) mem_42508)[gtid_32830 * iota32_arg_28600 +
                                       (i_44037 * computed_group_sizze_32832 +
                                        sext_i32_i64(local_tid_44009))] =
            ((__local float *) color_42719)[i_44037 *
                                            computed_group_sizze_32832 +
                                            sext_i32_i64(local_tid_44009)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int64_t i_44038 = 0; i_44038 < sdiv_up64(iota32_arg_28600 -
                                                  sext_i32_i64(local_tid_44009),
                                                  computed_group_sizze_32832);
         i_44038++) {
        ((__global float *) mem_42512)[gtid_32830 * iota32_arg_28600 +
                                       (i_44038 * computed_group_sizze_32832 +
                                        sext_i32_i64(local_tid_44009))] =
            ((__local float *) color_42720)[i_44038 *
                                            computed_group_sizze_32832 +
                                            sext_i32_i64(local_tid_44009)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_tid_44009 == 0) {
        ((__global int32_t *) mem_42515)[gtid_32830] = fst_breakzq_33172;
    }
    if (local_tid_44009 == 0) {
        ((__global float *) mem_42518)[gtid_32830] = defunc_0_f_res_33152;
    }
    
  error_4:
    return;
}
__kernel void mainDetailedzisegmap_intragroup_39586(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *color_42664_backing_aligned_0,
                                                    int64_t m_28170,
                                                    int32_t n_28173,
                                                    int64_t i32_res_28185,
                                                    int64_t Ty_39574,
                                                    int64_t Tx_39575,
                                                    int64_t gridDim_x_39576,
                                                    int64_t gridDim_y_39577,
                                                    int64_t gridDim_zz_39578,
                                                    int64_t group_sizze_tile3d_39581,
                                                    int64_t count_shmem_39582,
                                                    __global
                                                    unsigned char *mem_41435,
                                                    __global
                                                    unsigned char *mem_41440,
                                                    __global
                                                    unsigned char *mem_41515,
                                                    __global
                                                    unsigned char *mem_41576)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict color_42664_backing_0 = (__local volatile
                                                             char *) color_42664_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_42953;
    int32_t local_tid_42954;
    int64_t group_sizze_42957;
    int32_t wave_sizze_42956;
    int32_t group_tid_42955;
    
    global_tid_42953 = get_global_id(0);
    local_tid_42954 = get_local_id(0);
    group_sizze_42957 = get_local_size(0);
    wave_sizze_42956 = LOCKSTEP_WIDTH;
    group_tid_42955 = get_group_id(0);
    
    int32_t gid_flat_39586 = group_tid_42955;
    int32_t ltid_pre_42958 = squot32(local_tid_42954, sext_i64_i32(Ty_39574) *
                                     sext_i64_i32(Tx_39575));
    int32_t ltid_pre_42959 = squot32(local_tid_42954 - squot32(local_tid_42954,
                                                               sext_i64_i32(Ty_39574) *
                                                               sext_i64_i32(Tx_39575)) *
                                     (sext_i64_i32(Ty_39574) *
                                      sext_i64_i32(Tx_39575)),
                                     sext_i64_i32(Tx_39575));
    int32_t ltid_pre_42960 = local_tid_42954 - squot32(local_tid_42954,
                                                       sext_i64_i32(Ty_39574) *
                                                       sext_i64_i32(Tx_39575)) *
            (sext_i64_i32(Ty_39574) * sext_i64_i32(Tx_39575)) -
            squot32(local_tid_42954 - squot32(local_tid_42954,
                                              sext_i64_i32(Ty_39574) *
                                              sext_i64_i32(Tx_39575)) *
                    (sext_i64_i32(Ty_39574) * sext_i64_i32(Tx_39575)),
                    sext_i64_i32(Tx_39575)) * sext_i64_i32(Tx_39575);
    int32_t ltid_pre_42961 = squot32(local_tid_42954, sext_i64_i32(Tx_39575));
    int32_t ltid_pre_42962 = local_tid_42954 - squot32(local_tid_42954,
                                                       sext_i64_i32(Tx_39575)) *
            sext_i64_i32(Tx_39575);
    int32_t ltid_pre_42963 = local_tid_42954;
    int64_t slice_42964 = gridDim_x_39576;
    int64_t slice_42965 = gridDim_y_39577 * slice_42964;
    int64_t slice_42966 = gridDim_zz_39578 * slice_42965;
    int64_t gid_zz_39585 = squot64(sext_i32_i64(group_tid_42955), slice_42965);
    int64_t remnant_42967 = sext_i32_i64(group_tid_42955) - gid_zz_39585 *
            slice_42965;
    int64_t gid_y_39584 = squot64(remnant_42967, slice_42964);
    int64_t remnant_42968 = remnant_42967 - gid_y_39584 * slice_42964;
    int64_t gid_x_39583 = remnant_42968;
    int64_t remnant_42969 = remnant_42968 - gid_x_39583;
    float color_42662[30 * 1 * 1];
    float color_42663[30];
    __local char *color_42664;
    
    color_42664 = (__local char *) color_42664_backing_0;
    
    float color_42665[30];
    int64_t ii_39587 = (int64_t) 30 * gid_zz_39585;
    int64_t jj1_39588 = Ty_39574 * gid_y_39584;
    int64_t jj2_39589 = Tx_39575 * gid_x_39583;
    int64_t ltid_y_39592 = sext_i32_i64(ltid_pre_42961);
    int64_t ltid_x_39590 = sext_i32_i64(ltid_pre_42962);
    int32_t ltid_flat_39591 = local_tid_42954;
    float color_42659[30];
    
    for (int32_t i_41315 = 0; i_41315 < 30; i_41315++) {
        int64_t i_39600 = sext_i32_i64(i_41315);
        
        color_42659[i_39600] = 0.0F;
    }
    for (int64_t i_42971 = 0; i_42971 < (int64_t) 30; i_42971++) {
        color_42665[i_42971] = color_42659[i_42971];
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float loop_mem_41557[30];
    float mem_param_41528[30];
    
    for (int32_t i_1 = 0; i_1 < 30; i_1++)
        mem_param_41528[i_1] = color_42665[i_1];
    for (int32_t i_41317 = 0; i_41317 < n_28173; i_41317++) {
        int64_t i_39605 = sext_i32_i64(i_41317);
        
        for (int64_t i_39608 = 0; i_39608 < count_shmem_39582; i_39608++) {
            int64_t offs_39621 = group_sizze_tile3d_39581 * i_39608;
            int64_t ltid_39611 = sext_i32_i64(ltid_pre_42963);
            int32_t ltid_flat_39610 = local_tid_42954;
            int64_t loc_ind_39622 = ltid_39611 + offs_39621;
            int64_t gtid_39623 = ii_39587 + loc_ind_39622;
            bool cond_39624 = slt64(gtid_39623, m_28170);
            float y_elem_39625;
            
            if (cond_39624) {
                float Y_elem_39627 = ((__global float *) mem_41515)[i_39605 *
                                                                    m_28170 +
                                                                    gtid_39623];
                
                y_elem_39625 = Y_elem_39627;
            } else {
                y_elem_39625 = 0.0F;
            }
            
            bool cond_39629 = slt64(loc_ind_39622, (int64_t) 30);
            int64_t y_loc_ind_39630;
            
            if (cond_39629) {
                y_loc_ind_39630 = loc_ind_39622;
            } else {
                y_loc_ind_39630 = (int64_t) -1;
            }
            if (sle64((int64_t) 0, y_loc_ind_39630) && slt64(y_loc_ind_39630,
                                                             (int64_t) 30)) {
                ((__local float *) color_42664)[y_loc_ind_39630] = y_elem_39625;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        
        int64_t ltid_y_39636 = sext_i32_i64(ltid_pre_42961);
        int64_t ltid_x_39634 = sext_i32_i64(ltid_pre_42962);
        int32_t ltid_flat_39635 = local_tid_42954;
        float color_42660[30];
        int64_t gtid_39663 = jj1_39588 + ltid_y_39636;
        int64_t gtid_39664 = jj2_39589 + ltid_x_39634;
        bool binop_x_39666 = slt64(gtid_39663, i32_res_28185);
        bool binop_y_39667 = slt64(gtid_39664, i32_res_28185);
        bool cond_39668 = binop_x_39666 && binop_y_39667;
        
        if (cond_39668) {
            float x_39671 = ((__global float *) mem_41435)[i_39605 *
                                                           i32_res_28185 +
                                                           gtid_39663];
            float x_39673 = ((__global float *) mem_41440)[i_39605 *
                                                           i32_res_28185 +
                                                           gtid_39664];
            
            for (int32_t i_41316 = 0; i_41316 < 30; i_41316++) {
                int64_t i_39675 = sext_i32_i64(i_41316);
                int64_t gtid_39677 = ii_39587 + i_39675;
                bool cond_39678 = slt64(gtid_39677, m_28170);
                
                if (cond_39678) {
                    float inp_reg_var2zz_39680 = ((__local
                                                   float *) color_42664)[i_39675];
                    float res_reg_var2zz_39681 = mem_param_41528[i_39675];
                    float x_39685 = x_39671 * x_39673;
                    bool isnan_res_39686;
                    
                    isnan_res_39686 = futrts_isnan32(inp_reg_var2zz_39680);
                    
                    float y_39687;
                    
                    if (isnan_res_39686) {
                        y_39687 = 0.0F;
                    } else {
                        y_39687 = 1.0F;
                    }
                    
                    float defunc_2_f_res_39688 = x_39685 * y_39687;
                    float defunc_1_op_res_39692 = res_reg_var2zz_39681 +
                          defunc_2_f_res_39688;
                    
                    mem_param_41528[i_39675] = defunc_1_op_res_39692;
                }
            }
            for (int64_t i_42977 = 0; i_42977 < (int64_t) 30; i_42977++) {
                color_42660[i_42977] = mem_param_41528[i_42977];
            }
        } else {
            for (int64_t i_42978 = 0; i_42978 < (int64_t) 30; i_42978++) {
                color_42660[i_42978] = mem_param_41528[i_42978];
            }
        }
        for (int64_t i_42979 = 0; i_42979 < (int64_t) 30; i_42979++) {
            color_42663[i_42979] = color_42660[i_42979];
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_42972[30];
        
        for (int32_t i_2 = 0; i_2 < 30; i_2++)
            mem_param_tmp_42972[i_2] = color_42663[i_2];
        for (int32_t i_3 = 0; i_3 < 30; i_3++)
            mem_param_41528[i_3] = mem_param_tmp_42972[i_3];
    }
    for (int32_t i_4 = 0; i_4 < 30; i_4++)
        loop_mem_41557[i_4] = mem_param_41528[i_4];
    
    int64_t ltid_zz_39701 = sext_i32_i64(ltid_pre_42958);
    int64_t ltid_y_39700 = sext_i32_i64(ltid_pre_42959);
    int64_t ltid_x_39698 = sext_i32_i64(ltid_pre_42960);
    int32_t ltid_flat_39699 = local_tid_42954;
    float color_42661[30 * 1 * 1];
    
    for (int32_t i_41319 = 0; i_41319 < 30; i_41319++) {
        int64_t i_39710 = sext_i32_i64(i_41319);
        
        for (int64_t i_42981 = 0; i_42981 < (int64_t) 1; i_42981++) {
            color_42661[i_39710 + i_42981] = loop_mem_41557[i_39710 + i_42981];
        }
    }
    for (int64_t i_42982 = 0; i_42982 < (int64_t) 30; i_42982++) {
        for (int64_t i_42983 = 0; i_42983 < (int64_t) 1; i_42983++) {
            for (int64_t i_42984 = 0; i_42984 < (int64_t) 1; i_42984++) {
                color_42662[i_42982 + i_42983 + i_42984] = color_42661[i_42982 +
                                                                       i_42983 +
                                                                       i_42984];
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t reg_tile_i_42985 = squot64(sext_i32_i64(local_tid_42954), Ty_39574 *
                                       Tx_39575);
    int64_t reg_tile_i_42986 = squot64(sext_i32_i64(local_tid_42954) -
                                       squot64(sext_i32_i64(local_tid_42954),
                                               Ty_39574 * Tx_39575) *
                                       (Ty_39574 * Tx_39575), Tx_39575);
    int64_t reg_tile_i_42987 = sext_i32_i64(local_tid_42954) -
            squot64(sext_i32_i64(local_tid_42954), Ty_39574 * Tx_39575) *
            (Ty_39574 * Tx_39575) - squot64(sext_i32_i64(local_tid_42954) -
                                            squot64(sext_i32_i64(local_tid_42954),
                                                    Ty_39574 * Tx_39575) *
                                            (Ty_39574 * Tx_39575), Tx_39575) *
            Tx_39575;
    int64_t tile_dim_start_42988 = (int64_t) 30 * (gid_zz_39585 +
                                                   reg_tile_i_42985);
    int64_t tile_dim_start_42989 = Ty_39574 * gid_y_39584 + reg_tile_i_42986;
    int64_t tile_dim_start_42990 = Tx_39575 * gid_x_39583 + reg_tile_i_42987;
    
    for (int64_t nest_i_42991 = 0; nest_i_42991 < (int64_t) 30;
         nest_i_42991++) {
        for (int64_t nest_i_42992 = 0; nest_i_42992 < (int64_t) 1;
             nest_i_42992++) {
            for (int64_t nest_i_42993 = 0; nest_i_42993 < (int64_t) 1;
                 nest_i_42993++) {
                if ((slt64(tile_dim_start_42988 + nest_i_42991, m_28170) &&
                     slt64(tile_dim_start_42989 + nest_i_42992,
                           i32_res_28185)) && slt64(tile_dim_start_42990 +
                                                    nest_i_42993,
                                                    i32_res_28185)) {
                    ((__global float *) mem_41576)[(tile_dim_start_42988 +
                                                    nest_i_42991) *
                                                   (i32_res_28185 *
                                                    i32_res_28185) +
                                                   (tile_dim_start_42989 +
                                                    nest_i_42992) *
                                                   i32_res_28185 +
                                                   (tile_dim_start_42990 +
                                                    nest_i_42993)] =
                        color_42662[nest_i_42991 + nest_i_42992 + nest_i_42993];
                }
            }
        }
    }
    
  error_4:
    return;
}
__kernel void mainDetailedzisegmap_intragroup_39739(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *color_42682_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *color_42681_backing_aligned_1,
                                                    int64_t N_28169,
                                                    int64_t m_28170,
                                                    int64_t i32_res_28179,
                                                    int64_t i32_res_28185,
                                                    int64_t gridDim_x_39733,
                                                    int64_t gridDim_y_39734,
                                                    int64_t full_tiles_39764,
                                                    int64_t kk_39971, __global
                                                    unsigned char *images_mem_41421,
                                                    __global
                                                    unsigned char *mem_41435,
                                                    __global
                                                    unsigned char *mem_41902)
{
    #define Ty_39720 (mainDetailedziTy_39717)
    #define Ry_39721 (mainDetailedziRy_39719)
    #define Tx_39722 (mainDetailedziTx_39716)
    #define Rx_39723 (mainDetailedziRx_39718)
    #define Tk_39724 (mainDetailedziTk_39715)
    #define tk_div_tx_39725 (sdiv_up64(mainDetailedziTk_39715, mainDetailedziTx_39716))
    #define tk_div_ty_39726 (sdiv_up64(mainDetailedziTk_39715, mainDetailedziTy_39717))
    #define TxRx_39727 (mainDetailedziTx_39716 * mainDetailedziRx_39718)
    #define TyRy_39728 (mainDetailedziTy_39717 * mainDetailedziRy_39719)
    #define a_loc_szz_39730 (mainDetailedziTk_39715 * (mainDetailedziTy_39717 * mainDetailedziRy_39719))
    #define b_loc_szz_39732 (mainDetailedziRx_39718 * (mainDetailedziTx_39716 * mainDetailedziTk_39715))
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict color_42682_backing_1 = (__local volatile
                                                             char *) color_42682_backing_aligned_0;
    __local volatile char *restrict color_42681_backing_0 = (__local volatile
                                                             char *) color_42681_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43171;
    int32_t local_tid_43172;
    int64_t group_sizze_43175;
    int32_t wave_sizze_43174;
    int32_t group_tid_43173;
    
    global_tid_43171 = get_global_id(0);
    local_tid_43172 = get_local_id(0);
    group_sizze_43175 = get_local_size(0);
    wave_sizze_43174 = LOCKSTEP_WIDTH;
    group_tid_43173 = get_group_id(0);
    
    int32_t gid_flat_39739 = group_tid_43173;
    int32_t ltid_pre_43176 = squot32(local_tid_43172, sext_i64_i32(Tx_39722));
    int32_t ltid_pre_43177 = local_tid_43172 - squot32(local_tid_43172,
                                                       sext_i64_i32(Tx_39722)) *
            sext_i64_i32(Tx_39722);
    int64_t slice_43178 = gridDim_x_39733;
    int64_t slice_43179 = gridDim_y_39734 * slice_43178;
    int64_t gid_y_39738 = squot64(sext_i32_i64(group_tid_43173), slice_43178);
    int64_t remnant_43180 = sext_i32_i64(group_tid_43173) - gid_y_39738 *
            slice_43178;
    int64_t gid_x_39737 = remnant_43180;
    int64_t remnant_43181 = remnant_43180 - gid_x_39737;
    float color_42677[Ry_39721 * Rx_39723];
    float color_42678[Ry_39721 * Rx_39723];
    float color_42679[Rx_39723];
    float color_42680[Ry_39721];
    __local char *color_42681;
    
    color_42681 = (__local char *) color_42681_backing_0;
    
    __local char *color_42682;
    
    color_42682 = (__local char *) color_42682_backing_1;
    
    int64_t iii_39740 = TyRy_39728 * gid_y_39738;
    int64_t jjj_39741 = TxRx_39727 * gid_x_39737;
    int64_t ltid_y_39744 = sext_i32_i64(ltid_pre_43176);
    int64_t ltid_x_39742 = sext_i32_i64(ltid_pre_43177);
    int32_t ltid_flat_39743 = local_tid_43172;
    float color_42671[Ry_39721 * Rx_39723];
    
    for (int64_t i_39755 = 0; i_39755 < Ry_39721; i_39755++) {
        for (int64_t i_39758 = 0; i_39758 < Rx_39723; i_39758++) {
            color_42671[i_39755 * Rx_39723 + i_39758] = 0.0F;
        }
    }
    for (int64_t i_43184 = 0; i_43184 < Ry_39721; i_43184++) {
        for (int64_t i_43185 = 0; i_43185 < Rx_39723; i_43185++) {
            color_42678[i_43184 * Rx_39723 + i_43185] = color_42671[i_43184 *
                                                                    Rx_39723 +
                                                                    i_43185];
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float loop_mem_41816[Ry_39721 * Rx_39723];
    float mem_param_41730[Ry_39721 * Rx_39723];
    
    for (int32_t i_2 = 0; i_2 < Ry_39721 * Rx_39723; i_2++)
        mem_param_41730[i_2] = color_42678[i_2];
    for (int64_t i_39765 = 0; i_39765 < full_tiles_39764; i_39765++) {
        int64_t kk_39769 = Tk_39724 * i_39765;
        
        for (int64_t i_39770 = 0; i_39770 < Ry_39721; i_39770++) {
            int64_t binop_y_39793 = Ty_39720 * i_39770;
            
            for (int64_t i_39772 = 0; i_39772 < tk_div_tx_39725; i_39772++) {
                int64_t binop_y_39791 = Tx_39722 * i_39772;
                int64_t ltid_x_39774 = sext_i32_i64(ltid_pre_43176);
                int64_t ltid_y_39775 = sext_i32_i64(ltid_pre_43177);
                int32_t ltid_flat_39776 = local_tid_43172;
                int64_t k_39792 = ltid_y_39775 + binop_y_39791;
                int64_t i_39794 = ltid_x_39774 + binop_y_39793;
                int64_t gtid_39795 = iii_39740 + i_39794;
                int64_t A_col_idx_39796 = kk_39769 + k_39792;
                bool cond_39797 = slt64(gtid_39795, m_28170);
                float A_elem_39798;
                
                if (cond_39797) {
                    float A_elem_39800 = ((__global
                                           float *) images_mem_41421)[gtid_39795 *
                                                                      N_28169 +
                                                                      A_col_idx_39796];
                    
                    A_elem_39798 = A_elem_39800;
                } else {
                    A_elem_39798 = 0.0F;
                }
                
                bool cond_39802 = slt64(k_39792, Tk_39724);
                int64_t a_loc_ind_39803;
                
                if (cond_39802) {
                    int64_t binop_y_39804 = Tk_39724 * i_39794;
                    int64_t loc_fi_39805 = k_39792 + binop_y_39804;
                    
                    a_loc_ind_39803 = loc_fi_39805;
                } else {
                    a_loc_ind_39803 = (int64_t) -1;
                }
                if (sle64((int64_t) 0, a_loc_ind_39803) &&
                    slt64(a_loc_ind_39803, a_loc_szz_39730)) {
                    ((__local float *) color_42682)[a_loc_ind_39803] =
                        A_elem_39798;
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        for (int64_t i_39810 = 0; i_39810 < tk_div_ty_39726; i_39810++) {
            int64_t binop_y_39831 = Ty_39720 * i_39810;
            
            for (int64_t i_39812 = 0; i_39812 < Rx_39723; i_39812++) {
                int64_t binop_y_39833 = Tx_39722 * i_39812;
                int64_t ltid_x_39814 = sext_i32_i64(ltid_pre_43176);
                int64_t ltid_y_39815 = sext_i32_i64(ltid_pre_43177);
                int32_t ltid_flat_39816 = local_tid_43172;
                int64_t k_39832 = ltid_x_39814 + binop_y_39831;
                int64_t j_39834 = ltid_y_39815 + binop_y_39833;
                int64_t gtid_39835 = jjj_39741 + j_39834;
                int64_t B_row_idx_39836 = kk_39769 + k_39832;
                bool cond_39837 = slt64(gtid_39835, i32_res_28185);
                float B_elem_39838;
                
                if (cond_39837) {
                    float B_elem_39840 = ((__global
                                           float *) mem_41435)[B_row_idx_39836 *
                                                               i32_res_28185 +
                                                               gtid_39835];
                    
                    B_elem_39838 = B_elem_39840;
                } else {
                    B_elem_39838 = 0.0F;
                }
                
                bool cond_39842 = slt64(k_39832, Tk_39724);
                int64_t b_loc_ind_39843;
                
                if (cond_39842) {
                    int64_t binop_y_39844 = TxRx_39727 * k_39832;
                    int64_t loc_fi_39845 = j_39834 + binop_y_39844;
                    
                    b_loc_ind_39843 = loc_fi_39845;
                } else {
                    b_loc_ind_39843 = (int64_t) -1;
                }
                if (sle64((int64_t) 0, b_loc_ind_39843) &&
                    slt64(b_loc_ind_39843, b_loc_szz_39732)) {
                    ((__local float *) color_42681)[b_loc_ind_39843] =
                        B_elem_39838;
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        
        float loop_mem_41815[Ry_39721 * Rx_39723];
        float mem_param_41787[Ry_39721 * Rx_39723];
        
        for (int32_t i_3 = 0; i_3 < Ry_39721 * Rx_39723; i_3++)
            mem_param_41787[i_3] = mem_param_41730[i_3];
        for (int64_t i_39850 = 0; i_39850 < Tk_39724; i_39850++) {
            int64_t binop_y_39889 = TxRx_39727 * i_39850;
            int64_t ltid_y_39854 = sext_i32_i64(ltid_pre_43176);
            int64_t ltid_x_39852 = sext_i32_i64(ltid_pre_43177);
            int32_t ltid_flat_39853 = local_tid_43172;
            float color_42672[Rx_39723];
            float color_42673[Ry_39721];
            int64_t binop_x_39880 = Ry_39721 * ltid_y_39854;
            
            for (int64_t i_39878 = 0; i_39878 < Ry_39721; i_39878++) {
                int64_t binop_x_39881 = i_39878 + binop_x_39880;
                int64_t binop_y_39882 = Tk_39724 * binop_x_39881;
                int64_t a_loc_ind_39883 = i_39850 + binop_y_39882;
                
                for (int64_t i_43197 = 0; i_43197 < (int64_t) 1; i_43197++) {
                    color_42673[i_39878 + i_43197] = ((__local
                                                       float *) color_42682)[a_loc_ind_39883 +
                                                                             i_43197];
                }
            }
            
            int64_t binop_y_39891 = Rx_39723 * ltid_x_39852;
            
            for (int64_t i_39887 = 0; i_39887 < Rx_39723; i_39887++) {
                int64_t binop_x_39890 = i_39887 + binop_y_39889;
                int64_t b_loc_ind_39892 = binop_x_39890 + binop_y_39891;
                
                for (int64_t i_43199 = 0; i_43199 < (int64_t) 1; i_43199++) {
                    color_42672[i_39887 + i_43199] = ((__local
                                                       float *) color_42681)[b_loc_ind_39892 +
                                                                             i_43199];
                }
            }
            for (int64_t i_43200 = 0; i_43200 < Ry_39721; i_43200++) {
                color_42680[i_43200] = color_42673[i_43200];
            }
            for (int64_t i_43201 = 0; i_43201 < Rx_39723; i_43201++) {
                color_42679[i_43201] = color_42672[i_43201];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int64_t ltid_y_39899 = sext_i32_i64(ltid_pre_43176);
            int64_t ltid_x_39897 = sext_i32_i64(ltid_pre_43177);
            int32_t ltid_flat_39898 = local_tid_43172;
            int64_t binop_y_39942 = Ry_39721 * ltid_y_39899;
            int64_t binop_y_39946 = Rx_39723 * ltid_x_39897;
            
            for (int64_t i_39936 = 0; i_39936 < Ry_39721; i_39936++) {
                int64_t binop_x_39941 = iii_39740 + i_39936;
                int64_t cmpop_x_39943 = binop_x_39941 + binop_y_39942;
                bool binop_x_39944 = slt64(cmpop_x_39943, m_28170);
                
                for (int64_t i_39939 = 0; i_39939 < Rx_39723; i_39939++) {
                    int64_t binop_x_39945 = jjj_39741 + i_39939;
                    int64_t cmpop_x_39947 = binop_x_39945 + binop_y_39946;
                    bool binop_y_39948 = slt64(cmpop_x_39947, i32_res_28185);
                    bool cond_39949 = binop_x_39944 && binop_y_39948;
                    
                    if (cond_39949) {
                        float a_39951 = color_42680[i_39936];
                        float c_39953 = mem_param_41787[i_39936 * Rx_39723 +
                                                        i_39939];
                        bool isnan_res_39956;
                        
                        isnan_res_39956 = futrts_isnan32(a_39951);
                        
                        float defunc_1_f_res_39957;
                        
                        if (isnan_res_39956) {
                            defunc_1_f_res_39957 = 0.0F;
                        } else {
                            float b_39952 = color_42679[i_39939];
                            float defunc_1_f_res_f_res_39958 = a_39951 *
                                  b_39952;
                            
                            defunc_1_f_res_39957 = defunc_1_f_res_f_res_39958;
                        }
                        
                        float defunc_1_op_res_39962 = c_39953 +
                              defunc_1_f_res_39957;
                        
                        mem_param_41787[i_39936 * Rx_39723 + i_39939] =
                            defunc_1_op_res_39962;
                    }
                }
            }
            for (int64_t i_43204 = 0; i_43204 < Ry_39721; i_43204++) {
                for (int64_t i_43205 = 0; i_43205 < Rx_39723; i_43205++) {
                    color_42677[i_43204 * Rx_39723 + i_43205] =
                        mem_param_41787[i_43204 * Rx_39723 + i_43205];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            float mem_param_tmp_43194[Ry_39721 * Rx_39723];
            
            for (int32_t i_4 = 0; i_4 < Ry_39721 * Rx_39723; i_4++)
                mem_param_tmp_43194[i_4] = color_42677[i_4];
            for (int32_t i_5 = 0; i_5 < Ry_39721 * Rx_39723; i_5++)
                mem_param_41787[i_5] = mem_param_tmp_43194[i_5];
        }
        for (int32_t i_6 = 0; i_6 < Ry_39721 * Rx_39723; i_6++)
            loop_mem_41815[i_6] = mem_param_41787[i_6];
        
        float mem_param_tmp_43186[Ry_39721 * Rx_39723];
        
        for (int32_t i_7 = 0; i_7 < Ry_39721 * Rx_39723; i_7++)
            mem_param_tmp_43186[i_7] = loop_mem_41815[i_7];
        for (int32_t i_8 = 0; i_8 < Ry_39721 * Rx_39723; i_8++)
            mem_param_41730[i_8] = mem_param_tmp_43186[i_8];
    }
    for (int32_t i_9 = 0; i_9 < Ry_39721 * Rx_39723; i_9++)
        loop_mem_41816[i_9] = mem_param_41730[i_9];
    for (int64_t i_39972 = 0; i_39972 < Ry_39721; i_39972++) {
        int64_t binop_y_39997 = Ty_39720 * i_39972;
        
        for (int64_t i_39974 = 0; i_39974 < tk_div_tx_39725; i_39974++) {
            int64_t binop_y_39995 = Tx_39722 * i_39974;
            int64_t ltid_x_39976 = sext_i32_i64(ltid_pre_43176);
            int64_t ltid_y_39977 = sext_i32_i64(ltid_pre_43177);
            int32_t ltid_flat_39978 = local_tid_43172;
            int64_t k_39996 = ltid_y_39977 + binop_y_39995;
            int64_t i_39998 = ltid_x_39976 + binop_y_39997;
            int64_t gtid_39999 = iii_39740 + i_39998;
            int64_t A_col_idx_40000 = kk_39971 + k_39996;
            bool binop_x_40001 = slt64(gtid_39999, m_28170);
            bool binop_y_40002 = slt64(A_col_idx_40000, i32_res_28179);
            bool cond_40003 = binop_x_40001 && binop_y_40002;
            float A_elem_40004;
            
            if (cond_40003) {
                float A_elem_40006 = ((__global
                                       float *) images_mem_41421)[gtid_39999 *
                                                                  N_28169 +
                                                                  A_col_idx_40000];
                
                A_elem_40004 = A_elem_40006;
            } else {
                A_elem_40004 = 0.0F;
            }
            
            bool cond_40008 = slt64(k_39996, Tk_39724);
            int64_t a_loc_ind_40009;
            
            if (cond_40008) {
                int64_t binop_y_40010 = Tk_39724 * i_39998;
                int64_t loc_fi_40011 = k_39996 + binop_y_40010;
                
                a_loc_ind_40009 = loc_fi_40011;
            } else {
                a_loc_ind_40009 = (int64_t) -1;
            }
            if (sle64((int64_t) 0, a_loc_ind_40009) && slt64(a_loc_ind_40009,
                                                             a_loc_szz_39730)) {
                ((__local float *) color_42682)[a_loc_ind_40009] = A_elem_40004;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    for (int64_t i_40016 = 0; i_40016 < tk_div_ty_39726; i_40016++) {
        int64_t binop_y_40039 = Ty_39720 * i_40016;
        
        for (int64_t i_40018 = 0; i_40018 < Rx_39723; i_40018++) {
            int64_t binop_y_40041 = Tx_39722 * i_40018;
            int64_t ltid_x_40020 = sext_i32_i64(ltid_pre_43176);
            int64_t ltid_y_40021 = sext_i32_i64(ltid_pre_43177);
            int32_t ltid_flat_40022 = local_tid_43172;
            int64_t k_40040 = ltid_x_40020 + binop_y_40039;
            int64_t j_40042 = ltid_y_40021 + binop_y_40041;
            int64_t gtid_40043 = jjj_39741 + j_40042;
            int64_t B_row_idx_40044 = kk_39971 + k_40040;
            bool binop_x_40045 = slt64(gtid_40043, i32_res_28185);
            bool binop_y_40046 = slt64(B_row_idx_40044, i32_res_28179);
            bool cond_40047 = binop_x_40045 && binop_y_40046;
            float B_elem_40048;
            
            if (cond_40047) {
                float B_elem_40050 = ((__global
                                       float *) mem_41435)[B_row_idx_40044 *
                                                           i32_res_28185 +
                                                           gtid_40043];
                
                B_elem_40048 = B_elem_40050;
            } else {
                B_elem_40048 = 0.0F;
            }
            
            bool cond_40052 = slt64(k_40040, Tk_39724);
            int64_t b_loc_ind_40053;
            
            if (cond_40052) {
                int64_t binop_y_40054 = TxRx_39727 * k_40040;
                int64_t loc_fi_40055 = j_40042 + binop_y_40054;
                
                b_loc_ind_40053 = loc_fi_40055;
            } else {
                b_loc_ind_40053 = (int64_t) -1;
            }
            if (sle64((int64_t) 0, b_loc_ind_40053) && slt64(b_loc_ind_40053,
                                                             b_loc_szz_39732)) {
                ((__local float *) color_42681)[b_loc_ind_40053] = B_elem_40048;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
    float loop_mem_41898[Ry_39721 * Rx_39723];
    float mem_param_41869[Ry_39721 * Rx_39723];
    
    for (int32_t i_10 = 0; i_10 < Ry_39721 * Rx_39723; i_10++)
        mem_param_41869[i_10] = loop_mem_41816[i_10];
    for (int64_t i_40060 = 0; i_40060 < Tk_39724; i_40060++) {
        int64_t cmpop_x_40062 = kk_39971 + i_40060;
        bool cond_40063 = slt64(cmpop_x_40062, i32_res_28179);
        
        if (cond_40063) {
            int64_t binop_y_40101 = TxRx_39727 * i_40060;
            int64_t bytes_41871 = (int64_t) 4 * Ry_39721;
            int64_t bytes_41873 = (int64_t) 4 * Rx_39723;
            int64_t ltid_y_40066 = sext_i32_i64(ltid_pre_43176);
            int64_t ltid_x_40064 = sext_i32_i64(ltid_pre_43177);
            int32_t ltid_flat_40065 = local_tid_43172;
            float color_42674[Rx_39723];
            float color_42675[Ry_39721];
            int64_t binop_x_40092 = Ry_39721 * ltid_y_40066;
            
            for (int64_t i_40090 = 0; i_40090 < Ry_39721; i_40090++) {
                int64_t binop_x_40093 = i_40090 + binop_x_40092;
                int64_t binop_y_40094 = Tk_39724 * binop_x_40093;
                int64_t a_loc_ind_40095 = i_40060 + binop_y_40094;
                
                for (int64_t i_43213 = 0; i_43213 < (int64_t) 1; i_43213++) {
                    color_42675[i_40090 + i_43213] = ((__local
                                                       float *) color_42682)[a_loc_ind_40095 +
                                                                             i_43213];
                }
            }
            
            int64_t binop_y_40103 = Rx_39723 * ltid_x_40064;
            
            for (int64_t i_40099 = 0; i_40099 < Rx_39723; i_40099++) {
                int64_t binop_x_40102 = i_40099 + binop_y_40101;
                int64_t b_loc_ind_40104 = binop_x_40102 + binop_y_40103;
                
                for (int64_t i_43215 = 0; i_43215 < (int64_t) 1; i_43215++) {
                    color_42674[i_40099 + i_43215] = ((__local
                                                       float *) color_42681)[b_loc_ind_40104 +
                                                                             i_43215];
                }
            }
            for (int64_t i_43216 = 0; i_43216 < Ry_39721; i_43216++) {
                color_42680[i_43216] = color_42675[i_43216];
            }
            for (int64_t i_43217 = 0; i_43217 < Rx_39723; i_43217++) {
                color_42679[i_43217] = color_42674[i_43217];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int64_t ltid_y_40111 = sext_i32_i64(ltid_pre_43176);
            int64_t ltid_x_40109 = sext_i32_i64(ltid_pre_43177);
            int32_t ltid_flat_40110 = local_tid_43172;
            int64_t binop_y_40154 = Ry_39721 * ltid_y_40111;
            int64_t binop_y_40158 = Rx_39723 * ltid_x_40109;
            
            for (int64_t i_40148 = 0; i_40148 < Ry_39721; i_40148++) {
                int64_t binop_x_40153 = iii_39740 + i_40148;
                int64_t cmpop_x_40155 = binop_x_40153 + binop_y_40154;
                bool binop_x_40156 = slt64(cmpop_x_40155, m_28170);
                
                for (int64_t i_40151 = 0; i_40151 < Rx_39723; i_40151++) {
                    int64_t binop_x_40157 = jjj_39741 + i_40151;
                    int64_t cmpop_x_40159 = binop_x_40157 + binop_y_40158;
                    bool binop_y_40160 = slt64(cmpop_x_40159, i32_res_28185);
                    bool cond_40161 = binop_x_40156 && binop_y_40160;
                    
                    if (cond_40161) {
                        float a_40163 = color_42680[i_40148];
                        float c_40165 = mem_param_41869[i_40148 * Rx_39723 +
                                                        i_40151];
                        bool isnan_res_40168;
                        
                        isnan_res_40168 = futrts_isnan32(a_40163);
                        
                        float defunc_1_f_res_40169;
                        
                        if (isnan_res_40168) {
                            defunc_1_f_res_40169 = 0.0F;
                        } else {
                            float b_40164 = color_42679[i_40151];
                            float defunc_1_f_res_f_res_40170 = a_40163 *
                                  b_40164;
                            
                            defunc_1_f_res_40169 = defunc_1_f_res_f_res_40170;
                        }
                        
                        float defunc_1_op_res_40174 = c_40165 +
                              defunc_1_f_res_40169;
                        
                        mem_param_41869[i_40148 * Rx_39723 + i_40151] =
                            defunc_1_op_res_40174;
                    }
                }
            }
            for (int64_t i_43220 = 0; i_43220 < Ry_39721; i_43220++) {
                for (int64_t i_43221 = 0; i_43221 < Rx_39723; i_43221++) {
                    color_42678[i_43220 * Rx_39723 + i_43221] =
                        mem_param_41869[i_43220 * Rx_39723 + i_43221];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            for (int64_t i_43222 = 0; i_43222 < Ry_39721; i_43222++) {
                for (int64_t i_43223 = 0; i_43223 < Rx_39723; i_43223++) {
                    color_42677[i_43222 * Rx_39723 + i_43223] =
                        color_42678[i_43222 * Rx_39723 + i_43223];
                }
            }
        } else {
            for (int64_t i_43224 = 0; i_43224 < Ry_39721; i_43224++) {
                for (int64_t i_43225 = 0; i_43225 < Rx_39723; i_43225++) {
                    color_42677[i_43224 * Rx_39723 + i_43225] =
                        mem_param_41869[i_43224 * Rx_39723 + i_43225];
                }
            }
        }
        
        float mem_param_tmp_43210[Ry_39721 * Rx_39723];
        
        for (int32_t i_11 = 0; i_11 < Ry_39721 * Rx_39723; i_11++)
            mem_param_tmp_43210[i_11] = color_42677[i_11];
        for (int32_t i_12 = 0; i_12 < Ry_39721 * Rx_39723; i_12++)
            mem_param_41869[i_12] = mem_param_tmp_43210[i_12];
    }
    for (int32_t i_13 = 0; i_13 < Ry_39721 * Rx_39723; i_13++)
        loop_mem_41898[i_13] = mem_param_41869[i_13];
    
    int64_t reg_tile_i_43226 = squot64(sext_i32_i64(local_tid_43172), Tx_39722);
    int64_t reg_tile_i_43227 = sext_i32_i64(local_tid_43172) -
            squot64(sext_i32_i64(local_tid_43172), Tx_39722) * Tx_39722;
    int64_t tile_dim_start_43228 = Ry_39721 * (Ty_39720 * gid_y_39738 +
                                               reg_tile_i_43226);
    int64_t tile_dim_start_43229 = Rx_39723 * (Tx_39722 * gid_x_39737 +
                                               reg_tile_i_43227);
    
    for (int64_t nest_i_43230 = 0; nest_i_43230 < Ry_39721; nest_i_43230++) {
        for (int64_t nest_i_43231 = 0; nest_i_43231 < Rx_39723;
             nest_i_43231++) {
            if (slt64(tile_dim_start_43228 + nest_i_43230, m_28170) &&
                slt64(tile_dim_start_43229 + nest_i_43231, i32_res_28185)) {
                ((__global float *) mem_41902)[(tile_dim_start_43228 +
                                                nest_i_43230) * i32_res_28185 +
                                               (tile_dim_start_43229 +
                                                nest_i_43231)] =
                    loop_mem_41898[nest_i_43230 * Rx_39723 + nest_i_43231];
            }
        }
    }
    
  error_9:
    return;
    #undef Ty_39720
    #undef Ry_39721
    #undef Tx_39722
    #undef Rx_39723
    #undef Tk_39724
    #undef tk_div_tx_39725
    #undef tk_div_ty_39726
    #undef TxRx_39727
    #undef TyRy_39728
    #undef a_loc_szz_39730
    #undef b_loc_szz_39732
}
__kernel void mainDetailedzisegmap_intragroup_40188(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *color_42687_backing_aligned_0,
                                                    int64_t m_28170,
                                                    int64_t i32_res_28185,
                                                    int64_t num_groups_x_40185,
                                                    int64_t num_groups_y_40186,
                                                    int64_t num_whole_tiles_40204,
                                                    int64_t residual_input_40331,
                                                    unsigned char cond_40332,
                                                    __global
                                                    unsigned char *defunc_3_map_res_mem_41914,
                                                    __global
                                                    unsigned char *mem_41944,
                                                    __global
                                                    unsigned char *mem_41974)
{
    #define tile_sizze_40183 (mainDetailedzitile_sizze_40182)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict color_42687_backing_0 = (__local volatile
                                                             char *) color_42687_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43318;
    int32_t local_tid_43319;
    int64_t group_sizze_43322;
    int32_t wave_sizze_43321;
    int32_t group_tid_43320;
    
    global_tid_43318 = get_global_id(0);
    local_tid_43319 = get_local_id(0);
    group_sizze_43322 = get_local_size(0);
    wave_sizze_43321 = LOCKSTEP_WIDTH;
    group_tid_43320 = get_group_id(0);
    
    int32_t gid_flat_40188 = group_tid_43320;
    int32_t ltid_pre_43323 = squot32(local_tid_43319,
                                     sext_i64_i32(tile_sizze_40183));
    int32_t ltid_pre_43324 = local_tid_43319 - squot32(local_tid_43319,
                                                       sext_i64_i32(tile_sizze_40183)) *
            sext_i64_i32(tile_sizze_40183);
    int64_t slice_43325 = num_groups_y_40186;
    int64_t slice_43326 = num_groups_x_40185 * slice_43325;
    int64_t gid_x_40180 = squot64(sext_i32_i64(group_tid_43320), slice_43325);
    int64_t remnant_43327 = sext_i32_i64(group_tid_43320) - gid_x_40180 *
            slice_43325;
    int64_t gid_y_40181 = remnant_43327;
    int64_t remnant_43328 = remnant_43327 - gid_y_40181;
    float color_42685[1];
    float color_42686[1];
    __local char *color_42687;
    
    color_42687 = (__local char *) color_42687_backing_0;
    
    int64_t ltid_y_40207 = sext_i32_i64(ltid_pre_43323);
    int64_t ltid_x_40205 = sext_i32_i64(ltid_pre_43324);
    int32_t ltid_flat_40206 = local_tid_43319;
    
    if (slt64(ltid_y_40207, tile_sizze_40183) && slt64(ltid_x_40205,
                                                       tile_sizze_40183)) {
        color_42686[(int64_t) 0] = 0.0F;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t binop_x_40290 = gid_x_40180 * tile_sizze_40183;
    int64_t binop_x_40305 = gid_y_40181 * tile_sizze_40183;
    float accs_mem_41960[1];
    float mem_param_41950[1];
    
    for (int32_t i_1 = 0; i_1 < 1; i_1++)
        mem_param_41950[i_1] = color_42686[i_1];
    for (int64_t tile_id_40216 = 0; tile_id_40216 < num_whole_tiles_40204;
         tile_id_40216++) {
        int64_t binop_x_40288 = tile_sizze_40183 * tile_id_40216;
        int64_t ltid_y_40219 = sext_i32_i64(ltid_pre_43323);
        int64_t ltid_x_40217 = sext_i32_i64(ltid_pre_43324);
        int32_t ltid_flat_40218 = local_tid_43319;
        int64_t j_40289 = ltid_x_40217 + binop_x_40288;
        int64_t gtid_40291 = ltid_y_40219 + binop_x_40290;
        bool binop_x_40296 = slt64(j_40289, i32_res_28185);
        bool binop_y_40297 = slt64(gtid_40291, m_28170);
        bool cond_40298 = binop_x_40296 && binop_y_40297;
        float pre_40299;
        
        if (cond_40298) {
            float x_40300 = ((__global
                              float *) defunc_3_map_res_mem_41914)[gtid_40291 *
                                                                   i32_res_28185 +
                                                                   j_40289];
            
            pre_40299 = x_40300;
        } else {
            pre_40299 = 0.0F;
        }
        ((__local float *) color_42687)[ltid_y_40219 * tile_sizze_40183 +
                                        ltid_x_40217] = pre_40299;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_y_40251 = sext_i32_i64(ltid_pre_43323);
        int64_t ltid_x_40249 = sext_i32_i64(ltid_pre_43324);
        int32_t ltid_flat_40250 = local_tid_43319;
        int64_t gtid_40304 = ltid_y_40251 + binop_x_40290;
        int64_t gtid_40306 = ltid_x_40249 + binop_x_40305;
        float acc_40309 = mem_param_41950[(int64_t) 0];
        bool binop_x_40313 = slt64(gtid_40304, m_28170);
        bool binop_y_40314 = slt64(gtid_40306, i32_res_28185);
        bool cond_40315 = binop_x_40313 && binop_y_40314;
        float acc_40316;
        
        if (cond_40315) {
            float x_40317;
            float redout_41360 = acc_40309;
            
            for (int64_t i_41361 = 0; i_41361 < tile_sizze_40183; i_41361++) {
                float x_40321 = ((__local float *) color_42687)[ltid_y_40251 *
                                                                tile_sizze_40183 +
                                                                i_41361];
                int64_t slice_41407 = binop_x_40288 + i_41361;
                float x_40322 = ((__global float *) mem_41944)[slice_41407 *
                                                               (i32_res_28185 *
                                                                m_28170) +
                                                               gtid_40304 *
                                                               i32_res_28185 +
                                                               gtid_40306];
                float defunc_1_f_res_40323 = x_40321 * x_40322;
                float defunc_1_op_res_40320 = defunc_1_f_res_40323 +
                      redout_41360;
                float redout_tmp_43331 = defunc_1_op_res_40320;
                
                redout_41360 = redout_tmp_43331;
            }
            x_40317 = redout_41360;
            acc_40316 = x_40317;
        } else {
            acc_40316 = acc_40309;
        }
        color_42685[(int64_t) 0] = acc_40316;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_43329[1];
        
        for (int32_t i_2 = 0; i_2 < 1; i_2++)
            mem_param_tmp_43329[i_2] = color_42685[i_2];
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_41950[i_3] = mem_param_tmp_43329[i_3];
    }
    for (int32_t i_4 = 0; i_4 < 1; i_4++)
        accs_mem_41960[i_4] = mem_param_41950[i_4];
    if (cond_40332) {
        color_42685[(int64_t) 0] = accs_mem_41960[(int64_t) 0];
    } else {
        int64_t binop_x_40405 = tile_sizze_40183 * num_whole_tiles_40204;
        int64_t ltid_y_40335 = sext_i32_i64(ltid_pre_43323);
        int64_t ltid_x_40333 = sext_i32_i64(ltid_pre_43324);
        int32_t ltid_flat_40334 = local_tid_43319;
        int64_t j_40406 = ltid_x_40333 + binop_x_40405;
        int64_t gtid_40408 = binop_x_40290 + ltid_y_40335;
        bool binop_x_40413 = slt64(j_40406, i32_res_28185);
        bool binop_y_40414 = slt64(gtid_40408, m_28170);
        bool cond_40415 = binop_x_40413 && binop_y_40414;
        float pre_40416;
        
        if (cond_40415) {
            float x_40417 = ((__global
                              float *) defunc_3_map_res_mem_41914)[gtid_40408 *
                                                                   i32_res_28185 +
                                                                   j_40406];
            
            pre_40416 = x_40417;
        } else {
            pre_40416 = 0.0F;
        }
        ((__local float *) color_42687)[ltid_y_40335 * tile_sizze_40183 +
                                        ltid_x_40333] = pre_40416;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_y_40368 = sext_i32_i64(ltid_pre_43323);
        int64_t ltid_x_40366 = sext_i32_i64(ltid_pre_43324);
        int32_t ltid_flat_40367 = local_tid_43319;
        int64_t gtid_40422 = binop_x_40290 + ltid_y_40368;
        int64_t gtid_40424 = binop_x_40305 + ltid_x_40366;
        float acc_40427 = accs_mem_41960[(int64_t) 0];
        bool binop_x_40431 = slt64(gtid_40422, m_28170);
        bool binop_y_40432 = slt64(gtid_40424, i32_res_28185);
        bool cond_40433 = binop_x_40431 && binop_y_40432;
        float acc_40434;
        
        if (cond_40433) {
            float x_40435;
            float redout_41362 = acc_40427;
            
            for (int64_t i_41363 = 0; i_41363 < residual_input_40331;
                 i_41363++) {
                float x_40439 = ((__local float *) color_42687)[ltid_y_40368 *
                                                                tile_sizze_40183 +
                                                                i_41363];
                int64_t slice_41408 = binop_x_40405 + i_41363;
                float x_40440 = ((__global float *) mem_41944)[slice_41408 *
                                                               (i32_res_28185 *
                                                                m_28170) +
                                                               gtid_40422 *
                                                               i32_res_28185 +
                                                               gtid_40424];
                float defunc_1_f_res_40441 = x_40439 * x_40440;
                float defunc_1_op_res_40438 = defunc_1_f_res_40441 +
                      redout_41362;
                float redout_tmp_43332 = defunc_1_op_res_40438;
                
                redout_41362 = redout_tmp_43332;
            }
            x_40435 = redout_41362;
            acc_40434 = x_40435;
        } else {
            acc_40434 = acc_40427;
        }
        color_42686[(int64_t) 0] = acc_40434;
        barrier(CLK_LOCAL_MEM_FENCE);
        color_42685[(int64_t) 0] = color_42686[(int64_t) 0];
    }
    
    int64_t thread_out_index_43333 = gid_x_40180 * tile_sizze_40183 +
            sext_i32_i64(ltid_pre_43323);
    int64_t thread_out_index_43334 = gid_y_40181 * tile_sizze_40183 +
            sext_i32_i64(ltid_pre_43324);
    
    if (slt64(thread_out_index_43333, m_28170) && slt64(thread_out_index_43334,
                                                        i32_res_28185)) {
        ((__global float *) mem_41974)[thread_out_index_43333 * i32_res_28185 +
                                       thread_out_index_43334] =
            color_42685[(int64_t) 0];
    }
    
  error_5:
    return;
    #undef tile_sizze_40183
}
__kernel void mainDetailedzisegmap_intragroup_40480(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *color_42700_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *color_42699_backing_aligned_1,
                                                    int64_t N_28169,
                                                    int64_t m_28170,
                                                    int64_t i32_res_28185,
                                                    int64_t gridDim_x_40474,
                                                    int64_t gridDim_y_40475,
                                                    int64_t full_tiles_40505,
                                                    int64_t kk_40708, __global
                                                    unsigned char *defunc_4_map_res_mem_41986,
                                                    __global
                                                    unsigned char *mem_42011,
                                                    __global
                                                    unsigned char *mem_42204)
{
    #define Ty_40461 (mainDetailedziTy_40458)
    #define Ry_40462 (mainDetailedziRy_40460)
    #define Tx_40463 (mainDetailedziTx_40457)
    #define Rx_40464 (mainDetailedziRx_40459)
    #define Tk_40465 (mainDetailedziTk_40456)
    #define tk_div_tx_40466 (sdiv_up64(mainDetailedziTk_40456, mainDetailedziTx_40457))
    #define tk_div_ty_40467 (sdiv_up64(mainDetailedziTk_40456, mainDetailedziTy_40458))
    #define TxRx_40468 (mainDetailedziTx_40457 * mainDetailedziRx_40459)
    #define TyRy_40469 (mainDetailedziTy_40458 * mainDetailedziRy_40460)
    #define a_loc_szz_40471 (mainDetailedziTk_40456 * (mainDetailedziTy_40458 * mainDetailedziRy_40460))
    #define b_loc_szz_40473 (mainDetailedziRx_40459 * (mainDetailedziTx_40457 * mainDetailedziTk_40456))
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict color_42700_backing_1 = (__local volatile
                                                             char *) color_42700_backing_aligned_0;
    __local volatile char *restrict color_42699_backing_0 = (__local volatile
                                                             char *) color_42699_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43421;
    int32_t local_tid_43422;
    int64_t group_sizze_43425;
    int32_t wave_sizze_43424;
    int32_t group_tid_43423;
    
    global_tid_43421 = get_global_id(0);
    local_tid_43422 = get_local_id(0);
    group_sizze_43425 = get_local_size(0);
    wave_sizze_43424 = LOCKSTEP_WIDTH;
    group_tid_43423 = get_group_id(0);
    
    int32_t gid_flat_40480 = group_tid_43423;
    int32_t ltid_pre_43426 = squot32(local_tid_43422, sext_i64_i32(Tx_40463));
    int32_t ltid_pre_43427 = local_tid_43422 - squot32(local_tid_43422,
                                                       sext_i64_i32(Tx_40463)) *
            sext_i64_i32(Tx_40463);
    int64_t slice_43428 = gridDim_x_40474;
    int64_t slice_43429 = gridDim_y_40475 * slice_43428;
    int64_t gid_y_40479 = squot64(sext_i32_i64(group_tid_43423), slice_43428);
    int64_t remnant_43430 = sext_i32_i64(group_tid_43423) - gid_y_40479 *
            slice_43428;
    int64_t gid_x_40478 = remnant_43430;
    int64_t remnant_43431 = remnant_43430 - gid_x_40478;
    float color_42695[Ry_40462 * Rx_40464];
    float color_42696[Ry_40462 * Rx_40464];
    float color_42697[Rx_40464];
    float color_42698[Ry_40462];
    __local char *color_42699;
    
    color_42699 = (__local char *) color_42699_backing_0;
    
    __local char *color_42700;
    
    color_42700 = (__local char *) color_42700_backing_1;
    
    int64_t iii_40481 = TyRy_40469 * gid_y_40479;
    int64_t jjj_40482 = TxRx_40468 * gid_x_40478;
    int64_t ltid_y_40485 = sext_i32_i64(ltid_pre_43426);
    int64_t ltid_x_40483 = sext_i32_i64(ltid_pre_43427);
    int32_t ltid_flat_40484 = local_tid_43422;
    float color_42689[Ry_40462 * Rx_40464];
    
    for (int64_t i_40496 = 0; i_40496 < Ry_40462; i_40496++) {
        for (int64_t i_40499 = 0; i_40499 < Rx_40464; i_40499++) {
            color_42689[i_40496 * Rx_40464 + i_40499] = 0.0F;
        }
    }
    for (int64_t i_43434 = 0; i_43434 < Ry_40462; i_43434++) {
        for (int64_t i_43435 = 0; i_43435 < Rx_40464; i_43435++) {
            color_42696[i_43434 * Rx_40464 + i_43435] = color_42689[i_43434 *
                                                                    Rx_40464 +
                                                                    i_43435];
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float loop_mem_42118[Ry_40462 * Rx_40464];
    float mem_param_42032[Ry_40462 * Rx_40464];
    
    for (int32_t i_2 = 0; i_2 < Ry_40462 * Rx_40464; i_2++)
        mem_param_42032[i_2] = color_42696[i_2];
    for (int64_t i_40506 = 0; i_40506 < full_tiles_40505; i_40506++) {
        int64_t kk_40510 = Tk_40465 * i_40506;
        
        for (int64_t i_40511 = 0; i_40511 < Ry_40462; i_40511++) {
            int64_t binop_y_40534 = Ty_40461 * i_40511;
            
            for (int64_t i_40513 = 0; i_40513 < tk_div_tx_40466; i_40513++) {
                int64_t binop_y_40532 = Tx_40463 * i_40513;
                int64_t ltid_x_40515 = sext_i32_i64(ltid_pre_43426);
                int64_t ltid_y_40516 = sext_i32_i64(ltid_pre_43427);
                int32_t ltid_flat_40517 = local_tid_43422;
                int64_t k_40533 = ltid_y_40516 + binop_y_40532;
                int64_t i_40535 = ltid_x_40515 + binop_y_40534;
                int64_t gtid_40536 = iii_40481 + i_40535;
                int64_t A_col_idx_40537 = kk_40510 + k_40533;
                bool cond_40538 = slt64(gtid_40536, m_28170);
                float A_elem_40539;
                
                if (cond_40538) {
                    float A_elem_40541 = ((__global
                                           float *) defunc_4_map_res_mem_41986)[gtid_40536 *
                                                                                i32_res_28185 +
                                                                                A_col_idx_40537];
                    
                    A_elem_40539 = A_elem_40541;
                } else {
                    A_elem_40539 = 0.0F;
                }
                
                bool cond_40543 = slt64(k_40533, Tk_40465);
                int64_t a_loc_ind_40544;
                
                if (cond_40543) {
                    int64_t binop_y_40545 = Tk_40465 * i_40535;
                    int64_t loc_fi_40546 = k_40533 + binop_y_40545;
                    
                    a_loc_ind_40544 = loc_fi_40546;
                } else {
                    a_loc_ind_40544 = (int64_t) -1;
                }
                if (sle64((int64_t) 0, a_loc_ind_40544) &&
                    slt64(a_loc_ind_40544, a_loc_szz_40471)) {
                    ((__local float *) color_42700)[a_loc_ind_40544] =
                        A_elem_40539;
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        for (int64_t i_40551 = 0; i_40551 < tk_div_ty_40467; i_40551++) {
            int64_t binop_y_40572 = Ty_40461 * i_40551;
            
            for (int64_t i_40553 = 0; i_40553 < Rx_40464; i_40553++) {
                int64_t binop_y_40574 = Tx_40463 * i_40553;
                int64_t ltid_x_40555 = sext_i32_i64(ltid_pre_43426);
                int64_t ltid_y_40556 = sext_i32_i64(ltid_pre_43427);
                int32_t ltid_flat_40557 = local_tid_43422;
                int64_t k_40573 = ltid_x_40555 + binop_y_40572;
                int64_t j_40575 = ltid_y_40556 + binop_y_40574;
                int64_t gtid_40576 = jjj_40482 + j_40575;
                int64_t B_row_idx_40577 = kk_40510 + k_40573;
                bool cond_40578 = slt64(gtid_40576, N_28169);
                float B_elem_40579;
                
                if (cond_40578) {
                    float B_elem_40581 = ((__global
                                           float *) mem_42011)[B_row_idx_40577 *
                                                               N_28169 +
                                                               gtid_40576];
                    
                    B_elem_40579 = B_elem_40581;
                } else {
                    B_elem_40579 = 0.0F;
                }
                
                bool cond_40583 = slt64(k_40573, Tk_40465);
                int64_t b_loc_ind_40584;
                
                if (cond_40583) {
                    int64_t binop_y_40585 = TxRx_40468 * k_40573;
                    int64_t loc_fi_40586 = j_40575 + binop_y_40585;
                    
                    b_loc_ind_40584 = loc_fi_40586;
                } else {
                    b_loc_ind_40584 = (int64_t) -1;
                }
                if (sle64((int64_t) 0, b_loc_ind_40584) &&
                    slt64(b_loc_ind_40584, b_loc_szz_40473)) {
                    ((__local float *) color_42699)[b_loc_ind_40584] =
                        B_elem_40579;
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        
        float loop_mem_42117[Ry_40462 * Rx_40464];
        float mem_param_42089[Ry_40462 * Rx_40464];
        
        for (int32_t i_3 = 0; i_3 < Ry_40462 * Rx_40464; i_3++)
            mem_param_42089[i_3] = mem_param_42032[i_3];
        for (int64_t i_40591 = 0; i_40591 < Tk_40465; i_40591++) {
            int64_t binop_y_40630 = TxRx_40468 * i_40591;
            int64_t ltid_y_40595 = sext_i32_i64(ltid_pre_43426);
            int64_t ltid_x_40593 = sext_i32_i64(ltid_pre_43427);
            int32_t ltid_flat_40594 = local_tid_43422;
            float color_42690[Rx_40464];
            float color_42691[Ry_40462];
            int64_t binop_x_40621 = Ry_40462 * ltid_y_40595;
            
            for (int64_t i_40619 = 0; i_40619 < Ry_40462; i_40619++) {
                int64_t binop_x_40622 = i_40619 + binop_x_40621;
                int64_t binop_y_40623 = Tk_40465 * binop_x_40622;
                int64_t a_loc_ind_40624 = i_40591 + binop_y_40623;
                
                for (int64_t i_43447 = 0; i_43447 < (int64_t) 1; i_43447++) {
                    color_42691[i_40619 + i_43447] = ((__local
                                                       float *) color_42700)[a_loc_ind_40624 +
                                                                             i_43447];
                }
            }
            
            int64_t binop_y_40632 = Rx_40464 * ltid_x_40593;
            
            for (int64_t i_40628 = 0; i_40628 < Rx_40464; i_40628++) {
                int64_t binop_x_40631 = i_40628 + binop_y_40630;
                int64_t b_loc_ind_40633 = binop_x_40631 + binop_y_40632;
                
                for (int64_t i_43449 = 0; i_43449 < (int64_t) 1; i_43449++) {
                    color_42690[i_40628 + i_43449] = ((__local
                                                       float *) color_42699)[b_loc_ind_40633 +
                                                                             i_43449];
                }
            }
            for (int64_t i_43450 = 0; i_43450 < Ry_40462; i_43450++) {
                color_42698[i_43450] = color_42691[i_43450];
            }
            for (int64_t i_43451 = 0; i_43451 < Rx_40464; i_43451++) {
                color_42697[i_43451] = color_42690[i_43451];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int64_t ltid_y_40640 = sext_i32_i64(ltid_pre_43426);
            int64_t ltid_x_40638 = sext_i32_i64(ltid_pre_43427);
            int32_t ltid_flat_40639 = local_tid_43422;
            int64_t binop_y_40681 = Ry_40462 * ltid_y_40640;
            int64_t binop_y_40685 = Rx_40464 * ltid_x_40638;
            
            for (int64_t i_40675 = 0; i_40675 < Ry_40462; i_40675++) {
                int64_t binop_x_40680 = iii_40481 + i_40675;
                int64_t cmpop_x_40682 = binop_x_40680 + binop_y_40681;
                bool binop_x_40683 = slt64(cmpop_x_40682, m_28170);
                
                for (int64_t i_40678 = 0; i_40678 < Rx_40464; i_40678++) {
                    int64_t binop_x_40684 = jjj_40482 + i_40678;
                    int64_t cmpop_x_40686 = binop_x_40684 + binop_y_40685;
                    bool binop_y_40687 = slt64(cmpop_x_40686, N_28169);
                    bool cond_40688 = binop_x_40683 && binop_y_40687;
                    
                    if (cond_40688) {
                        float a_40690 = color_42698[i_40675];
                        float b_40691 = color_42697[i_40678];
                        float c_40692 = mem_param_42089[i_40675 * Rx_40464 +
                                                        i_40678];
                        float defunc_1_f_res_40695 = a_40690 * b_40691;
                        float defunc_1_op_res_40699 = c_40692 +
                              defunc_1_f_res_40695;
                        
                        mem_param_42089[i_40675 * Rx_40464 + i_40678] =
                            defunc_1_op_res_40699;
                    }
                }
            }
            for (int64_t i_43454 = 0; i_43454 < Ry_40462; i_43454++) {
                for (int64_t i_43455 = 0; i_43455 < Rx_40464; i_43455++) {
                    color_42695[i_43454 * Rx_40464 + i_43455] =
                        mem_param_42089[i_43454 * Rx_40464 + i_43455];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            float mem_param_tmp_43444[Ry_40462 * Rx_40464];
            
            for (int32_t i_4 = 0; i_4 < Ry_40462 * Rx_40464; i_4++)
                mem_param_tmp_43444[i_4] = color_42695[i_4];
            for (int32_t i_5 = 0; i_5 < Ry_40462 * Rx_40464; i_5++)
                mem_param_42089[i_5] = mem_param_tmp_43444[i_5];
        }
        for (int32_t i_6 = 0; i_6 < Ry_40462 * Rx_40464; i_6++)
            loop_mem_42117[i_6] = mem_param_42089[i_6];
        
        float mem_param_tmp_43436[Ry_40462 * Rx_40464];
        
        for (int32_t i_7 = 0; i_7 < Ry_40462 * Rx_40464; i_7++)
            mem_param_tmp_43436[i_7] = loop_mem_42117[i_7];
        for (int32_t i_8 = 0; i_8 < Ry_40462 * Rx_40464; i_8++)
            mem_param_42032[i_8] = mem_param_tmp_43436[i_8];
    }
    for (int32_t i_9 = 0; i_9 < Ry_40462 * Rx_40464; i_9++)
        loop_mem_42118[i_9] = mem_param_42032[i_9];
    for (int64_t i_40709 = 0; i_40709 < Ry_40462; i_40709++) {
        int64_t binop_y_40734 = Ty_40461 * i_40709;
        
        for (int64_t i_40711 = 0; i_40711 < tk_div_tx_40466; i_40711++) {
            int64_t binop_y_40732 = Tx_40463 * i_40711;
            int64_t ltid_x_40713 = sext_i32_i64(ltid_pre_43426);
            int64_t ltid_y_40714 = sext_i32_i64(ltid_pre_43427);
            int32_t ltid_flat_40715 = local_tid_43422;
            int64_t k_40733 = ltid_y_40714 + binop_y_40732;
            int64_t i_40735 = ltid_x_40713 + binop_y_40734;
            int64_t gtid_40736 = iii_40481 + i_40735;
            int64_t A_col_idx_40737 = kk_40708 + k_40733;
            bool binop_x_40738 = slt64(gtid_40736, m_28170);
            bool binop_y_40739 = slt64(A_col_idx_40737, i32_res_28185);
            bool cond_40740 = binop_x_40738 && binop_y_40739;
            float A_elem_40741;
            
            if (cond_40740) {
                float A_elem_40743 = ((__global
                                       float *) defunc_4_map_res_mem_41986)[gtid_40736 *
                                                                            i32_res_28185 +
                                                                            A_col_idx_40737];
                
                A_elem_40741 = A_elem_40743;
            } else {
                A_elem_40741 = 0.0F;
            }
            
            bool cond_40745 = slt64(k_40733, Tk_40465);
            int64_t a_loc_ind_40746;
            
            if (cond_40745) {
                int64_t binop_y_40747 = Tk_40465 * i_40735;
                int64_t loc_fi_40748 = k_40733 + binop_y_40747;
                
                a_loc_ind_40746 = loc_fi_40748;
            } else {
                a_loc_ind_40746 = (int64_t) -1;
            }
            if (sle64((int64_t) 0, a_loc_ind_40746) && slt64(a_loc_ind_40746,
                                                             a_loc_szz_40471)) {
                ((__local float *) color_42700)[a_loc_ind_40746] = A_elem_40741;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    for (int64_t i_40753 = 0; i_40753 < tk_div_ty_40467; i_40753++) {
        int64_t binop_y_40776 = Ty_40461 * i_40753;
        
        for (int64_t i_40755 = 0; i_40755 < Rx_40464; i_40755++) {
            int64_t binop_y_40778 = Tx_40463 * i_40755;
            int64_t ltid_x_40757 = sext_i32_i64(ltid_pre_43426);
            int64_t ltid_y_40758 = sext_i32_i64(ltid_pre_43427);
            int32_t ltid_flat_40759 = local_tid_43422;
            int64_t k_40777 = ltid_x_40757 + binop_y_40776;
            int64_t j_40779 = ltid_y_40758 + binop_y_40778;
            int64_t gtid_40780 = jjj_40482 + j_40779;
            int64_t B_row_idx_40781 = kk_40708 + k_40777;
            bool binop_x_40782 = slt64(gtid_40780, N_28169);
            bool binop_y_40783 = slt64(B_row_idx_40781, i32_res_28185);
            bool cond_40784 = binop_x_40782 && binop_y_40783;
            float B_elem_40785;
            
            if (cond_40784) {
                float B_elem_40787 = ((__global
                                       float *) mem_42011)[B_row_idx_40781 *
                                                           N_28169 +
                                                           gtid_40780];
                
                B_elem_40785 = B_elem_40787;
            } else {
                B_elem_40785 = 0.0F;
            }
            
            bool cond_40789 = slt64(k_40777, Tk_40465);
            int64_t b_loc_ind_40790;
            
            if (cond_40789) {
                int64_t binop_y_40791 = TxRx_40468 * k_40777;
                int64_t loc_fi_40792 = j_40779 + binop_y_40791;
                
                b_loc_ind_40790 = loc_fi_40792;
            } else {
                b_loc_ind_40790 = (int64_t) -1;
            }
            if (sle64((int64_t) 0, b_loc_ind_40790) && slt64(b_loc_ind_40790,
                                                             b_loc_szz_40473)) {
                ((__local float *) color_42699)[b_loc_ind_40790] = B_elem_40785;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
    float loop_mem_42200[Ry_40462 * Rx_40464];
    float mem_param_42171[Ry_40462 * Rx_40464];
    
    for (int32_t i_10 = 0; i_10 < Ry_40462 * Rx_40464; i_10++)
        mem_param_42171[i_10] = loop_mem_42118[i_10];
    for (int64_t i_40797 = 0; i_40797 < Tk_40465; i_40797++) {
        int64_t cmpop_x_40799 = kk_40708 + i_40797;
        bool cond_40800 = slt64(cmpop_x_40799, i32_res_28185);
        
        if (cond_40800) {
            int64_t binop_y_40838 = TxRx_40468 * i_40797;
            int64_t bytes_42173 = (int64_t) 4 * Ry_40462;
            int64_t bytes_42175 = (int64_t) 4 * Rx_40464;
            int64_t ltid_y_40803 = sext_i32_i64(ltid_pre_43426);
            int64_t ltid_x_40801 = sext_i32_i64(ltid_pre_43427);
            int32_t ltid_flat_40802 = local_tid_43422;
            float color_42692[Rx_40464];
            float color_42693[Ry_40462];
            int64_t binop_x_40829 = Ry_40462 * ltid_y_40803;
            
            for (int64_t i_40827 = 0; i_40827 < Ry_40462; i_40827++) {
                int64_t binop_x_40830 = i_40827 + binop_x_40829;
                int64_t binop_y_40831 = Tk_40465 * binop_x_40830;
                int64_t a_loc_ind_40832 = i_40797 + binop_y_40831;
                
                for (int64_t i_43463 = 0; i_43463 < (int64_t) 1; i_43463++) {
                    color_42693[i_40827 + i_43463] = ((__local
                                                       float *) color_42700)[a_loc_ind_40832 +
                                                                             i_43463];
                }
            }
            
            int64_t binop_y_40840 = Rx_40464 * ltid_x_40801;
            
            for (int64_t i_40836 = 0; i_40836 < Rx_40464; i_40836++) {
                int64_t binop_x_40839 = i_40836 + binop_y_40838;
                int64_t b_loc_ind_40841 = binop_x_40839 + binop_y_40840;
                
                for (int64_t i_43465 = 0; i_43465 < (int64_t) 1; i_43465++) {
                    color_42692[i_40836 + i_43465] = ((__local
                                                       float *) color_42699)[b_loc_ind_40841 +
                                                                             i_43465];
                }
            }
            for (int64_t i_43466 = 0; i_43466 < Ry_40462; i_43466++) {
                color_42698[i_43466] = color_42693[i_43466];
            }
            for (int64_t i_43467 = 0; i_43467 < Rx_40464; i_43467++) {
                color_42697[i_43467] = color_42692[i_43467];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int64_t ltid_y_40848 = sext_i32_i64(ltid_pre_43426);
            int64_t ltid_x_40846 = sext_i32_i64(ltid_pre_43427);
            int32_t ltid_flat_40847 = local_tid_43422;
            int64_t binop_y_40889 = Ry_40462 * ltid_y_40848;
            int64_t binop_y_40893 = Rx_40464 * ltid_x_40846;
            
            for (int64_t i_40883 = 0; i_40883 < Ry_40462; i_40883++) {
                int64_t binop_x_40888 = iii_40481 + i_40883;
                int64_t cmpop_x_40890 = binop_x_40888 + binop_y_40889;
                bool binop_x_40891 = slt64(cmpop_x_40890, m_28170);
                
                for (int64_t i_40886 = 0; i_40886 < Rx_40464; i_40886++) {
                    int64_t binop_x_40892 = jjj_40482 + i_40886;
                    int64_t cmpop_x_40894 = binop_x_40892 + binop_y_40893;
                    bool binop_y_40895 = slt64(cmpop_x_40894, N_28169);
                    bool cond_40896 = binop_x_40891 && binop_y_40895;
                    
                    if (cond_40896) {
                        float a_40898 = color_42698[i_40883];
                        float b_40899 = color_42697[i_40886];
                        float c_40900 = mem_param_42171[i_40883 * Rx_40464 +
                                                        i_40886];
                        float defunc_1_f_res_40903 = a_40898 * b_40899;
                        float defunc_1_op_res_40907 = c_40900 +
                              defunc_1_f_res_40903;
                        
                        mem_param_42171[i_40883 * Rx_40464 + i_40886] =
                            defunc_1_op_res_40907;
                    }
                }
            }
            for (int64_t i_43470 = 0; i_43470 < Ry_40462; i_43470++) {
                for (int64_t i_43471 = 0; i_43471 < Rx_40464; i_43471++) {
                    color_42696[i_43470 * Rx_40464 + i_43471] =
                        mem_param_42171[i_43470 * Rx_40464 + i_43471];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            for (int64_t i_43472 = 0; i_43472 < Ry_40462; i_43472++) {
                for (int64_t i_43473 = 0; i_43473 < Rx_40464; i_43473++) {
                    color_42695[i_43472 * Rx_40464 + i_43473] =
                        color_42696[i_43472 * Rx_40464 + i_43473];
                }
            }
        } else {
            for (int64_t i_43474 = 0; i_43474 < Ry_40462; i_43474++) {
                for (int64_t i_43475 = 0; i_43475 < Rx_40464; i_43475++) {
                    color_42695[i_43474 * Rx_40464 + i_43475] =
                        mem_param_42171[i_43474 * Rx_40464 + i_43475];
                }
            }
        }
        
        float mem_param_tmp_43460[Ry_40462 * Rx_40464];
        
        for (int32_t i_11 = 0; i_11 < Ry_40462 * Rx_40464; i_11++)
            mem_param_tmp_43460[i_11] = color_42695[i_11];
        for (int32_t i_12 = 0; i_12 < Ry_40462 * Rx_40464; i_12++)
            mem_param_42171[i_12] = mem_param_tmp_43460[i_12];
    }
    for (int32_t i_13 = 0; i_13 < Ry_40462 * Rx_40464; i_13++)
        loop_mem_42200[i_13] = mem_param_42171[i_13];
    
    int64_t reg_tile_i_43476 = squot64(sext_i32_i64(local_tid_43422), Tx_40463);
    int64_t reg_tile_i_43477 = sext_i32_i64(local_tid_43422) -
            squot64(sext_i32_i64(local_tid_43422), Tx_40463) * Tx_40463;
    int64_t tile_dim_start_43478 = Ry_40462 * (Ty_40461 * gid_y_40479 +
                                               reg_tile_i_43476);
    int64_t tile_dim_start_43479 = Rx_40464 * (Tx_40463 * gid_x_40478 +
                                               reg_tile_i_43477);
    
    for (int64_t nest_i_43480 = 0; nest_i_43480 < Ry_40462; nest_i_43480++) {
        for (int64_t nest_i_43481 = 0; nest_i_43481 < Rx_40464;
             nest_i_43481++) {
            if (slt64(tile_dim_start_43478 + nest_i_43480, m_28170) &&
                slt64(tile_dim_start_43479 + nest_i_43481, N_28169)) {
                ((__global float *) mem_42204)[(tile_dim_start_43478 +
                                                nest_i_43480) * N_28169 +
                                               (tile_dim_start_43479 +
                                                nest_i_43481)] =
                    loop_mem_42200[nest_i_43480 * Rx_40464 + nest_i_43481];
            }
        }
    }
    
  error_9:
    return;
    #undef Ty_40461
    #undef Ry_40462
    #undef Tx_40463
    #undef Rx_40464
    #undef Tk_40465
    #undef tk_div_tx_40466
    #undef tk_div_ty_40467
    #undef TxRx_40468
    #undef TyRy_40469
    #undef a_loc_szz_40471
    #undef b_loc_szz_40473
}
__kernel void mainDetailedzisegmap_intragroup_40914(__global
                                                    int *global_failure,
                                                    int failure_is_an_option,
                                                    __global
                                                    int64_t *global_failure_args,
                                                    __local volatile
                                                    int64_t *color_42709_backing_aligned_0,
                                                    int64_t N_28169,
                                                    int64_t m_28170,
                                                    int32_t n_28173,
                                                    float hfrac_28175,
                                                    int64_t i32_res_28179,
                                                    int32_t k2p2_28181,
                                                    int64_t segmap_usable_groups_32159,
                                                    int64_t num_whole_tiles_40936,
                                                    int64_t residual_input_41037,
                                                    unsigned char cond_41038,
                                                    __global
                                                    unsigned char *mem_42270,
                                                    __global
                                                    unsigned char *mem_42273,
                                                    __global
                                                    unsigned char *mem_42307,
                                                    __global
                                                    unsigned char *mem_42310,
                                                    __global
                                                    unsigned char *mem_42313)
{
    #define segmap_group_sizze_32158 (mainDetailedzisegmap_group_sizze_32123)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict color_42709_backing_0 = (__local volatile
                                                             char *) color_42709_backing_aligned_0;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43667;
    int32_t local_tid_43668;
    int64_t group_sizze_43671;
    int32_t wave_sizze_43670;
    int32_t group_tid_43669;
    
    global_tid_43667 = get_global_id(0);
    local_tid_43668 = get_local_id(0);
    group_sizze_43671 = get_local_size(0);
    wave_sizze_43670 = LOCKSTEP_WIDTH;
    group_tid_43669 = get_group_id(0);
    
    int32_t gid_flat_40914 = group_tid_43669;
    int32_t ltid_pre_43672 = local_tid_43668;
    int64_t slice_43673 = segmap_usable_groups_32159;
    int64_t gid_40913 = sext_i32_i64(group_tid_43669);
    int64_t remnant_43674 = sext_i32_i64(group_tid_43669) - gid_40913;
    float color_42705[1];
    float color_42706[1];
    int32_t color_42707[1];
    int32_t color_42708[1];
    __local char *color_42709;
    
    color_42709 = (__local char *) color_42709_backing_0;
    
    int32_t color_42710[1];
    int64_t binop_x_40921 = segmap_group_sizze_32158 * gid_40913;
    int64_t ltid_40915 = sext_i32_i64(ltid_pre_43672);
    int32_t ltid_flat_40916 = local_tid_43668;
    int64_t gtid_40922 = ltid_40915 + binop_x_40921;
    bool cond_40923 = slt64(gtid_40922, m_28170);
    int32_t pre_40924;
    
    if (cond_40923) {
        int32_t defunc_0_f_res_40926;
        int32_t redout_41370 = 0;
        
        for (int32_t i_41410 = 0; i_41410 < n_28173; i_41410++) {
            int64_t i_41371 = sext_i32_i64(i_41410);
            float x_40930 = ((__global float *) mem_42270)[i_41371 * m_28170 +
                                                           gtid_40922];
            bool isnan_res_40931;
            
            isnan_res_40931 = futrts_isnan32(x_40930);
            
            bool cond_40932 = !isnan_res_40931;
            int32_t defunc_0_f_res_40933 = btoi_bool_i32(cond_40932);
            int32_t defunc_1_op_res_40929 = add32(defunc_0_f_res_40933,
                                                  redout_41370);
            int32_t redout_tmp_43675 = defunc_1_op_res_40929;
            
            redout_41370 = redout_tmp_43675;
        }
        defunc_0_f_res_40926 = redout_41370;
        pre_40924 = defunc_0_f_res_40926;
    } else {
        pre_40924 = 0;
    }
    color_42710[(int64_t) 0] = pre_40924;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t ltid_40937 = sext_i32_i64(ltid_pre_43672);
    int32_t ltid_flat_40938 = local_tid_43668;
    
    color_42706[(int64_t) 0] = 0.0F;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float accs_mem_42289[1];
    float mem_param_42281[1];
    
    for (int32_t i_1 = 0; i_1 < 1; i_1++)
        mem_param_42281[i_1] = color_42706[i_1];
    for (int64_t tile_id_40944 = 0; tile_id_40944 < num_whole_tiles_40936;
         tile_id_40944++) {
        int64_t binop_x_40993 = segmap_group_sizze_32158 * tile_id_40944;
        int64_t ltid_40945 = sext_i32_i64(ltid_pre_43672);
        int32_t ltid_flat_40946 = local_tid_43668;
        int64_t j_40994 = ltid_40945 + binop_x_40993;
        bool cond_40998 = slt64(j_40994, i32_res_28179);
        int32_t pre_40999;
        
        if (cond_40998) {
            int32_t index_primexp_41328 = sext_i64_i32(j_40994);
            
            pre_40999 = index_primexp_41328;
        } else {
            pre_40999 = 0;
        }
        ((__local int32_t *) color_42709)[ltid_40945] = pre_40999;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_40964 = sext_i32_i64(ltid_pre_43672);
        int32_t ltid_flat_40965 = local_tid_43668;
        int64_t gtid_41004 = binop_x_40921 + ltid_40964;
        float acc_41006 = mem_param_42281[(int64_t) 0];
        bool cond_41007 = slt64(gtid_41004, m_28170);
        float acc_41008;
        
        if (cond_41007) {
            int32_t defunc_0_f_res_41005 = color_42710[(int64_t) 0];
            float x_41009;
            float redout_41372 = acc_41006;
            
            for (int64_t i_41373 = 0; i_41373 < segmap_group_sizze_32158;
                 i_41373++) {
                int32_t x_41013 = ((__local int32_t *) color_42709)[i_41373];
                bool cond_41014 = slt32(x_41013, defunc_0_f_res_41005);
                float defunc_0_f_res_41015;
                
                if (cond_41014) {
                    int64_t i_41016 = sext_i32_i64(x_41013);
                    bool x_41017 = sle64((int64_t) 0, i_41016);
                    bool y_41018 = slt64(i_41016, N_28169);
                    bool bounds_check_41019 = x_41017 && y_41018;
                    bool index_certs_41020;
                    
                    if (!bounds_check_41019) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          46) == -1) {
                                global_failure_args[0] = i_41016;
                                global_failure_args[1] = N_28169;
                                ;
                            }
                            local_failure = true;
                            goto error_3;
                        }
                    }
                    
                    float defunc_0_f_res_t_res_41021 = ((__global
                                                         float *) mem_42273)[i_41016 *
                                                                             m_28170 +
                                                                             gtid_41004];
                    
                    defunc_0_f_res_41015 = defunc_0_f_res_t_res_41021;
                } else {
                    defunc_0_f_res_41015 = 0.0F;
                }
                
                float defunc_0_f_res_41022 = defunc_0_f_res_41015 *
                      defunc_0_f_res_41015;
                float defunc_1_op_res_41012 = defunc_0_f_res_41022 +
                      redout_41372;
                float redout_tmp_43678 = defunc_1_op_res_41012;
                
                redout_41372 = redout_tmp_43678;
            }
            x_41009 = redout_41372;
            acc_41008 = x_41009;
        } else {
            acc_41008 = acc_41006;
        }
        color_42705[(int64_t) 0] = acc_41008;
        
      error_3:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_43676[1];
        
        for (int32_t i_2 = 0; i_2 < 1; i_2++)
            mem_param_tmp_43676[i_2] = color_42705[i_2];
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_42281[i_3] = mem_param_tmp_43676[i_3];
    }
    for (int32_t i_4 = 0; i_4 < 1; i_4++)
        accs_mem_42289[i_4] = mem_param_42281[i_4];
    if (cond_41038) {
        color_42705[(int64_t) 0] = accs_mem_42289[(int64_t) 0];
    } else {
        int64_t binop_x_41048 = segmap_group_sizze_32158 *
                num_whole_tiles_40936;
        int64_t ltid_41039 = sext_i32_i64(ltid_pre_43672);
        int32_t ltid_flat_41040 = local_tid_43668;
        int64_t j_41049 = ltid_41039 + binop_x_41048;
        bool cond_41053 = slt64(j_41049, i32_res_28179);
        int32_t pre_41054;
        
        if (cond_41053) {
            int32_t index_primexp_41329 = sext_i64_i32(j_41049);
            
            pre_41054 = index_primexp_41329;
        } else {
            pre_41054 = 0;
        }
        ((__local int32_t *) color_42709)[ltid_41039] = pre_41054;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_41059 = sext_i32_i64(ltid_pre_43672);
        int32_t ltid_flat_41060 = local_tid_43668;
        int64_t gtid_41067 = binop_x_40921 + ltid_41059;
        float acc_41069 = accs_mem_42289[(int64_t) 0];
        bool cond_41070 = slt64(gtid_41067, m_28170);
        float acc_41071;
        
        if (cond_41070) {
            int32_t defunc_0_f_res_41068 = color_42710[(int64_t) 0];
            float x_41072;
            float redout_41374 = acc_41069;
            
            for (int64_t i_41375 = 0; i_41375 < residual_input_41037;
                 i_41375++) {
                int32_t x_41076 = ((__local int32_t *) color_42709)[i_41375];
                bool cond_41077 = slt32(x_41076, defunc_0_f_res_41068);
                float defunc_0_f_res_41078;
                
                if (cond_41077) {
                    int64_t i_41079 = sext_i32_i64(x_41076);
                    bool x_41080 = sle64((int64_t) 0, i_41079);
                    bool y_41081 = slt64(i_41079, N_28169);
                    bool bounds_check_41082 = x_41080 && y_41081;
                    bool index_certs_41083;
                    
                    if (!bounds_check_41082) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          47) == -1) {
                                global_failure_args[0] = i_41079;
                                global_failure_args[1] = N_28169;
                                ;
                            }
                            local_failure = true;
                            goto error_5;
                        }
                    }
                    
                    float defunc_0_f_res_t_res_41084 = ((__global
                                                         float *) mem_42273)[i_41079 *
                                                                             m_28170 +
                                                                             gtid_41067];
                    
                    defunc_0_f_res_41078 = defunc_0_f_res_t_res_41084;
                } else {
                    defunc_0_f_res_41078 = 0.0F;
                }
                
                float defunc_0_f_res_41085 = defunc_0_f_res_41078 *
                      defunc_0_f_res_41078;
                float defunc_1_op_res_41075 = defunc_0_f_res_41085 +
                      redout_41374;
                float redout_tmp_43679 = defunc_1_op_res_41075;
                
                redout_41374 = redout_tmp_43679;
            }
            x_41072 = redout_41374;
            acc_41071 = x_41072;
        } else {
            acc_41071 = acc_41069;
        }
        color_42706[(int64_t) 0] = acc_41071;
        
      error_5:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        color_42705[(int64_t) 0] = color_42706[(int64_t) 0];
    }
    
    int64_t ltid_41088 = sext_i32_i64(ltid_pre_43672);
    int32_t ltid_flat_41089 = local_tid_43668;
    int64_t gtid_41099 = binop_x_40921 + ltid_41088;
    bool cond_41101 = slt64(gtid_41099, m_28170);
    int32_t postlude_41102;
    int32_t postlude_41103;
    float postlude_41104;
    
    if (cond_41101) {
        float defunc_0_f_res_41100 = color_42705[(int64_t) 0];
        int32_t defunc_0_f_res_41105 = color_42710[(int64_t) 0];
        int32_t r32_arg_41106 = sub32(defunc_0_f_res_41105, k2p2_28181);
        float i32_res_41107 = sitofp_i32_f32(r32_arg_41106);
        float sqrt_arg_41108 = defunc_0_f_res_41100 / i32_res_41107;
        float sqrt_res_41109;
        
        sqrt_res_41109 = futrts_sqrt32(sqrt_arg_41108);
        
        float i32_res_41110 = sitofp_i32_f32(defunc_0_f_res_41105);
        float t32_arg_41111 = hfrac_28175 * i32_res_41110;
        int32_t f32_res_41112 = fptosi_f32_i32(t32_arg_41111);
        
        postlude_41102 = f32_res_41112;
        postlude_41103 = defunc_0_f_res_41105;
        postlude_41104 = sqrt_res_41109;
    } else {
        postlude_41102 = 0;
        postlude_41103 = 0;
        postlude_41104 = 0.0F;
    }
    color_42708[(int64_t) 0] = postlude_41102;
    color_42707[(int64_t) 0] = postlude_41103;
    color_42706[(int64_t) 0] = postlude_41104;
    barrier(CLK_LOCAL_MEM_FENCE);
    if (slt64(sext_i32_i64(local_tid_43668) + segmap_group_sizze_32158 *
              sext_i32_i64(group_tid_43669), m_28170)) {
        ((__global int32_t *) mem_42307)[sext_i32_i64(local_tid_43668) +
                                         segmap_group_sizze_32158 *
                                         sext_i32_i64(group_tid_43669)] =
            color_42708[(int64_t) 0];
    }
    if (slt64(sext_i32_i64(local_tid_43668) + segmap_group_sizze_32158 *
              sext_i32_i64(group_tid_43669), m_28170)) {
        ((__global int32_t *) mem_42310)[sext_i32_i64(local_tid_43668) +
                                         segmap_group_sizze_32158 *
                                         sext_i32_i64(group_tid_43669)] =
            color_42707[(int64_t) 0];
    }
    if (slt64(sext_i32_i64(local_tid_43668) + segmap_group_sizze_32158 *
              sext_i32_i64(group_tid_43669), m_28170)) {
        ((__global float *) mem_42313)[sext_i32_i64(local_tid_43668) +
                                       segmap_group_sizze_32158 *
                                       sext_i32_i64(group_tid_43669)] =
            color_42706[(int64_t) 0];
    }
    
  error_7:
    return;
    #undef segmap_group_sizze_32158
}
__kernel void mainDetailedzisegmap_intragroup_41120(__global
                                                    int *global_failure,
                                                    int failure_is_an_option,
                                                    __global
                                                    int64_t *global_failure_args,
                                                    __local volatile
                                                    int64_t *color_42713_backing_aligned_0,
                                                    int64_t N_28169,
                                                    int64_t m_28170,
                                                    int64_t i32_res_28571,
                                                    int64_t segmap_usable_groups_32402,
                                                    int64_t num_whole_tiles_41140,
                                                    int64_t residual_input_41251,
                                                    unsigned char cond_41252,
                                                    __global
                                                    unsigned char *defunc_4_map_res_mem_42266,
                                                    __global
                                                    unsigned char *defunc_3_map_res_mem_42344,
                                                    __global
                                                    unsigned char *defunc_3_map_res_mem_42345,
                                                    __global
                                                    unsigned char *mem_42378)
{
    #define segmap_group_sizze_32401 (mainDetailedzisegmap_group_sizze_32378)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict color_42713_backing_0 = (__local volatile
                                                             char *) color_42713_backing_aligned_0;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43866;
    int32_t local_tid_43867;
    int64_t group_sizze_43870;
    int32_t wave_sizze_43869;
    int32_t group_tid_43868;
    
    global_tid_43866 = get_global_id(0);
    local_tid_43867 = get_local_id(0);
    group_sizze_43870 = get_local_size(0);
    wave_sizze_43869 = LOCKSTEP_WIDTH;
    group_tid_43868 = get_group_id(0);
    
    int32_t gid_flat_41120 = group_tid_43868;
    int32_t ltid_pre_43871 = local_tid_43867;
    int64_t slice_43872 = segmap_usable_groups_32402;
    int64_t gid_41119 = sext_i32_i64(group_tid_43868);
    int64_t remnant_43873 = sext_i32_i64(group_tid_43868) - gid_41119;
    float color_42711[1];
    float color_42712[1];
    __local char *color_42713;
    
    color_42713 = (__local char *) color_42713_backing_0;
    
    int32_t color_42714[1];
    int32_t color_42715[1];
    int64_t binop_x_41129 = segmap_group_sizze_32401 * gid_41119;
    int64_t ltid_41121 = sext_i32_i64(ltid_pre_43871);
    int32_t ltid_flat_41122 = local_tid_43867;
    int64_t gtid_41130 = ltid_41121 + binop_x_41129;
    bool cond_41131 = slt64(gtid_41130, m_28170);
    int32_t pre_41132;
    int32_t pre_41133;
    
    if (cond_41131) {
        int32_t x_41134 = ((__global
                            int32_t *) defunc_3_map_res_mem_42345)[gtid_41130];
        int32_t x_41135 = ((__global
                            int32_t *) defunc_3_map_res_mem_42344)[gtid_41130];
        
        pre_41132 = x_41134;
        pre_41133 = x_41135;
    } else {
        pre_41132 = 0;
        pre_41133 = 0;
    }
    color_42715[(int64_t) 0] = pre_41132;
    color_42714[(int64_t) 0] = pre_41133;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t ltid_41141 = sext_i32_i64(ltid_pre_43871);
    int32_t ltid_flat_41142 = local_tid_43867;
    
    color_42712[(int64_t) 0] = 0.0F;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float accs_mem_42367[1];
    float mem_param_42359[1];
    
    for (int32_t i_1 = 0; i_1 < 1; i_1++)
        mem_param_42359[i_1] = color_42712[i_1];
    for (int64_t tile_id_41148 = 0; tile_id_41148 < num_whole_tiles_41140;
         tile_id_41148++) {
        int64_t binop_x_41201 = segmap_group_sizze_32401 * tile_id_41148;
        int64_t ltid_41149 = sext_i32_i64(ltid_pre_43871);
        int32_t ltid_flat_41150 = local_tid_43867;
        int64_t j_41202 = ltid_41149 + binop_x_41201;
        bool cond_41207 = slt64(j_41202, i32_res_28571);
        int32_t pre_41208;
        
        if (cond_41207) {
            int32_t index_primexp_41330 = sext_i64_i32(j_41202);
            int32_t tile_elem_41209 = index_primexp_41330;
            
            pre_41208 = tile_elem_41209;
        } else {
            pre_41208 = 0;
        }
        ((__local int32_t *) color_42713)[ltid_41149] = pre_41208;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_41169 = sext_i32_i64(ltid_pre_43871);
        int32_t ltid_flat_41170 = local_tid_43867;
        int64_t gtid_41213 = binop_x_41129 + ltid_41169;
        float acc_41216 = mem_param_42359[(int64_t) 0];
        bool cond_41217 = slt64(gtid_41213, m_28170);
        float acc_41218;
        
        if (cond_41217) {
            int32_t x_41214 = color_42715[(int64_t) 0];
            int32_t x_41215 = color_42714[(int64_t) 0];
            float x_41219;
            float redout_41376 = acc_41216;
            
            for (int64_t i_41377 = 0; i_41377 < segmap_group_sizze_32401;
                 i_41377++) {
                int32_t x_41223 = ((__local int32_t *) color_42713)[i_41377];
                bool cond_41224 = slt32(x_41223, x_41215);
                float defunc_0_f_res_41225;
                
                if (cond_41224) {
                    int32_t x_41226 = add32(x_41214, x_41223);
                    int32_t x_41227 = sub32(x_41226, x_41215);
                    int32_t i_41228 = add32(1, x_41227);
                    int64_t i_41229 = sext_i32_i64(i_41228);
                    bool x_41230 = sle64((int64_t) 0, i_41229);
                    bool y_41231 = slt64(i_41229, N_28169);
                    bool bounds_check_41232 = x_41230 && y_41231;
                    bool index_certs_41233;
                    
                    if (!bounds_check_41232) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          51) == -1) {
                                global_failure_args[0] = i_41229;
                                global_failure_args[1] = N_28169;
                                ;
                            }
                            local_failure = true;
                            goto error_3;
                        }
                    }
                    
                    float defunc_0_f_res_t_res_41234 = ((__global
                                                         float *) defunc_4_map_res_mem_42266)[gtid_41213 *
                                                                                              N_28169 +
                                                                                              i_41229];
                    
                    defunc_0_f_res_41225 = defunc_0_f_res_t_res_41234;
                } else {
                    defunc_0_f_res_41225 = 0.0F;
                }
                
                float defunc_1_op_res_41222 = defunc_0_f_res_41225 +
                      redout_41376;
                float redout_tmp_43876 = defunc_1_op_res_41222;
                
                redout_41376 = redout_tmp_43876;
            }
            x_41219 = redout_41376;
            acc_41218 = x_41219;
        } else {
            acc_41218 = acc_41216;
        }
        color_42711[(int64_t) 0] = acc_41218;
        
      error_3:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_43874[1];
        
        for (int32_t i_2 = 0; i_2 < 1; i_2++)
            mem_param_tmp_43874[i_2] = color_42711[i_2];
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_42359[i_3] = mem_param_tmp_43874[i_3];
    }
    for (int32_t i_4 = 0; i_4 < 1; i_4++)
        accs_mem_42367[i_4] = mem_param_42359[i_4];
    if (cond_41252) {
        color_42711[(int64_t) 0] = accs_mem_42367[(int64_t) 0];
    } else {
        int64_t binop_x_41262 = segmap_group_sizze_32401 *
                num_whole_tiles_41140;
        int64_t ltid_41253 = sext_i32_i64(ltid_pre_43871);
        int32_t ltid_flat_41254 = local_tid_43867;
        int64_t j_41263 = ltid_41253 + binop_x_41262;
        bool cond_41268 = slt64(j_41263, i32_res_28571);
        int32_t pre_41269;
        
        if (cond_41268) {
            int32_t index_primexp_41331 = sext_i64_i32(j_41263);
            int32_t tile_elem_41270 = index_primexp_41331;
            
            pre_41269 = tile_elem_41270;
        } else {
            pre_41269 = 0;
        }
        ((__local int32_t *) color_42713)[ltid_41253] = pre_41269;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_41274 = sext_i32_i64(ltid_pre_43871);
        int32_t ltid_flat_41275 = local_tid_43867;
        int64_t gtid_41282 = binop_x_41129 + ltid_41274;
        float acc_41285 = accs_mem_42367[(int64_t) 0];
        bool cond_41286 = slt64(gtid_41282, m_28170);
        float acc_41287;
        
        if (cond_41286) {
            int32_t x_41283 = color_42715[(int64_t) 0];
            int32_t x_41284 = color_42714[(int64_t) 0];
            float x_41288;
            float redout_41378 = acc_41285;
            
            for (int64_t i_41379 = 0; i_41379 < residual_input_41251;
                 i_41379++) {
                int32_t x_41292 = ((__local int32_t *) color_42713)[i_41379];
                bool cond_41293 = slt32(x_41292, x_41284);
                float defunc_0_f_res_41294;
                
                if (cond_41293) {
                    int32_t x_41295 = add32(x_41283, x_41292);
                    int32_t x_41296 = sub32(x_41295, x_41284);
                    int32_t i_41297 = add32(1, x_41296);
                    int64_t i_41298 = sext_i32_i64(i_41297);
                    bool x_41299 = sle64((int64_t) 0, i_41298);
                    bool y_41300 = slt64(i_41298, N_28169);
                    bool bounds_check_41301 = x_41299 && y_41300;
                    bool index_certs_41302;
                    
                    if (!bounds_check_41301) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          52) == -1) {
                                global_failure_args[0] = i_41298;
                                global_failure_args[1] = N_28169;
                                ;
                            }
                            local_failure = true;
                            goto error_5;
                        }
                    }
                    
                    float defunc_0_f_res_t_res_41303 = ((__global
                                                         float *) defunc_4_map_res_mem_42266)[gtid_41282 *
                                                                                              N_28169 +
                                                                                              i_41298];
                    
                    defunc_0_f_res_41294 = defunc_0_f_res_t_res_41303;
                } else {
                    defunc_0_f_res_41294 = 0.0F;
                }
                
                float defunc_1_op_res_41291 = defunc_0_f_res_41294 +
                      redout_41378;
                float redout_tmp_43877 = defunc_1_op_res_41291;
                
                redout_41378 = redout_tmp_43877;
            }
            x_41288 = redout_41378;
            acc_41287 = x_41288;
        } else {
            acc_41287 = acc_41285;
        }
        color_42712[(int64_t) 0] = acc_41287;
        
      error_5:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        color_42711[(int64_t) 0] = color_42712[(int64_t) 0];
    }
    if (slt64(sext_i32_i64(local_tid_43867) + segmap_group_sizze_32401 *
              sext_i32_i64(group_tid_43868), m_28170)) {
        ((__global float *) mem_42378)[sext_i32_i64(local_tid_43867) +
                                       segmap_group_sizze_32401 *
                                       sext_i32_i64(group_tid_43868)] =
            color_42711[(int64_t) 0];
    }
    
  error_6:
    return;
    #undef segmap_group_sizze_32401
}
__kernel void mainDetailedzisegred_large_30574(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_43037_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_43035_backing_aligned_1,
                                               int64_t N_28169, int64_t m_28170,
                                               int64_t i32_res_28179,
                                               int64_t i32_res_28185,
                                               int64_t num_groups_30713,
                                               int64_t groups_per_segment_43021,
                                               int64_t elements_per_thread_43022,
                                               int64_t virt_num_groups_43023,
                                               int64_t threads_per_segment_43025,
                                               __global
                                               unsigned char *images_mem_41421,
                                               __global
                                               unsigned char *binop_p_mem_41432,
                                               __global
                                               unsigned char *mem_41579,
                                               __global
                                               unsigned char *mem_41585,
                                               __global
                                               unsigned char *segred_tmp_mem_43026,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_43028)
{
    #define segred_group_sizze_30712 (mainDetailedzisegred_group_sizze_30568)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_43037_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_43037_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_43035_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43035_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43030;
    int32_t local_tid_43031;
    int64_t group_sizze_43034;
    int32_t wave_sizze_43033;
    int32_t group_tid_43032;
    
    global_tid_43030 = get_global_id(0);
    local_tid_43031 = get_local_id(0);
    group_sizze_43034 = get_local_size(0);
    wave_sizze_43033 = LOCKSTEP_WIDTH;
    group_tid_43032 = get_group_id(0);
    
    int32_t phys_tid_30574 = global_tid_43030;
    __local char *red_arr_mem_43035;
    
    red_arr_mem_43035 = (__local char *) red_arr_mem_43035_backing_0;
    
    __local char *sync_arr_mem_43037;
    
    sync_arr_mem_43037 = (__local char *) sync_arr_mem_43037_backing_1;
    
    int32_t phys_group_id_43039;
    
    phys_group_id_43039 = get_group_id(0);
    for (int32_t i_43040 = 0; i_43040 <
         sdiv_up32(sext_i64_i32(virt_num_groups_43023) - phys_group_id_43039,
                   sext_i64_i32(num_groups_30713)); i_43040++) {
        int32_t virt_group_id_43041 = phys_group_id_43039 + i_43040 *
                sext_i64_i32(num_groups_30713);
        int32_t flat_segment_id_43042 = squot32(virt_group_id_43041,
                                                sext_i64_i32(groups_per_segment_43021));
        int64_t global_tid_43043 = srem64(sext_i32_i64(virt_group_id_43041) *
                                          segred_group_sizze_30712 +
                                          sext_i32_i64(local_tid_43031),
                                          segred_group_sizze_30712 *
                                          groups_per_segment_43021);
        int64_t slice_43044 = i32_res_28185;
        int64_t slice_43045 = i32_res_28185 * slice_43044;
        int64_t slice_43046 = m_28170 * slice_43045;
        int64_t gtid_30561 = squot64(sext_i32_i64(flat_segment_id_43042),
                                     slice_43045);
        int64_t remnant_43047 = sext_i32_i64(flat_segment_id_43042) -
                gtid_30561 * slice_43045;
        int64_t gtid_30562 = squot64(remnant_43047, slice_43044);
        int64_t remnant_43048 = remnant_43047 - gtid_30562 * slice_43044;
        int64_t gtid_30563 = remnant_43048;
        int64_t remnant_43049 = remnant_43048 - gtid_30563;
        int64_t gtid_30573;
        float x_acc_43050;
        int64_t chunk_sizze_43051 = smin64(elements_per_thread_43022,
                                           sdiv_up64(i32_res_28179 -
                                                     global_tid_43043,
                                                     threads_per_segment_43025));
        float x_30716;
        float x_30717;
        
        // neutral-initialise the accumulators
        {
            x_acc_43050 = 0.0F;
        }
        for (int64_t i_43055 = 0; i_43055 < chunk_sizze_43051; i_43055++) {
            gtid_30573 = global_tid_43043 + threads_per_segment_43025 * i_43055;
            // apply map function
            {
                float x_30722 = ((__global
                                  float *) images_mem_41421)[gtid_30561 *
                                                             N_28169 +
                                                             gtid_30573];
                float x_30723 = ((__global
                                  float *) binop_p_mem_41432)[gtid_30562 *
                                                              N_28169 +
                                                              gtid_30573];
                float x_30724 = ((__global float *) mem_41579)[gtid_30563 *
                                                               N_28169 +
                                                               gtid_30573];
                float x_30725 = x_30723 * x_30724;
                bool isnan_res_30726;
                
                isnan_res_30726 = futrts_isnan32(x_30722);
                
                float y_30727;
                
                if (isnan_res_30726) {
                    y_30727 = 0.0F;
                } else {
                    y_30727 = 1.0F;
                }
                
                float defunc_2_f_res_30728 = x_30725 * y_30727;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_30716 = x_acc_43050;
                }
                // load new values
                {
                    x_30717 = defunc_2_f_res_30728;
                }
                // apply reduction operator
                {
                    float defunc_1_op_res_30718 = x_30716 + x_30717;
                    
                    // store in accumulator
                    {
                        x_acc_43050 = defunc_1_op_res_30718;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_30716 = x_acc_43050;
            ((__local
              float *) red_arr_mem_43035)[sext_i32_i64(local_tid_43031)] =
                x_30716;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_43056;
        int32_t skip_waves_43057 = 1;
        float x_43052;
        float x_43053;
        
        offset_43056 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_43031,
                      sext_i64_i32(segred_group_sizze_30712))) {
                x_43052 = ((__local
                            float *) red_arr_mem_43035)[sext_i32_i64(local_tid_43031 +
                                                        offset_43056)];
            }
        }
        offset_43056 = 1;
        while (slt32(offset_43056, wave_sizze_43033)) {
            if (slt32(local_tid_43031 + offset_43056,
                      sext_i64_i32(segred_group_sizze_30712)) &&
                ((local_tid_43031 - squot32(local_tid_43031, wave_sizze_43033) *
                  wave_sizze_43033) & (2 * offset_43056 - 1)) == 0) {
                // read array element
                {
                    x_43053 = ((volatile __local
                                float *) red_arr_mem_43035)[sext_i32_i64(local_tid_43031 +
                                                            offset_43056)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43054 = x_43052 + x_43053;
                    
                    x_43052 = defunc_1_op_res_43054;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_43035)[sext_i32_i64(local_tid_43031)] =
                        x_43052;
                }
            }
            offset_43056 *= 2;
        }
        while (slt32(skip_waves_43057,
                     squot32(sext_i64_i32(segred_group_sizze_30712) +
                             wave_sizze_43033 - 1, wave_sizze_43033))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_43056 = skip_waves_43057 * wave_sizze_43033;
            if (slt32(local_tid_43031 + offset_43056,
                      sext_i64_i32(segred_group_sizze_30712)) &&
                ((local_tid_43031 - squot32(local_tid_43031, wave_sizze_43033) *
                  wave_sizze_43033) == 0 && (squot32(local_tid_43031,
                                                     wave_sizze_43033) & (2 *
                                                                          skip_waves_43057 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_43053 = ((__local
                                float *) red_arr_mem_43035)[sext_i32_i64(local_tid_43031 +
                                                            offset_43056)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43054 = x_43052 + x_43053;
                    
                    x_43052 = defunc_1_op_res_43054;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_43035)[sext_i32_i64(local_tid_43031)] =
                        x_43052;
                }
            }
            skip_waves_43057 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_43031) == (int64_t) 0) {
                x_acc_43050 = x_43052;
            }
        }
        if (groups_per_segment_43021 == (int64_t) 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_43031 == 0) {
                    ((__global float *) mem_41585)[gtid_30561 * (i32_res_28185 *
                                                                 i32_res_28185) +
                                                   gtid_30562 * i32_res_28185 +
                                                   gtid_30563] = x_acc_43050;
                }
            }
        } else {
            int32_t old_counter_43058;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_43031 == 0) {
                    ((__global
                      float *) segred_tmp_mem_43026)[sext_i32_i64(virt_group_id_43041)] =
                        x_acc_43050;
                    mem_fence_global();
                    old_counter_43058 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_43028)[sext_i32_i64(srem32(flat_segment_id_43042,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_43037)[(int64_t) 0] =
                        old_counter_43058 == groups_per_segment_43021 -
                        (int64_t) 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_43059 = ((__local
                                         bool *) sync_arr_mem_43037)[(int64_t) 0];
            
            if (is_last_group_43059) {
                if (local_tid_43031 == 0) {
                    old_counter_43058 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_43028)[sext_i32_i64(srem32(flat_segment_id_43042,
                                                                                                             10240))],
                                              (int) ((int64_t) 0 -
                                                     groups_per_segment_43021));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_43060 =
                            sdiv_up64(groups_per_segment_43021,
                                      segred_group_sizze_30712);
                    
                    x_30716 = 0.0F;
                    for (int64_t i_43061 = 0; i_43061 < read_per_thread_43060;
                         i_43061++) {
                        int64_t group_res_id_43062 =
                                sext_i32_i64(local_tid_43031) *
                                read_per_thread_43060 + i_43061;
                        int64_t index_of_group_res_43063 =
                                sext_i32_i64(flat_segment_id_43042) *
                                groups_per_segment_43021 + group_res_id_43062;
                        
                        if (slt64(group_res_id_43062,
                                  groups_per_segment_43021)) {
                            x_30717 = ((__global
                                        float *) segred_tmp_mem_43026)[index_of_group_res_43063];
                            
                            float defunc_1_op_res_30718 = x_30716 + x_30717;
                            
                            x_30716 = defunc_1_op_res_30718;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_43035)[sext_i32_i64(local_tid_43031)] =
                    x_30716;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_43064;
                    int32_t skip_waves_43065 = 1;
                    float x_43052;
                    float x_43053;
                    
                    offset_43064 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_43031,
                                  sext_i64_i32(segred_group_sizze_30712))) {
                            x_43052 = ((__local
                                        float *) red_arr_mem_43035)[sext_i32_i64(local_tid_43031 +
                                                                    offset_43064)];
                        }
                    }
                    offset_43064 = 1;
                    while (slt32(offset_43064, wave_sizze_43033)) {
                        if (slt32(local_tid_43031 + offset_43064,
                                  sext_i64_i32(segred_group_sizze_30712)) &&
                            ((local_tid_43031 - squot32(local_tid_43031,
                                                        wave_sizze_43033) *
                              wave_sizze_43033) & (2 * offset_43064 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_43053 = ((volatile __local
                                            float *) red_arr_mem_43035)[sext_i32_i64(local_tid_43031 +
                                                                        offset_43064)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43054 = x_43052 + x_43053;
                                
                                x_43052 = defunc_1_op_res_43054;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43035)[sext_i32_i64(local_tid_43031)] =
                                    x_43052;
                            }
                        }
                        offset_43064 *= 2;
                    }
                    while (slt32(skip_waves_43065,
                                 squot32(sext_i64_i32(segred_group_sizze_30712) +
                                         wave_sizze_43033 - 1,
                                         wave_sizze_43033))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_43064 = skip_waves_43065 * wave_sizze_43033;
                        if (slt32(local_tid_43031 + offset_43064,
                                  sext_i64_i32(segred_group_sizze_30712)) &&
                            ((local_tid_43031 - squot32(local_tid_43031,
                                                        wave_sizze_43033) *
                              wave_sizze_43033) == 0 &&
                             (squot32(local_tid_43031, wave_sizze_43033) & (2 *
                                                                            skip_waves_43065 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_43053 = ((__local
                                            float *) red_arr_mem_43035)[sext_i32_i64(local_tid_43031 +
                                                                        offset_43064)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43054 = x_43052 + x_43053;
                                
                                x_43052 = defunc_1_op_res_43054;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_43035)[sext_i32_i64(local_tid_43031)] =
                                    x_43052;
                            }
                        }
                        skip_waves_43065 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_43031 == 0) {
                            ((__global float *) mem_41585)[gtid_30561 *
                                                           (i32_res_28185 *
                                                            i32_res_28185) +
                                                           gtid_30562 *
                                                           i32_res_28185 +
                                                           gtid_30563] =
                                x_43052;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_30712
}
__kernel void mainDetailedzisegred_large_31538(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_43273_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_43271_backing_aligned_1,
                                               int64_t N_28169, int64_t m_28170,
                                               int64_t i32_res_28179,
                                               int64_t i32_res_28185,
                                               int64_t num_groups_31591,
                                               int64_t groups_per_segment_43257,
                                               int64_t elements_per_thread_43258,
                                               int64_t virt_num_groups_43259,
                                               int64_t threads_per_segment_43261,
                                               __global
                                               unsigned char *images_mem_41421,
                                               __global
                                               unsigned char *binop_p_mem_41432,
                                               __global
                                               unsigned char *mem_41907,
                                               __global
                                               unsigned char *segred_tmp_mem_43262,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_43264)
{
    #define segred_group_sizze_31590 (mainDetailedzisegred_group_sizze_31532)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_43273_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_43273_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_43271_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43271_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43266;
    int32_t local_tid_43267;
    int64_t group_sizze_43270;
    int32_t wave_sizze_43269;
    int32_t group_tid_43268;
    
    global_tid_43266 = get_global_id(0);
    local_tid_43267 = get_local_id(0);
    group_sizze_43270 = get_local_size(0);
    wave_sizze_43269 = LOCKSTEP_WIDTH;
    group_tid_43268 = get_group_id(0);
    
    int32_t phys_tid_31538 = global_tid_43266;
    __local char *red_arr_mem_43271;
    
    red_arr_mem_43271 = (__local char *) red_arr_mem_43271_backing_0;
    
    __local char *sync_arr_mem_43273;
    
    sync_arr_mem_43273 = (__local char *) sync_arr_mem_43273_backing_1;
    
    int32_t phys_group_id_43275;
    
    phys_group_id_43275 = get_group_id(0);
    for (int32_t i_43276 = 0; i_43276 <
         sdiv_up32(sext_i64_i32(virt_num_groups_43259) - phys_group_id_43275,
                   sext_i64_i32(num_groups_31591)); i_43276++) {
        int32_t virt_group_id_43277 = phys_group_id_43275 + i_43276 *
                sext_i64_i32(num_groups_31591);
        int32_t flat_segment_id_43278 = squot32(virt_group_id_43277,
                                                sext_i64_i32(groups_per_segment_43257));
        int64_t global_tid_43279 = srem64(sext_i32_i64(virt_group_id_43277) *
                                          segred_group_sizze_31590 +
                                          sext_i32_i64(local_tid_43267),
                                          segred_group_sizze_31590 *
                                          groups_per_segment_43257);
        int64_t slice_43280 = i32_res_28185;
        int64_t slice_43281 = m_28170 * slice_43280;
        int64_t gtid_31527 = squot64(sext_i32_i64(flat_segment_id_43278),
                                     slice_43280);
        int64_t remnant_43282 = sext_i32_i64(flat_segment_id_43278) -
                gtid_31527 * slice_43280;
        int64_t gtid_31528 = remnant_43282;
        int64_t remnant_43283 = remnant_43282 - gtid_31528;
        int64_t gtid_31537;
        float x_acc_43284;
        int64_t chunk_sizze_43285 = smin64(elements_per_thread_43258,
                                           sdiv_up64(i32_res_28179 -
                                                     global_tid_43279,
                                                     threads_per_segment_43261));
        float x_31594;
        float x_31595;
        
        // neutral-initialise the accumulators
        {
            x_acc_43284 = 0.0F;
        }
        for (int64_t i_43289 = 0; i_43289 < chunk_sizze_43285; i_43289++) {
            gtid_31537 = global_tid_43279 + threads_per_segment_43261 * i_43289;
            // apply map function
            {
                float x_31600 = ((__global
                                  float *) images_mem_41421)[gtid_31527 *
                                                             N_28169 +
                                                             gtid_31537];
                bool isnan_res_31601;
                
                isnan_res_31601 = futrts_isnan32(x_31600);
                
                float defunc_1_f_res_31602;
                
                if (isnan_res_31601) {
                    defunc_1_f_res_31602 = 0.0F;
                } else {
                    float x_31599 = ((__global
                                      float *) binop_p_mem_41432)[gtid_31528 *
                                                                  N_28169 +
                                                                  gtid_31537];
                    float defunc_1_f_res_f_res_31603 = x_31599 * x_31600;
                    
                    defunc_1_f_res_31602 = defunc_1_f_res_f_res_31603;
                }
                // save map-out results
                { }
                // load accumulator
                {
                    x_31594 = x_acc_43284;
                }
                // load new values
                {
                    x_31595 = defunc_1_f_res_31602;
                }
                // apply reduction operator
                {
                    float defunc_1_op_res_31596 = x_31594 + x_31595;
                    
                    // store in accumulator
                    {
                        x_acc_43284 = defunc_1_op_res_31596;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_31594 = x_acc_43284;
            ((__local
              float *) red_arr_mem_43271)[sext_i32_i64(local_tid_43267)] =
                x_31594;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_43290;
        int32_t skip_waves_43291 = 1;
        float x_43286;
        float x_43287;
        
        offset_43290 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_43267,
                      sext_i64_i32(segred_group_sizze_31590))) {
                x_43286 = ((__local
                            float *) red_arr_mem_43271)[sext_i32_i64(local_tid_43267 +
                                                        offset_43290)];
            }
        }
        offset_43290 = 1;
        while (slt32(offset_43290, wave_sizze_43269)) {
            if (slt32(local_tid_43267 + offset_43290,
                      sext_i64_i32(segred_group_sizze_31590)) &&
                ((local_tid_43267 - squot32(local_tid_43267, wave_sizze_43269) *
                  wave_sizze_43269) & (2 * offset_43290 - 1)) == 0) {
                // read array element
                {
                    x_43287 = ((volatile __local
                                float *) red_arr_mem_43271)[sext_i32_i64(local_tid_43267 +
                                                            offset_43290)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43288 = x_43286 + x_43287;
                    
                    x_43286 = defunc_1_op_res_43288;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_43271)[sext_i32_i64(local_tid_43267)] =
                        x_43286;
                }
            }
            offset_43290 *= 2;
        }
        while (slt32(skip_waves_43291,
                     squot32(sext_i64_i32(segred_group_sizze_31590) +
                             wave_sizze_43269 - 1, wave_sizze_43269))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_43290 = skip_waves_43291 * wave_sizze_43269;
            if (slt32(local_tid_43267 + offset_43290,
                      sext_i64_i32(segred_group_sizze_31590)) &&
                ((local_tid_43267 - squot32(local_tid_43267, wave_sizze_43269) *
                  wave_sizze_43269) == 0 && (squot32(local_tid_43267,
                                                     wave_sizze_43269) & (2 *
                                                                          skip_waves_43291 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_43287 = ((__local
                                float *) red_arr_mem_43271)[sext_i32_i64(local_tid_43267 +
                                                            offset_43290)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43288 = x_43286 + x_43287;
                    
                    x_43286 = defunc_1_op_res_43288;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_43271)[sext_i32_i64(local_tid_43267)] =
                        x_43286;
                }
            }
            skip_waves_43291 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_43267) == (int64_t) 0) {
                x_acc_43284 = x_43286;
            }
        }
        if (groups_per_segment_43257 == (int64_t) 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_43267 == 0) {
                    ((__global float *) mem_41907)[gtid_31527 * i32_res_28185 +
                                                   gtid_31528] = x_acc_43284;
                }
            }
        } else {
            int32_t old_counter_43292;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_43267 == 0) {
                    ((__global
                      float *) segred_tmp_mem_43262)[sext_i32_i64(virt_group_id_43277)] =
                        x_acc_43284;
                    mem_fence_global();
                    old_counter_43292 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_43264)[sext_i32_i64(srem32(flat_segment_id_43278,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_43273)[(int64_t) 0] =
                        old_counter_43292 == groups_per_segment_43257 -
                        (int64_t) 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_43293 = ((__local
                                         bool *) sync_arr_mem_43273)[(int64_t) 0];
            
            if (is_last_group_43293) {
                if (local_tid_43267 == 0) {
                    old_counter_43292 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_43264)[sext_i32_i64(srem32(flat_segment_id_43278,
                                                                                                             10240))],
                                              (int) ((int64_t) 0 -
                                                     groups_per_segment_43257));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_43294 =
                            sdiv_up64(groups_per_segment_43257,
                                      segred_group_sizze_31590);
                    
                    x_31594 = 0.0F;
                    for (int64_t i_43295 = 0; i_43295 < read_per_thread_43294;
                         i_43295++) {
                        int64_t group_res_id_43296 =
                                sext_i32_i64(local_tid_43267) *
                                read_per_thread_43294 + i_43295;
                        int64_t index_of_group_res_43297 =
                                sext_i32_i64(flat_segment_id_43278) *
                                groups_per_segment_43257 + group_res_id_43296;
                        
                        if (slt64(group_res_id_43296,
                                  groups_per_segment_43257)) {
                            x_31595 = ((__global
                                        float *) segred_tmp_mem_43262)[index_of_group_res_43297];
                            
                            float defunc_1_op_res_31596 = x_31594 + x_31595;
                            
                            x_31594 = defunc_1_op_res_31596;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_43271)[sext_i32_i64(local_tid_43267)] =
                    x_31594;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_43298;
                    int32_t skip_waves_43299 = 1;
                    float x_43286;
                    float x_43287;
                    
                    offset_43298 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_43267,
                                  sext_i64_i32(segred_group_sizze_31590))) {
                            x_43286 = ((__local
                                        float *) red_arr_mem_43271)[sext_i32_i64(local_tid_43267 +
                                                                    offset_43298)];
                        }
                    }
                    offset_43298 = 1;
                    while (slt32(offset_43298, wave_sizze_43269)) {
                        if (slt32(local_tid_43267 + offset_43298,
                                  sext_i64_i32(segred_group_sizze_31590)) &&
                            ((local_tid_43267 - squot32(local_tid_43267,
                                                        wave_sizze_43269) *
                              wave_sizze_43269) & (2 * offset_43298 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_43287 = ((volatile __local
                                            float *) red_arr_mem_43271)[sext_i32_i64(local_tid_43267 +
                                                                        offset_43298)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43288 = x_43286 + x_43287;
                                
                                x_43286 = defunc_1_op_res_43288;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43271)[sext_i32_i64(local_tid_43267)] =
                                    x_43286;
                            }
                        }
                        offset_43298 *= 2;
                    }
                    while (slt32(skip_waves_43299,
                                 squot32(sext_i64_i32(segred_group_sizze_31590) +
                                         wave_sizze_43269 - 1,
                                         wave_sizze_43269))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_43298 = skip_waves_43299 * wave_sizze_43269;
                        if (slt32(local_tid_43267 + offset_43298,
                                  sext_i64_i32(segred_group_sizze_31590)) &&
                            ((local_tid_43267 - squot32(local_tid_43267,
                                                        wave_sizze_43269) *
                              wave_sizze_43269) == 0 &&
                             (squot32(local_tid_43267, wave_sizze_43269) & (2 *
                                                                            skip_waves_43299 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_43287 = ((__local
                                            float *) red_arr_mem_43271)[sext_i32_i64(local_tid_43267 +
                                                                        offset_43298)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43288 = x_43286 + x_43287;
                                
                                x_43286 = defunc_1_op_res_43288;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_43271)[sext_i32_i64(local_tid_43267)] =
                                    x_43286;
                            }
                        }
                        skip_waves_43299 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_43267 == 0) {
                            ((__global float *) mem_41907)[gtid_31527 *
                                                           i32_res_28185 +
                                                           gtid_31528] =
                                x_43286;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_31590
}
__kernel void mainDetailedzisegred_large_31675(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_43376_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_43374_backing_aligned_1,
                                               int64_t m_28170,
                                               int64_t i32_res_28185,
                                               int64_t num_groups_31724,
                                               int64_t groups_per_segment_43360,
                                               int64_t elements_per_thread_43361,
                                               int64_t virt_num_groups_43362,
                                               int64_t threads_per_segment_43364,
                                               __global
                                               unsigned char *defunc_3_map_res_mem_41687,
                                               __global
                                               unsigned char *defunc_3_map_res_mem_41914,
                                               __global
                                               unsigned char *mem_41979,
                                               __global
                                               unsigned char *segred_tmp_mem_43365,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_43367)
{
    #define segred_group_sizze_31723 (mainDetailedzisegred_group_sizze_31669)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_43376_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_43376_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_43374_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43374_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43369;
    int32_t local_tid_43370;
    int64_t group_sizze_43373;
    int32_t wave_sizze_43372;
    int32_t group_tid_43371;
    
    global_tid_43369 = get_global_id(0);
    local_tid_43370 = get_local_id(0);
    group_sizze_43373 = get_local_size(0);
    wave_sizze_43372 = LOCKSTEP_WIDTH;
    group_tid_43371 = get_group_id(0);
    
    int32_t phys_tid_31675 = global_tid_43369;
    __local char *red_arr_mem_43374;
    
    red_arr_mem_43374 = (__local char *) red_arr_mem_43374_backing_0;
    
    __local char *sync_arr_mem_43376;
    
    sync_arr_mem_43376 = (__local char *) sync_arr_mem_43376_backing_1;
    
    int32_t phys_group_id_43378;
    
    phys_group_id_43378 = get_group_id(0);
    for (int32_t i_43379 = 0; i_43379 <
         sdiv_up32(sext_i64_i32(virt_num_groups_43362) - phys_group_id_43378,
                   sext_i64_i32(num_groups_31724)); i_43379++) {
        int32_t virt_group_id_43380 = phys_group_id_43378 + i_43379 *
                sext_i64_i32(num_groups_31724);
        int32_t flat_segment_id_43381 = squot32(virt_group_id_43380,
                                                sext_i64_i32(groups_per_segment_43360));
        int64_t global_tid_43382 = srem64(sext_i32_i64(virt_group_id_43380) *
                                          segred_group_sizze_31723 +
                                          sext_i32_i64(local_tid_43370),
                                          segred_group_sizze_31723 *
                                          groups_per_segment_43360);
        int64_t slice_43383 = i32_res_28185;
        int64_t slice_43384 = m_28170 * slice_43383;
        int64_t gtid_31664 = squot64(sext_i32_i64(flat_segment_id_43381),
                                     slice_43383);
        int64_t remnant_43385 = sext_i32_i64(flat_segment_id_43381) -
                gtid_31664 * slice_43383;
        int64_t gtid_31665 = remnant_43385;
        int64_t remnant_43386 = remnant_43385 - gtid_31665;
        int64_t gtid_31674;
        float x_acc_43387;
        int64_t chunk_sizze_43388 = smin64(elements_per_thread_43361,
                                           sdiv_up64(i32_res_28185 -
                                                     global_tid_43382,
                                                     threads_per_segment_43364));
        float x_31727;
        float x_31728;
        
        // neutral-initialise the accumulators
        {
            x_acc_43387 = 0.0F;
        }
        for (int64_t i_43392 = 0; i_43392 < chunk_sizze_43388; i_43392++) {
            gtid_31674 = global_tid_43382 + threads_per_segment_43364 * i_43392;
            // apply map function
            {
                float x_31733 = ((__global
                                  float *) defunc_3_map_res_mem_41914)[gtid_31664 *
                                                                       i32_res_28185 +
                                                                       gtid_31674];
                float x_31734 = ((__global
                                  float *) defunc_3_map_res_mem_41687)[gtid_31664 *
                                                                       (i32_res_28185 *
                                                                        i32_res_28185) +
                                                                       gtid_31665 *
                                                                       i32_res_28185 +
                                                                       gtid_31674];
                float defunc_1_f_res_31735 = x_31733 * x_31734;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_31727 = x_acc_43387;
                }
                // load new values
                {
                    x_31728 = defunc_1_f_res_31735;
                }
                // apply reduction operator
                {
                    float defunc_1_op_res_31729 = x_31727 + x_31728;
                    
                    // store in accumulator
                    {
                        x_acc_43387 = defunc_1_op_res_31729;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_31727 = x_acc_43387;
            ((__local
              float *) red_arr_mem_43374)[sext_i32_i64(local_tid_43370)] =
                x_31727;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_43393;
        int32_t skip_waves_43394 = 1;
        float x_43389;
        float x_43390;
        
        offset_43393 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_43370,
                      sext_i64_i32(segred_group_sizze_31723))) {
                x_43389 = ((__local
                            float *) red_arr_mem_43374)[sext_i32_i64(local_tid_43370 +
                                                        offset_43393)];
            }
        }
        offset_43393 = 1;
        while (slt32(offset_43393, wave_sizze_43372)) {
            if (slt32(local_tid_43370 + offset_43393,
                      sext_i64_i32(segred_group_sizze_31723)) &&
                ((local_tid_43370 - squot32(local_tid_43370, wave_sizze_43372) *
                  wave_sizze_43372) & (2 * offset_43393 - 1)) == 0) {
                // read array element
                {
                    x_43390 = ((volatile __local
                                float *) red_arr_mem_43374)[sext_i32_i64(local_tid_43370 +
                                                            offset_43393)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43391 = x_43389 + x_43390;
                    
                    x_43389 = defunc_1_op_res_43391;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_43374)[sext_i32_i64(local_tid_43370)] =
                        x_43389;
                }
            }
            offset_43393 *= 2;
        }
        while (slt32(skip_waves_43394,
                     squot32(sext_i64_i32(segred_group_sizze_31723) +
                             wave_sizze_43372 - 1, wave_sizze_43372))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_43393 = skip_waves_43394 * wave_sizze_43372;
            if (slt32(local_tid_43370 + offset_43393,
                      sext_i64_i32(segred_group_sizze_31723)) &&
                ((local_tid_43370 - squot32(local_tid_43370, wave_sizze_43372) *
                  wave_sizze_43372) == 0 && (squot32(local_tid_43370,
                                                     wave_sizze_43372) & (2 *
                                                                          skip_waves_43394 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_43390 = ((__local
                                float *) red_arr_mem_43374)[sext_i32_i64(local_tid_43370 +
                                                            offset_43393)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43391 = x_43389 + x_43390;
                    
                    x_43389 = defunc_1_op_res_43391;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_43374)[sext_i32_i64(local_tid_43370)] =
                        x_43389;
                }
            }
            skip_waves_43394 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_43370) == (int64_t) 0) {
                x_acc_43387 = x_43389;
            }
        }
        if (groups_per_segment_43360 == (int64_t) 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_43370 == 0) {
                    ((__global float *) mem_41979)[gtid_31664 * i32_res_28185 +
                                                   gtid_31665] = x_acc_43387;
                }
            }
        } else {
            int32_t old_counter_43395;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_43370 == 0) {
                    ((__global
                      float *) segred_tmp_mem_43365)[sext_i32_i64(virt_group_id_43380)] =
                        x_acc_43387;
                    mem_fence_global();
                    old_counter_43395 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_43367)[sext_i32_i64(srem32(flat_segment_id_43381,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_43376)[(int64_t) 0] =
                        old_counter_43395 == groups_per_segment_43360 -
                        (int64_t) 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_43396 = ((__local
                                         bool *) sync_arr_mem_43376)[(int64_t) 0];
            
            if (is_last_group_43396) {
                if (local_tid_43370 == 0) {
                    old_counter_43395 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_43367)[sext_i32_i64(srem32(flat_segment_id_43381,
                                                                                                             10240))],
                                              (int) ((int64_t) 0 -
                                                     groups_per_segment_43360));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_43397 =
                            sdiv_up64(groups_per_segment_43360,
                                      segred_group_sizze_31723);
                    
                    x_31727 = 0.0F;
                    for (int64_t i_43398 = 0; i_43398 < read_per_thread_43397;
                         i_43398++) {
                        int64_t group_res_id_43399 =
                                sext_i32_i64(local_tid_43370) *
                                read_per_thread_43397 + i_43398;
                        int64_t index_of_group_res_43400 =
                                sext_i32_i64(flat_segment_id_43381) *
                                groups_per_segment_43360 + group_res_id_43399;
                        
                        if (slt64(group_res_id_43399,
                                  groups_per_segment_43360)) {
                            x_31728 = ((__global
                                        float *) segred_tmp_mem_43365)[index_of_group_res_43400];
                            
                            float defunc_1_op_res_31729 = x_31727 + x_31728;
                            
                            x_31727 = defunc_1_op_res_31729;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_43374)[sext_i32_i64(local_tid_43370)] =
                    x_31727;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_43401;
                    int32_t skip_waves_43402 = 1;
                    float x_43389;
                    float x_43390;
                    
                    offset_43401 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_43370,
                                  sext_i64_i32(segred_group_sizze_31723))) {
                            x_43389 = ((__local
                                        float *) red_arr_mem_43374)[sext_i32_i64(local_tid_43370 +
                                                                    offset_43401)];
                        }
                    }
                    offset_43401 = 1;
                    while (slt32(offset_43401, wave_sizze_43372)) {
                        if (slt32(local_tid_43370 + offset_43401,
                                  sext_i64_i32(segred_group_sizze_31723)) &&
                            ((local_tid_43370 - squot32(local_tid_43370,
                                                        wave_sizze_43372) *
                              wave_sizze_43372) & (2 * offset_43401 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_43390 = ((volatile __local
                                            float *) red_arr_mem_43374)[sext_i32_i64(local_tid_43370 +
                                                                        offset_43401)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43391 = x_43389 + x_43390;
                                
                                x_43389 = defunc_1_op_res_43391;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43374)[sext_i32_i64(local_tid_43370)] =
                                    x_43389;
                            }
                        }
                        offset_43401 *= 2;
                    }
                    while (slt32(skip_waves_43402,
                                 squot32(sext_i64_i32(segred_group_sizze_31723) +
                                         wave_sizze_43372 - 1,
                                         wave_sizze_43372))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_43401 = skip_waves_43402 * wave_sizze_43372;
                        if (slt32(local_tid_43370 + offset_43401,
                                  sext_i64_i32(segred_group_sizze_31723)) &&
                            ((local_tid_43370 - squot32(local_tid_43370,
                                                        wave_sizze_43372) *
                              wave_sizze_43372) == 0 &&
                             (squot32(local_tid_43370, wave_sizze_43372) & (2 *
                                                                            skip_waves_43402 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_43390 = ((__local
                                            float *) red_arr_mem_43374)[sext_i32_i64(local_tid_43370 +
                                                                        offset_43401)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43391 = x_43389 + x_43390;
                                
                                x_43389 = defunc_1_op_res_43391;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_43374)[sext_i32_i64(local_tid_43370)] =
                                    x_43389;
                            }
                        }
                        skip_waves_43402 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_43370 == 0) {
                            ((__global float *) mem_41979)[gtid_31664 *
                                                           i32_res_28185 +
                                                           gtid_31665] =
                                x_43389;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_31723
}
__kernel void mainDetailedzisegred_large_31805(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_43523_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_43521_backing_aligned_1,
                                               int64_t N_28169, int64_t m_28170,
                                               int64_t i32_res_28185,
                                               int64_t num_groups_31852,
                                               int64_t groups_per_segment_43507,
                                               int64_t elements_per_thread_43508,
                                               int64_t virt_num_groups_43509,
                                               int64_t threads_per_segment_43511,
                                               __global
                                               unsigned char *mem_41440,
                                               __global
                                               unsigned char *defunc_4_map_res_mem_41986,
                                               __global
                                               unsigned char *mem_42209,
                                               __global
                                               unsigned char *segred_tmp_mem_43512,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_43514)
{
    #define segred_group_sizze_31851 (mainDetailedzisegred_group_sizze_31799)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_43523_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_43523_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_43521_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43521_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43516;
    int32_t local_tid_43517;
    int64_t group_sizze_43520;
    int32_t wave_sizze_43519;
    int32_t group_tid_43518;
    
    global_tid_43516 = get_global_id(0);
    local_tid_43517 = get_local_id(0);
    group_sizze_43520 = get_local_size(0);
    wave_sizze_43519 = LOCKSTEP_WIDTH;
    group_tid_43518 = get_group_id(0);
    
    int32_t phys_tid_31805 = global_tid_43516;
    __local char *red_arr_mem_43521;
    
    red_arr_mem_43521 = (__local char *) red_arr_mem_43521_backing_0;
    
    __local char *sync_arr_mem_43523;
    
    sync_arr_mem_43523 = (__local char *) sync_arr_mem_43523_backing_1;
    
    int32_t phys_group_id_43525;
    
    phys_group_id_43525 = get_group_id(0);
    for (int32_t i_43526 = 0; i_43526 <
         sdiv_up32(sext_i64_i32(virt_num_groups_43509) - phys_group_id_43525,
                   sext_i64_i32(num_groups_31852)); i_43526++) {
        int32_t virt_group_id_43527 = phys_group_id_43525 + i_43526 *
                sext_i64_i32(num_groups_31852);
        int32_t flat_segment_id_43528 = squot32(virt_group_id_43527,
                                                sext_i64_i32(groups_per_segment_43507));
        int64_t global_tid_43529 = srem64(sext_i32_i64(virt_group_id_43527) *
                                          segred_group_sizze_31851 +
                                          sext_i32_i64(local_tid_43517),
                                          segred_group_sizze_31851 *
                                          groups_per_segment_43507);
        int64_t slice_43530 = N_28169;
        int64_t slice_43531 = m_28170 * slice_43530;
        int64_t gtid_31794 = squot64(sext_i32_i64(flat_segment_id_43528),
                                     slice_43530);
        int64_t remnant_43532 = sext_i32_i64(flat_segment_id_43528) -
                gtid_31794 * slice_43530;
        int64_t gtid_31795 = remnant_43532;
        int64_t remnant_43533 = remnant_43532 - gtid_31795;
        int64_t gtid_31804;
        float x_acc_43534;
        int64_t chunk_sizze_43535 = smin64(elements_per_thread_43508,
                                           sdiv_up64(i32_res_28185 -
                                                     global_tid_43529,
                                                     threads_per_segment_43511));
        float x_31855;
        float x_31856;
        
        // neutral-initialise the accumulators
        {
            x_acc_43534 = 0.0F;
        }
        for (int64_t i_43539 = 0; i_43539 < chunk_sizze_43535; i_43539++) {
            gtid_31804 = global_tid_43529 + threads_per_segment_43511 * i_43539;
            // apply map function
            {
                float x_31860 = ((__global
                                  float *) defunc_4_map_res_mem_41986)[gtid_31794 *
                                                                       i32_res_28185 +
                                                                       gtid_31804];
                float x_31861 = ((__global float *) mem_41440)[gtid_31795 *
                                                               i32_res_28185 +
                                                               gtid_31804];
                float defunc_1_f_res_31862 = x_31860 * x_31861;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_31855 = x_acc_43534;
                }
                // load new values
                {
                    x_31856 = defunc_1_f_res_31862;
                }
                // apply reduction operator
                {
                    float defunc_1_op_res_31857 = x_31855 + x_31856;
                    
                    // store in accumulator
                    {
                        x_acc_43534 = defunc_1_op_res_31857;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_31855 = x_acc_43534;
            ((__local
              float *) red_arr_mem_43521)[sext_i32_i64(local_tid_43517)] =
                x_31855;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_43540;
        int32_t skip_waves_43541 = 1;
        float x_43536;
        float x_43537;
        
        offset_43540 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_43517,
                      sext_i64_i32(segred_group_sizze_31851))) {
                x_43536 = ((__local
                            float *) red_arr_mem_43521)[sext_i32_i64(local_tid_43517 +
                                                        offset_43540)];
            }
        }
        offset_43540 = 1;
        while (slt32(offset_43540, wave_sizze_43519)) {
            if (slt32(local_tid_43517 + offset_43540,
                      sext_i64_i32(segred_group_sizze_31851)) &&
                ((local_tid_43517 - squot32(local_tid_43517, wave_sizze_43519) *
                  wave_sizze_43519) & (2 * offset_43540 - 1)) == 0) {
                // read array element
                {
                    x_43537 = ((volatile __local
                                float *) red_arr_mem_43521)[sext_i32_i64(local_tid_43517 +
                                                            offset_43540)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43538 = x_43536 + x_43537;
                    
                    x_43536 = defunc_1_op_res_43538;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_43521)[sext_i32_i64(local_tid_43517)] =
                        x_43536;
                }
            }
            offset_43540 *= 2;
        }
        while (slt32(skip_waves_43541,
                     squot32(sext_i64_i32(segred_group_sizze_31851) +
                             wave_sizze_43519 - 1, wave_sizze_43519))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_43540 = skip_waves_43541 * wave_sizze_43519;
            if (slt32(local_tid_43517 + offset_43540,
                      sext_i64_i32(segred_group_sizze_31851)) &&
                ((local_tid_43517 - squot32(local_tid_43517, wave_sizze_43519) *
                  wave_sizze_43519) == 0 && (squot32(local_tid_43517,
                                                     wave_sizze_43519) & (2 *
                                                                          skip_waves_43541 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_43537 = ((__local
                                float *) red_arr_mem_43521)[sext_i32_i64(local_tid_43517 +
                                                            offset_43540)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43538 = x_43536 + x_43537;
                    
                    x_43536 = defunc_1_op_res_43538;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_43521)[sext_i32_i64(local_tid_43517)] =
                        x_43536;
                }
            }
            skip_waves_43541 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_43517) == (int64_t) 0) {
                x_acc_43534 = x_43536;
            }
        }
        if (groups_per_segment_43507 == (int64_t) 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_43517 == 0) {
                    ((__global float *) mem_42209)[gtid_31794 * N_28169 +
                                                   gtid_31795] = x_acc_43534;
                }
            }
        } else {
            int32_t old_counter_43542;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_43517 == 0) {
                    ((__global
                      float *) segred_tmp_mem_43512)[sext_i32_i64(virt_group_id_43527)] =
                        x_acc_43534;
                    mem_fence_global();
                    old_counter_43542 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_43514)[sext_i32_i64(srem32(flat_segment_id_43528,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_43523)[(int64_t) 0] =
                        old_counter_43542 == groups_per_segment_43507 -
                        (int64_t) 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_43543 = ((__local
                                         bool *) sync_arr_mem_43523)[(int64_t) 0];
            
            if (is_last_group_43543) {
                if (local_tid_43517 == 0) {
                    old_counter_43542 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_43514)[sext_i32_i64(srem32(flat_segment_id_43528,
                                                                                                             10240))],
                                              (int) ((int64_t) 0 -
                                                     groups_per_segment_43507));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_43544 =
                            sdiv_up64(groups_per_segment_43507,
                                      segred_group_sizze_31851);
                    
                    x_31855 = 0.0F;
                    for (int64_t i_43545 = 0; i_43545 < read_per_thread_43544;
                         i_43545++) {
                        int64_t group_res_id_43546 =
                                sext_i32_i64(local_tid_43517) *
                                read_per_thread_43544 + i_43545;
                        int64_t index_of_group_res_43547 =
                                sext_i32_i64(flat_segment_id_43528) *
                                groups_per_segment_43507 + group_res_id_43546;
                        
                        if (slt64(group_res_id_43546,
                                  groups_per_segment_43507)) {
                            x_31856 = ((__global
                                        float *) segred_tmp_mem_43512)[index_of_group_res_43547];
                            
                            float defunc_1_op_res_31857 = x_31855 + x_31856;
                            
                            x_31855 = defunc_1_op_res_31857;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_43521)[sext_i32_i64(local_tid_43517)] =
                    x_31855;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_43548;
                    int32_t skip_waves_43549 = 1;
                    float x_43536;
                    float x_43537;
                    
                    offset_43548 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_43517,
                                  sext_i64_i32(segred_group_sizze_31851))) {
                            x_43536 = ((__local
                                        float *) red_arr_mem_43521)[sext_i32_i64(local_tid_43517 +
                                                                    offset_43548)];
                        }
                    }
                    offset_43548 = 1;
                    while (slt32(offset_43548, wave_sizze_43519)) {
                        if (slt32(local_tid_43517 + offset_43548,
                                  sext_i64_i32(segred_group_sizze_31851)) &&
                            ((local_tid_43517 - squot32(local_tid_43517,
                                                        wave_sizze_43519) *
                              wave_sizze_43519) & (2 * offset_43548 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_43537 = ((volatile __local
                                            float *) red_arr_mem_43521)[sext_i32_i64(local_tid_43517 +
                                                                        offset_43548)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43538 = x_43536 + x_43537;
                                
                                x_43536 = defunc_1_op_res_43538;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43521)[sext_i32_i64(local_tid_43517)] =
                                    x_43536;
                            }
                        }
                        offset_43548 *= 2;
                    }
                    while (slt32(skip_waves_43549,
                                 squot32(sext_i64_i32(segred_group_sizze_31851) +
                                         wave_sizze_43519 - 1,
                                         wave_sizze_43519))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_43548 = skip_waves_43549 * wave_sizze_43519;
                        if (slt32(local_tid_43517 + offset_43548,
                                  sext_i64_i32(segred_group_sizze_31851)) &&
                            ((local_tid_43517 - squot32(local_tid_43517,
                                                        wave_sizze_43519) *
                              wave_sizze_43519) == 0 &&
                             (squot32(local_tid_43517, wave_sizze_43519) & (2 *
                                                                            skip_waves_43549 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_43537 = ((__local
                                            float *) red_arr_mem_43521)[sext_i32_i64(local_tid_43517 +
                                                                        offset_43548)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43538 = x_43536 + x_43537;
                                
                                x_43536 = defunc_1_op_res_43538;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_43521)[sext_i32_i64(local_tid_43517)] =
                                    x_43536;
                            }
                        }
                        skip_waves_43549 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_43517 == 0) {
                            ((__global float *) mem_42209)[gtid_31794 *
                                                           N_28169 +
                                                           gtid_31795] =
                                x_43536;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_31851
}
__kernel void mainDetailedzisegred_large_32260(__global int *global_failure,
                                               int failure_is_an_option,
                                               __global
                                               int64_t *global_failure_args,
                                               __local volatile
                                               int64_t *sync_arr_mem_43799_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_43797_backing_aligned_1,
                                               int64_t N_28169, int64_t m_28170,
                                               int64_t i32_res_28179,
                                               int64_t num_groups_32311,
                                               int64_t groups_per_segment_43783,
                                               int64_t elements_per_thread_43784,
                                               int64_t virt_num_groups_43785,
                                               int64_t threads_per_segment_43787,
                                               __global
                                               unsigned char *defunc_4_map_res_mem_42266,
                                               __global
                                               unsigned char *mem_42329,
                                               __global
                                               unsigned char *mem_42333,
                                               __global
                                               unsigned char *segred_tmp_mem_43788,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_43790)
{
    #define segred_group_sizze_32310 (mainDetailedzisegred_group_sizze_32254)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_43799_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_43799_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_43797_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43797_backing_aligned_1;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43792;
    int32_t local_tid_43793;
    int64_t group_sizze_43796;
    int32_t wave_sizze_43795;
    int32_t group_tid_43794;
    
    global_tid_43792 = get_global_id(0);
    local_tid_43793 = get_local_id(0);
    group_sizze_43796 = get_local_size(0);
    wave_sizze_43795 = LOCKSTEP_WIDTH;
    group_tid_43794 = get_group_id(0);
    
    int32_t phys_tid_32260 = global_tid_43792;
    __local char *red_arr_mem_43797;
    
    red_arr_mem_43797 = (__local char *) red_arr_mem_43797_backing_0;
    
    __local char *sync_arr_mem_43799;
    
    sync_arr_mem_43799 = (__local char *) sync_arr_mem_43799_backing_1;
    
    int32_t phys_group_id_43801;
    
    phys_group_id_43801 = get_group_id(0);
    for (int32_t i_43802 = 0; i_43802 <
         sdiv_up32(sext_i64_i32(virt_num_groups_43785) - phys_group_id_43801,
                   sext_i64_i32(num_groups_32311)); i_43802++) {
        int32_t virt_group_id_43803 = phys_group_id_43801 + i_43802 *
                sext_i64_i32(num_groups_32311);
        int32_t flat_segment_id_43804 = squot32(virt_group_id_43803,
                                                sext_i64_i32(groups_per_segment_43783));
        int64_t global_tid_43805 = srem64(sext_i32_i64(virt_group_id_43803) *
                                          segred_group_sizze_32310 +
                                          sext_i32_i64(local_tid_43793),
                                          segred_group_sizze_32310 *
                                          groups_per_segment_43783);
        int64_t slice_43806 = m_28170;
        int64_t gtid_32251 = sext_i32_i64(flat_segment_id_43804);
        int64_t remnant_43807 = sext_i32_i64(flat_segment_id_43804) -
                gtid_32251;
        int64_t gtid_32259;
        float x_acc_43808;
        int64_t chunk_sizze_43809 = smin64(elements_per_thread_43784,
                                           sdiv_up64(i32_res_28179 -
                                                     global_tid_43805,
                                                     threads_per_segment_43787));
        float x_32314;
        float x_32315;
        
        // neutral-initialise the accumulators
        {
            x_acc_43808 = 0.0F;
        }
        for (int64_t i_43813 = 0; i_43813 < chunk_sizze_43809; i_43813++) {
            gtid_32259 = global_tid_43805 + threads_per_segment_43787 * i_43813;
            // apply map function
            {
                int32_t defunc_0_f_res_32318 = ((__global
                                                 int32_t *) mem_42329)[gtid_32251];
                int32_t index_primexp_39436 = sext_i64_i32(gtid_32259);
                bool cond_32320 = slt32(index_primexp_39436,
                                        defunc_0_f_res_32318);
                float defunc_0_f_res_32321;
                
                if (cond_32320) {
                    int64_t i_32322 = sext_i32_i64(index_primexp_39436);
                    bool x_32323 = sle64((int64_t) 0, i_32322);
                    bool y_32324 = slt64(i_32322, N_28169);
                    bool bounds_check_32325 = x_32323 && y_32324;
                    bool index_certs_32326;
                    
                    if (!bounds_check_32325) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          50) == -1) {
                                global_failure_args[0] = i_32322;
                                global_failure_args[1] = N_28169;
                                ;
                            }
                            local_failure = true;
                            goto error_0;
                        }
                    }
                    
                    float defunc_0_f_res_t_res_32327 = ((__global
                                                         float *) defunc_4_map_res_mem_42266)[gtid_32251 *
                                                                                              N_28169 +
                                                                                              i_32322];
                    
                    defunc_0_f_res_32321 = defunc_0_f_res_t_res_32327;
                } else {
                    defunc_0_f_res_32321 = 0.0F;
                }
                
                float defunc_0_f_res_32328 = defunc_0_f_res_32321 *
                      defunc_0_f_res_32321;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_32314 = x_acc_43808;
                }
                // load new values
                {
                    x_32315 = defunc_0_f_res_32328;
                }
                // apply reduction operator
                {
                    float defunc_1_op_res_32316 = x_32314 + x_32315;
                    
                    // store in accumulator
                    {
                        x_acc_43808 = defunc_1_op_res_32316;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_32314 = x_acc_43808;
            ((__local
              float *) red_arr_mem_43797)[sext_i32_i64(local_tid_43793)] =
                x_32314;
        }
        
      error_0:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_43814;
        int32_t skip_waves_43815 = 1;
        float x_43810;
        float x_43811;
        
        offset_43814 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_43793,
                      sext_i64_i32(segred_group_sizze_32310))) {
                x_43810 = ((__local
                            float *) red_arr_mem_43797)[sext_i32_i64(local_tid_43793 +
                                                        offset_43814)];
            }
        }
        offset_43814 = 1;
        while (slt32(offset_43814, wave_sizze_43795)) {
            if (slt32(local_tid_43793 + offset_43814,
                      sext_i64_i32(segred_group_sizze_32310)) &&
                ((local_tid_43793 - squot32(local_tid_43793, wave_sizze_43795) *
                  wave_sizze_43795) & (2 * offset_43814 - 1)) == 0) {
                // read array element
                {
                    x_43811 = ((volatile __local
                                float *) red_arr_mem_43797)[sext_i32_i64(local_tid_43793 +
                                                            offset_43814)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43812 = x_43810 + x_43811;
                    
                    x_43810 = defunc_1_op_res_43812;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_43797)[sext_i32_i64(local_tid_43793)] =
                        x_43810;
                }
            }
            offset_43814 *= 2;
        }
        while (slt32(skip_waves_43815,
                     squot32(sext_i64_i32(segred_group_sizze_32310) +
                             wave_sizze_43795 - 1, wave_sizze_43795))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_43814 = skip_waves_43815 * wave_sizze_43795;
            if (slt32(local_tid_43793 + offset_43814,
                      sext_i64_i32(segred_group_sizze_32310)) &&
                ((local_tid_43793 - squot32(local_tid_43793, wave_sizze_43795) *
                  wave_sizze_43795) == 0 && (squot32(local_tid_43793,
                                                     wave_sizze_43795) & (2 *
                                                                          skip_waves_43815 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_43811 = ((__local
                                float *) red_arr_mem_43797)[sext_i32_i64(local_tid_43793 +
                                                            offset_43814)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43812 = x_43810 + x_43811;
                    
                    x_43810 = defunc_1_op_res_43812;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_43797)[sext_i32_i64(local_tid_43793)] =
                        x_43810;
                }
            }
            skip_waves_43815 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_43793) == (int64_t) 0) {
                x_acc_43808 = x_43810;
            }
        }
        if (groups_per_segment_43783 == (int64_t) 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_43793 == 0) {
                    ((__global float *) mem_42333)[gtid_32251] = x_acc_43808;
                }
            }
        } else {
            int32_t old_counter_43816;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_43793 == 0) {
                    ((__global
                      float *) segred_tmp_mem_43788)[sext_i32_i64(virt_group_id_43803)] =
                        x_acc_43808;
                    mem_fence_global();
                    old_counter_43816 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_43790)[sext_i32_i64(srem32(flat_segment_id_43804,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_43799)[(int64_t) 0] =
                        old_counter_43816 == groups_per_segment_43783 -
                        (int64_t) 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_43817 = ((__local
                                         bool *) sync_arr_mem_43799)[(int64_t) 0];
            
            if (is_last_group_43817) {
                if (local_tid_43793 == 0) {
                    old_counter_43816 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_43790)[sext_i32_i64(srem32(flat_segment_id_43804,
                                                                                                             10240))],
                                              (int) ((int64_t) 0 -
                                                     groups_per_segment_43783));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_43818 =
                            sdiv_up64(groups_per_segment_43783,
                                      segred_group_sizze_32310);
                    
                    x_32314 = 0.0F;
                    for (int64_t i_43819 = 0; i_43819 < read_per_thread_43818;
                         i_43819++) {
                        int64_t group_res_id_43820 =
                                sext_i32_i64(local_tid_43793) *
                                read_per_thread_43818 + i_43819;
                        int64_t index_of_group_res_43821 =
                                sext_i32_i64(flat_segment_id_43804) *
                                groups_per_segment_43783 + group_res_id_43820;
                        
                        if (slt64(group_res_id_43820,
                                  groups_per_segment_43783)) {
                            x_32315 = ((__global
                                        float *) segred_tmp_mem_43788)[index_of_group_res_43821];
                            
                            float defunc_1_op_res_32316 = x_32314 + x_32315;
                            
                            x_32314 = defunc_1_op_res_32316;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_43797)[sext_i32_i64(local_tid_43793)] =
                    x_32314;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_43822;
                    int32_t skip_waves_43823 = 1;
                    float x_43810;
                    float x_43811;
                    
                    offset_43822 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_43793,
                                  sext_i64_i32(segred_group_sizze_32310))) {
                            x_43810 = ((__local
                                        float *) red_arr_mem_43797)[sext_i32_i64(local_tid_43793 +
                                                                    offset_43822)];
                        }
                    }
                    offset_43822 = 1;
                    while (slt32(offset_43822, wave_sizze_43795)) {
                        if (slt32(local_tid_43793 + offset_43822,
                                  sext_i64_i32(segred_group_sizze_32310)) &&
                            ((local_tid_43793 - squot32(local_tid_43793,
                                                        wave_sizze_43795) *
                              wave_sizze_43795) & (2 * offset_43822 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_43811 = ((volatile __local
                                            float *) red_arr_mem_43797)[sext_i32_i64(local_tid_43793 +
                                                                        offset_43822)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43812 = x_43810 + x_43811;
                                
                                x_43810 = defunc_1_op_res_43812;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43797)[sext_i32_i64(local_tid_43793)] =
                                    x_43810;
                            }
                        }
                        offset_43822 *= 2;
                    }
                    while (slt32(skip_waves_43823,
                                 squot32(sext_i64_i32(segred_group_sizze_32310) +
                                         wave_sizze_43795 - 1,
                                         wave_sizze_43795))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_43822 = skip_waves_43823 * wave_sizze_43795;
                        if (slt32(local_tid_43793 + offset_43822,
                                  sext_i64_i32(segred_group_sizze_32310)) &&
                            ((local_tid_43793 - squot32(local_tid_43793,
                                                        wave_sizze_43795) *
                              wave_sizze_43795) == 0 &&
                             (squot32(local_tid_43793, wave_sizze_43795) & (2 *
                                                                            skip_waves_43823 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_43811 = ((__local
                                            float *) red_arr_mem_43797)[sext_i32_i64(local_tid_43793 +
                                                                        offset_43822)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43812 = x_43810 + x_43811;
                                
                                x_43810 = defunc_1_op_res_43812;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_43797)[sext_i32_i64(local_tid_43793)] =
                                    x_43810;
                            }
                        }
                        skip_waves_43823 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_43793 == 0) {
                            ((__global float *) mem_42333)[gtid_32251] =
                                x_43810;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_32310
}
__kernel void mainDetailedzisegred_large_32285(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_43735_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_43733_backing_aligned_1,
                                               int64_t N_28169, int64_t m_28170,
                                               int64_t i32_res_28179,
                                               int64_t num_groups_32297,
                                               int64_t groups_per_segment_43719,
                                               int64_t elements_per_thread_43720,
                                               int64_t virt_num_groups_43721,
                                               int64_t threads_per_segment_43723,
                                               __global
                                               unsigned char *images_mem_41421,
                                               __global
                                               unsigned char *mem_42329,
                                               __global
                                               unsigned char *segred_tmp_mem_43724,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_43726)
{
    #define segred_group_sizze_32296 (mainDetailedzisegred_group_sizze_32279)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_43735_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_43735_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_43733_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43733_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43728;
    int32_t local_tid_43729;
    int64_t group_sizze_43732;
    int32_t wave_sizze_43731;
    int32_t group_tid_43730;
    
    global_tid_43728 = get_global_id(0);
    local_tid_43729 = get_local_id(0);
    group_sizze_43732 = get_local_size(0);
    wave_sizze_43731 = LOCKSTEP_WIDTH;
    group_tid_43730 = get_group_id(0);
    
    int32_t phys_tid_32285 = global_tid_43728;
    __local char *red_arr_mem_43733;
    
    red_arr_mem_43733 = (__local char *) red_arr_mem_43733_backing_0;
    
    __local char *sync_arr_mem_43735;
    
    sync_arr_mem_43735 = (__local char *) sync_arr_mem_43735_backing_1;
    
    int32_t phys_group_id_43737;
    
    phys_group_id_43737 = get_group_id(0);
    for (int32_t i_43738 = 0; i_43738 <
         sdiv_up32(sext_i64_i32(virt_num_groups_43721) - phys_group_id_43737,
                   sext_i64_i32(num_groups_32297)); i_43738++) {
        int32_t virt_group_id_43739 = phys_group_id_43737 + i_43738 *
                sext_i64_i32(num_groups_32297);
        int32_t flat_segment_id_43740 = squot32(virt_group_id_43739,
                                                sext_i64_i32(groups_per_segment_43719));
        int64_t global_tid_43741 = srem64(sext_i32_i64(virt_group_id_43739) *
                                          segred_group_sizze_32296 +
                                          sext_i32_i64(local_tid_43729),
                                          segred_group_sizze_32296 *
                                          groups_per_segment_43719);
        int64_t slice_43742 = m_28170;
        int64_t gtid_32276 = sext_i32_i64(flat_segment_id_43740);
        int64_t remnant_43743 = sext_i32_i64(flat_segment_id_43740) -
                gtid_32276;
        int64_t gtid_32284;
        int32_t x_acc_43744;
        int64_t chunk_sizze_43745 = smin64(elements_per_thread_43720,
                                           sdiv_up64(i32_res_28179 -
                                                     global_tid_43741,
                                                     threads_per_segment_43723));
        int32_t x_32300;
        int32_t x_32301;
        
        // neutral-initialise the accumulators
        {
            x_acc_43744 = 0;
        }
        for (int64_t i_43749 = 0; i_43749 < chunk_sizze_43745; i_43749++) {
            gtid_32284 = global_tid_43741 + threads_per_segment_43723 * i_43749;
            // apply map function
            {
                float x_32304 = ((__global
                                  float *) images_mem_41421)[gtid_32276 *
                                                             N_28169 +
                                                             gtid_32284];
                bool isnan_res_32305;
                
                isnan_res_32305 = futrts_isnan32(x_32304);
                
                bool cond_32306 = !isnan_res_32305;
                int32_t defunc_0_f_res_32307 = btoi_bool_i32(cond_32306);
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_32300 = x_acc_43744;
                }
                // load new values
                {
                    x_32301 = defunc_0_f_res_32307;
                }
                // apply reduction operator
                {
                    int32_t defunc_1_op_res_32302 = add32(x_32300, x_32301);
                    
                    // store in accumulator
                    {
                        x_acc_43744 = defunc_1_op_res_32302;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_32300 = x_acc_43744;
            ((__local
              int32_t *) red_arr_mem_43733)[sext_i32_i64(local_tid_43729)] =
                x_32300;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_43750;
        int32_t skip_waves_43751 = 1;
        int32_t x_43746;
        int32_t x_43747;
        
        offset_43750 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_43729,
                      sext_i64_i32(segred_group_sizze_32296))) {
                x_43746 = ((__local
                            int32_t *) red_arr_mem_43733)[sext_i32_i64(local_tid_43729 +
                                                          offset_43750)];
            }
        }
        offset_43750 = 1;
        while (slt32(offset_43750, wave_sizze_43731)) {
            if (slt32(local_tid_43729 + offset_43750,
                      sext_i64_i32(segred_group_sizze_32296)) &&
                ((local_tid_43729 - squot32(local_tid_43729, wave_sizze_43731) *
                  wave_sizze_43731) & (2 * offset_43750 - 1)) == 0) {
                // read array element
                {
                    x_43747 = ((volatile __local
                                int32_t *) red_arr_mem_43733)[sext_i32_i64(local_tid_43729 +
                                                              offset_43750)];
                }
                // apply reduction operation
                {
                    int32_t defunc_1_op_res_43748 = add32(x_43746, x_43747);
                    
                    x_43746 = defunc_1_op_res_43748;
                }
                // write result of operation
                {
                    ((volatile __local
                      int32_t *) red_arr_mem_43733)[sext_i32_i64(local_tid_43729)] =
                        x_43746;
                }
            }
            offset_43750 *= 2;
        }
        while (slt32(skip_waves_43751,
                     squot32(sext_i64_i32(segred_group_sizze_32296) +
                             wave_sizze_43731 - 1, wave_sizze_43731))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_43750 = skip_waves_43751 * wave_sizze_43731;
            if (slt32(local_tid_43729 + offset_43750,
                      sext_i64_i32(segred_group_sizze_32296)) &&
                ((local_tid_43729 - squot32(local_tid_43729, wave_sizze_43731) *
                  wave_sizze_43731) == 0 && (squot32(local_tid_43729,
                                                     wave_sizze_43731) & (2 *
                                                                          skip_waves_43751 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_43747 = ((__local
                                int32_t *) red_arr_mem_43733)[sext_i32_i64(local_tid_43729 +
                                                              offset_43750)];
                }
                // apply reduction operation
                {
                    int32_t defunc_1_op_res_43748 = add32(x_43746, x_43747);
                    
                    x_43746 = defunc_1_op_res_43748;
                }
                // write result of operation
                {
                    ((__local
                      int32_t *) red_arr_mem_43733)[sext_i32_i64(local_tid_43729)] =
                        x_43746;
                }
            }
            skip_waves_43751 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_43729) == (int64_t) 0) {
                x_acc_43744 = x_43746;
            }
        }
        if (groups_per_segment_43719 == (int64_t) 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_43729 == 0) {
                    ((__global int32_t *) mem_42329)[gtid_32276] = x_acc_43744;
                }
            }
        } else {
            int32_t old_counter_43752;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_43729 == 0) {
                    ((__global
                      int32_t *) segred_tmp_mem_43724)[sext_i32_i64(virt_group_id_43739)] =
                        x_acc_43744;
                    mem_fence_global();
                    old_counter_43752 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_43726)[sext_i32_i64(srem32(flat_segment_id_43740,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_43735)[(int64_t) 0] =
                        old_counter_43752 == groups_per_segment_43719 -
                        (int64_t) 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_43753 = ((__local
                                         bool *) sync_arr_mem_43735)[(int64_t) 0];
            
            if (is_last_group_43753) {
                if (local_tid_43729 == 0) {
                    old_counter_43752 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_43726)[sext_i32_i64(srem32(flat_segment_id_43740,
                                                                                                             10240))],
                                              (int) ((int64_t) 0 -
                                                     groups_per_segment_43719));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_43754 =
                            sdiv_up64(groups_per_segment_43719,
                                      segred_group_sizze_32296);
                    
                    x_32300 = 0;
                    for (int64_t i_43755 = 0; i_43755 < read_per_thread_43754;
                         i_43755++) {
                        int64_t group_res_id_43756 =
                                sext_i32_i64(local_tid_43729) *
                                read_per_thread_43754 + i_43755;
                        int64_t index_of_group_res_43757 =
                                sext_i32_i64(flat_segment_id_43740) *
                                groups_per_segment_43719 + group_res_id_43756;
                        
                        if (slt64(group_res_id_43756,
                                  groups_per_segment_43719)) {
                            x_32301 = ((__global
                                        int32_t *) segred_tmp_mem_43724)[index_of_group_res_43757];
                            
                            int32_t defunc_1_op_res_32302 = add32(x_32300,
                                                                  x_32301);
                            
                            x_32300 = defunc_1_op_res_32302;
                        }
                    }
                }
                ((__local
                  int32_t *) red_arr_mem_43733)[sext_i32_i64(local_tid_43729)] =
                    x_32300;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_43758;
                    int32_t skip_waves_43759 = 1;
                    int32_t x_43746;
                    int32_t x_43747;
                    
                    offset_43758 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_43729,
                                  sext_i64_i32(segred_group_sizze_32296))) {
                            x_43746 = ((__local
                                        int32_t *) red_arr_mem_43733)[sext_i32_i64(local_tid_43729 +
                                                                      offset_43758)];
                        }
                    }
                    offset_43758 = 1;
                    while (slt32(offset_43758, wave_sizze_43731)) {
                        if (slt32(local_tid_43729 + offset_43758,
                                  sext_i64_i32(segred_group_sizze_32296)) &&
                            ((local_tid_43729 - squot32(local_tid_43729,
                                                        wave_sizze_43731) *
                              wave_sizze_43731) & (2 * offset_43758 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_43747 = ((volatile __local
                                            int32_t *) red_arr_mem_43733)[sext_i32_i64(local_tid_43729 +
                                                                          offset_43758)];
                            }
                            // apply reduction operation
                            {
                                int32_t defunc_1_op_res_43748 = add32(x_43746,
                                                                      x_43747);
                                
                                x_43746 = defunc_1_op_res_43748;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  int32_t *) red_arr_mem_43733)[sext_i32_i64(local_tid_43729)] =
                                    x_43746;
                            }
                        }
                        offset_43758 *= 2;
                    }
                    while (slt32(skip_waves_43759,
                                 squot32(sext_i64_i32(segred_group_sizze_32296) +
                                         wave_sizze_43731 - 1,
                                         wave_sizze_43731))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_43758 = skip_waves_43759 * wave_sizze_43731;
                        if (slt32(local_tid_43729 + offset_43758,
                                  sext_i64_i32(segred_group_sizze_32296)) &&
                            ((local_tid_43729 - squot32(local_tid_43729,
                                                        wave_sizze_43731) *
                              wave_sizze_43731) == 0 &&
                             (squot32(local_tid_43729, wave_sizze_43731) & (2 *
                                                                            skip_waves_43759 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_43747 = ((__local
                                            int32_t *) red_arr_mem_43733)[sext_i32_i64(local_tid_43729 +
                                                                          offset_43758)];
                            }
                            // apply reduction operation
                            {
                                int32_t defunc_1_op_res_43748 = add32(x_43746,
                                                                      x_43747);
                                
                                x_43746 = defunc_1_op_res_43748;
                            }
                            // write result of operation
                            {
                                ((__local
                                  int32_t *) red_arr_mem_43733)[sext_i32_i64(local_tid_43729)] =
                                    x_43746;
                            }
                        }
                        skip_waves_43759 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_43729 == 0) {
                            ((__global int32_t *) mem_42329)[gtid_32276] =
                                x_43746;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_32296
}
__kernel void mainDetailedzisegred_large_32432(__global int *global_failure,
                                               int failure_is_an_option,
                                               __global
                                               int64_t *global_failure_args,
                                               __local volatile
                                               int64_t *sync_arr_mem_43917_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_43915_backing_aligned_1,
                                               int64_t N_28169, int64_t m_28170,
                                               int64_t i32_res_28571,
                                               int64_t num_groups_32454,
                                               int64_t groups_per_segment_43901,
                                               int64_t elements_per_thread_43902,
                                               int64_t virt_num_groups_43903,
                                               int64_t threads_per_segment_43905,
                                               __global
                                               unsigned char *defunc_4_map_res_mem_42266,
                                               __global
                                               unsigned char *defunc_3_map_res_mem_42344,
                                               __global
                                               unsigned char *defunc_3_map_res_mem_42345,
                                               __global
                                               unsigned char *mem_42382,
                                               __global
                                               unsigned char *segred_tmp_mem_43906,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_43908)
{
    #define segred_group_sizze_32453 (mainDetailedzisegred_group_sizze_32426)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_43917_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_43917_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_43915_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43915_backing_aligned_1;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43910;
    int32_t local_tid_43911;
    int64_t group_sizze_43914;
    int32_t wave_sizze_43913;
    int32_t group_tid_43912;
    
    global_tid_43910 = get_global_id(0);
    local_tid_43911 = get_local_id(0);
    group_sizze_43914 = get_local_size(0);
    wave_sizze_43913 = LOCKSTEP_WIDTH;
    group_tid_43912 = get_group_id(0);
    
    int32_t phys_tid_32432 = global_tid_43910;
    __local char *red_arr_mem_43915;
    
    red_arr_mem_43915 = (__local char *) red_arr_mem_43915_backing_0;
    
    __local char *sync_arr_mem_43917;
    
    sync_arr_mem_43917 = (__local char *) sync_arr_mem_43917_backing_1;
    
    int32_t phys_group_id_43919;
    
    phys_group_id_43919 = get_group_id(0);
    for (int32_t i_43920 = 0; i_43920 <
         sdiv_up32(sext_i64_i32(virt_num_groups_43903) - phys_group_id_43919,
                   sext_i64_i32(num_groups_32454)); i_43920++) {
        int32_t virt_group_id_43921 = phys_group_id_43919 + i_43920 *
                sext_i64_i32(num_groups_32454);
        int32_t flat_segment_id_43922 = squot32(virt_group_id_43921,
                                                sext_i64_i32(groups_per_segment_43901));
        int64_t global_tid_43923 = srem64(sext_i32_i64(virt_group_id_43921) *
                                          segred_group_sizze_32453 +
                                          sext_i32_i64(local_tid_43911),
                                          segred_group_sizze_32453 *
                                          groups_per_segment_43901);
        int64_t slice_43924 = m_28170;
        int64_t gtid_32423 = sext_i32_i64(flat_segment_id_43922);
        int64_t remnant_43925 = sext_i32_i64(flat_segment_id_43922) -
                gtid_32423;
        int64_t gtid_32431;
        float x_acc_43926;
        int64_t chunk_sizze_43927 = smin64(elements_per_thread_43902,
                                           sdiv_up64(i32_res_28571 -
                                                     global_tid_43923,
                                                     threads_per_segment_43905));
        float x_32457;
        float x_32458;
        
        // neutral-initialise the accumulators
        {
            x_acc_43926 = 0.0F;
        }
        for (int64_t i_43931 = 0; i_43931 < chunk_sizze_43927; i_43931++) {
            gtid_32431 = global_tid_43923 + threads_per_segment_43905 * i_43931;
            // apply map function
            {
                int32_t x_32462 = ((__global
                                    int32_t *) defunc_3_map_res_mem_42344)[gtid_32423];
                int32_t index_primexp_39441 = sext_i64_i32(gtid_32431);
                bool cond_32464 = slt32(index_primexp_39441, x_32462);
                float defunc_0_f_res_32465;
                
                if (cond_32464) {
                    int32_t x_32461 = ((__global
                                        int32_t *) defunc_3_map_res_mem_42345)[gtid_32423];
                    int32_t x_32466 = add32(x_32461, index_primexp_39441);
                    int32_t x_32467 = sub32(x_32466, x_32462);
                    int32_t i_32468 = add32(1, x_32467);
                    int64_t i_32469 = sext_i32_i64(i_32468);
                    bool x_32470 = sle64((int64_t) 0, i_32469);
                    bool y_32471 = slt64(i_32469, N_28169);
                    bool bounds_check_32472 = x_32470 && y_32471;
                    bool index_certs_32473;
                    
                    if (!bounds_check_32472) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          54) == -1) {
                                global_failure_args[0] = i_32469;
                                global_failure_args[1] = N_28169;
                                ;
                            }
                            local_failure = true;
                            goto error_0;
                        }
                    }
                    
                    float defunc_0_f_res_t_res_32474 = ((__global
                                                         float *) defunc_4_map_res_mem_42266)[gtid_32423 *
                                                                                              N_28169 +
                                                                                              i_32469];
                    
                    defunc_0_f_res_32465 = defunc_0_f_res_t_res_32474;
                } else {
                    defunc_0_f_res_32465 = 0.0F;
                }
                // save map-out results
                { }
                // load accumulator
                {
                    x_32457 = x_acc_43926;
                }
                // load new values
                {
                    x_32458 = defunc_0_f_res_32465;
                }
                // apply reduction operator
                {
                    float defunc_1_op_res_32459 = x_32457 + x_32458;
                    
                    // store in accumulator
                    {
                        x_acc_43926 = defunc_1_op_res_32459;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_32457 = x_acc_43926;
            ((__local
              float *) red_arr_mem_43915)[sext_i32_i64(local_tid_43911)] =
                x_32457;
        }
        
      error_0:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_43932;
        int32_t skip_waves_43933 = 1;
        float x_43928;
        float x_43929;
        
        offset_43932 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_43911,
                      sext_i64_i32(segred_group_sizze_32453))) {
                x_43928 = ((__local
                            float *) red_arr_mem_43915)[sext_i32_i64(local_tid_43911 +
                                                        offset_43932)];
            }
        }
        offset_43932 = 1;
        while (slt32(offset_43932, wave_sizze_43913)) {
            if (slt32(local_tid_43911 + offset_43932,
                      sext_i64_i32(segred_group_sizze_32453)) &&
                ((local_tid_43911 - squot32(local_tid_43911, wave_sizze_43913) *
                  wave_sizze_43913) & (2 * offset_43932 - 1)) == 0) {
                // read array element
                {
                    x_43929 = ((volatile __local
                                float *) red_arr_mem_43915)[sext_i32_i64(local_tid_43911 +
                                                            offset_43932)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43930 = x_43928 + x_43929;
                    
                    x_43928 = defunc_1_op_res_43930;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_43915)[sext_i32_i64(local_tid_43911)] =
                        x_43928;
                }
            }
            offset_43932 *= 2;
        }
        while (slt32(skip_waves_43933,
                     squot32(sext_i64_i32(segred_group_sizze_32453) +
                             wave_sizze_43913 - 1, wave_sizze_43913))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_43932 = skip_waves_43933 * wave_sizze_43913;
            if (slt32(local_tid_43911 + offset_43932,
                      sext_i64_i32(segred_group_sizze_32453)) &&
                ((local_tid_43911 - squot32(local_tid_43911, wave_sizze_43913) *
                  wave_sizze_43913) == 0 && (squot32(local_tid_43911,
                                                     wave_sizze_43913) & (2 *
                                                                          skip_waves_43933 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_43929 = ((__local
                                float *) red_arr_mem_43915)[sext_i32_i64(local_tid_43911 +
                                                            offset_43932)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43930 = x_43928 + x_43929;
                    
                    x_43928 = defunc_1_op_res_43930;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_43915)[sext_i32_i64(local_tid_43911)] =
                        x_43928;
                }
            }
            skip_waves_43933 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_43911) == (int64_t) 0) {
                x_acc_43926 = x_43928;
            }
        }
        if (groups_per_segment_43901 == (int64_t) 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_43911 == 0) {
                    ((__global float *) mem_42382)[gtid_32423] = x_acc_43926;
                }
            }
        } else {
            int32_t old_counter_43934;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_43911 == 0) {
                    ((__global
                      float *) segred_tmp_mem_43906)[sext_i32_i64(virt_group_id_43921)] =
                        x_acc_43926;
                    mem_fence_global();
                    old_counter_43934 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_43908)[sext_i32_i64(srem32(flat_segment_id_43922,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_43917)[(int64_t) 0] =
                        old_counter_43934 == groups_per_segment_43901 -
                        (int64_t) 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_43935 = ((__local
                                         bool *) sync_arr_mem_43917)[(int64_t) 0];
            
            if (is_last_group_43935) {
                if (local_tid_43911 == 0) {
                    old_counter_43934 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_43908)[sext_i32_i64(srem32(flat_segment_id_43922,
                                                                                                             10240))],
                                              (int) ((int64_t) 0 -
                                                     groups_per_segment_43901));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_43936 =
                            sdiv_up64(groups_per_segment_43901,
                                      segred_group_sizze_32453);
                    
                    x_32457 = 0.0F;
                    for (int64_t i_43937 = 0; i_43937 < read_per_thread_43936;
                         i_43937++) {
                        int64_t group_res_id_43938 =
                                sext_i32_i64(local_tid_43911) *
                                read_per_thread_43936 + i_43937;
                        int64_t index_of_group_res_43939 =
                                sext_i32_i64(flat_segment_id_43922) *
                                groups_per_segment_43901 + group_res_id_43938;
                        
                        if (slt64(group_res_id_43938,
                                  groups_per_segment_43901)) {
                            x_32458 = ((__global
                                        float *) segred_tmp_mem_43906)[index_of_group_res_43939];
                            
                            float defunc_1_op_res_32459 = x_32457 + x_32458;
                            
                            x_32457 = defunc_1_op_res_32459;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_43915)[sext_i32_i64(local_tid_43911)] =
                    x_32457;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_43940;
                    int32_t skip_waves_43941 = 1;
                    float x_43928;
                    float x_43929;
                    
                    offset_43940 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_43911,
                                  sext_i64_i32(segred_group_sizze_32453))) {
                            x_43928 = ((__local
                                        float *) red_arr_mem_43915)[sext_i32_i64(local_tid_43911 +
                                                                    offset_43940)];
                        }
                    }
                    offset_43940 = 1;
                    while (slt32(offset_43940, wave_sizze_43913)) {
                        if (slt32(local_tid_43911 + offset_43940,
                                  sext_i64_i32(segred_group_sizze_32453)) &&
                            ((local_tid_43911 - squot32(local_tid_43911,
                                                        wave_sizze_43913) *
                              wave_sizze_43913) & (2 * offset_43940 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_43929 = ((volatile __local
                                            float *) red_arr_mem_43915)[sext_i32_i64(local_tid_43911 +
                                                                        offset_43940)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43930 = x_43928 + x_43929;
                                
                                x_43928 = defunc_1_op_res_43930;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43915)[sext_i32_i64(local_tid_43911)] =
                                    x_43928;
                            }
                        }
                        offset_43940 *= 2;
                    }
                    while (slt32(skip_waves_43941,
                                 squot32(sext_i64_i32(segred_group_sizze_32453) +
                                         wave_sizze_43913 - 1,
                                         wave_sizze_43913))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_43940 = skip_waves_43941 * wave_sizze_43913;
                        if (slt32(local_tid_43911 + offset_43940,
                                  sext_i64_i32(segred_group_sizze_32453)) &&
                            ((local_tid_43911 - squot32(local_tid_43911,
                                                        wave_sizze_43913) *
                              wave_sizze_43913) == 0 &&
                             (squot32(local_tid_43911, wave_sizze_43913) & (2 *
                                                                            skip_waves_43941 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_43929 = ((__local
                                            float *) red_arr_mem_43915)[sext_i32_i64(local_tid_43911 +
                                                                        offset_43940)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43930 = x_43928 + x_43929;
                                
                                x_43928 = defunc_1_op_res_43930;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_43915)[sext_i32_i64(local_tid_43911)] =
                                    x_43928;
                            }
                        }
                        skip_waves_43941 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_43911 == 0) {
                            ((__global float *) mem_42382)[gtid_32423] =
                                x_43928;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_32453
}
__kernel void mainDetailedzisegred_large_33290(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_44173_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_44171_backing_aligned_1,
                                               __local volatile
                                               int64_t *red_arr_mem_44169_backing_aligned_2,
                                               __local volatile
                                               int64_t *red_arr_mem_44167_backing_aligned_3,
                                               int64_t m_28170,
                                               int64_t iota32_arg_28600,
                                               int64_t iota32_arg_28630,
                                               int64_t num_groups_33435,
                                               int64_t groups_per_segment_44149,
                                               int64_t elements_per_thread_44150,
                                               int64_t virt_num_groups_44151,
                                               __global
                                               unsigned char *mem_42387,
                                               __global
                                               unsigned char *mem_42522,
                                               __global
                                               unsigned char *mem_42527,
                                               __global
                                               unsigned char *mem_42531,
                                               __global
                                               unsigned char *mem_42534,
                                               __global
                                               unsigned char *mem_42537,
                                               __global
                                               unsigned char *mem_42540,
                                               __global
                                               unsigned char *mem_42544,
                                               __global
                                               unsigned char *segred_tmp_mem_44154,
                                               __global
                                               unsigned char *segred_tmp_mem_44156,
                                               __global
                                               unsigned char *segred_tmp_mem_44158,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_44160)
{
    #define segred_group_sizze_33434 (mainDetailedzisegred_group_sizze_33284)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_44173_backing_3 =
                          (__local volatile
                           char *) sync_arr_mem_44173_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_44171_backing_2 =
                          (__local volatile
                           char *) red_arr_mem_44171_backing_aligned_1;
    __local volatile char *restrict red_arr_mem_44169_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_44169_backing_aligned_2;
    __local volatile char *restrict red_arr_mem_44167_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_44167_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_44162;
    int32_t local_tid_44163;
    int64_t group_sizze_44166;
    int32_t wave_sizze_44165;
    int32_t group_tid_44164;
    
    global_tid_44162 = get_global_id(0);
    local_tid_44163 = get_local_id(0);
    group_sizze_44166 = get_local_size(0);
    wave_sizze_44165 = LOCKSTEP_WIDTH;
    group_tid_44164 = get_group_id(0);
    
    int32_t phys_tid_33290 = global_tid_44162;
    __local char *red_arr_mem_44167;
    
    red_arr_mem_44167 = (__local char *) red_arr_mem_44167_backing_0;
    
    __local char *red_arr_mem_44169;
    
    red_arr_mem_44169 = (__local char *) red_arr_mem_44169_backing_1;
    
    __local char *red_arr_mem_44171;
    
    red_arr_mem_44171 = (__local char *) red_arr_mem_44171_backing_2;
    
    __local char *sync_arr_mem_44173;
    
    sync_arr_mem_44173 = (__local char *) sync_arr_mem_44173_backing_3;
    
    int32_t phys_group_id_44175;
    
    phys_group_id_44175 = get_group_id(0);
    for (int32_t i_44176 = 0; i_44176 <
         sdiv_up32(sext_i64_i32(virt_num_groups_44151) - phys_group_id_44175,
                   sext_i64_i32(num_groups_33435)); i_44176++) {
        int32_t virt_group_id_44177 = phys_group_id_44175 + i_44176 *
                sext_i64_i32(num_groups_33435);
        int32_t flat_segment_id_44178 = squot32(virt_group_id_44177,
                                                sext_i64_i32(groups_per_segment_44149));
        int64_t global_tid_44179 = srem64(sext_i32_i64(virt_group_id_44177) *
                                          segred_group_sizze_33434 +
                                          sext_i32_i64(local_tid_44163),
                                          segred_group_sizze_33434 *
                                          groups_per_segment_44149);
        int64_t slice_44180 = m_28170;
        int64_t gtid_33281 = sext_i32_i64(flat_segment_id_44178);
        int64_t remnant_44181 = sext_i32_i64(flat_segment_id_44178) -
                gtid_33281;
        int64_t gtid_33289;
        bool x_acc_44182;
        int32_t x_acc_44183;
        float x_acc_44184;
        int64_t chunk_sizze_44185;
        int64_t starting_point_44186 = global_tid_44179 *
                elements_per_thread_44150;
        int64_t remaining_elements_44187 = iota32_arg_28600 -
                starting_point_44186;
        
        if (sle64(remaining_elements_44187, (int64_t) 0) ||
            sle64(iota32_arg_28600, starting_point_44186)) {
            chunk_sizze_44185 = (int64_t) 0;
        } else {
            if (slt64(iota32_arg_28600, (global_tid_44179 + (int64_t) 1) *
                      elements_per_thread_44150)) {
                chunk_sizze_44185 = iota32_arg_28600 - global_tid_44179 *
                    elements_per_thread_44150;
            } else {
                chunk_sizze_44185 = elements_per_thread_44150;
            }
        }
        
        bool x_33441;
        int32_t x_33442;
        float x_33443;
        bool x_33444;
        int32_t x_33445;
        float x_33446;
        
        // neutral-initialise the accumulators
        {
            x_acc_44182 = 0;
            x_acc_44183 = -1;
            x_acc_44184 = 0.0F;
        }
        for (int64_t i_44202 = 0; i_44202 < elements_per_thread_44150;
             i_44202++) {
            gtid_33289 = sext_i32_i64(local_tid_44163) +
                (squot64(global_tid_44179, segred_group_sizze_33434) *
                 elements_per_thread_44150 + i_44202) *
                segred_group_sizze_33434;
            if (slt64(gtid_33289, iota32_arg_28600)) {
                // apply map function
                {
                    int32_t y_33455 = ((__global
                                        int32_t *) mem_42522)[gtid_33281];
                    float y_33456 = ((__global float *) mem_42531)[gtid_33281];
                    int64_t binop_x_39499 = iota32_arg_28600 * gtid_33281;
                    int64_t binop_x_39500 = gtid_33289 + binop_x_39499;
                    int64_t new_index_39501 = squot64(binop_x_39500,
                                                      iota32_arg_28630);
                    int64_t binop_y_39507 = iota32_arg_28630 * new_index_39501;
                    int64_t new_index_39508 = binop_x_39500 - binop_y_39507;
                    float x_33458 = ((__global
                                      float *) mem_42527)[new_index_39501 *
                                                          iota32_arg_28630 +
                                                          new_index_39508];
                    float x_33459 = ((__global float *) mem_42387)[gtid_33289];
                    int32_t index_primexp_39465 = sext_i64_i32(gtid_33289);
                    float defunc_0_f_res_33461 = x_33458 / y_33456;
                    bool cond_33462 = slt32(index_primexp_39465, y_33455);
                    bool isnan_res_33463;
                    
                    isnan_res_33463 = futrts_isnan32(defunc_0_f_res_33461);
                    
                    bool cond_t_res_33464 = !isnan_res_33463;
                    bool x_33465 = cond_33462 && cond_t_res_33464;
                    float abs_res_33466 = (float) fabs(defunc_0_f_res_33461);
                    bool defunc_2_f_res_t_res_33467 = x_33459 < abs_res_33466;
                    bool x_33468 = x_33465 && defunc_2_f_res_t_res_33467;
                    float defunc_1_f_res_33469;
                    
                    if (cond_33462) {
                        defunc_1_f_res_33469 = defunc_0_f_res_33461;
                    } else {
                        defunc_1_f_res_33469 = 0.0F;
                    }
                    // save map-out results
                    {
                        ((__global float *) mem_42544)[gtid_33281 *
                                                       iota32_arg_28600 +
                                                       gtid_33289] =
                            defunc_0_f_res_33461;
                    }
                    // load accumulator
                    {
                        x_33441 = x_acc_44182;
                        x_33442 = x_acc_44183;
                        x_33443 = x_acc_44184;
                    }
                    // load new values
                    {
                        x_33444 = x_33468;
                        x_33445 = index_primexp_39465;
                        x_33446 = defunc_1_f_res_33469;
                    }
                    // apply reduction operator
                    {
                        bool defunc_1_op_res_33447;
                        int32_t defunc_1_op_res_33448;
                        
                        if (x_33441) {
                            defunc_1_op_res_33447 = x_33441;
                            defunc_1_op_res_33448 = x_33442;
                        } else {
                            bool x_33449 = x_33444 && x_33444;
                            bool x_33450 = !x_33444;
                            bool y_33451 = x_33441 && x_33450;
                            bool defunc_1_op_res_f_res_33452 = x_33449 ||
                                 y_33451;
                            int32_t defunc_1_op_res_f_res_33453;
                            
                            if (x_33444) {
                                defunc_1_op_res_f_res_33453 = x_33445;
                            } else {
                                defunc_1_op_res_f_res_33453 = x_33442;
                            }
                            defunc_1_op_res_33447 = defunc_1_op_res_f_res_33452;
                            defunc_1_op_res_33448 = defunc_1_op_res_f_res_33453;
                        }
                        
                        float defunc_1_op_res_33454 = x_33443 + x_33446;
                        
                        // store in accumulator
                        {
                            x_acc_44182 = defunc_1_op_res_33447;
                            x_acc_44183 = defunc_1_op_res_33448;
                            x_acc_44184 = defunc_1_op_res_33454;
                        }
                    }
                }
            }
            // to reduce current chunk, first store our result in memory
            {
                x_33441 = x_acc_44182;
                x_33442 = x_acc_44183;
                x_33443 = x_acc_44184;
                ((__local
                  bool *) red_arr_mem_44167)[sext_i32_i64(local_tid_44163)] =
                    x_33441;
                ((__local
                  int32_t *) red_arr_mem_44169)[sext_i32_i64(local_tid_44163)] =
                    x_33442;
                ((__local
                  float *) red_arr_mem_44171)[sext_i32_i64(local_tid_44163)] =
                    x_33443;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int32_t offset_44203;
            int32_t skip_waves_44204 = 1;
            bool x_44188;
            int32_t x_44189;
            float x_44190;
            bool x_44191;
            int32_t x_44192;
            float x_44193;
            
            offset_44203 = 0;
            // participating threads read initial accumulator
            {
                if (slt32(local_tid_44163,
                          sext_i64_i32(segred_group_sizze_33434))) {
                    x_44188 = ((__local
                                bool *) red_arr_mem_44167)[sext_i32_i64(local_tid_44163 +
                                                           offset_44203)];
                    x_44189 = ((__local
                                int32_t *) red_arr_mem_44169)[sext_i32_i64(local_tid_44163 +
                                                              offset_44203)];
                    x_44190 = ((__local
                                float *) red_arr_mem_44171)[sext_i32_i64(local_tid_44163 +
                                                            offset_44203)];
                }
            }
            offset_44203 = 1;
            while (slt32(offset_44203, wave_sizze_44165)) {
                if (slt32(local_tid_44163 + offset_44203,
                          sext_i64_i32(segred_group_sizze_33434)) &&
                    ((local_tid_44163 - squot32(local_tid_44163,
                                                wave_sizze_44165) *
                      wave_sizze_44165) & (2 * offset_44203 - 1)) == 0) {
                    // read array element
                    {
                        x_44191 = ((volatile __local
                                    bool *) red_arr_mem_44167)[sext_i32_i64(local_tid_44163 +
                                                               offset_44203)];
                        x_44192 = ((volatile __local
                                    int32_t *) red_arr_mem_44169)[sext_i32_i64(local_tid_44163 +
                                                                  offset_44203)];
                        x_44193 = ((volatile __local
                                    float *) red_arr_mem_44171)[sext_i32_i64(local_tid_44163 +
                                                                offset_44203)];
                    }
                    // apply reduction operation
                    {
                        bool defunc_1_op_res_44194;
                        int32_t defunc_1_op_res_44195;
                        
                        if (x_44188) {
                            defunc_1_op_res_44194 = x_44188;
                            defunc_1_op_res_44195 = x_44189;
                        } else {
                            bool x_44196 = x_44191 && x_44191;
                            bool x_44197 = !x_44191;
                            bool y_44198 = x_44188 && x_44197;
                            bool defunc_1_op_res_f_res_44199 = x_44196 ||
                                 y_44198;
                            int32_t defunc_1_op_res_f_res_44200;
                            
                            if (x_44191) {
                                defunc_1_op_res_f_res_44200 = x_44192;
                            } else {
                                defunc_1_op_res_f_res_44200 = x_44189;
                            }
                            defunc_1_op_res_44194 = defunc_1_op_res_f_res_44199;
                            defunc_1_op_res_44195 = defunc_1_op_res_f_res_44200;
                        }
                        
                        float defunc_1_op_res_44201 = x_44190 + x_44193;
                        
                        x_44188 = defunc_1_op_res_44194;
                        x_44189 = defunc_1_op_res_44195;
                        x_44190 = defunc_1_op_res_44201;
                    }
                    // write result of operation
                    {
                        ((volatile __local
                          bool *) red_arr_mem_44167)[sext_i32_i64(local_tid_44163)] =
                            x_44188;
                        ((volatile __local
                          int32_t *) red_arr_mem_44169)[sext_i32_i64(local_tid_44163)] =
                            x_44189;
                        ((volatile __local
                          float *) red_arr_mem_44171)[sext_i32_i64(local_tid_44163)] =
                            x_44190;
                    }
                }
                offset_44203 *= 2;
            }
            while (slt32(skip_waves_44204,
                         squot32(sext_i64_i32(segred_group_sizze_33434) +
                                 wave_sizze_44165 - 1, wave_sizze_44165))) {
                barrier(CLK_LOCAL_MEM_FENCE);
                offset_44203 = skip_waves_44204 * wave_sizze_44165;
                if (slt32(local_tid_44163 + offset_44203,
                          sext_i64_i32(segred_group_sizze_33434)) &&
                    ((local_tid_44163 - squot32(local_tid_44163,
                                                wave_sizze_44165) *
                      wave_sizze_44165) == 0 && (squot32(local_tid_44163,
                                                         wave_sizze_44165) &
                                                 (2 * skip_waves_44204 - 1)) ==
                     0)) {
                    // read array element
                    {
                        x_44191 = ((__local
                                    bool *) red_arr_mem_44167)[sext_i32_i64(local_tid_44163 +
                                                               offset_44203)];
                        x_44192 = ((__local
                                    int32_t *) red_arr_mem_44169)[sext_i32_i64(local_tid_44163 +
                                                                  offset_44203)];
                        x_44193 = ((__local
                                    float *) red_arr_mem_44171)[sext_i32_i64(local_tid_44163 +
                                                                offset_44203)];
                    }
                    // apply reduction operation
                    {
                        bool defunc_1_op_res_44194;
                        int32_t defunc_1_op_res_44195;
                        
                        if (x_44188) {
                            defunc_1_op_res_44194 = x_44188;
                            defunc_1_op_res_44195 = x_44189;
                        } else {
                            bool x_44196 = x_44191 && x_44191;
                            bool x_44197 = !x_44191;
                            bool y_44198 = x_44188 && x_44197;
                            bool defunc_1_op_res_f_res_44199 = x_44196 ||
                                 y_44198;
                            int32_t defunc_1_op_res_f_res_44200;
                            
                            if (x_44191) {
                                defunc_1_op_res_f_res_44200 = x_44192;
                            } else {
                                defunc_1_op_res_f_res_44200 = x_44189;
                            }
                            defunc_1_op_res_44194 = defunc_1_op_res_f_res_44199;
                            defunc_1_op_res_44195 = defunc_1_op_res_f_res_44200;
                        }
                        
                        float defunc_1_op_res_44201 = x_44190 + x_44193;
                        
                        x_44188 = defunc_1_op_res_44194;
                        x_44189 = defunc_1_op_res_44195;
                        x_44190 = defunc_1_op_res_44201;
                    }
                    // write result of operation
                    {
                        ((__local
                          bool *) red_arr_mem_44167)[sext_i32_i64(local_tid_44163)] =
                            x_44188;
                        ((__local
                          int32_t *) red_arr_mem_44169)[sext_i32_i64(local_tid_44163)] =
                            x_44189;
                        ((__local
                          float *) red_arr_mem_44171)[sext_i32_i64(local_tid_44163)] =
                            x_44190;
                    }
                }
                skip_waves_44204 *= 2;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread saves the result in accumulator
            {
                if (sext_i32_i64(local_tid_44163) == (int64_t) 0) {
                    x_acc_44182 = x_44188;
                    x_acc_44183 = x_44189;
                    x_acc_44184 = x_44190;
                }
            }
            // first thread keeps accumulator; others reset to neutral element
            {
                if (!(sext_i32_i64(local_tid_44163) == (int64_t) 0)) {
                    x_acc_44182 = 0;
                    x_acc_44183 = -1;
                    x_acc_44184 = 0.0F;
                }
            }
        }
        x_33441 = x_acc_44182;
        x_33442 = x_acc_44183;
        x_33443 = x_acc_44184;
        if (groups_per_segment_44149 == (int64_t) 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_44163 == 0) {
                    ((__global bool *) mem_42534)[gtid_33281] = x_acc_44182;
                    ((__global int32_t *) mem_42537)[gtid_33281] = x_acc_44183;
                    ((__global float *) mem_42540)[gtid_33281] = x_acc_44184;
                }
            }
        } else {
            int32_t old_counter_44205;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_44163 == 0) {
                    ((__global
                      bool *) segred_tmp_mem_44154)[sext_i32_i64(virt_group_id_44177)] =
                        x_acc_44182;
                    ((__global
                      int32_t *) segred_tmp_mem_44156)[sext_i32_i64(virt_group_id_44177)] =
                        x_acc_44183;
                    ((__global
                      float *) segred_tmp_mem_44158)[sext_i32_i64(virt_group_id_44177)] =
                        x_acc_44184;
                    mem_fence_global();
                    old_counter_44205 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_44160)[sext_i32_i64(srem32(flat_segment_id_44178,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_44173)[(int64_t) 0] =
                        old_counter_44205 == groups_per_segment_44149 -
                        (int64_t) 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_44206 = ((__local
                                         bool *) sync_arr_mem_44173)[(int64_t) 0];
            
            if (is_last_group_44206) {
                if (local_tid_44163 == 0) {
                    old_counter_44205 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_44160)[sext_i32_i64(srem32(flat_segment_id_44178,
                                                                                                             10240))],
                                              (int) ((int64_t) 0 -
                                                     groups_per_segment_44149));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_44207 =
                            sdiv_up64(groups_per_segment_44149,
                                      segred_group_sizze_33434);
                    
                    x_33441 = 0;
                    x_33442 = -1;
                    x_33443 = 0.0F;
                    for (int64_t i_44208 = 0; i_44208 < read_per_thread_44207;
                         i_44208++) {
                        int64_t group_res_id_44209 =
                                sext_i32_i64(local_tid_44163) *
                                read_per_thread_44207 + i_44208;
                        int64_t index_of_group_res_44210 =
                                sext_i32_i64(flat_segment_id_44178) *
                                groups_per_segment_44149 + group_res_id_44209;
                        
                        if (slt64(group_res_id_44209,
                                  groups_per_segment_44149)) {
                            x_33444 = ((__global
                                        bool *) segred_tmp_mem_44154)[index_of_group_res_44210];
                            x_33445 = ((__global
                                        int32_t *) segred_tmp_mem_44156)[index_of_group_res_44210];
                            x_33446 = ((__global
                                        float *) segred_tmp_mem_44158)[index_of_group_res_44210];
                            
                            bool defunc_1_op_res_33447;
                            int32_t defunc_1_op_res_33448;
                            
                            if (x_33441) {
                                defunc_1_op_res_33447 = x_33441;
                                defunc_1_op_res_33448 = x_33442;
                            } else {
                                bool x_33449 = x_33444 && x_33444;
                                bool x_33450 = !x_33444;
                                bool y_33451 = x_33441 && x_33450;
                                bool defunc_1_op_res_f_res_33452 = x_33449 ||
                                     y_33451;
                                int32_t defunc_1_op_res_f_res_33453;
                                
                                if (x_33444) {
                                    defunc_1_op_res_f_res_33453 = x_33445;
                                } else {
                                    defunc_1_op_res_f_res_33453 = x_33442;
                                }
                                defunc_1_op_res_33447 =
                                    defunc_1_op_res_f_res_33452;
                                defunc_1_op_res_33448 =
                                    defunc_1_op_res_f_res_33453;
                            }
                            
                            float defunc_1_op_res_33454 = x_33443 + x_33446;
                            
                            x_33441 = defunc_1_op_res_33447;
                            x_33442 = defunc_1_op_res_33448;
                            x_33443 = defunc_1_op_res_33454;
                        }
                    }
                }
                ((__local
                  bool *) red_arr_mem_44167)[sext_i32_i64(local_tid_44163)] =
                    x_33441;
                ((__local
                  int32_t *) red_arr_mem_44169)[sext_i32_i64(local_tid_44163)] =
                    x_33442;
                ((__local
                  float *) red_arr_mem_44171)[sext_i32_i64(local_tid_44163)] =
                    x_33443;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_44211;
                    int32_t skip_waves_44212 = 1;
                    bool x_44188;
                    int32_t x_44189;
                    float x_44190;
                    bool x_44191;
                    int32_t x_44192;
                    float x_44193;
                    
                    offset_44211 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_44163,
                                  sext_i64_i32(segred_group_sizze_33434))) {
                            x_44188 = ((__local
                                        bool *) red_arr_mem_44167)[sext_i32_i64(local_tid_44163 +
                                                                   offset_44211)];
                            x_44189 = ((__local
                                        int32_t *) red_arr_mem_44169)[sext_i32_i64(local_tid_44163 +
                                                                      offset_44211)];
                            x_44190 = ((__local
                                        float *) red_arr_mem_44171)[sext_i32_i64(local_tid_44163 +
                                                                    offset_44211)];
                        }
                    }
                    offset_44211 = 1;
                    while (slt32(offset_44211, wave_sizze_44165)) {
                        if (slt32(local_tid_44163 + offset_44211,
                                  sext_i64_i32(segred_group_sizze_33434)) &&
                            ((local_tid_44163 - squot32(local_tid_44163,
                                                        wave_sizze_44165) *
                              wave_sizze_44165) & (2 * offset_44211 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_44191 = ((volatile __local
                                            bool *) red_arr_mem_44167)[sext_i32_i64(local_tid_44163 +
                                                                       offset_44211)];
                                x_44192 = ((volatile __local
                                            int32_t *) red_arr_mem_44169)[sext_i32_i64(local_tid_44163 +
                                                                          offset_44211)];
                                x_44193 = ((volatile __local
                                            float *) red_arr_mem_44171)[sext_i32_i64(local_tid_44163 +
                                                                        offset_44211)];
                            }
                            // apply reduction operation
                            {
                                bool defunc_1_op_res_44194;
                                int32_t defunc_1_op_res_44195;
                                
                                if (x_44188) {
                                    defunc_1_op_res_44194 = x_44188;
                                    defunc_1_op_res_44195 = x_44189;
                                } else {
                                    bool x_44196 = x_44191 && x_44191;
                                    bool x_44197 = !x_44191;
                                    bool y_44198 = x_44188 && x_44197;
                                    bool defunc_1_op_res_f_res_44199 =
                                         x_44196 || y_44198;
                                    int32_t defunc_1_op_res_f_res_44200;
                                    
                                    if (x_44191) {
                                        defunc_1_op_res_f_res_44200 = x_44192;
                                    } else {
                                        defunc_1_op_res_f_res_44200 = x_44189;
                                    }
                                    defunc_1_op_res_44194 =
                                        defunc_1_op_res_f_res_44199;
                                    defunc_1_op_res_44195 =
                                        defunc_1_op_res_f_res_44200;
                                }
                                
                                float defunc_1_op_res_44201 = x_44190 + x_44193;
                                
                                x_44188 = defunc_1_op_res_44194;
                                x_44189 = defunc_1_op_res_44195;
                                x_44190 = defunc_1_op_res_44201;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  bool *) red_arr_mem_44167)[sext_i32_i64(local_tid_44163)] =
                                    x_44188;
                                ((volatile __local
                                  int32_t *) red_arr_mem_44169)[sext_i32_i64(local_tid_44163)] =
                                    x_44189;
                                ((volatile __local
                                  float *) red_arr_mem_44171)[sext_i32_i64(local_tid_44163)] =
                                    x_44190;
                            }
                        }
                        offset_44211 *= 2;
                    }
                    while (slt32(skip_waves_44212,
                                 squot32(sext_i64_i32(segred_group_sizze_33434) +
                                         wave_sizze_44165 - 1,
                                         wave_sizze_44165))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_44211 = skip_waves_44212 * wave_sizze_44165;
                        if (slt32(local_tid_44163 + offset_44211,
                                  sext_i64_i32(segred_group_sizze_33434)) &&
                            ((local_tid_44163 - squot32(local_tid_44163,
                                                        wave_sizze_44165) *
                              wave_sizze_44165) == 0 &&
                             (squot32(local_tid_44163, wave_sizze_44165) & (2 *
                                                                            skip_waves_44212 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_44191 = ((__local
                                            bool *) red_arr_mem_44167)[sext_i32_i64(local_tid_44163 +
                                                                       offset_44211)];
                                x_44192 = ((__local
                                            int32_t *) red_arr_mem_44169)[sext_i32_i64(local_tid_44163 +
                                                                          offset_44211)];
                                x_44193 = ((__local
                                            float *) red_arr_mem_44171)[sext_i32_i64(local_tid_44163 +
                                                                        offset_44211)];
                            }
                            // apply reduction operation
                            {
                                bool defunc_1_op_res_44194;
                                int32_t defunc_1_op_res_44195;
                                
                                if (x_44188) {
                                    defunc_1_op_res_44194 = x_44188;
                                    defunc_1_op_res_44195 = x_44189;
                                } else {
                                    bool x_44196 = x_44191 && x_44191;
                                    bool x_44197 = !x_44191;
                                    bool y_44198 = x_44188 && x_44197;
                                    bool defunc_1_op_res_f_res_44199 =
                                         x_44196 || y_44198;
                                    int32_t defunc_1_op_res_f_res_44200;
                                    
                                    if (x_44191) {
                                        defunc_1_op_res_f_res_44200 = x_44192;
                                    } else {
                                        defunc_1_op_res_f_res_44200 = x_44189;
                                    }
                                    defunc_1_op_res_44194 =
                                        defunc_1_op_res_f_res_44199;
                                    defunc_1_op_res_44195 =
                                        defunc_1_op_res_f_res_44200;
                                }
                                
                                float defunc_1_op_res_44201 = x_44190 + x_44193;
                                
                                x_44188 = defunc_1_op_res_44194;
                                x_44189 = defunc_1_op_res_44195;
                                x_44190 = defunc_1_op_res_44201;
                            }
                            // write result of operation
                            {
                                ((__local
                                  bool *) red_arr_mem_44167)[sext_i32_i64(local_tid_44163)] =
                                    x_44188;
                                ((__local
                                  int32_t *) red_arr_mem_44169)[sext_i32_i64(local_tid_44163)] =
                                    x_44189;
                                ((__local
                                  float *) red_arr_mem_44171)[sext_i32_i64(local_tid_44163)] =
                                    x_44190;
                            }
                        }
                        skip_waves_44212 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_44163 == 0) {
                            ((__global bool *) mem_42534)[gtid_33281] = x_44188;
                            ((__global int32_t *) mem_42537)[gtid_33281] =
                                x_44189;
                            ((__global float *) mem_42540)[gtid_33281] =
                                x_44190;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_33434
}
__kernel void mainDetailedzisegred_nonseg_32358(__global int *global_failure,
                                                __local volatile
                                                int64_t *red_arr_mem_43847_backing_aligned_0,
                                                __local volatile
                                                int64_t *sync_arr_mem_43845_backing_aligned_1,
                                                int64_t m_28170,
                                                int64_t num_groups_32353,
                                                int64_t num_threads_43839,
                                                __global
                                                unsigned char *defunc_3_map_res_mem_42344,
                                                __global
                                                unsigned char *mem_42349,
                                                __global
                                                unsigned char *mainDetailedzicounter_mem_43835,
                                                __global
                                                unsigned char *segred_tmp_mem_43837)
{
    #define segred_group_sizze_32351 (mainDetailedzisegred_group_sizze_32350)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_43847_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_43847_backing_aligned_0;
    __local volatile char *restrict sync_arr_mem_43845_backing_0 =
                          (__local volatile
                           char *) sync_arr_mem_43845_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43840;
    int32_t local_tid_43841;
    int64_t group_sizze_43844;
    int32_t wave_sizze_43843;
    int32_t group_tid_43842;
    
    global_tid_43840 = get_global_id(0);
    local_tid_43841 = get_local_id(0);
    group_sizze_43844 = get_local_size(0);
    wave_sizze_43843 = LOCKSTEP_WIDTH;
    group_tid_43842 = get_group_id(0);
    
    int32_t phys_tid_32358 = global_tid_43840;
    __local char *sync_arr_mem_43845;
    
    sync_arr_mem_43845 = (__local char *) sync_arr_mem_43845_backing_0;
    
    __local char *red_arr_mem_43847;
    
    red_arr_mem_43847 = (__local char *) red_arr_mem_43847_backing_1;
    
    int64_t dummy_32356 = (int64_t) 0;
    int64_t gtid_32357 = (int64_t) 0;
    int32_t x_acc_43849;
    int64_t chunk_sizze_43850 = smin64(sdiv_up64(m_28170,
                                                 sext_i32_i64(sext_i64_i32(segred_group_sizze_32351 *
                                                 num_groups_32353))),
                                       sdiv_up64(m_28170 - phys_tid_32358,
                                                 num_threads_43839));
    int32_t x_28567;
    int32_t x_28568;
    
    // neutral-initialise the accumulators
    {
        x_acc_43849 = 0;
    }
    for (int64_t i_43854 = 0; i_43854 < chunk_sizze_43850; i_43854++) {
        gtid_32357 = phys_tid_32358 + num_threads_43839 * i_43854;
        // apply map function
        {
            int32_t x_28570 = ((__global
                                int32_t *) defunc_3_map_res_mem_42344)[gtid_32357];
            
            // save map-out results
            { }
            // load accumulator
            {
                x_28567 = x_acc_43849;
            }
            // load new values
            {
                x_28568 = x_28570;
            }
            // apply reduction operator
            {
                int32_t defunc_1_op_res_28569 = smax32(x_28567, x_28568);
                
                // store in accumulator
                {
                    x_acc_43849 = defunc_1_op_res_28569;
                }
            }
        }
    }
    // to reduce current chunk, first store our result in memory
    {
        x_28567 = x_acc_43849;
        ((__local int32_t *) red_arr_mem_43847)[sext_i32_i64(local_tid_43841)] =
            x_28567;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_43855;
    int32_t skip_waves_43856 = 1;
    int32_t x_43851;
    int32_t x_43852;
    
    offset_43855 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_43841, sext_i64_i32(segred_group_sizze_32351))) {
            x_43851 = ((__local
                        int32_t *) red_arr_mem_43847)[sext_i32_i64(local_tid_43841 +
                                                      offset_43855)];
        }
    }
    offset_43855 = 1;
    while (slt32(offset_43855, wave_sizze_43843)) {
        if (slt32(local_tid_43841 + offset_43855,
                  sext_i64_i32(segred_group_sizze_32351)) && ((local_tid_43841 -
                                                               squot32(local_tid_43841,
                                                                       wave_sizze_43843) *
                                                               wave_sizze_43843) &
                                                              (2 *
                                                               offset_43855 -
                                                               1)) == 0) {
            // read array element
            {
                x_43852 = ((volatile __local
                            int32_t *) red_arr_mem_43847)[sext_i32_i64(local_tid_43841 +
                                                          offset_43855)];
            }
            // apply reduction operation
            {
                int32_t defunc_1_op_res_43853 = smax32(x_43851, x_43852);
                
                x_43851 = defunc_1_op_res_43853;
            }
            // write result of operation
            {
                ((volatile __local
                  int32_t *) red_arr_mem_43847)[sext_i32_i64(local_tid_43841)] =
                    x_43851;
            }
        }
        offset_43855 *= 2;
    }
    while (slt32(skip_waves_43856,
                 squot32(sext_i64_i32(segred_group_sizze_32351) +
                         wave_sizze_43843 - 1, wave_sizze_43843))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_43855 = skip_waves_43856 * wave_sizze_43843;
        if (slt32(local_tid_43841 + offset_43855,
                  sext_i64_i32(segred_group_sizze_32351)) && ((local_tid_43841 -
                                                               squot32(local_tid_43841,
                                                                       wave_sizze_43843) *
                                                               wave_sizze_43843) ==
                                                              0 &&
                                                              (squot32(local_tid_43841,
                                                                       wave_sizze_43843) &
                                                               (2 *
                                                                skip_waves_43856 -
                                                                1)) == 0)) {
            // read array element
            {
                x_43852 = ((__local
                            int32_t *) red_arr_mem_43847)[sext_i32_i64(local_tid_43841 +
                                                          offset_43855)];
            }
            // apply reduction operation
            {
                int32_t defunc_1_op_res_43853 = smax32(x_43851, x_43852);
                
                x_43851 = defunc_1_op_res_43853;
            }
            // write result of operation
            {
                ((__local
                  int32_t *) red_arr_mem_43847)[sext_i32_i64(local_tid_43841)] =
                    x_43851;
            }
        }
        skip_waves_43856 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // first thread saves the result in accumulator
    {
        if (sext_i32_i64(local_tid_43841) == (int64_t) 0) {
            x_acc_43849 = x_43851;
        }
    }
    
    int32_t old_counter_43857;
    
    // first thread in group saves group result to global memory
    {
        if (local_tid_43841 == 0) {
            ((__global
              int32_t *) segred_tmp_mem_43837)[sext_i32_i64(group_tid_43842)] =
                x_acc_43849;
            mem_fence_global();
            old_counter_43857 = atomic_add_i32_global(&((volatile __global
                                                         int *) mainDetailedzicounter_mem_43835)[(int64_t) 0],
                                                      (int) 1);
            ((__local bool *) sync_arr_mem_43845)[(int64_t) 0] =
                old_counter_43857 == num_groups_32353 - (int64_t) 1;
        }
    }
    barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    
    bool is_last_group_43858 = ((__local
                                 bool *) sync_arr_mem_43845)[(int64_t) 0];
    
    if (is_last_group_43858) {
        if (local_tid_43841 == 0) {
            old_counter_43857 = atomic_add_i32_global(&((volatile __global
                                                         int *) mainDetailedzicounter_mem_43835)[(int64_t) 0],
                                                      (int) ((int64_t) 0 -
                                                             num_groups_32353));
        }
        // read in the per-group-results
        {
            int64_t read_per_thread_43859 = sdiv_up64(num_groups_32353,
                                                      segred_group_sizze_32351);
            
            x_28567 = 0;
            for (int64_t i_43860 = 0; i_43860 < read_per_thread_43859;
                 i_43860++) {
                int64_t group_res_id_43861 = sext_i32_i64(local_tid_43841) *
                        read_per_thread_43859 + i_43860;
                int64_t index_of_group_res_43862 = group_res_id_43861;
                
                if (slt64(group_res_id_43861, num_groups_32353)) {
                    x_28568 = ((__global
                                int32_t *) segred_tmp_mem_43837)[index_of_group_res_43862];
                    
                    int32_t defunc_1_op_res_28569 = smax32(x_28567, x_28568);
                    
                    x_28567 = defunc_1_op_res_28569;
                }
            }
        }
        ((__local int32_t *) red_arr_mem_43847)[sext_i32_i64(local_tid_43841)] =
            x_28567;
        barrier(CLK_LOCAL_MEM_FENCE);
        // reduce the per-group results
        {
            int32_t offset_43863;
            int32_t skip_waves_43864 = 1;
            int32_t x_43851;
            int32_t x_43852;
            
            offset_43863 = 0;
            // participating threads read initial accumulator
            {
                if (slt32(local_tid_43841,
                          sext_i64_i32(segred_group_sizze_32351))) {
                    x_43851 = ((__local
                                int32_t *) red_arr_mem_43847)[sext_i32_i64(local_tid_43841 +
                                                              offset_43863)];
                }
            }
            offset_43863 = 1;
            while (slt32(offset_43863, wave_sizze_43843)) {
                if (slt32(local_tid_43841 + offset_43863,
                          sext_i64_i32(segred_group_sizze_32351)) &&
                    ((local_tid_43841 - squot32(local_tid_43841,
                                                wave_sizze_43843) *
                      wave_sizze_43843) & (2 * offset_43863 - 1)) == 0) {
                    // read array element
                    {
                        x_43852 = ((volatile __local
                                    int32_t *) red_arr_mem_43847)[sext_i32_i64(local_tid_43841 +
                                                                  offset_43863)];
                    }
                    // apply reduction operation
                    {
                        int32_t defunc_1_op_res_43853 = smax32(x_43851,
                                                               x_43852);
                        
                        x_43851 = defunc_1_op_res_43853;
                    }
                    // write result of operation
                    {
                        ((volatile __local
                          int32_t *) red_arr_mem_43847)[sext_i32_i64(local_tid_43841)] =
                            x_43851;
                    }
                }
                offset_43863 *= 2;
            }
            while (slt32(skip_waves_43864,
                         squot32(sext_i64_i32(segred_group_sizze_32351) +
                                 wave_sizze_43843 - 1, wave_sizze_43843))) {
                barrier(CLK_LOCAL_MEM_FENCE);
                offset_43863 = skip_waves_43864 * wave_sizze_43843;
                if (slt32(local_tid_43841 + offset_43863,
                          sext_i64_i32(segred_group_sizze_32351)) &&
                    ((local_tid_43841 - squot32(local_tid_43841,
                                                wave_sizze_43843) *
                      wave_sizze_43843) == 0 && (squot32(local_tid_43841,
                                                         wave_sizze_43843) &
                                                 (2 * skip_waves_43864 - 1)) ==
                     0)) {
                    // read array element
                    {
                        x_43852 = ((__local
                                    int32_t *) red_arr_mem_43847)[sext_i32_i64(local_tid_43841 +
                                                                  offset_43863)];
                    }
                    // apply reduction operation
                    {
                        int32_t defunc_1_op_res_43853 = smax32(x_43851,
                                                               x_43852);
                        
                        x_43851 = defunc_1_op_res_43853;
                    }
                    // write result of operation
                    {
                        ((__local
                          int32_t *) red_arr_mem_43847)[sext_i32_i64(local_tid_43841)] =
                            x_43851;
                    }
                }
                skip_waves_43864 *= 2;
            }
            // and back to memory with the final result
            {
                if (local_tid_43841 == 0) {
                    ((__global int32_t *) mem_42349)[(int64_t) 0] = x_43851;
                }
            }
        }
    }
    
  error_1:
    return;
    #undef segred_group_sizze_32351
}
__kernel void mainDetailedzisegred_small_30574(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_43001_backing_aligned_0,
                                               int64_t N_28169, int64_t m_28170,
                                               int64_t i32_res_28179,
                                               int64_t i32_res_28185,
                                               int64_t num_groups_30713,
                                               int64_t segment_sizze_nonzzero_42994,
                                               __global
                                               unsigned char *images_mem_41421,
                                               __global
                                               unsigned char *binop_p_mem_41432,
                                               __global
                                               unsigned char *mem_41579,
                                               __global
                                               unsigned char *mem_41585)
{
    #define segred_group_sizze_30712 (mainDetailedzisegred_group_sizze_30568)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_43001_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43001_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_42996;
    int32_t local_tid_42997;
    int64_t group_sizze_43000;
    int32_t wave_sizze_42999;
    int32_t group_tid_42998;
    
    global_tid_42996 = get_global_id(0);
    local_tid_42997 = get_local_id(0);
    group_sizze_43000 = get_local_size(0);
    wave_sizze_42999 = LOCKSTEP_WIDTH;
    group_tid_42998 = get_group_id(0);
    
    int32_t phys_tid_30574 = global_tid_42996;
    __local char *red_arr_mem_43001;
    
    red_arr_mem_43001 = (__local char *) red_arr_mem_43001_backing_0;
    
    int32_t phys_group_id_43003;
    
    phys_group_id_43003 = get_group_id(0);
    for (int32_t i_43004 = 0; i_43004 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_28170 * i32_res_28185 *
                                          i32_res_28185,
                                          squot64(segred_group_sizze_30712,
                                                  segment_sizze_nonzzero_42994))) -
                   phys_group_id_43003, sext_i64_i32(num_groups_30713));
         i_43004++) {
        int32_t virt_group_id_43005 = phys_group_id_43003 + i_43004 *
                sext_i64_i32(num_groups_30713);
        int64_t slice_43006 = i32_res_28185;
        int64_t slice_43007 = i32_res_28185 * slice_43006;
        int64_t slice_43008 = m_28170 * slice_43007;
        int64_t gtid_30561 = squot64(squot64(sext_i32_i64(local_tid_42997),
                                             segment_sizze_nonzzero_42994) +
                                     sext_i32_i64(virt_group_id_43005) *
                                     squot64(segred_group_sizze_30712,
                                             segment_sizze_nonzzero_42994),
                                     slice_43007);
        int64_t remnant_43009 = squot64(sext_i32_i64(local_tid_42997),
                                        segment_sizze_nonzzero_42994) +
                sext_i32_i64(virt_group_id_43005) *
                squot64(segred_group_sizze_30712,
                        segment_sizze_nonzzero_42994) - gtid_30561 *
                slice_43007;
        int64_t gtid_30562 = squot64(remnant_43009, slice_43006);
        int64_t remnant_43010 = remnant_43009 - gtid_30562 * slice_43006;
        int64_t gtid_30563 = remnant_43010;
        int64_t remnant_43011 = remnant_43010 - gtid_30563;
        int64_t gtid_30573 = srem64(sext_i32_i64(local_tid_42997),
                                    i32_res_28179);
        
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, i32_res_28179) && (((slt64(gtid_30561,
                                                              m_28170) &&
                                                        slt64(gtid_30562,
                                                              i32_res_28185)) &&
                                                       slt64(gtid_30563,
                                                             i32_res_28185)) &&
                                                      slt64(sext_i32_i64(local_tid_42997),
                                                            i32_res_28179 *
                                                            squot64(segred_group_sizze_30712,
                                                                    segment_sizze_nonzzero_42994)))) {
                float x_30722 = ((__global
                                  float *) images_mem_41421)[gtid_30561 *
                                                             N_28169 +
                                                             gtid_30573];
                float x_30723 = ((__global
                                  float *) binop_p_mem_41432)[gtid_30562 *
                                                              N_28169 +
                                                              gtid_30573];
                float x_30724 = ((__global float *) mem_41579)[gtid_30563 *
                                                               N_28169 +
                                                               gtid_30573];
                float x_30725 = x_30723 * x_30724;
                bool isnan_res_30726;
                
                isnan_res_30726 = futrts_isnan32(x_30722);
                
                float y_30727;
                
                if (isnan_res_30726) {
                    y_30727 = 0.0F;
                } else {
                    y_30727 = 1.0F;
                }
                
                float defunc_2_f_res_30728 = x_30725 * y_30727;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_43001)[sext_i32_i64(local_tid_42997)] =
                        defunc_2_f_res_30728;
                }
            } else {
                ((__local
                  float *) red_arr_mem_43001)[sext_i32_i64(local_tid_42997)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, i32_res_28179)) {
            // perform segmented scan to imitate reduction
            {
                float x_30716;
                float x_30717;
                float x_43012;
                float x_43013;
                bool ltid_in_bounds_43015 = slt64(sext_i32_i64(local_tid_42997),
                                                  i32_res_28179 *
                                                  squot64(segred_group_sizze_30712,
                                                          segment_sizze_nonzzero_42994));
                int32_t skip_threads_43016;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_43015) {
                        x_30717 = ((volatile __local
                                    float *) red_arr_mem_43001)[sext_i32_i64(local_tid_42997)];
                        if ((local_tid_42997 - squot32(local_tid_42997, 32) *
                             32) == 0) {
                            x_30716 = x_30717;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_43016 = 1;
                    while (slt32(skip_threads_43016, 32)) {
                        if (sle32(skip_threads_43016, local_tid_42997 -
                                  squot32(local_tid_42997, 32) * 32) &&
                            ltid_in_bounds_43015) {
                            // read operands
                            {
                                x_30716 = ((volatile __local
                                            float *) red_arr_mem_43001)[sext_i32_i64(local_tid_42997) -
                                                                        sext_i32_i64(skip_threads_43016)];
                            }
                            // perform operation
                            {
                                bool inactive_43017 =
                                     slt64(srem64(sext_i32_i64(local_tid_42997),
                                                  i32_res_28179),
                                           sext_i32_i64(local_tid_42997) -
                                           sext_i32_i64(local_tid_42997 -
                                           skip_threads_43016));
                                
                                if (inactive_43017) {
                                    x_30716 = x_30717;
                                }
                                if (!inactive_43017) {
                                    float defunc_1_op_res_30718 = x_30716 +
                                          x_30717;
                                    
                                    x_30716 = defunc_1_op_res_30718;
                                }
                            }
                        }
                        if (sle32(wave_sizze_42999, skip_threads_43016)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_43016, local_tid_42997 -
                                  squot32(local_tid_42997, 32) * 32) &&
                            ltid_in_bounds_43015) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43001)[sext_i32_i64(local_tid_42997)] =
                                    x_30716;
                                x_30717 = x_30716;
                            }
                        }
                        if (sle32(wave_sizze_42999, skip_threads_43016)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_43016 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_42997 - squot32(local_tid_42997, 32) * 32) ==
                        31 && ltid_in_bounds_43015) {
                        ((volatile __local
                          float *) red_arr_mem_43001)[sext_i32_i64(squot32(local_tid_42997,
                                                                           32))] =
                            x_30716;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_43018;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_42997, 32) == 0 &&
                            ltid_in_bounds_43015) {
                            x_43013 = ((volatile __local
                                        float *) red_arr_mem_43001)[sext_i32_i64(local_tid_42997)];
                            if ((local_tid_42997 - squot32(local_tid_42997,
                                                           32) * 32) == 0) {
                                x_43012 = x_43013;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_43018 = 1;
                        while (slt32(skip_threads_43018, 32)) {
                            if (sle32(skip_threads_43018, local_tid_42997 -
                                      squot32(local_tid_42997, 32) * 32) &&
                                (squot32(local_tid_42997, 32) == 0 &&
                                 ltid_in_bounds_43015)) {
                                // read operands
                                {
                                    x_43012 = ((volatile __local
                                                float *) red_arr_mem_43001)[sext_i32_i64(local_tid_42997) -
                                                                            sext_i32_i64(skip_threads_43018)];
                                }
                                // perform operation
                                {
                                    bool inactive_43019 =
                                         slt64(srem64(sext_i32_i64(local_tid_42997 *
                                                      32 + 32 - 1),
                                                      i32_res_28179),
                                               sext_i32_i64(local_tid_42997 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_42997 -
                                                             skip_threads_43018) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_43019) {
                                        x_43012 = x_43013;
                                    }
                                    if (!inactive_43019) {
                                        float defunc_1_op_res_43014 = x_43012 +
                                              x_43013;
                                        
                                        x_43012 = defunc_1_op_res_43014;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_42999, skip_threads_43018)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_43018, local_tid_42997 -
                                      squot32(local_tid_42997, 32) * 32) &&
                                (squot32(local_tid_42997, 32) == 0 &&
                                 ltid_in_bounds_43015)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_43001)[sext_i32_i64(local_tid_42997)] =
                                        x_43012;
                                    x_43013 = x_43012;
                                }
                            }
                            if (sle32(wave_sizze_42999, skip_threads_43018)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_43018 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_42997, 32) == 0 ||
                          !ltid_in_bounds_43015)) {
                        // read operands
                        {
                            x_30717 = x_30716;
                            x_30716 = ((__local
                                        float *) red_arr_mem_43001)[sext_i32_i64(squot32(local_tid_42997,
                                                                                         32)) -
                                                                    (int64_t) 1];
                        }
                        // perform operation
                        {
                            bool inactive_43020 =
                                 slt64(srem64(sext_i32_i64(local_tid_42997),
                                              i32_res_28179),
                                       sext_i32_i64(local_tid_42997) -
                                       sext_i32_i64(squot32(local_tid_42997,
                                                            32) * 32 - 1));
                            
                            if (inactive_43020) {
                                x_30716 = x_30717;
                            }
                            if (!inactive_43020) {
                                float defunc_1_op_res_30718 = x_30716 + x_30717;
                                
                                x_30716 = defunc_1_op_res_30718;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_43001)[sext_i32_i64(local_tid_42997)] =
                                x_30716;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_42997, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_43001)[sext_i32_i64(local_tid_42997)] =
                            x_30717;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_43005) *
                      squot64(segred_group_sizze_30712,
                              segment_sizze_nonzzero_42994) +
                      sext_i32_i64(local_tid_42997), m_28170 * i32_res_28185 *
                      i32_res_28185) && slt64(sext_i32_i64(local_tid_42997),
                                              squot64(segred_group_sizze_30712,
                                                      segment_sizze_nonzzero_42994))) {
                ((__global
                  float *) mem_41585)[squot64(sext_i32_i64(virt_group_id_43005) *
                                              squot64(segred_group_sizze_30712,
                                                      segment_sizze_nonzzero_42994) +
                                              sext_i32_i64(local_tid_42997),
                                              i32_res_28185 * i32_res_28185) *
                                      (i32_res_28185 * i32_res_28185) +
                                      squot64(sext_i32_i64(virt_group_id_43005) *
                                              squot64(segred_group_sizze_30712,
                                                      segment_sizze_nonzzero_42994) +
                                              sext_i32_i64(local_tid_42997) -
                                              squot64(sext_i32_i64(virt_group_id_43005) *
                                                      squot64(segred_group_sizze_30712,
                                                              segment_sizze_nonzzero_42994) +
                                                      sext_i32_i64(local_tid_42997),
                                                      i32_res_28185 *
                                                      i32_res_28185) *
                                              (i32_res_28185 * i32_res_28185),
                                              i32_res_28185) * i32_res_28185 +
                                      (sext_i32_i64(virt_group_id_43005) *
                                       squot64(segred_group_sizze_30712,
                                               segment_sizze_nonzzero_42994) +
                                       sext_i32_i64(local_tid_42997) -
                                       squot64(sext_i32_i64(virt_group_id_43005) *
                                               squot64(segred_group_sizze_30712,
                                                       segment_sizze_nonzzero_42994) +
                                               sext_i32_i64(local_tid_42997),
                                               i32_res_28185 * i32_res_28185) *
                                       (i32_res_28185 * i32_res_28185) -
                                       squot64(sext_i32_i64(virt_group_id_43005) *
                                               squot64(segred_group_sizze_30712,
                                                       segment_sizze_nonzzero_42994) +
                                               sext_i32_i64(local_tid_42997) -
                                               squot64(sext_i32_i64(virt_group_id_43005) *
                                                       squot64(segred_group_sizze_30712,
                                                               segment_sizze_nonzzero_42994) +
                                                       sext_i32_i64(local_tid_42997),
                                                       i32_res_28185 *
                                                       i32_res_28185) *
                                               (i32_res_28185 * i32_res_28185),
                                               i32_res_28185) *
                                       i32_res_28185)] = ((__local
                                                           float *) red_arr_mem_43001)[(sext_i32_i64(local_tid_42997) +
                                                                                        (int64_t) 1) *
                                                                                       segment_sizze_nonzzero_42994 -
                                                                                       (int64_t) 1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_30712
}
__kernel void mainDetailedzisegred_small_31538(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_43239_backing_aligned_0,
                                               int64_t N_28169, int64_t m_28170,
                                               int64_t i32_res_28179,
                                               int64_t i32_res_28185,
                                               int64_t num_groups_31591,
                                               int64_t segment_sizze_nonzzero_43232,
                                               __global
                                               unsigned char *images_mem_41421,
                                               __global
                                               unsigned char *binop_p_mem_41432,
                                               __global
                                               unsigned char *mem_41907)
{
    #define segred_group_sizze_31590 (mainDetailedzisegred_group_sizze_31532)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_43239_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43239_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43234;
    int32_t local_tid_43235;
    int64_t group_sizze_43238;
    int32_t wave_sizze_43237;
    int32_t group_tid_43236;
    
    global_tid_43234 = get_global_id(0);
    local_tid_43235 = get_local_id(0);
    group_sizze_43238 = get_local_size(0);
    wave_sizze_43237 = LOCKSTEP_WIDTH;
    group_tid_43236 = get_group_id(0);
    
    int32_t phys_tid_31538 = global_tid_43234;
    __local char *red_arr_mem_43239;
    
    red_arr_mem_43239 = (__local char *) red_arr_mem_43239_backing_0;
    
    int32_t phys_group_id_43241;
    
    phys_group_id_43241 = get_group_id(0);
    for (int32_t i_43242 = 0; i_43242 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_28170 * i32_res_28185,
                                          squot64(segred_group_sizze_31590,
                                                  segment_sizze_nonzzero_43232))) -
                   phys_group_id_43241, sext_i64_i32(num_groups_31591));
         i_43242++) {
        int32_t virt_group_id_43243 = phys_group_id_43241 + i_43242 *
                sext_i64_i32(num_groups_31591);
        int64_t slice_43244 = i32_res_28185;
        int64_t slice_43245 = m_28170 * slice_43244;
        int64_t gtid_31527 = squot64(squot64(sext_i32_i64(local_tid_43235),
                                             segment_sizze_nonzzero_43232) +
                                     sext_i32_i64(virt_group_id_43243) *
                                     squot64(segred_group_sizze_31590,
                                             segment_sizze_nonzzero_43232),
                                     slice_43244);
        int64_t remnant_43246 = squot64(sext_i32_i64(local_tid_43235),
                                        segment_sizze_nonzzero_43232) +
                sext_i32_i64(virt_group_id_43243) *
                squot64(segred_group_sizze_31590,
                        segment_sizze_nonzzero_43232) - gtid_31527 *
                slice_43244;
        int64_t gtid_31528 = remnant_43246;
        int64_t remnant_43247 = remnant_43246 - gtid_31528;
        int64_t gtid_31537 = srem64(sext_i32_i64(local_tid_43235),
                                    i32_res_28179);
        
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, i32_res_28179) && ((slt64(gtid_31527,
                                                             m_28170) &&
                                                       slt64(gtid_31528,
                                                             i32_res_28185)) &&
                                                      slt64(sext_i32_i64(local_tid_43235),
                                                            i32_res_28179 *
                                                            squot64(segred_group_sizze_31590,
                                                                    segment_sizze_nonzzero_43232)))) {
                float x_31600 = ((__global
                                  float *) images_mem_41421)[gtid_31527 *
                                                             N_28169 +
                                                             gtid_31537];
                bool isnan_res_31601;
                
                isnan_res_31601 = futrts_isnan32(x_31600);
                
                float defunc_1_f_res_31602;
                
                if (isnan_res_31601) {
                    defunc_1_f_res_31602 = 0.0F;
                } else {
                    float x_31599 = ((__global
                                      float *) binop_p_mem_41432)[gtid_31528 *
                                                                  N_28169 +
                                                                  gtid_31537];
                    float defunc_1_f_res_f_res_31603 = x_31599 * x_31600;
                    
                    defunc_1_f_res_31602 = defunc_1_f_res_f_res_31603;
                }
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_43239)[sext_i32_i64(local_tid_43235)] =
                        defunc_1_f_res_31602;
                }
            } else {
                ((__local
                  float *) red_arr_mem_43239)[sext_i32_i64(local_tid_43235)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, i32_res_28179)) {
            // perform segmented scan to imitate reduction
            {
                float x_31594;
                float x_31595;
                float x_43248;
                float x_43249;
                bool ltid_in_bounds_43251 = slt64(sext_i32_i64(local_tid_43235),
                                                  i32_res_28179 *
                                                  squot64(segred_group_sizze_31590,
                                                          segment_sizze_nonzzero_43232));
                int32_t skip_threads_43252;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_43251) {
                        x_31595 = ((volatile __local
                                    float *) red_arr_mem_43239)[sext_i32_i64(local_tid_43235)];
                        if ((local_tid_43235 - squot32(local_tid_43235, 32) *
                             32) == 0) {
                            x_31594 = x_31595;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_43252 = 1;
                    while (slt32(skip_threads_43252, 32)) {
                        if (sle32(skip_threads_43252, local_tid_43235 -
                                  squot32(local_tid_43235, 32) * 32) &&
                            ltid_in_bounds_43251) {
                            // read operands
                            {
                                x_31594 = ((volatile __local
                                            float *) red_arr_mem_43239)[sext_i32_i64(local_tid_43235) -
                                                                        sext_i32_i64(skip_threads_43252)];
                            }
                            // perform operation
                            {
                                bool inactive_43253 =
                                     slt64(srem64(sext_i32_i64(local_tid_43235),
                                                  i32_res_28179),
                                           sext_i32_i64(local_tid_43235) -
                                           sext_i32_i64(local_tid_43235 -
                                           skip_threads_43252));
                                
                                if (inactive_43253) {
                                    x_31594 = x_31595;
                                }
                                if (!inactive_43253) {
                                    float defunc_1_op_res_31596 = x_31594 +
                                          x_31595;
                                    
                                    x_31594 = defunc_1_op_res_31596;
                                }
                            }
                        }
                        if (sle32(wave_sizze_43237, skip_threads_43252)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_43252, local_tid_43235 -
                                  squot32(local_tid_43235, 32) * 32) &&
                            ltid_in_bounds_43251) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43239)[sext_i32_i64(local_tid_43235)] =
                                    x_31594;
                                x_31595 = x_31594;
                            }
                        }
                        if (sle32(wave_sizze_43237, skip_threads_43252)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_43252 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_43235 - squot32(local_tid_43235, 32) * 32) ==
                        31 && ltid_in_bounds_43251) {
                        ((volatile __local
                          float *) red_arr_mem_43239)[sext_i32_i64(squot32(local_tid_43235,
                                                                           32))] =
                            x_31594;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_43254;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_43235, 32) == 0 &&
                            ltid_in_bounds_43251) {
                            x_43249 = ((volatile __local
                                        float *) red_arr_mem_43239)[sext_i32_i64(local_tid_43235)];
                            if ((local_tid_43235 - squot32(local_tid_43235,
                                                           32) * 32) == 0) {
                                x_43248 = x_43249;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_43254 = 1;
                        while (slt32(skip_threads_43254, 32)) {
                            if (sle32(skip_threads_43254, local_tid_43235 -
                                      squot32(local_tid_43235, 32) * 32) &&
                                (squot32(local_tid_43235, 32) == 0 &&
                                 ltid_in_bounds_43251)) {
                                // read operands
                                {
                                    x_43248 = ((volatile __local
                                                float *) red_arr_mem_43239)[sext_i32_i64(local_tid_43235) -
                                                                            sext_i32_i64(skip_threads_43254)];
                                }
                                // perform operation
                                {
                                    bool inactive_43255 =
                                         slt64(srem64(sext_i32_i64(local_tid_43235 *
                                                      32 + 32 - 1),
                                                      i32_res_28179),
                                               sext_i32_i64(local_tid_43235 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_43235 -
                                                             skip_threads_43254) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_43255) {
                                        x_43248 = x_43249;
                                    }
                                    if (!inactive_43255) {
                                        float defunc_1_op_res_43250 = x_43248 +
                                              x_43249;
                                        
                                        x_43248 = defunc_1_op_res_43250;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_43237, skip_threads_43254)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_43254, local_tid_43235 -
                                      squot32(local_tid_43235, 32) * 32) &&
                                (squot32(local_tid_43235, 32) == 0 &&
                                 ltid_in_bounds_43251)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_43239)[sext_i32_i64(local_tid_43235)] =
                                        x_43248;
                                    x_43249 = x_43248;
                                }
                            }
                            if (sle32(wave_sizze_43237, skip_threads_43254)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_43254 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_43235, 32) == 0 ||
                          !ltid_in_bounds_43251)) {
                        // read operands
                        {
                            x_31595 = x_31594;
                            x_31594 = ((__local
                                        float *) red_arr_mem_43239)[sext_i32_i64(squot32(local_tid_43235,
                                                                                         32)) -
                                                                    (int64_t) 1];
                        }
                        // perform operation
                        {
                            bool inactive_43256 =
                                 slt64(srem64(sext_i32_i64(local_tid_43235),
                                              i32_res_28179),
                                       sext_i32_i64(local_tid_43235) -
                                       sext_i32_i64(squot32(local_tid_43235,
                                                            32) * 32 - 1));
                            
                            if (inactive_43256) {
                                x_31594 = x_31595;
                            }
                            if (!inactive_43256) {
                                float defunc_1_op_res_31596 = x_31594 + x_31595;
                                
                                x_31594 = defunc_1_op_res_31596;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_43239)[sext_i32_i64(local_tid_43235)] =
                                x_31594;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_43235, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_43239)[sext_i32_i64(local_tid_43235)] =
                            x_31595;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_43243) *
                      squot64(segred_group_sizze_31590,
                              segment_sizze_nonzzero_43232) +
                      sext_i32_i64(local_tid_43235), m_28170 * i32_res_28185) &&
                slt64(sext_i32_i64(local_tid_43235),
                      squot64(segred_group_sizze_31590,
                              segment_sizze_nonzzero_43232))) {
                ((__global
                  float *) mem_41907)[squot64(sext_i32_i64(virt_group_id_43243) *
                                              squot64(segred_group_sizze_31590,
                                                      segment_sizze_nonzzero_43232) +
                                              sext_i32_i64(local_tid_43235),
                                              i32_res_28185) * i32_res_28185 +
                                      (sext_i32_i64(virt_group_id_43243) *
                                       squot64(segred_group_sizze_31590,
                                               segment_sizze_nonzzero_43232) +
                                       sext_i32_i64(local_tid_43235) -
                                       squot64(sext_i32_i64(virt_group_id_43243) *
                                               squot64(segred_group_sizze_31590,
                                                       segment_sizze_nonzzero_43232) +
                                               sext_i32_i64(local_tid_43235),
                                               i32_res_28185) *
                                       i32_res_28185)] = ((__local
                                                           float *) red_arr_mem_43239)[(sext_i32_i64(local_tid_43235) +
                                                                                        (int64_t) 1) *
                                                                                       segment_sizze_nonzzero_43232 -
                                                                                       (int64_t) 1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_31590
}
__kernel void mainDetailedzisegred_small_31675(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_43342_backing_aligned_0,
                                               int64_t m_28170,
                                               int64_t i32_res_28185,
                                               int64_t num_groups_31724,
                                               int64_t segment_sizze_nonzzero_43335,
                                               __global
                                               unsigned char *defunc_3_map_res_mem_41687,
                                               __global
                                               unsigned char *defunc_3_map_res_mem_41914,
                                               __global
                                               unsigned char *mem_41979)
{
    #define segred_group_sizze_31723 (mainDetailedzisegred_group_sizze_31669)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_43342_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43342_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43337;
    int32_t local_tid_43338;
    int64_t group_sizze_43341;
    int32_t wave_sizze_43340;
    int32_t group_tid_43339;
    
    global_tid_43337 = get_global_id(0);
    local_tid_43338 = get_local_id(0);
    group_sizze_43341 = get_local_size(0);
    wave_sizze_43340 = LOCKSTEP_WIDTH;
    group_tid_43339 = get_group_id(0);
    
    int32_t phys_tid_31675 = global_tid_43337;
    __local char *red_arr_mem_43342;
    
    red_arr_mem_43342 = (__local char *) red_arr_mem_43342_backing_0;
    
    int32_t phys_group_id_43344;
    
    phys_group_id_43344 = get_group_id(0);
    for (int32_t i_43345 = 0; i_43345 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_28170 * i32_res_28185,
                                          squot64(segred_group_sizze_31723,
                                                  segment_sizze_nonzzero_43335))) -
                   phys_group_id_43344, sext_i64_i32(num_groups_31724));
         i_43345++) {
        int32_t virt_group_id_43346 = phys_group_id_43344 + i_43345 *
                sext_i64_i32(num_groups_31724);
        int64_t slice_43347 = i32_res_28185;
        int64_t slice_43348 = m_28170 * slice_43347;
        int64_t gtid_31664 = squot64(squot64(sext_i32_i64(local_tid_43338),
                                             segment_sizze_nonzzero_43335) +
                                     sext_i32_i64(virt_group_id_43346) *
                                     squot64(segred_group_sizze_31723,
                                             segment_sizze_nonzzero_43335),
                                     slice_43347);
        int64_t remnant_43349 = squot64(sext_i32_i64(local_tid_43338),
                                        segment_sizze_nonzzero_43335) +
                sext_i32_i64(virt_group_id_43346) *
                squot64(segred_group_sizze_31723,
                        segment_sizze_nonzzero_43335) - gtid_31664 *
                slice_43347;
        int64_t gtid_31665 = remnant_43349;
        int64_t remnant_43350 = remnant_43349 - gtid_31665;
        int64_t gtid_31674 = srem64(sext_i32_i64(local_tid_43338),
                                    i32_res_28185);
        
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, i32_res_28185) && ((slt64(gtid_31664,
                                                             m_28170) &&
                                                       slt64(gtid_31665,
                                                             i32_res_28185)) &&
                                                      slt64(sext_i32_i64(local_tid_43338),
                                                            i32_res_28185 *
                                                            squot64(segred_group_sizze_31723,
                                                                    segment_sizze_nonzzero_43335)))) {
                float x_31733 = ((__global
                                  float *) defunc_3_map_res_mem_41914)[gtid_31664 *
                                                                       i32_res_28185 +
                                                                       gtid_31674];
                float x_31734 = ((__global
                                  float *) defunc_3_map_res_mem_41687)[gtid_31664 *
                                                                       (i32_res_28185 *
                                                                        i32_res_28185) +
                                                                       gtid_31665 *
                                                                       i32_res_28185 +
                                                                       gtid_31674];
                float defunc_1_f_res_31735 = x_31733 * x_31734;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_43342)[sext_i32_i64(local_tid_43338)] =
                        defunc_1_f_res_31735;
                }
            } else {
                ((__local
                  float *) red_arr_mem_43342)[sext_i32_i64(local_tid_43338)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, i32_res_28185)) {
            // perform segmented scan to imitate reduction
            {
                float x_31727;
                float x_31728;
                float x_43351;
                float x_43352;
                bool ltid_in_bounds_43354 = slt64(sext_i32_i64(local_tid_43338),
                                                  i32_res_28185 *
                                                  squot64(segred_group_sizze_31723,
                                                          segment_sizze_nonzzero_43335));
                int32_t skip_threads_43355;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_43354) {
                        x_31728 = ((volatile __local
                                    float *) red_arr_mem_43342)[sext_i32_i64(local_tid_43338)];
                        if ((local_tid_43338 - squot32(local_tid_43338, 32) *
                             32) == 0) {
                            x_31727 = x_31728;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_43355 = 1;
                    while (slt32(skip_threads_43355, 32)) {
                        if (sle32(skip_threads_43355, local_tid_43338 -
                                  squot32(local_tid_43338, 32) * 32) &&
                            ltid_in_bounds_43354) {
                            // read operands
                            {
                                x_31727 = ((volatile __local
                                            float *) red_arr_mem_43342)[sext_i32_i64(local_tid_43338) -
                                                                        sext_i32_i64(skip_threads_43355)];
                            }
                            // perform operation
                            {
                                bool inactive_43356 =
                                     slt64(srem64(sext_i32_i64(local_tid_43338),
                                                  i32_res_28185),
                                           sext_i32_i64(local_tid_43338) -
                                           sext_i32_i64(local_tid_43338 -
                                           skip_threads_43355));
                                
                                if (inactive_43356) {
                                    x_31727 = x_31728;
                                }
                                if (!inactive_43356) {
                                    float defunc_1_op_res_31729 = x_31727 +
                                          x_31728;
                                    
                                    x_31727 = defunc_1_op_res_31729;
                                }
                            }
                        }
                        if (sle32(wave_sizze_43340, skip_threads_43355)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_43355, local_tid_43338 -
                                  squot32(local_tid_43338, 32) * 32) &&
                            ltid_in_bounds_43354) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43342)[sext_i32_i64(local_tid_43338)] =
                                    x_31727;
                                x_31728 = x_31727;
                            }
                        }
                        if (sle32(wave_sizze_43340, skip_threads_43355)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_43355 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_43338 - squot32(local_tid_43338, 32) * 32) ==
                        31 && ltid_in_bounds_43354) {
                        ((volatile __local
                          float *) red_arr_mem_43342)[sext_i32_i64(squot32(local_tid_43338,
                                                                           32))] =
                            x_31727;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_43357;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_43338, 32) == 0 &&
                            ltid_in_bounds_43354) {
                            x_43352 = ((volatile __local
                                        float *) red_arr_mem_43342)[sext_i32_i64(local_tid_43338)];
                            if ((local_tid_43338 - squot32(local_tid_43338,
                                                           32) * 32) == 0) {
                                x_43351 = x_43352;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_43357 = 1;
                        while (slt32(skip_threads_43357, 32)) {
                            if (sle32(skip_threads_43357, local_tid_43338 -
                                      squot32(local_tid_43338, 32) * 32) &&
                                (squot32(local_tid_43338, 32) == 0 &&
                                 ltid_in_bounds_43354)) {
                                // read operands
                                {
                                    x_43351 = ((volatile __local
                                                float *) red_arr_mem_43342)[sext_i32_i64(local_tid_43338) -
                                                                            sext_i32_i64(skip_threads_43357)];
                                }
                                // perform operation
                                {
                                    bool inactive_43358 =
                                         slt64(srem64(sext_i32_i64(local_tid_43338 *
                                                      32 + 32 - 1),
                                                      i32_res_28185),
                                               sext_i32_i64(local_tid_43338 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_43338 -
                                                             skip_threads_43357) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_43358) {
                                        x_43351 = x_43352;
                                    }
                                    if (!inactive_43358) {
                                        float defunc_1_op_res_43353 = x_43351 +
                                              x_43352;
                                        
                                        x_43351 = defunc_1_op_res_43353;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_43340, skip_threads_43357)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_43357, local_tid_43338 -
                                      squot32(local_tid_43338, 32) * 32) &&
                                (squot32(local_tid_43338, 32) == 0 &&
                                 ltid_in_bounds_43354)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_43342)[sext_i32_i64(local_tid_43338)] =
                                        x_43351;
                                    x_43352 = x_43351;
                                }
                            }
                            if (sle32(wave_sizze_43340, skip_threads_43357)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_43357 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_43338, 32) == 0 ||
                          !ltid_in_bounds_43354)) {
                        // read operands
                        {
                            x_31728 = x_31727;
                            x_31727 = ((__local
                                        float *) red_arr_mem_43342)[sext_i32_i64(squot32(local_tid_43338,
                                                                                         32)) -
                                                                    (int64_t) 1];
                        }
                        // perform operation
                        {
                            bool inactive_43359 =
                                 slt64(srem64(sext_i32_i64(local_tid_43338),
                                              i32_res_28185),
                                       sext_i32_i64(local_tid_43338) -
                                       sext_i32_i64(squot32(local_tid_43338,
                                                            32) * 32 - 1));
                            
                            if (inactive_43359) {
                                x_31727 = x_31728;
                            }
                            if (!inactive_43359) {
                                float defunc_1_op_res_31729 = x_31727 + x_31728;
                                
                                x_31727 = defunc_1_op_res_31729;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_43342)[sext_i32_i64(local_tid_43338)] =
                                x_31727;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_43338, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_43342)[sext_i32_i64(local_tid_43338)] =
                            x_31728;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_43346) *
                      squot64(segred_group_sizze_31723,
                              segment_sizze_nonzzero_43335) +
                      sext_i32_i64(local_tid_43338), m_28170 * i32_res_28185) &&
                slt64(sext_i32_i64(local_tid_43338),
                      squot64(segred_group_sizze_31723,
                              segment_sizze_nonzzero_43335))) {
                ((__global
                  float *) mem_41979)[squot64(sext_i32_i64(virt_group_id_43346) *
                                              squot64(segred_group_sizze_31723,
                                                      segment_sizze_nonzzero_43335) +
                                              sext_i32_i64(local_tid_43338),
                                              i32_res_28185) * i32_res_28185 +
                                      (sext_i32_i64(virt_group_id_43346) *
                                       squot64(segred_group_sizze_31723,
                                               segment_sizze_nonzzero_43335) +
                                       sext_i32_i64(local_tid_43338) -
                                       squot64(sext_i32_i64(virt_group_id_43346) *
                                               squot64(segred_group_sizze_31723,
                                                       segment_sizze_nonzzero_43335) +
                                               sext_i32_i64(local_tid_43338),
                                               i32_res_28185) *
                                       i32_res_28185)] = ((__local
                                                           float *) red_arr_mem_43342)[(sext_i32_i64(local_tid_43338) +
                                                                                        (int64_t) 1) *
                                                                                       segment_sizze_nonzzero_43335 -
                                                                                       (int64_t) 1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_31723
}
__kernel void mainDetailedzisegred_small_31805(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_43489_backing_aligned_0,
                                               int64_t N_28169, int64_t m_28170,
                                               int64_t i32_res_28185,
                                               int64_t num_groups_31852,
                                               int64_t segment_sizze_nonzzero_43482,
                                               __global
                                               unsigned char *mem_41440,
                                               __global
                                               unsigned char *defunc_4_map_res_mem_41986,
                                               __global
                                               unsigned char *mem_42209)
{
    #define segred_group_sizze_31851 (mainDetailedzisegred_group_sizze_31799)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_43489_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43489_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43484;
    int32_t local_tid_43485;
    int64_t group_sizze_43488;
    int32_t wave_sizze_43487;
    int32_t group_tid_43486;
    
    global_tid_43484 = get_global_id(0);
    local_tid_43485 = get_local_id(0);
    group_sizze_43488 = get_local_size(0);
    wave_sizze_43487 = LOCKSTEP_WIDTH;
    group_tid_43486 = get_group_id(0);
    
    int32_t phys_tid_31805 = global_tid_43484;
    __local char *red_arr_mem_43489;
    
    red_arr_mem_43489 = (__local char *) red_arr_mem_43489_backing_0;
    
    int32_t phys_group_id_43491;
    
    phys_group_id_43491 = get_group_id(0);
    for (int32_t i_43492 = 0; i_43492 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_28170 * N_28169,
                                          squot64(segred_group_sizze_31851,
                                                  segment_sizze_nonzzero_43482))) -
                   phys_group_id_43491, sext_i64_i32(num_groups_31852));
         i_43492++) {
        int32_t virt_group_id_43493 = phys_group_id_43491 + i_43492 *
                sext_i64_i32(num_groups_31852);
        int64_t slice_43494 = N_28169;
        int64_t slice_43495 = m_28170 * slice_43494;
        int64_t gtid_31794 = squot64(squot64(sext_i32_i64(local_tid_43485),
                                             segment_sizze_nonzzero_43482) +
                                     sext_i32_i64(virt_group_id_43493) *
                                     squot64(segred_group_sizze_31851,
                                             segment_sizze_nonzzero_43482),
                                     slice_43494);
        int64_t remnant_43496 = squot64(sext_i32_i64(local_tid_43485),
                                        segment_sizze_nonzzero_43482) +
                sext_i32_i64(virt_group_id_43493) *
                squot64(segred_group_sizze_31851,
                        segment_sizze_nonzzero_43482) - gtid_31794 *
                slice_43494;
        int64_t gtid_31795 = remnant_43496;
        int64_t remnant_43497 = remnant_43496 - gtid_31795;
        int64_t gtid_31804 = srem64(sext_i32_i64(local_tid_43485),
                                    i32_res_28185);
        
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, i32_res_28185) && ((slt64(gtid_31794,
                                                             m_28170) &&
                                                       slt64(gtid_31795,
                                                             N_28169)) &&
                                                      slt64(sext_i32_i64(local_tid_43485),
                                                            i32_res_28185 *
                                                            squot64(segred_group_sizze_31851,
                                                                    segment_sizze_nonzzero_43482)))) {
                float x_31860 = ((__global
                                  float *) defunc_4_map_res_mem_41986)[gtid_31794 *
                                                                       i32_res_28185 +
                                                                       gtid_31804];
                float x_31861 = ((__global float *) mem_41440)[gtid_31795 *
                                                               i32_res_28185 +
                                                               gtid_31804];
                float defunc_1_f_res_31862 = x_31860 * x_31861;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_43489)[sext_i32_i64(local_tid_43485)] =
                        defunc_1_f_res_31862;
                }
            } else {
                ((__local
                  float *) red_arr_mem_43489)[sext_i32_i64(local_tid_43485)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, i32_res_28185)) {
            // perform segmented scan to imitate reduction
            {
                float x_31855;
                float x_31856;
                float x_43498;
                float x_43499;
                bool ltid_in_bounds_43501 = slt64(sext_i32_i64(local_tid_43485),
                                                  i32_res_28185 *
                                                  squot64(segred_group_sizze_31851,
                                                          segment_sizze_nonzzero_43482));
                int32_t skip_threads_43502;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_43501) {
                        x_31856 = ((volatile __local
                                    float *) red_arr_mem_43489)[sext_i32_i64(local_tid_43485)];
                        if ((local_tid_43485 - squot32(local_tid_43485, 32) *
                             32) == 0) {
                            x_31855 = x_31856;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_43502 = 1;
                    while (slt32(skip_threads_43502, 32)) {
                        if (sle32(skip_threads_43502, local_tid_43485 -
                                  squot32(local_tid_43485, 32) * 32) &&
                            ltid_in_bounds_43501) {
                            // read operands
                            {
                                x_31855 = ((volatile __local
                                            float *) red_arr_mem_43489)[sext_i32_i64(local_tid_43485) -
                                                                        sext_i32_i64(skip_threads_43502)];
                            }
                            // perform operation
                            {
                                bool inactive_43503 =
                                     slt64(srem64(sext_i32_i64(local_tid_43485),
                                                  i32_res_28185),
                                           sext_i32_i64(local_tid_43485) -
                                           sext_i32_i64(local_tid_43485 -
                                           skip_threads_43502));
                                
                                if (inactive_43503) {
                                    x_31855 = x_31856;
                                }
                                if (!inactive_43503) {
                                    float defunc_1_op_res_31857 = x_31855 +
                                          x_31856;
                                    
                                    x_31855 = defunc_1_op_res_31857;
                                }
                            }
                        }
                        if (sle32(wave_sizze_43487, skip_threads_43502)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_43502, local_tid_43485 -
                                  squot32(local_tid_43485, 32) * 32) &&
                            ltid_in_bounds_43501) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43489)[sext_i32_i64(local_tid_43485)] =
                                    x_31855;
                                x_31856 = x_31855;
                            }
                        }
                        if (sle32(wave_sizze_43487, skip_threads_43502)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_43502 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_43485 - squot32(local_tid_43485, 32) * 32) ==
                        31 && ltid_in_bounds_43501) {
                        ((volatile __local
                          float *) red_arr_mem_43489)[sext_i32_i64(squot32(local_tid_43485,
                                                                           32))] =
                            x_31855;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_43504;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_43485, 32) == 0 &&
                            ltid_in_bounds_43501) {
                            x_43499 = ((volatile __local
                                        float *) red_arr_mem_43489)[sext_i32_i64(local_tid_43485)];
                            if ((local_tid_43485 - squot32(local_tid_43485,
                                                           32) * 32) == 0) {
                                x_43498 = x_43499;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_43504 = 1;
                        while (slt32(skip_threads_43504, 32)) {
                            if (sle32(skip_threads_43504, local_tid_43485 -
                                      squot32(local_tid_43485, 32) * 32) &&
                                (squot32(local_tid_43485, 32) == 0 &&
                                 ltid_in_bounds_43501)) {
                                // read operands
                                {
                                    x_43498 = ((volatile __local
                                                float *) red_arr_mem_43489)[sext_i32_i64(local_tid_43485) -
                                                                            sext_i32_i64(skip_threads_43504)];
                                }
                                // perform operation
                                {
                                    bool inactive_43505 =
                                         slt64(srem64(sext_i32_i64(local_tid_43485 *
                                                      32 + 32 - 1),
                                                      i32_res_28185),
                                               sext_i32_i64(local_tid_43485 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_43485 -
                                                             skip_threads_43504) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_43505) {
                                        x_43498 = x_43499;
                                    }
                                    if (!inactive_43505) {
                                        float defunc_1_op_res_43500 = x_43498 +
                                              x_43499;
                                        
                                        x_43498 = defunc_1_op_res_43500;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_43487, skip_threads_43504)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_43504, local_tid_43485 -
                                      squot32(local_tid_43485, 32) * 32) &&
                                (squot32(local_tid_43485, 32) == 0 &&
                                 ltid_in_bounds_43501)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_43489)[sext_i32_i64(local_tid_43485)] =
                                        x_43498;
                                    x_43499 = x_43498;
                                }
                            }
                            if (sle32(wave_sizze_43487, skip_threads_43504)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_43504 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_43485, 32) == 0 ||
                          !ltid_in_bounds_43501)) {
                        // read operands
                        {
                            x_31856 = x_31855;
                            x_31855 = ((__local
                                        float *) red_arr_mem_43489)[sext_i32_i64(squot32(local_tid_43485,
                                                                                         32)) -
                                                                    (int64_t) 1];
                        }
                        // perform operation
                        {
                            bool inactive_43506 =
                                 slt64(srem64(sext_i32_i64(local_tid_43485),
                                              i32_res_28185),
                                       sext_i32_i64(local_tid_43485) -
                                       sext_i32_i64(squot32(local_tid_43485,
                                                            32) * 32 - 1));
                            
                            if (inactive_43506) {
                                x_31855 = x_31856;
                            }
                            if (!inactive_43506) {
                                float defunc_1_op_res_31857 = x_31855 + x_31856;
                                
                                x_31855 = defunc_1_op_res_31857;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_43489)[sext_i32_i64(local_tid_43485)] =
                                x_31855;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_43485, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_43489)[sext_i32_i64(local_tid_43485)] =
                            x_31856;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_43493) *
                      squot64(segred_group_sizze_31851,
                              segment_sizze_nonzzero_43482) +
                      sext_i32_i64(local_tid_43485), m_28170 * N_28169) &&
                slt64(sext_i32_i64(local_tid_43485),
                      squot64(segred_group_sizze_31851,
                              segment_sizze_nonzzero_43482))) {
                ((__global
                  float *) mem_42209)[squot64(sext_i32_i64(virt_group_id_43493) *
                                              squot64(segred_group_sizze_31851,
                                                      segment_sizze_nonzzero_43482) +
                                              sext_i32_i64(local_tid_43485),
                                              N_28169) * N_28169 +
                                      (sext_i32_i64(virt_group_id_43493) *
                                       squot64(segred_group_sizze_31851,
                                               segment_sizze_nonzzero_43482) +
                                       sext_i32_i64(local_tid_43485) -
                                       squot64(sext_i32_i64(virt_group_id_43493) *
                                               squot64(segred_group_sizze_31851,
                                                       segment_sizze_nonzzero_43482) +
                                               sext_i32_i64(local_tid_43485),
                                               N_28169) * N_28169)] = ((__local
                                                                        float *) red_arr_mem_43489)[(sext_i32_i64(local_tid_43485) +
                                                                                                     (int64_t) 1) *
                                                                                                    segment_sizze_nonzzero_43482 -
                                                                                                    (int64_t) 1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_31851
}
__kernel void mainDetailedzisegred_small_32260(__global int *global_failure,
                                               int failure_is_an_option,
                                               __global
                                               int64_t *global_failure_args,
                                               __local volatile
                                               int64_t *red_arr_mem_43767_backing_aligned_0,
                                               int64_t N_28169, int64_t m_28170,
                                               int64_t i32_res_28179,
                                               int64_t num_groups_32311,
                                               int64_t segment_sizze_nonzzero_43760,
                                               __global
                                               unsigned char *defunc_4_map_res_mem_42266,
                                               __global
                                               unsigned char *mem_42329,
                                               __global
                                               unsigned char *mem_42333)
{
    #define segred_group_sizze_32310 (mainDetailedzisegred_group_sizze_32254)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_43767_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43767_backing_aligned_0;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43762;
    int32_t local_tid_43763;
    int64_t group_sizze_43766;
    int32_t wave_sizze_43765;
    int32_t group_tid_43764;
    
    global_tid_43762 = get_global_id(0);
    local_tid_43763 = get_local_id(0);
    group_sizze_43766 = get_local_size(0);
    wave_sizze_43765 = LOCKSTEP_WIDTH;
    group_tid_43764 = get_group_id(0);
    
    int32_t phys_tid_32260 = global_tid_43762;
    __local char *red_arr_mem_43767;
    
    red_arr_mem_43767 = (__local char *) red_arr_mem_43767_backing_0;
    
    int32_t phys_group_id_43769;
    
    phys_group_id_43769 = get_group_id(0);
    for (int32_t i_43770 = 0; i_43770 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_28170,
                                          squot64(segred_group_sizze_32310,
                                                  segment_sizze_nonzzero_43760))) -
                   phys_group_id_43769, sext_i64_i32(num_groups_32311));
         i_43770++) {
        int32_t virt_group_id_43771 = phys_group_id_43769 + i_43770 *
                sext_i64_i32(num_groups_32311);
        int64_t slice_43772 = m_28170;
        int64_t gtid_32251 = squot64(sext_i32_i64(local_tid_43763),
                                     segment_sizze_nonzzero_43760) +
                sext_i32_i64(virt_group_id_43771) *
                squot64(segred_group_sizze_32310, segment_sizze_nonzzero_43760);
        int64_t remnant_43773 = squot64(sext_i32_i64(local_tid_43763),
                                        segment_sizze_nonzzero_43760) +
                sext_i32_i64(virt_group_id_43771) *
                squot64(segred_group_sizze_32310,
                        segment_sizze_nonzzero_43760) - gtid_32251;
        int64_t gtid_32259 = srem64(sext_i32_i64(local_tid_43763),
                                    i32_res_28179);
        
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, i32_res_28179) && (slt64(gtid_32251,
                                                            m_28170) &&
                                                      slt64(sext_i32_i64(local_tid_43763),
                                                            i32_res_28179 *
                                                            squot64(segred_group_sizze_32310,
                                                                    segment_sizze_nonzzero_43760)))) {
                int32_t defunc_0_f_res_32318 = ((__global
                                                 int32_t *) mem_42329)[gtid_32251];
                int32_t index_primexp_39436 = sext_i64_i32(gtid_32259);
                bool cond_32320 = slt32(index_primexp_39436,
                                        defunc_0_f_res_32318);
                float defunc_0_f_res_32321;
                
                if (cond_32320) {
                    int64_t i_32322 = sext_i32_i64(index_primexp_39436);
                    bool x_32323 = sle64((int64_t) 0, i_32322);
                    bool y_32324 = slt64(i_32322, N_28169);
                    bool bounds_check_32325 = x_32323 && y_32324;
                    bool index_certs_32326;
                    
                    if (!bounds_check_32325) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          49) == -1) {
                                global_failure_args[0] = i_32322;
                                global_failure_args[1] = N_28169;
                                ;
                            }
                            local_failure = true;
                            goto error_0;
                        }
                    }
                    
                    float defunc_0_f_res_t_res_32327 = ((__global
                                                         float *) defunc_4_map_res_mem_42266)[gtid_32251 *
                                                                                              N_28169 +
                                                                                              i_32322];
                    
                    defunc_0_f_res_32321 = defunc_0_f_res_t_res_32327;
                } else {
                    defunc_0_f_res_32321 = 0.0F;
                }
                
                float defunc_0_f_res_32328 = defunc_0_f_res_32321 *
                      defunc_0_f_res_32321;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_43767)[sext_i32_i64(local_tid_43763)] =
                        defunc_0_f_res_32328;
                }
            } else {
                ((__local
                  float *) red_arr_mem_43767)[sext_i32_i64(local_tid_43763)] =
                    0.0F;
            }
        }
        
      error_0:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, i32_res_28179)) {
            // perform segmented scan to imitate reduction
            {
                float x_32314;
                float x_32315;
                float x_43774;
                float x_43775;
                bool ltid_in_bounds_43777 = slt64(sext_i32_i64(local_tid_43763),
                                                  i32_res_28179 *
                                                  squot64(segred_group_sizze_32310,
                                                          segment_sizze_nonzzero_43760));
                int32_t skip_threads_43778;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_43777) {
                        x_32315 = ((volatile __local
                                    float *) red_arr_mem_43767)[sext_i32_i64(local_tid_43763)];
                        if ((local_tid_43763 - squot32(local_tid_43763, 32) *
                             32) == 0) {
                            x_32314 = x_32315;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_43778 = 1;
                    while (slt32(skip_threads_43778, 32)) {
                        if (sle32(skip_threads_43778, local_tid_43763 -
                                  squot32(local_tid_43763, 32) * 32) &&
                            ltid_in_bounds_43777) {
                            // read operands
                            {
                                x_32314 = ((volatile __local
                                            float *) red_arr_mem_43767)[sext_i32_i64(local_tid_43763) -
                                                                        sext_i32_i64(skip_threads_43778)];
                            }
                            // perform operation
                            {
                                bool inactive_43779 =
                                     slt64(srem64(sext_i32_i64(local_tid_43763),
                                                  i32_res_28179),
                                           sext_i32_i64(local_tid_43763) -
                                           sext_i32_i64(local_tid_43763 -
                                           skip_threads_43778));
                                
                                if (inactive_43779) {
                                    x_32314 = x_32315;
                                }
                                if (!inactive_43779) {
                                    float defunc_1_op_res_32316 = x_32314 +
                                          x_32315;
                                    
                                    x_32314 = defunc_1_op_res_32316;
                                }
                            }
                        }
                        if (sle32(wave_sizze_43765, skip_threads_43778)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_43778, local_tid_43763 -
                                  squot32(local_tid_43763, 32) * 32) &&
                            ltid_in_bounds_43777) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43767)[sext_i32_i64(local_tid_43763)] =
                                    x_32314;
                                x_32315 = x_32314;
                            }
                        }
                        if (sle32(wave_sizze_43765, skip_threads_43778)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_43778 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_43763 - squot32(local_tid_43763, 32) * 32) ==
                        31 && ltid_in_bounds_43777) {
                        ((volatile __local
                          float *) red_arr_mem_43767)[sext_i32_i64(squot32(local_tid_43763,
                                                                           32))] =
                            x_32314;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_43780;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_43763, 32) == 0 &&
                            ltid_in_bounds_43777) {
                            x_43775 = ((volatile __local
                                        float *) red_arr_mem_43767)[sext_i32_i64(local_tid_43763)];
                            if ((local_tid_43763 - squot32(local_tid_43763,
                                                           32) * 32) == 0) {
                                x_43774 = x_43775;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_43780 = 1;
                        while (slt32(skip_threads_43780, 32)) {
                            if (sle32(skip_threads_43780, local_tid_43763 -
                                      squot32(local_tid_43763, 32) * 32) &&
                                (squot32(local_tid_43763, 32) == 0 &&
                                 ltid_in_bounds_43777)) {
                                // read operands
                                {
                                    x_43774 = ((volatile __local
                                                float *) red_arr_mem_43767)[sext_i32_i64(local_tid_43763) -
                                                                            sext_i32_i64(skip_threads_43780)];
                                }
                                // perform operation
                                {
                                    bool inactive_43781 =
                                         slt64(srem64(sext_i32_i64(local_tid_43763 *
                                                      32 + 32 - 1),
                                                      i32_res_28179),
                                               sext_i32_i64(local_tid_43763 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_43763 -
                                                             skip_threads_43780) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_43781) {
                                        x_43774 = x_43775;
                                    }
                                    if (!inactive_43781) {
                                        float defunc_1_op_res_43776 = x_43774 +
                                              x_43775;
                                        
                                        x_43774 = defunc_1_op_res_43776;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_43765, skip_threads_43780)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_43780, local_tid_43763 -
                                      squot32(local_tid_43763, 32) * 32) &&
                                (squot32(local_tid_43763, 32) == 0 &&
                                 ltid_in_bounds_43777)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_43767)[sext_i32_i64(local_tid_43763)] =
                                        x_43774;
                                    x_43775 = x_43774;
                                }
                            }
                            if (sle32(wave_sizze_43765, skip_threads_43780)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_43780 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_43763, 32) == 0 ||
                          !ltid_in_bounds_43777)) {
                        // read operands
                        {
                            x_32315 = x_32314;
                            x_32314 = ((__local
                                        float *) red_arr_mem_43767)[sext_i32_i64(squot32(local_tid_43763,
                                                                                         32)) -
                                                                    (int64_t) 1];
                        }
                        // perform operation
                        {
                            bool inactive_43782 =
                                 slt64(srem64(sext_i32_i64(local_tid_43763),
                                              i32_res_28179),
                                       sext_i32_i64(local_tid_43763) -
                                       sext_i32_i64(squot32(local_tid_43763,
                                                            32) * 32 - 1));
                            
                            if (inactive_43782) {
                                x_32314 = x_32315;
                            }
                            if (!inactive_43782) {
                                float defunc_1_op_res_32316 = x_32314 + x_32315;
                                
                                x_32314 = defunc_1_op_res_32316;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_43767)[sext_i32_i64(local_tid_43763)] =
                                x_32314;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_43763, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_43767)[sext_i32_i64(local_tid_43763)] =
                            x_32315;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_43771) *
                      squot64(segred_group_sizze_32310,
                              segment_sizze_nonzzero_43760) +
                      sext_i32_i64(local_tid_43763), m_28170) &&
                slt64(sext_i32_i64(local_tid_43763),
                      squot64(segred_group_sizze_32310,
                              segment_sizze_nonzzero_43760))) {
                ((__global
                  float *) mem_42333)[sext_i32_i64(virt_group_id_43771) *
                                      squot64(segred_group_sizze_32310,
                                              segment_sizze_nonzzero_43760) +
                                      sext_i32_i64(local_tid_43763)] = ((__local
                                                                         float *) red_arr_mem_43767)[(sext_i32_i64(local_tid_43763) +
                                                                                                      (int64_t) 1) *
                                                                                                     segment_sizze_nonzzero_43760 -
                                                                                                     (int64_t) 1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_32310
}
__kernel void mainDetailedzisegred_small_32285(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_43703_backing_aligned_0,
                                               int64_t N_28169, int64_t m_28170,
                                               int64_t i32_res_28179,
                                               int64_t num_groups_32297,
                                               int64_t segment_sizze_nonzzero_43696,
                                               __global
                                               unsigned char *images_mem_41421,
                                               __global
                                               unsigned char *mem_42329)
{
    #define segred_group_sizze_32296 (mainDetailedzisegred_group_sizze_32279)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_43703_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43703_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43698;
    int32_t local_tid_43699;
    int64_t group_sizze_43702;
    int32_t wave_sizze_43701;
    int32_t group_tid_43700;
    
    global_tid_43698 = get_global_id(0);
    local_tid_43699 = get_local_id(0);
    group_sizze_43702 = get_local_size(0);
    wave_sizze_43701 = LOCKSTEP_WIDTH;
    group_tid_43700 = get_group_id(0);
    
    int32_t phys_tid_32285 = global_tid_43698;
    __local char *red_arr_mem_43703;
    
    red_arr_mem_43703 = (__local char *) red_arr_mem_43703_backing_0;
    
    int32_t phys_group_id_43705;
    
    phys_group_id_43705 = get_group_id(0);
    for (int32_t i_43706 = 0; i_43706 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_28170,
                                          squot64(segred_group_sizze_32296,
                                                  segment_sizze_nonzzero_43696))) -
                   phys_group_id_43705, sext_i64_i32(num_groups_32297));
         i_43706++) {
        int32_t virt_group_id_43707 = phys_group_id_43705 + i_43706 *
                sext_i64_i32(num_groups_32297);
        int64_t slice_43708 = m_28170;
        int64_t gtid_32276 = squot64(sext_i32_i64(local_tid_43699),
                                     segment_sizze_nonzzero_43696) +
                sext_i32_i64(virt_group_id_43707) *
                squot64(segred_group_sizze_32296, segment_sizze_nonzzero_43696);
        int64_t remnant_43709 = squot64(sext_i32_i64(local_tid_43699),
                                        segment_sizze_nonzzero_43696) +
                sext_i32_i64(virt_group_id_43707) *
                squot64(segred_group_sizze_32296,
                        segment_sizze_nonzzero_43696) - gtid_32276;
        int64_t gtid_32284 = srem64(sext_i32_i64(local_tid_43699),
                                    i32_res_28179);
        
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, i32_res_28179) && (slt64(gtid_32276,
                                                            m_28170) &&
                                                      slt64(sext_i32_i64(local_tid_43699),
                                                            i32_res_28179 *
                                                            squot64(segred_group_sizze_32296,
                                                                    segment_sizze_nonzzero_43696)))) {
                float x_32304 = ((__global
                                  float *) images_mem_41421)[gtid_32276 *
                                                             N_28169 +
                                                             gtid_32284];
                bool isnan_res_32305;
                
                isnan_res_32305 = futrts_isnan32(x_32304);
                
                bool cond_32306 = !isnan_res_32305;
                int32_t defunc_0_f_res_32307 = btoi_bool_i32(cond_32306);
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      int32_t *) red_arr_mem_43703)[sext_i32_i64(local_tid_43699)] =
                        defunc_0_f_res_32307;
                }
            } else {
                ((__local
                  int32_t *) red_arr_mem_43703)[sext_i32_i64(local_tid_43699)] =
                    0;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, i32_res_28179)) {
            // perform segmented scan to imitate reduction
            {
                int32_t x_32300;
                int32_t x_32301;
                int32_t x_43710;
                int32_t x_43711;
                bool ltid_in_bounds_43713 = slt64(sext_i32_i64(local_tid_43699),
                                                  i32_res_28179 *
                                                  squot64(segred_group_sizze_32296,
                                                          segment_sizze_nonzzero_43696));
                int32_t skip_threads_43714;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_43713) {
                        x_32301 = ((volatile __local
                                    int32_t *) red_arr_mem_43703)[sext_i32_i64(local_tid_43699)];
                        if ((local_tid_43699 - squot32(local_tid_43699, 32) *
                             32) == 0) {
                            x_32300 = x_32301;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_43714 = 1;
                    while (slt32(skip_threads_43714, 32)) {
                        if (sle32(skip_threads_43714, local_tid_43699 -
                                  squot32(local_tid_43699, 32) * 32) &&
                            ltid_in_bounds_43713) {
                            // read operands
                            {
                                x_32300 = ((volatile __local
                                            int32_t *) red_arr_mem_43703)[sext_i32_i64(local_tid_43699) -
                                                                          sext_i32_i64(skip_threads_43714)];
                            }
                            // perform operation
                            {
                                bool inactive_43715 =
                                     slt64(srem64(sext_i32_i64(local_tid_43699),
                                                  i32_res_28179),
                                           sext_i32_i64(local_tid_43699) -
                                           sext_i32_i64(local_tid_43699 -
                                           skip_threads_43714));
                                
                                if (inactive_43715) {
                                    x_32300 = x_32301;
                                }
                                if (!inactive_43715) {
                                    int32_t defunc_1_op_res_32302 =
                                            add32(x_32300, x_32301);
                                    
                                    x_32300 = defunc_1_op_res_32302;
                                }
                            }
                        }
                        if (sle32(wave_sizze_43701, skip_threads_43714)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_43714, local_tid_43699 -
                                  squot32(local_tid_43699, 32) * 32) &&
                            ltid_in_bounds_43713) {
                            // write result
                            {
                                ((volatile __local
                                  int32_t *) red_arr_mem_43703)[sext_i32_i64(local_tid_43699)] =
                                    x_32300;
                                x_32301 = x_32300;
                            }
                        }
                        if (sle32(wave_sizze_43701, skip_threads_43714)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_43714 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_43699 - squot32(local_tid_43699, 32) * 32) ==
                        31 && ltid_in_bounds_43713) {
                        ((volatile __local
                          int32_t *) red_arr_mem_43703)[sext_i32_i64(squot32(local_tid_43699,
                                                                             32))] =
                            x_32300;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_43716;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_43699, 32) == 0 &&
                            ltid_in_bounds_43713) {
                            x_43711 = ((volatile __local
                                        int32_t *) red_arr_mem_43703)[sext_i32_i64(local_tid_43699)];
                            if ((local_tid_43699 - squot32(local_tid_43699,
                                                           32) * 32) == 0) {
                                x_43710 = x_43711;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_43716 = 1;
                        while (slt32(skip_threads_43716, 32)) {
                            if (sle32(skip_threads_43716, local_tid_43699 -
                                      squot32(local_tid_43699, 32) * 32) &&
                                (squot32(local_tid_43699, 32) == 0 &&
                                 ltid_in_bounds_43713)) {
                                // read operands
                                {
                                    x_43710 = ((volatile __local
                                                int32_t *) red_arr_mem_43703)[sext_i32_i64(local_tid_43699) -
                                                                              sext_i32_i64(skip_threads_43716)];
                                }
                                // perform operation
                                {
                                    bool inactive_43717 =
                                         slt64(srem64(sext_i32_i64(local_tid_43699 *
                                                      32 + 32 - 1),
                                                      i32_res_28179),
                                               sext_i32_i64(local_tid_43699 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_43699 -
                                                             skip_threads_43716) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_43717) {
                                        x_43710 = x_43711;
                                    }
                                    if (!inactive_43717) {
                                        int32_t defunc_1_op_res_43712 =
                                                add32(x_43710, x_43711);
                                        
                                        x_43710 = defunc_1_op_res_43712;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_43701, skip_threads_43716)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_43716, local_tid_43699 -
                                      squot32(local_tid_43699, 32) * 32) &&
                                (squot32(local_tid_43699, 32) == 0 &&
                                 ltid_in_bounds_43713)) {
                                // write result
                                {
                                    ((volatile __local
                                      int32_t *) red_arr_mem_43703)[sext_i32_i64(local_tid_43699)] =
                                        x_43710;
                                    x_43711 = x_43710;
                                }
                            }
                            if (sle32(wave_sizze_43701, skip_threads_43716)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_43716 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_43699, 32) == 0 ||
                          !ltid_in_bounds_43713)) {
                        // read operands
                        {
                            x_32301 = x_32300;
                            x_32300 = ((__local
                                        int32_t *) red_arr_mem_43703)[sext_i32_i64(squot32(local_tid_43699,
                                                                                           32)) -
                                                                      (int64_t) 1];
                        }
                        // perform operation
                        {
                            bool inactive_43718 =
                                 slt64(srem64(sext_i32_i64(local_tid_43699),
                                              i32_res_28179),
                                       sext_i32_i64(local_tid_43699) -
                                       sext_i32_i64(squot32(local_tid_43699,
                                                            32) * 32 - 1));
                            
                            if (inactive_43718) {
                                x_32300 = x_32301;
                            }
                            if (!inactive_43718) {
                                int32_t defunc_1_op_res_32302 = add32(x_32300,
                                                                      x_32301);
                                
                                x_32300 = defunc_1_op_res_32302;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              int32_t *) red_arr_mem_43703)[sext_i32_i64(local_tid_43699)] =
                                x_32300;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_43699, 32) == 0) {
                        ((__local
                          int32_t *) red_arr_mem_43703)[sext_i32_i64(local_tid_43699)] =
                            x_32301;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_43707) *
                      squot64(segred_group_sizze_32296,
                              segment_sizze_nonzzero_43696) +
                      sext_i32_i64(local_tid_43699), m_28170) &&
                slt64(sext_i32_i64(local_tid_43699),
                      squot64(segred_group_sizze_32296,
                              segment_sizze_nonzzero_43696))) {
                ((__global
                  int32_t *) mem_42329)[sext_i32_i64(virt_group_id_43707) *
                                        squot64(segred_group_sizze_32296,
                                                segment_sizze_nonzzero_43696) +
                                        sext_i32_i64(local_tid_43699)] =
                    ((__local
                      int32_t *) red_arr_mem_43703)[(sext_i32_i64(local_tid_43699) +
                                                     (int64_t) 1) *
                                                    segment_sizze_nonzzero_43696 -
                                                    (int64_t) 1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_32296
}
__kernel void mainDetailedzisegred_small_32432(__global int *global_failure,
                                               int failure_is_an_option,
                                               __global
                                               int64_t *global_failure_args,
                                               __local volatile
                                               int64_t *red_arr_mem_43885_backing_aligned_0,
                                               int64_t N_28169, int64_t m_28170,
                                               int64_t i32_res_28571,
                                               int64_t num_groups_32454,
                                               int64_t segment_sizze_nonzzero_43878,
                                               __global
                                               unsigned char *defunc_4_map_res_mem_42266,
                                               __global
                                               unsigned char *defunc_3_map_res_mem_42344,
                                               __global
                                               unsigned char *defunc_3_map_res_mem_42345,
                                               __global
                                               unsigned char *mem_42382)
{
    #define segred_group_sizze_32453 (mainDetailedzisegred_group_sizze_32426)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_43885_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43885_backing_aligned_0;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43880;
    int32_t local_tid_43881;
    int64_t group_sizze_43884;
    int32_t wave_sizze_43883;
    int32_t group_tid_43882;
    
    global_tid_43880 = get_global_id(0);
    local_tid_43881 = get_local_id(0);
    group_sizze_43884 = get_local_size(0);
    wave_sizze_43883 = LOCKSTEP_WIDTH;
    group_tid_43882 = get_group_id(0);
    
    int32_t phys_tid_32432 = global_tid_43880;
    __local char *red_arr_mem_43885;
    
    red_arr_mem_43885 = (__local char *) red_arr_mem_43885_backing_0;
    
    int32_t phys_group_id_43887;
    
    phys_group_id_43887 = get_group_id(0);
    for (int32_t i_43888 = 0; i_43888 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_28170,
                                          squot64(segred_group_sizze_32453,
                                                  segment_sizze_nonzzero_43878))) -
                   phys_group_id_43887, sext_i64_i32(num_groups_32454));
         i_43888++) {
        int32_t virt_group_id_43889 = phys_group_id_43887 + i_43888 *
                sext_i64_i32(num_groups_32454);
        int64_t slice_43890 = m_28170;
        int64_t gtid_32423 = squot64(sext_i32_i64(local_tid_43881),
                                     segment_sizze_nonzzero_43878) +
                sext_i32_i64(virt_group_id_43889) *
                squot64(segred_group_sizze_32453, segment_sizze_nonzzero_43878);
        int64_t remnant_43891 = squot64(sext_i32_i64(local_tid_43881),
                                        segment_sizze_nonzzero_43878) +
                sext_i32_i64(virt_group_id_43889) *
                squot64(segred_group_sizze_32453,
                        segment_sizze_nonzzero_43878) - gtid_32423;
        int64_t gtid_32431 = srem64(sext_i32_i64(local_tid_43881),
                                    i32_res_28571);
        
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, i32_res_28571) && (slt64(gtid_32423,
                                                            m_28170) &&
                                                      slt64(sext_i32_i64(local_tid_43881),
                                                            i32_res_28571 *
                                                            squot64(segred_group_sizze_32453,
                                                                    segment_sizze_nonzzero_43878)))) {
                int32_t x_32462 = ((__global
                                    int32_t *) defunc_3_map_res_mem_42344)[gtid_32423];
                int32_t index_primexp_39441 = sext_i64_i32(gtid_32431);
                bool cond_32464 = slt32(index_primexp_39441, x_32462);
                float defunc_0_f_res_32465;
                
                if (cond_32464) {
                    int32_t x_32461 = ((__global
                                        int32_t *) defunc_3_map_res_mem_42345)[gtid_32423];
                    int32_t x_32466 = add32(x_32461, index_primexp_39441);
                    int32_t x_32467 = sub32(x_32466, x_32462);
                    int32_t i_32468 = add32(1, x_32467);
                    int64_t i_32469 = sext_i32_i64(i_32468);
                    bool x_32470 = sle64((int64_t) 0, i_32469);
                    bool y_32471 = slt64(i_32469, N_28169);
                    bool bounds_check_32472 = x_32470 && y_32471;
                    bool index_certs_32473;
                    
                    if (!bounds_check_32472) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          53) == -1) {
                                global_failure_args[0] = i_32469;
                                global_failure_args[1] = N_28169;
                                ;
                            }
                            local_failure = true;
                            goto error_0;
                        }
                    }
                    
                    float defunc_0_f_res_t_res_32474 = ((__global
                                                         float *) defunc_4_map_res_mem_42266)[gtid_32423 *
                                                                                              N_28169 +
                                                                                              i_32469];
                    
                    defunc_0_f_res_32465 = defunc_0_f_res_t_res_32474;
                } else {
                    defunc_0_f_res_32465 = 0.0F;
                }
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_43885)[sext_i32_i64(local_tid_43881)] =
                        defunc_0_f_res_32465;
                }
            } else {
                ((__local
                  float *) red_arr_mem_43885)[sext_i32_i64(local_tid_43881)] =
                    0.0F;
            }
        }
        
      error_0:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, i32_res_28571)) {
            // perform segmented scan to imitate reduction
            {
                float x_32457;
                float x_32458;
                float x_43892;
                float x_43893;
                bool ltid_in_bounds_43895 = slt64(sext_i32_i64(local_tid_43881),
                                                  i32_res_28571 *
                                                  squot64(segred_group_sizze_32453,
                                                          segment_sizze_nonzzero_43878));
                int32_t skip_threads_43896;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_43895) {
                        x_32458 = ((volatile __local
                                    float *) red_arr_mem_43885)[sext_i32_i64(local_tid_43881)];
                        if ((local_tid_43881 - squot32(local_tid_43881, 32) *
                             32) == 0) {
                            x_32457 = x_32458;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_43896 = 1;
                    while (slt32(skip_threads_43896, 32)) {
                        if (sle32(skip_threads_43896, local_tid_43881 -
                                  squot32(local_tid_43881, 32) * 32) &&
                            ltid_in_bounds_43895) {
                            // read operands
                            {
                                x_32457 = ((volatile __local
                                            float *) red_arr_mem_43885)[sext_i32_i64(local_tid_43881) -
                                                                        sext_i32_i64(skip_threads_43896)];
                            }
                            // perform operation
                            {
                                bool inactive_43897 =
                                     slt64(srem64(sext_i32_i64(local_tid_43881),
                                                  i32_res_28571),
                                           sext_i32_i64(local_tid_43881) -
                                           sext_i32_i64(local_tid_43881 -
                                           skip_threads_43896));
                                
                                if (inactive_43897) {
                                    x_32457 = x_32458;
                                }
                                if (!inactive_43897) {
                                    float defunc_1_op_res_32459 = x_32457 +
                                          x_32458;
                                    
                                    x_32457 = defunc_1_op_res_32459;
                                }
                            }
                        }
                        if (sle32(wave_sizze_43883, skip_threads_43896)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_43896, local_tid_43881 -
                                  squot32(local_tid_43881, 32) * 32) &&
                            ltid_in_bounds_43895) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43885)[sext_i32_i64(local_tid_43881)] =
                                    x_32457;
                                x_32458 = x_32457;
                            }
                        }
                        if (sle32(wave_sizze_43883, skip_threads_43896)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_43896 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_43881 - squot32(local_tid_43881, 32) * 32) ==
                        31 && ltid_in_bounds_43895) {
                        ((volatile __local
                          float *) red_arr_mem_43885)[sext_i32_i64(squot32(local_tid_43881,
                                                                           32))] =
                            x_32457;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_43898;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_43881, 32) == 0 &&
                            ltid_in_bounds_43895) {
                            x_43893 = ((volatile __local
                                        float *) red_arr_mem_43885)[sext_i32_i64(local_tid_43881)];
                            if ((local_tid_43881 - squot32(local_tid_43881,
                                                           32) * 32) == 0) {
                                x_43892 = x_43893;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_43898 = 1;
                        while (slt32(skip_threads_43898, 32)) {
                            if (sle32(skip_threads_43898, local_tid_43881 -
                                      squot32(local_tid_43881, 32) * 32) &&
                                (squot32(local_tid_43881, 32) == 0 &&
                                 ltid_in_bounds_43895)) {
                                // read operands
                                {
                                    x_43892 = ((volatile __local
                                                float *) red_arr_mem_43885)[sext_i32_i64(local_tid_43881) -
                                                                            sext_i32_i64(skip_threads_43898)];
                                }
                                // perform operation
                                {
                                    bool inactive_43899 =
                                         slt64(srem64(sext_i32_i64(local_tid_43881 *
                                                      32 + 32 - 1),
                                                      i32_res_28571),
                                               sext_i32_i64(local_tid_43881 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_43881 -
                                                             skip_threads_43898) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_43899) {
                                        x_43892 = x_43893;
                                    }
                                    if (!inactive_43899) {
                                        float defunc_1_op_res_43894 = x_43892 +
                                              x_43893;
                                        
                                        x_43892 = defunc_1_op_res_43894;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_43883, skip_threads_43898)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_43898, local_tid_43881 -
                                      squot32(local_tid_43881, 32) * 32) &&
                                (squot32(local_tid_43881, 32) == 0 &&
                                 ltid_in_bounds_43895)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_43885)[sext_i32_i64(local_tid_43881)] =
                                        x_43892;
                                    x_43893 = x_43892;
                                }
                            }
                            if (sle32(wave_sizze_43883, skip_threads_43898)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_43898 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_43881, 32) == 0 ||
                          !ltid_in_bounds_43895)) {
                        // read operands
                        {
                            x_32458 = x_32457;
                            x_32457 = ((__local
                                        float *) red_arr_mem_43885)[sext_i32_i64(squot32(local_tid_43881,
                                                                                         32)) -
                                                                    (int64_t) 1];
                        }
                        // perform operation
                        {
                            bool inactive_43900 =
                                 slt64(srem64(sext_i32_i64(local_tid_43881),
                                              i32_res_28571),
                                       sext_i32_i64(local_tid_43881) -
                                       sext_i32_i64(squot32(local_tid_43881,
                                                            32) * 32 - 1));
                            
                            if (inactive_43900) {
                                x_32457 = x_32458;
                            }
                            if (!inactive_43900) {
                                float defunc_1_op_res_32459 = x_32457 + x_32458;
                                
                                x_32457 = defunc_1_op_res_32459;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_43885)[sext_i32_i64(local_tid_43881)] =
                                x_32457;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_43881, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_43885)[sext_i32_i64(local_tid_43881)] =
                            x_32458;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_43889) *
                      squot64(segred_group_sizze_32453,
                              segment_sizze_nonzzero_43878) +
                      sext_i32_i64(local_tid_43881), m_28170) &&
                slt64(sext_i32_i64(local_tid_43881),
                      squot64(segred_group_sizze_32453,
                              segment_sizze_nonzzero_43878))) {
                ((__global
                  float *) mem_42382)[sext_i32_i64(virt_group_id_43889) *
                                      squot64(segred_group_sizze_32453,
                                              segment_sizze_nonzzero_43878) +
                                      sext_i32_i64(local_tid_43881)] = ((__local
                                                                         float *) red_arr_mem_43885)[(sext_i32_i64(local_tid_43881) +
                                                                                                      (int64_t) 1) *
                                                                                                     segment_sizze_nonzzero_43878 -
                                                                                                     (int64_t) 1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_32453
}
__kernel void mainDetailedzisegred_small_33290(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_44122_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_44120_backing_aligned_1,
                                               __local volatile
                                               int64_t *red_arr_mem_44118_backing_aligned_2,
                                               int64_t m_28170,
                                               int64_t iota32_arg_28600,
                                               int64_t iota32_arg_28630,
                                               int64_t num_groups_33435,
                                               int64_t segment_sizze_nonzzero_44111,
                                               __global
                                               unsigned char *mem_42387,
                                               __global
                                               unsigned char *mem_42522,
                                               __global
                                               unsigned char *mem_42527,
                                               __global
                                               unsigned char *mem_42531,
                                               __global
                                               unsigned char *mem_42534,
                                               __global
                                               unsigned char *mem_42537,
                                               __global
                                               unsigned char *mem_42540,
                                               __global
                                               unsigned char *mem_42544)
{
    #define segred_group_sizze_33434 (mainDetailedzisegred_group_sizze_33284)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_44122_backing_2 =
                          (__local volatile
                           char *) red_arr_mem_44122_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_44120_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_44120_backing_aligned_1;
    __local volatile char *restrict red_arr_mem_44118_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_44118_backing_aligned_2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_44113;
    int32_t local_tid_44114;
    int64_t group_sizze_44117;
    int32_t wave_sizze_44116;
    int32_t group_tid_44115;
    
    global_tid_44113 = get_global_id(0);
    local_tid_44114 = get_local_id(0);
    group_sizze_44117 = get_local_size(0);
    wave_sizze_44116 = LOCKSTEP_WIDTH;
    group_tid_44115 = get_group_id(0);
    
    int32_t phys_tid_33290 = global_tid_44113;
    __local char *red_arr_mem_44118;
    
    red_arr_mem_44118 = (__local char *) red_arr_mem_44118_backing_0;
    
    __local char *red_arr_mem_44120;
    
    red_arr_mem_44120 = (__local char *) red_arr_mem_44120_backing_1;
    
    __local char *red_arr_mem_44122;
    
    red_arr_mem_44122 = (__local char *) red_arr_mem_44122_backing_2;
    
    int32_t phys_group_id_44124;
    
    phys_group_id_44124 = get_group_id(0);
    for (int32_t i_44125 = 0; i_44125 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_28170,
                                          squot64(segred_group_sizze_33434,
                                                  segment_sizze_nonzzero_44111))) -
                   phys_group_id_44124, sext_i64_i32(num_groups_33435));
         i_44125++) {
        int32_t virt_group_id_44126 = phys_group_id_44124 + i_44125 *
                sext_i64_i32(num_groups_33435);
        int64_t slice_44127 = m_28170;
        int64_t gtid_33281 = squot64(sext_i32_i64(local_tid_44114),
                                     segment_sizze_nonzzero_44111) +
                sext_i32_i64(virt_group_id_44126) *
                squot64(segred_group_sizze_33434, segment_sizze_nonzzero_44111);
        int64_t remnant_44128 = squot64(sext_i32_i64(local_tid_44114),
                                        segment_sizze_nonzzero_44111) +
                sext_i32_i64(virt_group_id_44126) *
                squot64(segred_group_sizze_33434,
                        segment_sizze_nonzzero_44111) - gtid_33281;
        int64_t gtid_33289 = srem64(sext_i32_i64(local_tid_44114),
                                    iota32_arg_28600);
        
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, iota32_arg_28600) && (slt64(gtid_33281,
                                                               m_28170) &&
                                                         slt64(sext_i32_i64(local_tid_44114),
                                                               iota32_arg_28600 *
                                                               squot64(segred_group_sizze_33434,
                                                                       segment_sizze_nonzzero_44111)))) {
                int32_t y_33455 = ((__global int32_t *) mem_42522)[gtid_33281];
                float y_33456 = ((__global float *) mem_42531)[gtid_33281];
                int64_t binop_x_39499 = iota32_arg_28600 * gtid_33281;
                int64_t binop_x_39500 = gtid_33289 + binop_x_39499;
                int64_t new_index_39501 = squot64(binop_x_39500,
                                                  iota32_arg_28630);
                int64_t binop_y_39507 = iota32_arg_28630 * new_index_39501;
                int64_t new_index_39508 = binop_x_39500 - binop_y_39507;
                float x_33458 = ((__global float *) mem_42527)[new_index_39501 *
                                                               iota32_arg_28630 +
                                                               new_index_39508];
                float x_33459 = ((__global float *) mem_42387)[gtid_33289];
                int32_t index_primexp_39465 = sext_i64_i32(gtid_33289);
                float defunc_0_f_res_33461 = x_33458 / y_33456;
                bool cond_33462 = slt32(index_primexp_39465, y_33455);
                bool isnan_res_33463;
                
                isnan_res_33463 = futrts_isnan32(defunc_0_f_res_33461);
                
                bool cond_t_res_33464 = !isnan_res_33463;
                bool x_33465 = cond_33462 && cond_t_res_33464;
                float abs_res_33466 = (float) fabs(defunc_0_f_res_33461);
                bool defunc_2_f_res_t_res_33467 = x_33459 < abs_res_33466;
                bool x_33468 = x_33465 && defunc_2_f_res_t_res_33467;
                float defunc_1_f_res_33469;
                
                if (cond_33462) {
                    defunc_1_f_res_33469 = defunc_0_f_res_33461;
                } else {
                    defunc_1_f_res_33469 = 0.0F;
                }
                // save map-out results
                {
                    ((__global float *) mem_42544)[gtid_33281 *
                                                   iota32_arg_28600 +
                                                   gtid_33289] =
                        defunc_0_f_res_33461;
                }
                // save results to be reduced
                {
                    ((__local
                      bool *) red_arr_mem_44118)[sext_i32_i64(local_tid_44114)] =
                        x_33468;
                    ((__local
                      int32_t *) red_arr_mem_44120)[sext_i32_i64(local_tid_44114)] =
                        index_primexp_39465;
                    ((__local
                      float *) red_arr_mem_44122)[sext_i32_i64(local_tid_44114)] =
                        defunc_1_f_res_33469;
                }
            } else {
                ((__local
                  bool *) red_arr_mem_44118)[sext_i32_i64(local_tid_44114)] = 0;
                ((__local
                  int32_t *) red_arr_mem_44120)[sext_i32_i64(local_tid_44114)] =
                    -1;
                ((__local
                  float *) red_arr_mem_44122)[sext_i32_i64(local_tid_44114)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, iota32_arg_28600)) {
            // perform segmented scan to imitate reduction
            {
                bool x_33441;
                int32_t x_33442;
                float x_33443;
                bool x_33444;
                int32_t x_33445;
                float x_33446;
                bool x_44129;
                int32_t x_44130;
                float x_44131;
                bool x_44132;
                int32_t x_44133;
                float x_44134;
                bool ltid_in_bounds_44143 = slt64(sext_i32_i64(local_tid_44114),
                                                  iota32_arg_28600 *
                                                  squot64(segred_group_sizze_33434,
                                                          segment_sizze_nonzzero_44111));
                int32_t skip_threads_44144;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_44143) {
                        x_33444 = ((volatile __local
                                    bool *) red_arr_mem_44118)[sext_i32_i64(local_tid_44114)];
                        x_33445 = ((volatile __local
                                    int32_t *) red_arr_mem_44120)[sext_i32_i64(local_tid_44114)];
                        x_33446 = ((volatile __local
                                    float *) red_arr_mem_44122)[sext_i32_i64(local_tid_44114)];
                        if ((local_tid_44114 - squot32(local_tid_44114, 32) *
                             32) == 0) {
                            x_33441 = x_33444;
                            x_33442 = x_33445;
                            x_33443 = x_33446;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_44144 = 1;
                    while (slt32(skip_threads_44144, 32)) {
                        if (sle32(skip_threads_44144, local_tid_44114 -
                                  squot32(local_tid_44114, 32) * 32) &&
                            ltid_in_bounds_44143) {
                            // read operands
                            {
                                x_33441 = ((volatile __local
                                            bool *) red_arr_mem_44118)[sext_i32_i64(local_tid_44114) -
                                                                       sext_i32_i64(skip_threads_44144)];
                                x_33442 = ((volatile __local
                                            int32_t *) red_arr_mem_44120)[sext_i32_i64(local_tid_44114) -
                                                                          sext_i32_i64(skip_threads_44144)];
                                x_33443 = ((volatile __local
                                            float *) red_arr_mem_44122)[sext_i32_i64(local_tid_44114) -
                                                                        sext_i32_i64(skip_threads_44144)];
                            }
                            // perform operation
                            {
                                bool inactive_44145 =
                                     slt64(srem64(sext_i32_i64(local_tid_44114),
                                                  iota32_arg_28600),
                                           sext_i32_i64(local_tid_44114) -
                                           sext_i32_i64(local_tid_44114 -
                                           skip_threads_44144));
                                
                                if (inactive_44145) {
                                    x_33441 = x_33444;
                                    x_33442 = x_33445;
                                    x_33443 = x_33446;
                                }
                                if (!inactive_44145) {
                                    bool defunc_1_op_res_33447;
                                    int32_t defunc_1_op_res_33448;
                                    
                                    if (x_33441) {
                                        defunc_1_op_res_33447 = x_33441;
                                        defunc_1_op_res_33448 = x_33442;
                                    } else {
                                        bool x_33449 = x_33444 && x_33444;
                                        bool x_33450 = !x_33444;
                                        bool y_33451 = x_33441 && x_33450;
                                        bool defunc_1_op_res_f_res_33452 =
                                             x_33449 || y_33451;
                                        int32_t defunc_1_op_res_f_res_33453;
                                        
                                        if (x_33444) {
                                            defunc_1_op_res_f_res_33453 =
                                                x_33445;
                                        } else {
                                            defunc_1_op_res_f_res_33453 =
                                                x_33442;
                                        }
                                        defunc_1_op_res_33447 =
                                            defunc_1_op_res_f_res_33452;
                                        defunc_1_op_res_33448 =
                                            defunc_1_op_res_f_res_33453;
                                    }
                                    
                                    float defunc_1_op_res_33454 = x_33443 +
                                          x_33446;
                                    
                                    x_33441 = defunc_1_op_res_33447;
                                    x_33442 = defunc_1_op_res_33448;
                                    x_33443 = defunc_1_op_res_33454;
                                }
                            }
                        }
                        if (sle32(wave_sizze_44116, skip_threads_44144)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_44144, local_tid_44114 -
                                  squot32(local_tid_44114, 32) * 32) &&
                            ltid_in_bounds_44143) {
                            // write result
                            {
                                ((volatile __local
                                  bool *) red_arr_mem_44118)[sext_i32_i64(local_tid_44114)] =
                                    x_33441;
                                x_33444 = x_33441;
                                ((volatile __local
                                  int32_t *) red_arr_mem_44120)[sext_i32_i64(local_tid_44114)] =
                                    x_33442;
                                x_33445 = x_33442;
                                ((volatile __local
                                  float *) red_arr_mem_44122)[sext_i32_i64(local_tid_44114)] =
                                    x_33443;
                                x_33446 = x_33443;
                            }
                        }
                        if (sle32(wave_sizze_44116, skip_threads_44144)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_44144 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_44114 - squot32(local_tid_44114, 32) * 32) ==
                        31 && ltid_in_bounds_44143) {
                        ((volatile __local
                          bool *) red_arr_mem_44118)[sext_i32_i64(squot32(local_tid_44114,
                                                                          32))] =
                            x_33441;
                        ((volatile __local
                          int32_t *) red_arr_mem_44120)[sext_i32_i64(squot32(local_tid_44114,
                                                                             32))] =
                            x_33442;
                        ((volatile __local
                          float *) red_arr_mem_44122)[sext_i32_i64(squot32(local_tid_44114,
                                                                           32))] =
                            x_33443;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_44146;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_44114, 32) == 0 &&
                            ltid_in_bounds_44143) {
                            x_44132 = ((volatile __local
                                        bool *) red_arr_mem_44118)[sext_i32_i64(local_tid_44114)];
                            x_44133 = ((volatile __local
                                        int32_t *) red_arr_mem_44120)[sext_i32_i64(local_tid_44114)];
                            x_44134 = ((volatile __local
                                        float *) red_arr_mem_44122)[sext_i32_i64(local_tid_44114)];
                            if ((local_tid_44114 - squot32(local_tid_44114,
                                                           32) * 32) == 0) {
                                x_44129 = x_44132;
                                x_44130 = x_44133;
                                x_44131 = x_44134;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_44146 = 1;
                        while (slt32(skip_threads_44146, 32)) {
                            if (sle32(skip_threads_44146, local_tid_44114 -
                                      squot32(local_tid_44114, 32) * 32) &&
                                (squot32(local_tid_44114, 32) == 0 &&
                                 ltid_in_bounds_44143)) {
                                // read operands
                                {
                                    x_44129 = ((volatile __local
                                                bool *) red_arr_mem_44118)[sext_i32_i64(local_tid_44114) -
                                                                           sext_i32_i64(skip_threads_44146)];
                                    x_44130 = ((volatile __local
                                                int32_t *) red_arr_mem_44120)[sext_i32_i64(local_tid_44114) -
                                                                              sext_i32_i64(skip_threads_44146)];
                                    x_44131 = ((volatile __local
                                                float *) red_arr_mem_44122)[sext_i32_i64(local_tid_44114) -
                                                                            sext_i32_i64(skip_threads_44146)];
                                }
                                // perform operation
                                {
                                    bool inactive_44147 =
                                         slt64(srem64(sext_i32_i64(local_tid_44114 *
                                                      32 + 32 - 1),
                                                      iota32_arg_28600),
                                               sext_i32_i64(local_tid_44114 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_44114 -
                                                             skip_threads_44146) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_44147) {
                                        x_44129 = x_44132;
                                        x_44130 = x_44133;
                                        x_44131 = x_44134;
                                    }
                                    if (!inactive_44147) {
                                        bool defunc_1_op_res_44135;
                                        int32_t defunc_1_op_res_44136;
                                        
                                        if (x_44129) {
                                            defunc_1_op_res_44135 = x_44129;
                                            defunc_1_op_res_44136 = x_44130;
                                        } else {
                                            bool x_44137 = x_44132 && x_44132;
                                            bool x_44138 = !x_44132;
                                            bool y_44139 = x_44129 && x_44138;
                                            bool defunc_1_op_res_f_res_44140 =
                                                 x_44137 || y_44139;
                                            int32_t defunc_1_op_res_f_res_44141;
                                            
                                            if (x_44132) {
                                                defunc_1_op_res_f_res_44141 =
                                                    x_44133;
                                            } else {
                                                defunc_1_op_res_f_res_44141 =
                                                    x_44130;
                                            }
                                            defunc_1_op_res_44135 =
                                                defunc_1_op_res_f_res_44140;
                                            defunc_1_op_res_44136 =
                                                defunc_1_op_res_f_res_44141;
                                        }
                                        
                                        float defunc_1_op_res_44142 = x_44131 +
                                              x_44134;
                                        
                                        x_44129 = defunc_1_op_res_44135;
                                        x_44130 = defunc_1_op_res_44136;
                                        x_44131 = defunc_1_op_res_44142;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_44116, skip_threads_44146)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_44146, local_tid_44114 -
                                      squot32(local_tid_44114, 32) * 32) &&
                                (squot32(local_tid_44114, 32) == 0 &&
                                 ltid_in_bounds_44143)) {
                                // write result
                                {
                                    ((volatile __local
                                      bool *) red_arr_mem_44118)[sext_i32_i64(local_tid_44114)] =
                                        x_44129;
                                    x_44132 = x_44129;
                                    ((volatile __local
                                      int32_t *) red_arr_mem_44120)[sext_i32_i64(local_tid_44114)] =
                                        x_44130;
                                    x_44133 = x_44130;
                                    ((volatile __local
                                      float *) red_arr_mem_44122)[sext_i32_i64(local_tid_44114)] =
                                        x_44131;
                                    x_44134 = x_44131;
                                }
                            }
                            if (sle32(wave_sizze_44116, skip_threads_44146)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_44146 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_44114, 32) == 0 ||
                          !ltid_in_bounds_44143)) {
                        // read operands
                        {
                            x_33444 = x_33441;
                            x_33445 = x_33442;
                            x_33446 = x_33443;
                            x_33441 = ((__local
                                        bool *) red_arr_mem_44118)[sext_i32_i64(squot32(local_tid_44114,
                                                                                        32)) -
                                                                   (int64_t) 1];
                            x_33442 = ((__local
                                        int32_t *) red_arr_mem_44120)[sext_i32_i64(squot32(local_tid_44114,
                                                                                           32)) -
                                                                      (int64_t) 1];
                            x_33443 = ((__local
                                        float *) red_arr_mem_44122)[sext_i32_i64(squot32(local_tid_44114,
                                                                                         32)) -
                                                                    (int64_t) 1];
                        }
                        // perform operation
                        {
                            bool inactive_44148 =
                                 slt64(srem64(sext_i32_i64(local_tid_44114),
                                              iota32_arg_28600),
                                       sext_i32_i64(local_tid_44114) -
                                       sext_i32_i64(squot32(local_tid_44114,
                                                            32) * 32 - 1));
                            
                            if (inactive_44148) {
                                x_33441 = x_33444;
                                x_33442 = x_33445;
                                x_33443 = x_33446;
                            }
                            if (!inactive_44148) {
                                bool defunc_1_op_res_33447;
                                int32_t defunc_1_op_res_33448;
                                
                                if (x_33441) {
                                    defunc_1_op_res_33447 = x_33441;
                                    defunc_1_op_res_33448 = x_33442;
                                } else {
                                    bool x_33449 = x_33444 && x_33444;
                                    bool x_33450 = !x_33444;
                                    bool y_33451 = x_33441 && x_33450;
                                    bool defunc_1_op_res_f_res_33452 =
                                         x_33449 || y_33451;
                                    int32_t defunc_1_op_res_f_res_33453;
                                    
                                    if (x_33444) {
                                        defunc_1_op_res_f_res_33453 = x_33445;
                                    } else {
                                        defunc_1_op_res_f_res_33453 = x_33442;
                                    }
                                    defunc_1_op_res_33447 =
                                        defunc_1_op_res_f_res_33452;
                                    defunc_1_op_res_33448 =
                                        defunc_1_op_res_f_res_33453;
                                }
                                
                                float defunc_1_op_res_33454 = x_33443 + x_33446;
                                
                                x_33441 = defunc_1_op_res_33447;
                                x_33442 = defunc_1_op_res_33448;
                                x_33443 = defunc_1_op_res_33454;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              bool *) red_arr_mem_44118)[sext_i32_i64(local_tid_44114)] =
                                x_33441;
                            ((__local
                              int32_t *) red_arr_mem_44120)[sext_i32_i64(local_tid_44114)] =
                                x_33442;
                            ((__local
                              float *) red_arr_mem_44122)[sext_i32_i64(local_tid_44114)] =
                                x_33443;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_44114, 32) == 0) {
                        ((__local
                          bool *) red_arr_mem_44118)[sext_i32_i64(local_tid_44114)] =
                            x_33444;
                        ((__local
                          int32_t *) red_arr_mem_44120)[sext_i32_i64(local_tid_44114)] =
                            x_33445;
                        ((__local
                          float *) red_arr_mem_44122)[sext_i32_i64(local_tid_44114)] =
                            x_33446;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_44126) *
                      squot64(segred_group_sizze_33434,
                              segment_sizze_nonzzero_44111) +
                      sext_i32_i64(local_tid_44114), m_28170) &&
                slt64(sext_i32_i64(local_tid_44114),
                      squot64(segred_group_sizze_33434,
                              segment_sizze_nonzzero_44111))) {
                ((__global
                  bool *) mem_42534)[sext_i32_i64(virt_group_id_44126) *
                                     squot64(segred_group_sizze_33434,
                                             segment_sizze_nonzzero_44111) +
                                     sext_i32_i64(local_tid_44114)] = ((__local
                                                                        bool *) red_arr_mem_44118)[(sext_i32_i64(local_tid_44114) +
                                                                                                    (int64_t) 1) *
                                                                                                   segment_sizze_nonzzero_44111 -
                                                                                                   (int64_t) 1];
                ((__global
                  int32_t *) mem_42537)[sext_i32_i64(virt_group_id_44126) *
                                        squot64(segred_group_sizze_33434,
                                                segment_sizze_nonzzero_44111) +
                                        sext_i32_i64(local_tid_44114)] =
                    ((__local
                      int32_t *) red_arr_mem_44120)[(sext_i32_i64(local_tid_44114) +
                                                     (int64_t) 1) *
                                                    segment_sizze_nonzzero_44111 -
                                                    (int64_t) 1];
                ((__global
                  float *) mem_42540)[sext_i32_i64(virt_group_id_44126) *
                                      squot64(segred_group_sizze_33434,
                                              segment_sizze_nonzzero_44111) +
                                      sext_i32_i64(local_tid_44114)] = ((__local
                                                                         float *) red_arr_mem_44122)[(sext_i32_i64(local_tid_44114) +
                                                                                                      (int64_t) 1) *
                                                                                                     segment_sizze_nonzzero_44111 -
                                                                                                     (int64_t) 1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_33434
}
__kernel void mainMagnitudeziscan_stage1_35341(__global int *global_failure,
                                               __local volatile
                                               int64_t *scan_arr_mem_43569_backing_aligned_0,
                                               int64_t N_28874, int64_t m_28875,
                                               int32_t num_threads_43563,
                                               __global
                                               unsigned char *images_mem_41421,
                                               __global
                                               unsigned char *defunc_3_map_res_mem_42216,
                                               __global
                                               unsigned char *mem_42247,
                                               __global
                                               unsigned char *mem_42251)
{
    #define segscan_group_sizze_35358 (mainMagnitudezisegscan_group_sizze_35335)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_43569_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_43569_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43564;
    int32_t local_tid_43565;
    int64_t group_sizze_43568;
    int32_t wave_sizze_43567;
    int32_t group_tid_43566;
    
    global_tid_43564 = get_global_id(0);
    local_tid_43565 = get_local_id(0);
    group_sizze_43568 = get_local_size(0);
    wave_sizze_43567 = LOCKSTEP_WIDTH;
    group_tid_43566 = get_group_id(0);
    
    int32_t phys_tid_35341 = global_tid_43564;
    __local char *scan_arr_mem_43569;
    
    scan_arr_mem_43569 = (__local char *) scan_arr_mem_43569_backing_0;
    
    int64_t x_35363;
    int64_t x_35364;
    
    x_35363 = (int64_t) 0;
    for (int64_t j_43571 = 0; j_43571 < sdiv_up64(m_28875 * N_28874,
                                                  sext_i32_i64(num_threads_43563));
         j_43571++) {
        int64_t chunk_offset_43572 = segscan_group_sizze_35358 * j_43571 +
                sext_i32_i64(group_tid_43566) * (segscan_group_sizze_35358 *
                                                 sdiv_up64(m_28875 * N_28874,
                                                           sext_i32_i64(num_threads_43563)));
        int64_t flat_idx_43573 = chunk_offset_43572 +
                sext_i32_i64(local_tid_43565);
        int64_t gtid_35332 = squot64(flat_idx_43573, N_28874);
        int64_t gtid_35340 = flat_idx_43573 - squot64(flat_idx_43573, N_28874) *
                N_28874;
        
        // threads in bounds read input
        {
            if (slt64(gtid_35332, m_28875) && slt64(gtid_35340, N_28874)) {
                float x_35368 = ((__global
                                  float *) images_mem_41421)[gtid_35332 *
                                                             N_28874 +
                                                             gtid_35340];
                bool isnan_res_35370;
                
                isnan_res_35370 = futrts_isnan32(x_35368);
                
                bool cond_35371 = !isnan_res_35370;
                float defunc_1_f_res_35372;
                
                if (cond_35371) {
                    float x_35369 = ((__global
                                      float *) defunc_3_map_res_mem_42216)[gtid_35332 *
                                                                           N_28874 +
                                                                           gtid_35340];
                    float defunc_1_f_res_t_res_35373 = x_35368 - x_35369;
                    
                    defunc_1_f_res_35372 = defunc_1_f_res_t_res_35373;
                } else {
                    defunc_1_f_res_35372 = NAN;
                }
                
                bool isnan_res_35374;
                
                isnan_res_35374 = futrts_isnan32(defunc_1_f_res_35372);
                
                bool defunc_0_p_res_35375 = !isnan_res_35374;
                int64_t defunc_0_f_res_35376 =
                        btoi_bool_i64(defunc_0_p_res_35375);
                
                // write to-scan values to parameters
                {
                    x_35364 = defunc_0_f_res_35376;
                }
                // write mapped values results to global memory
                {
                    ((__global float *) mem_42251)[gtid_35332 * N_28874 +
                                                   gtid_35340] =
                        defunc_1_f_res_35372;
                }
            }
        }
        // do one intra-group scan operation
        {
            // maybe restore some to-scan values to parameters, or read neutral
            {
                if (!(slt64(gtid_35332, m_28875) && slt64(gtid_35340,
                                                          N_28874))) {
                    x_35364 = (int64_t) 0;
                }
            }
            // combine with carry and write to local memory
            {
                int64_t defunc_1_op_res_35365 = add64(x_35363, x_35364);
                
                ((__local
                  int64_t *) scan_arr_mem_43569)[sext_i32_i64(local_tid_43565)] =
                    defunc_1_op_res_35365;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int64_t x_43574;
            int64_t x_43575;
            int64_t x_43577;
            int64_t x_43578;
            bool ltid_in_bounds_43580 = slt64(sext_i32_i64(local_tid_43565),
                                              segscan_group_sizze_35358);
            int32_t skip_threads_43581;
            
            // read input for in-block scan
            {
                if (ltid_in_bounds_43580) {
                    x_43575 = ((volatile __local
                                int64_t *) scan_arr_mem_43569)[sext_i32_i64(local_tid_43565)];
                    if ((local_tid_43565 - squot32(local_tid_43565, 32) * 32) ==
                        0) {
                        x_43574 = x_43575;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_43581 = 1;
                while (slt32(skip_threads_43581, 32)) {
                    if (sle32(skip_threads_43581, local_tid_43565 -
                              squot32(local_tid_43565, 32) * 32) &&
                        ltid_in_bounds_43580) {
                        // read operands
                        {
                            x_43574 = ((volatile __local
                                        int64_t *) scan_arr_mem_43569)[sext_i32_i64(local_tid_43565) -
                                                                       sext_i32_i64(skip_threads_43581)];
                        }
                        // perform operation
                        {
                            bool inactive_43582 =
                                 slt64(srem64(sext_i32_i64(local_tid_43565) +
                                              chunk_offset_43572, N_28874),
                                       sext_i32_i64(local_tid_43565) +
                                       chunk_offset_43572 -
                                       (sext_i32_i64(local_tid_43565 -
                                        skip_threads_43581) +
                                        chunk_offset_43572));
                            
                            if (inactive_43582) {
                                x_43574 = x_43575;
                            }
                            if (!inactive_43582) {
                                int64_t defunc_1_op_res_43576 = add64(x_43574,
                                                                      x_43575);
                                
                                x_43574 = defunc_1_op_res_43576;
                            }
                        }
                    }
                    if (sle32(wave_sizze_43567, skip_threads_43581)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_43581, local_tid_43565 -
                              squot32(local_tid_43565, 32) * 32) &&
                        ltid_in_bounds_43580) {
                        // write result
                        {
                            ((volatile __local
                              int64_t *) scan_arr_mem_43569)[sext_i32_i64(local_tid_43565)] =
                                x_43574;
                            x_43575 = x_43574;
                        }
                    }
                    if (sle32(wave_sizze_43567, skip_threads_43581)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_43581 *= 2;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // last thread of block 'i' writes its result to offset 'i'
            {
                if ((local_tid_43565 - squot32(local_tid_43565, 32) * 32) ==
                    31 && ltid_in_bounds_43580) {
                    ((volatile __local
                      int64_t *) scan_arr_mem_43569)[sext_i32_i64(squot32(local_tid_43565,
                                                                          32))] =
                        x_43574;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
            {
                int32_t skip_threads_43583;
                
                // read input for in-block scan
                {
                    if (squot32(local_tid_43565, 32) == 0 &&
                        ltid_in_bounds_43580) {
                        x_43578 = ((volatile __local
                                    int64_t *) scan_arr_mem_43569)[sext_i32_i64(local_tid_43565)];
                        if ((local_tid_43565 - squot32(local_tid_43565, 32) *
                             32) == 0) {
                            x_43577 = x_43578;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_43583 = 1;
                    while (slt32(skip_threads_43583, 32)) {
                        if (sle32(skip_threads_43583, local_tid_43565 -
                                  squot32(local_tid_43565, 32) * 32) &&
                            (squot32(local_tid_43565, 32) == 0 &&
                             ltid_in_bounds_43580)) {
                            // read operands
                            {
                                x_43577 = ((volatile __local
                                            int64_t *) scan_arr_mem_43569)[sext_i32_i64(local_tid_43565) -
                                                                           sext_i32_i64(skip_threads_43583)];
                            }
                            // perform operation
                            {
                                bool inactive_43584 =
                                     slt64(srem64(sext_i32_i64(local_tid_43565 *
                                                  32 + 32 - 1) +
                                                  chunk_offset_43572, N_28874),
                                           sext_i32_i64(local_tid_43565 * 32 +
                                           32 - 1) + chunk_offset_43572 -
                                           (sext_i32_i64((local_tid_43565 -
                                                          skip_threads_43583) *
                                            32 + 32 - 1) + chunk_offset_43572));
                                
                                if (inactive_43584) {
                                    x_43577 = x_43578;
                                }
                                if (!inactive_43584) {
                                    int64_t defunc_1_op_res_43579 =
                                            add64(x_43577, x_43578);
                                    
                                    x_43577 = defunc_1_op_res_43579;
                                }
                            }
                        }
                        if (sle32(wave_sizze_43567, skip_threads_43583)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_43583, local_tid_43565 -
                                  squot32(local_tid_43565, 32) * 32) &&
                            (squot32(local_tid_43565, 32) == 0 &&
                             ltid_in_bounds_43580)) {
                            // write result
                            {
                                ((volatile __local
                                  int64_t *) scan_arr_mem_43569)[sext_i32_i64(local_tid_43565)] =
                                    x_43577;
                                x_43578 = x_43577;
                            }
                        }
                        if (sle32(wave_sizze_43567, skip_threads_43583)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_43583 *= 2;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // carry-in for every block except the first
            {
                if (!(squot32(local_tid_43565, 32) == 0 ||
                      !ltid_in_bounds_43580)) {
                    // read operands
                    {
                        x_43575 = x_43574;
                        x_43574 = ((__local
                                    int64_t *) scan_arr_mem_43569)[sext_i32_i64(squot32(local_tid_43565,
                                                                                        32)) -
                                                                   (int64_t) 1];
                    }
                    // perform operation
                    {
                        bool inactive_43585 =
                             slt64(srem64(sext_i32_i64(local_tid_43565) +
                                          chunk_offset_43572, N_28874),
                                   sext_i32_i64(local_tid_43565) +
                                   chunk_offset_43572 -
                                   (sext_i32_i64(squot32(local_tid_43565, 32) *
                                    32 - 1) + chunk_offset_43572));
                        
                        if (inactive_43585) {
                            x_43574 = x_43575;
                        }
                        if (!inactive_43585) {
                            int64_t defunc_1_op_res_43576 = add64(x_43574,
                                                                  x_43575);
                            
                            x_43574 = defunc_1_op_res_43576;
                        }
                    }
                    // write final result
                    {
                        ((__local
                          int64_t *) scan_arr_mem_43569)[sext_i32_i64(local_tid_43565)] =
                            x_43574;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // restore correct values for first block
            {
                if (squot32(local_tid_43565, 32) == 0) {
                    ((__local
                      int64_t *) scan_arr_mem_43569)[sext_i32_i64(local_tid_43565)] =
                        x_43575;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // threads in bounds write partial scan result
            {
                if (slt64(gtid_35332, m_28875) && slt64(gtid_35340, N_28874)) {
                    ((__global int64_t *) mem_42247)[gtid_35332 * N_28874 +
                                                     gtid_35340] = ((__local
                                                                     int64_t *) scan_arr_mem_43569)[sext_i32_i64(local_tid_43565)];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread reads last element as carry-in for next iteration
            {
                bool crosses_segment_43586 = slt64(srem64(chunk_offset_43572 +
                                                          segscan_group_sizze_35358,
                                                          N_28874),
                                                   chunk_offset_43572 +
                                                   segscan_group_sizze_35358 -
                                                   (chunk_offset_43572 +
                                                    segscan_group_sizze_35358 -
                                                    (int64_t) 1));
                bool should_load_carry_43587 = local_tid_43565 == 0 &&
                     !crosses_segment_43586;
                
                if (should_load_carry_43587) {
                    x_35363 = ((__local
                                int64_t *) scan_arr_mem_43569)[segscan_group_sizze_35358 -
                                                               (int64_t) 1];
                }
                if (!should_load_carry_43587) {
                    x_35363 = (int64_t) 0;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
  error_1:
    return;
    #undef segscan_group_sizze_35358
}
__kernel void mainMagnitudeziscan_stage1_36395(__global int *global_failure,
                                               int failure_is_an_option,
                                               __global
                                               int64_t *global_failure_args,
                                               __local volatile
                                               int64_t *scan_arr_mem_44020_backing_aligned_0,
                                               int64_t N_28874, int64_t m_28875,
                                               int64_t iota32_arg_29304,
                                               int32_t num_threads_44014,
                                               __global
                                               unsigned char *defunc_4_map_res_mem_42266,
                                               __global
                                               unsigned char *defunc_3_map_res_mem_42344,
                                               __global
                                               unsigned char *defunc_3_map_res_mem_42345,
                                               __global
                                               unsigned char *defunc_0_f_res_mem_42383,
                                               __global
                                               unsigned char *mem_42455,
                                               __global
                                               unsigned char *mem_42460)
{
    #define segscan_group_sizze_36481 (mainMagnitudezisegscan_group_sizze_36389)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_44020_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_44020_backing_aligned_0;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_44015;
    int32_t local_tid_44016;
    int64_t group_sizze_44019;
    int32_t wave_sizze_44018;
    int32_t group_tid_44017;
    
    global_tid_44015 = get_global_id(0);
    local_tid_44016 = get_local_id(0);
    group_sizze_44019 = get_local_size(0);
    wave_sizze_44018 = LOCKSTEP_WIDTH;
    group_tid_44017 = get_group_id(0);
    
    int32_t phys_tid_36395 = global_tid_44015;
    __local char *scan_arr_mem_44020;
    
    scan_arr_mem_44020 = (__local char *) scan_arr_mem_44020_backing_0;
    
    float x_36485;
    float x_36486;
    
    x_36485 = 0.0F;
    for (int64_t j_44022 = 0; j_44022 < sdiv_up64(m_28875 * iota32_arg_29304,
                                                  sext_i32_i64(num_threads_44014));
         j_44022++) {
        int64_t chunk_offset_44023 = segscan_group_sizze_36481 * j_44022 +
                sext_i32_i64(group_tid_44017) * (segscan_group_sizze_36481 *
                                                 sdiv_up64(m_28875 *
                                                           iota32_arg_29304,
                                                           sext_i32_i64(num_threads_44014)));
        int64_t flat_idx_44024 = chunk_offset_44023 +
                sext_i32_i64(local_tid_44016);
        int64_t gtid_36386 = squot64(flat_idx_44024, iota32_arg_29304);
        int64_t gtid_36394 = flat_idx_44024 - squot64(flat_idx_44024,
                                                      iota32_arg_29304) *
                iota32_arg_29304;
        
        // threads in bounds read input
        {
            if (slt64(gtid_36386, m_28875) && slt64(gtid_36394,
                                                    iota32_arg_29304)) {
                int32_t y_36492 = ((__global int32_t *) mem_42455)[gtid_36386];
                int32_t index_primexp_39457 = sext_i64_i32(gtid_36394);
                bool cond_36495 = sle32(y_36492, index_primexp_39457);
                float defunc_0_f_res_36496;
                
                if (cond_36495) {
                    defunc_0_f_res_36496 = 0.0F;
                } else {
                    bool cond_36497 = index_primexp_39457 == 0;
                    float defunc_0_f_res_f_res_36498;
                    
                    if (cond_36497) {
                        float x_36490 = ((__global
                                          float *) defunc_0_f_res_mem_42383)[gtid_36386];
                        
                        defunc_0_f_res_f_res_36498 = x_36490;
                    } else {
                        int32_t x_36488 = ((__global
                                            int32_t *) defunc_3_map_res_mem_42345)[gtid_36386];
                        int32_t x_36489 = ((__global
                                            int32_t *) defunc_3_map_res_mem_42344)[gtid_36386];
                        int32_t i_36499 = add32(x_36488, index_primexp_39457);
                        int64_t i_36500 = sext_i32_i64(i_36499);
                        bool x_36501 = sle64((int64_t) 0, i_36500);
                        bool y_36502 = slt64(i_36500, N_28874);
                        bool bounds_check_36503 = x_36501 && y_36502;
                        bool index_certs_36504;
                        
                        if (!bounds_check_36503) {
                            {
                                if (atomic_cmpxchg_i32_global(global_failure,
                                                              -1, 118) == -1) {
                                    global_failure_args[0] = i_36500;
                                    global_failure_args[1] = N_28874;
                                    ;
                                }
                                local_failure = true;
                                goto error_0;
                            }
                        }
                        
                        float x_36505 = ((__global
                                          float *) defunc_4_map_res_mem_42266)[gtid_36386 *
                                                                               N_28874 +
                                                                               i_36500];
                        int32_t x_36506 = sub32(x_36488, x_36489);
                        int32_t i_36507 = add32(x_36506, index_primexp_39457);
                        int64_t i_36508 = sext_i32_i64(i_36507);
                        bool x_36509 = sle64((int64_t) 0, i_36508);
                        bool y_36510 = slt64(i_36508, N_28874);
                        bool bounds_check_36511 = x_36509 && y_36510;
                        bool index_certs_36512;
                        
                        if (!bounds_check_36511) {
                            {
                                if (atomic_cmpxchg_i32_global(global_failure,
                                                              -1, 119) == -1) {
                                    global_failure_args[0] = i_36508;
                                    global_failure_args[1] = N_28874;
                                    ;
                                }
                                local_failure = true;
                                goto error_0;
                            }
                        }
                        
                        float y_36513 = ((__global
                                          float *) defunc_4_map_res_mem_42266)[gtid_36386 *
                                                                               N_28874 +
                                                                               i_36508];
                        float defunc_0_f_res_f_res_f_res_36514 = x_36505 -
                              y_36513;
                        
                        defunc_0_f_res_f_res_36498 =
                            defunc_0_f_res_f_res_f_res_36514;
                    }
                    defunc_0_f_res_36496 = defunc_0_f_res_f_res_36498;
                }
                // write to-scan values to parameters
                {
                    x_36486 = defunc_0_f_res_36496;
                }
                // write mapped values results to global memory
                { }
            }
        }
        // do one intra-group scan operation
        {
            // maybe restore some to-scan values to parameters, or read neutral
            {
                if (!(slt64(gtid_36386, m_28875) && slt64(gtid_36394,
                                                          iota32_arg_29304))) {
                    x_36486 = 0.0F;
                }
            }
            // combine with carry and write to local memory
            {
                float defunc_1_op_res_36487 = x_36485 + x_36486;
                
                ((__local
                  float *) scan_arr_mem_44020)[sext_i32_i64(local_tid_44016)] =
                    defunc_1_op_res_36487;
            }
            
          error_0:
            barrier(CLK_LOCAL_MEM_FENCE);
            if (local_failure)
                return;
            barrier(CLK_LOCAL_MEM_FENCE);
            
            float x_44025;
            float x_44026;
            float x_44028;
            float x_44029;
            bool ltid_in_bounds_44031 = slt64(sext_i32_i64(local_tid_44016),
                                              segscan_group_sizze_36481);
            int32_t skip_threads_44032;
            
            // read input for in-block scan
            {
                if (ltid_in_bounds_44031) {
                    x_44026 = ((volatile __local
                                float *) scan_arr_mem_44020)[sext_i32_i64(local_tid_44016)];
                    if ((local_tid_44016 - squot32(local_tid_44016, 32) * 32) ==
                        0) {
                        x_44025 = x_44026;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_44032 = 1;
                while (slt32(skip_threads_44032, 32)) {
                    if (sle32(skip_threads_44032, local_tid_44016 -
                              squot32(local_tid_44016, 32) * 32) &&
                        ltid_in_bounds_44031) {
                        // read operands
                        {
                            x_44025 = ((volatile __local
                                        float *) scan_arr_mem_44020)[sext_i32_i64(local_tid_44016) -
                                                                     sext_i32_i64(skip_threads_44032)];
                        }
                        // perform operation
                        {
                            bool inactive_44033 =
                                 slt64(srem64(sext_i32_i64(local_tid_44016) +
                                              chunk_offset_44023,
                                              iota32_arg_29304),
                                       sext_i32_i64(local_tid_44016) +
                                       chunk_offset_44023 -
                                       (sext_i32_i64(local_tid_44016 -
                                        skip_threads_44032) +
                                        chunk_offset_44023));
                            
                            if (inactive_44033) {
                                x_44025 = x_44026;
                            }
                            if (!inactive_44033) {
                                float defunc_1_op_res_44027 = x_44025 + x_44026;
                                
                                x_44025 = defunc_1_op_res_44027;
                            }
                        }
                    }
                    if (sle32(wave_sizze_44018, skip_threads_44032)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_44032, local_tid_44016 -
                              squot32(local_tid_44016, 32) * 32) &&
                        ltid_in_bounds_44031) {
                        // write result
                        {
                            ((volatile __local
                              float *) scan_arr_mem_44020)[sext_i32_i64(local_tid_44016)] =
                                x_44025;
                            x_44026 = x_44025;
                        }
                    }
                    if (sle32(wave_sizze_44018, skip_threads_44032)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_44032 *= 2;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // last thread of block 'i' writes its result to offset 'i'
            {
                if ((local_tid_44016 - squot32(local_tid_44016, 32) * 32) ==
                    31 && ltid_in_bounds_44031) {
                    ((volatile __local
                      float *) scan_arr_mem_44020)[sext_i32_i64(squot32(local_tid_44016,
                                                                        32))] =
                        x_44025;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
            {
                int32_t skip_threads_44034;
                
                // read input for in-block scan
                {
                    if (squot32(local_tid_44016, 32) == 0 &&
                        ltid_in_bounds_44031) {
                        x_44029 = ((volatile __local
                                    float *) scan_arr_mem_44020)[sext_i32_i64(local_tid_44016)];
                        if ((local_tid_44016 - squot32(local_tid_44016, 32) *
                             32) == 0) {
                            x_44028 = x_44029;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_44034 = 1;
                    while (slt32(skip_threads_44034, 32)) {
                        if (sle32(skip_threads_44034, local_tid_44016 -
                                  squot32(local_tid_44016, 32) * 32) &&
                            (squot32(local_tid_44016, 32) == 0 &&
                             ltid_in_bounds_44031)) {
                            // read operands
                            {
                                x_44028 = ((volatile __local
                                            float *) scan_arr_mem_44020)[sext_i32_i64(local_tid_44016) -
                                                                         sext_i32_i64(skip_threads_44034)];
                            }
                            // perform operation
                            {
                                bool inactive_44035 =
                                     slt64(srem64(sext_i32_i64(local_tid_44016 *
                                                  32 + 32 - 1) +
                                                  chunk_offset_44023,
                                                  iota32_arg_29304),
                                           sext_i32_i64(local_tid_44016 * 32 +
                                           32 - 1) + chunk_offset_44023 -
                                           (sext_i32_i64((local_tid_44016 -
                                                          skip_threads_44034) *
                                            32 + 32 - 1) + chunk_offset_44023));
                                
                                if (inactive_44035) {
                                    x_44028 = x_44029;
                                }
                                if (!inactive_44035) {
                                    float defunc_1_op_res_44030 = x_44028 +
                                          x_44029;
                                    
                                    x_44028 = defunc_1_op_res_44030;
                                }
                            }
                        }
                        if (sle32(wave_sizze_44018, skip_threads_44034)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_44034, local_tid_44016 -
                                  squot32(local_tid_44016, 32) * 32) &&
                            (squot32(local_tid_44016, 32) == 0 &&
                             ltid_in_bounds_44031)) {
                            // write result
                            {
                                ((volatile __local
                                  float *) scan_arr_mem_44020)[sext_i32_i64(local_tid_44016)] =
                                    x_44028;
                                x_44029 = x_44028;
                            }
                        }
                        if (sle32(wave_sizze_44018, skip_threads_44034)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_44034 *= 2;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // carry-in for every block except the first
            {
                if (!(squot32(local_tid_44016, 32) == 0 ||
                      !ltid_in_bounds_44031)) {
                    // read operands
                    {
                        x_44026 = x_44025;
                        x_44025 = ((__local
                                    float *) scan_arr_mem_44020)[sext_i32_i64(squot32(local_tid_44016,
                                                                                      32)) -
                                                                 (int64_t) 1];
                    }
                    // perform operation
                    {
                        bool inactive_44036 =
                             slt64(srem64(sext_i32_i64(local_tid_44016) +
                                          chunk_offset_44023, iota32_arg_29304),
                                   sext_i32_i64(local_tid_44016) +
                                   chunk_offset_44023 -
                                   (sext_i32_i64(squot32(local_tid_44016, 32) *
                                    32 - 1) + chunk_offset_44023));
                        
                        if (inactive_44036) {
                            x_44025 = x_44026;
                        }
                        if (!inactive_44036) {
                            float defunc_1_op_res_44027 = x_44025 + x_44026;
                            
                            x_44025 = defunc_1_op_res_44027;
                        }
                    }
                    // write final result
                    {
                        ((__local
                          float *) scan_arr_mem_44020)[sext_i32_i64(local_tid_44016)] =
                            x_44025;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // restore correct values for first block
            {
                if (squot32(local_tid_44016, 32) == 0) {
                    ((__local
                      float *) scan_arr_mem_44020)[sext_i32_i64(local_tid_44016)] =
                        x_44026;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // threads in bounds write partial scan result
            {
                if (slt64(gtid_36386, m_28875) && slt64(gtid_36394,
                                                        iota32_arg_29304)) {
                    ((__global float *) mem_42460)[gtid_36386 *
                                                   iota32_arg_29304 +
                                                   gtid_36394] = ((__local
                                                                   float *) scan_arr_mem_44020)[sext_i32_i64(local_tid_44016)];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread reads last element as carry-in for next iteration
            {
                bool crosses_segment_44037 = slt64(srem64(chunk_offset_44023 +
                                                          segscan_group_sizze_36481,
                                                          iota32_arg_29304),
                                                   chunk_offset_44023 +
                                                   segscan_group_sizze_36481 -
                                                   (chunk_offset_44023 +
                                                    segscan_group_sizze_36481 -
                                                    (int64_t) 1));
                bool should_load_carry_44038 = local_tid_44016 == 0 &&
                     !crosses_segment_44037;
                
                if (should_load_carry_44038) {
                    x_36485 = ((__local
                                float *) scan_arr_mem_44020)[segscan_group_sizze_36481 -
                                                             (int64_t) 1];
                }
                if (!should_load_carry_44038) {
                    x_36485 = 0.0F;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
  error_1:
    return;
    #undef segscan_group_sizze_36481
}
__kernel void mainMagnitudeziscan_stage2_35341(__global int *global_failure,
                                               __local volatile
                                               int64_t *scan_arr_mem_43593_backing_aligned_0,
                                               int64_t N_28874, int64_t m_28875,
                                               int64_t stage1_num_groups_43562,
                                               int32_t num_threads_43563,
                                               __global
                                               unsigned char *mem_42247)
{
    #define segscan_group_sizze_35358 (mainMagnitudezisegscan_group_sizze_35335)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_43593_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_43593_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43588;
    int32_t local_tid_43589;
    int64_t group_sizze_43592;
    int32_t wave_sizze_43591;
    int32_t group_tid_43590;
    
    global_tid_43588 = get_global_id(0);
    local_tid_43589 = get_local_id(0);
    group_sizze_43592 = get_local_size(0);
    wave_sizze_43591 = LOCKSTEP_WIDTH;
    group_tid_43590 = get_group_id(0);
    
    int32_t phys_tid_35341 = global_tid_43588;
    __local char *scan_arr_mem_43593;
    
    scan_arr_mem_43593 = (__local char *) scan_arr_mem_43593_backing_0;
    
    int64_t flat_idx_43595 = (sext_i32_i64(local_tid_43589) + (int64_t) 1) *
            (segscan_group_sizze_35358 * sdiv_up64(m_28875 * N_28874,
                                                   sext_i32_i64(num_threads_43563))) -
            (int64_t) 1;
    int64_t gtid_35332 = squot64(flat_idx_43595, N_28874);
    int64_t gtid_35340 = flat_idx_43595 - squot64(flat_idx_43595, N_28874) *
            N_28874;
    
    // threads in bound read carries; others get neutral element
    {
        if (slt64(gtid_35332, m_28875) && slt64(gtid_35340, N_28874)) {
            ((__local
              int64_t *) scan_arr_mem_43593)[sext_i32_i64(local_tid_43589)] =
                ((__global int64_t *) mem_42247)[gtid_35332 * N_28874 +
                                                 gtid_35340];
        } else {
            ((__local
              int64_t *) scan_arr_mem_43593)[sext_i32_i64(local_tid_43589)] =
                (int64_t) 0;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t x_35363;
    int64_t x_35364;
    int64_t x_43596;
    int64_t x_43597;
    bool ltid_in_bounds_43599 = slt64(sext_i32_i64(local_tid_43589),
                                      stage1_num_groups_43562);
    int32_t skip_threads_43600;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_43599) {
            x_35364 = ((volatile __local
                        int64_t *) scan_arr_mem_43593)[sext_i32_i64(local_tid_43589)];
            if ((local_tid_43589 - squot32(local_tid_43589, 32) * 32) == 0) {
                x_35363 = x_35364;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_43600 = 1;
        while (slt32(skip_threads_43600, 32)) {
            if (sle32(skip_threads_43600, local_tid_43589 -
                      squot32(local_tid_43589, 32) * 32) &&
                ltid_in_bounds_43599) {
                // read operands
                {
                    x_35363 = ((volatile __local
                                int64_t *) scan_arr_mem_43593)[sext_i32_i64(local_tid_43589) -
                                                               sext_i32_i64(skip_threads_43600)];
                }
                // perform operation
                {
                    bool inactive_43601 =
                         slt64(srem64((sext_i32_i64(local_tid_43589) +
                                       (int64_t) 1) *
                                      (segscan_group_sizze_35358 *
                                       sdiv_up64(m_28875 * N_28874,
                                                 sext_i32_i64(num_threads_43563))) -
                                      (int64_t) 1, N_28874),
                               (sext_i32_i64(local_tid_43589) + (int64_t) 1) *
                               (segscan_group_sizze_35358 * sdiv_up64(m_28875 *
                                                                      N_28874,
                                                                      sext_i32_i64(num_threads_43563))) -
                               (int64_t) 1 - ((sext_i32_i64(local_tid_43589 -
                                               skip_threads_43600) +
                                               (int64_t) 1) *
                                              (segscan_group_sizze_35358 *
                                               sdiv_up64(m_28875 * N_28874,
                                                         sext_i32_i64(num_threads_43563))) -
                                              (int64_t) 1));
                    
                    if (inactive_43601) {
                        x_35363 = x_35364;
                    }
                    if (!inactive_43601) {
                        int64_t defunc_1_op_res_35365 = add64(x_35363, x_35364);
                        
                        x_35363 = defunc_1_op_res_35365;
                    }
                }
            }
            if (sle32(wave_sizze_43591, skip_threads_43600)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_43600, local_tid_43589 -
                      squot32(local_tid_43589, 32) * 32) &&
                ltid_in_bounds_43599) {
                // write result
                {
                    ((volatile __local
                      int64_t *) scan_arr_mem_43593)[sext_i32_i64(local_tid_43589)] =
                        x_35363;
                    x_35364 = x_35363;
                }
            }
            if (sle32(wave_sizze_43591, skip_threads_43600)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_43600 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_43589 - squot32(local_tid_43589, 32) * 32) == 31 &&
            ltid_in_bounds_43599) {
            ((volatile __local
              int64_t *) scan_arr_mem_43593)[sext_i32_i64(squot32(local_tid_43589,
                                                                  32))] =
                x_35363;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_43602;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_43589, 32) == 0 && ltid_in_bounds_43599) {
                x_43597 = ((volatile __local
                            int64_t *) scan_arr_mem_43593)[sext_i32_i64(local_tid_43589)];
                if ((local_tid_43589 - squot32(local_tid_43589, 32) * 32) ==
                    0) {
                    x_43596 = x_43597;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_43602 = 1;
            while (slt32(skip_threads_43602, 32)) {
                if (sle32(skip_threads_43602, local_tid_43589 -
                          squot32(local_tid_43589, 32) * 32) &&
                    (squot32(local_tid_43589, 32) == 0 &&
                     ltid_in_bounds_43599)) {
                    // read operands
                    {
                        x_43596 = ((volatile __local
                                    int64_t *) scan_arr_mem_43593)[sext_i32_i64(local_tid_43589) -
                                                                   sext_i32_i64(skip_threads_43602)];
                    }
                    // perform operation
                    {
                        bool inactive_43603 =
                             slt64(srem64((sext_i32_i64(local_tid_43589 * 32 +
                                           32 - 1) + (int64_t) 1) *
                                          (segscan_group_sizze_35358 *
                                           sdiv_up64(m_28875 * N_28874,
                                                     sext_i32_i64(num_threads_43563))) -
                                          (int64_t) 1, N_28874),
                                   (sext_i32_i64(local_tid_43589 * 32 + 32 -
                                    1) + (int64_t) 1) *
                                   (segscan_group_sizze_35358 *
                                    sdiv_up64(m_28875 * N_28874,
                                              sext_i32_i64(num_threads_43563))) -
                                   (int64_t) 1 -
                                   ((sext_i32_i64((local_tid_43589 -
                                                   skip_threads_43602) * 32 +
                                     32 - 1) + (int64_t) 1) *
                                    (segscan_group_sizze_35358 *
                                     sdiv_up64(m_28875 * N_28874,
                                               sext_i32_i64(num_threads_43563))) -
                                    (int64_t) 1));
                        
                        if (inactive_43603) {
                            x_43596 = x_43597;
                        }
                        if (!inactive_43603) {
                            int64_t defunc_1_op_res_43598 = add64(x_43596,
                                                                  x_43597);
                            
                            x_43596 = defunc_1_op_res_43598;
                        }
                    }
                }
                if (sle32(wave_sizze_43591, skip_threads_43602)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_43602, local_tid_43589 -
                          squot32(local_tid_43589, 32) * 32) &&
                    (squot32(local_tid_43589, 32) == 0 &&
                     ltid_in_bounds_43599)) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) scan_arr_mem_43593)[sext_i32_i64(local_tid_43589)] =
                            x_43596;
                        x_43597 = x_43596;
                    }
                }
                if (sle32(wave_sizze_43591, skip_threads_43602)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_43602 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_43589, 32) == 0 || !ltid_in_bounds_43599)) {
            // read operands
            {
                x_35364 = x_35363;
                x_35363 = ((__local
                            int64_t *) scan_arr_mem_43593)[sext_i32_i64(squot32(local_tid_43589,
                                                                                32)) -
                                                           (int64_t) 1];
            }
            // perform operation
            {
                bool inactive_43604 =
                     slt64(srem64((sext_i32_i64(local_tid_43589) +
                                   (int64_t) 1) * (segscan_group_sizze_35358 *
                                                   sdiv_up64(m_28875 * N_28874,
                                                             sext_i32_i64(num_threads_43563))) -
                                  (int64_t) 1, N_28874),
                           (sext_i32_i64(local_tid_43589) + (int64_t) 1) *
                           (segscan_group_sizze_35358 * sdiv_up64(m_28875 *
                                                                  N_28874,
                                                                  sext_i32_i64(num_threads_43563))) -
                           (int64_t) 1 - ((sext_i32_i64(squot32(local_tid_43589,
                                                                32) * 32 - 1) +
                                           (int64_t) 1) *
                                          (segscan_group_sizze_35358 *
                                           sdiv_up64(m_28875 * N_28874,
                                                     sext_i32_i64(num_threads_43563))) -
                                          (int64_t) 1));
                
                if (inactive_43604) {
                    x_35363 = x_35364;
                }
                if (!inactive_43604) {
                    int64_t defunc_1_op_res_35365 = add64(x_35363, x_35364);
                    
                    x_35363 = defunc_1_op_res_35365;
                }
            }
            // write final result
            {
                ((__local
                  int64_t *) scan_arr_mem_43593)[sext_i32_i64(local_tid_43589)] =
                    x_35363;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_43589, 32) == 0) {
            ((__local
              int64_t *) scan_arr_mem_43593)[sext_i32_i64(local_tid_43589)] =
                x_35364;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // threads in bounds write scanned carries
    {
        if (slt64(gtid_35332, m_28875) && slt64(gtid_35340, N_28874)) {
            ((__global int64_t *) mem_42247)[gtid_35332 * N_28874 +
                                             gtid_35340] = ((__local
                                                             int64_t *) scan_arr_mem_43593)[sext_i32_i64(local_tid_43589)];
        }
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_35358
}
__kernel void mainMagnitudeziscan_stage2_36395(__global int *global_failure,
                                               __local volatile
                                               int64_t *scan_arr_mem_44044_backing_aligned_0,
                                               int64_t m_28875,
                                               int64_t iota32_arg_29304,
                                               int64_t stage1_num_groups_44013,
                                               int32_t num_threads_44014,
                                               __global
                                               unsigned char *mem_42460)
{
    #define segscan_group_sizze_36481 (mainMagnitudezisegscan_group_sizze_36389)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_44044_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_44044_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_44039;
    int32_t local_tid_44040;
    int64_t group_sizze_44043;
    int32_t wave_sizze_44042;
    int32_t group_tid_44041;
    
    global_tid_44039 = get_global_id(0);
    local_tid_44040 = get_local_id(0);
    group_sizze_44043 = get_local_size(0);
    wave_sizze_44042 = LOCKSTEP_WIDTH;
    group_tid_44041 = get_group_id(0);
    
    int32_t phys_tid_36395 = global_tid_44039;
    __local char *scan_arr_mem_44044;
    
    scan_arr_mem_44044 = (__local char *) scan_arr_mem_44044_backing_0;
    
    int64_t flat_idx_44046 = (sext_i32_i64(local_tid_44040) + (int64_t) 1) *
            (segscan_group_sizze_36481 * sdiv_up64(m_28875 * iota32_arg_29304,
                                                   sext_i32_i64(num_threads_44014))) -
            (int64_t) 1;
    int64_t gtid_36386 = squot64(flat_idx_44046, iota32_arg_29304);
    int64_t gtid_36394 = flat_idx_44046 - squot64(flat_idx_44046,
                                                  iota32_arg_29304) *
            iota32_arg_29304;
    
    // threads in bound read carries; others get neutral element
    {
        if (slt64(gtid_36386, m_28875) && slt64(gtid_36394, iota32_arg_29304)) {
            ((__local
              float *) scan_arr_mem_44044)[sext_i32_i64(local_tid_44040)] =
                ((__global float *) mem_42460)[gtid_36386 * iota32_arg_29304 +
                                               gtid_36394];
        } else {
            ((__local
              float *) scan_arr_mem_44044)[sext_i32_i64(local_tid_44040)] =
                0.0F;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float x_36485;
    float x_36486;
    float x_44047;
    float x_44048;
    bool ltid_in_bounds_44050 = slt64(sext_i32_i64(local_tid_44040),
                                      stage1_num_groups_44013);
    int32_t skip_threads_44051;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_44050) {
            x_36486 = ((volatile __local
                        float *) scan_arr_mem_44044)[sext_i32_i64(local_tid_44040)];
            if ((local_tid_44040 - squot32(local_tid_44040, 32) * 32) == 0) {
                x_36485 = x_36486;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_44051 = 1;
        while (slt32(skip_threads_44051, 32)) {
            if (sle32(skip_threads_44051, local_tid_44040 -
                      squot32(local_tid_44040, 32) * 32) &&
                ltid_in_bounds_44050) {
                // read operands
                {
                    x_36485 = ((volatile __local
                                float *) scan_arr_mem_44044)[sext_i32_i64(local_tid_44040) -
                                                             sext_i32_i64(skip_threads_44051)];
                }
                // perform operation
                {
                    bool inactive_44052 =
                         slt64(srem64((sext_i32_i64(local_tid_44040) +
                                       (int64_t) 1) *
                                      (segscan_group_sizze_36481 *
                                       sdiv_up64(m_28875 * iota32_arg_29304,
                                                 sext_i32_i64(num_threads_44014))) -
                                      (int64_t) 1, iota32_arg_29304),
                               (sext_i32_i64(local_tid_44040) + (int64_t) 1) *
                               (segscan_group_sizze_36481 * sdiv_up64(m_28875 *
                                                                      iota32_arg_29304,
                                                                      sext_i32_i64(num_threads_44014))) -
                               (int64_t) 1 - ((sext_i32_i64(local_tid_44040 -
                                               skip_threads_44051) +
                                               (int64_t) 1) *
                                              (segscan_group_sizze_36481 *
                                               sdiv_up64(m_28875 *
                                                         iota32_arg_29304,
                                                         sext_i32_i64(num_threads_44014))) -
                                              (int64_t) 1));
                    
                    if (inactive_44052) {
                        x_36485 = x_36486;
                    }
                    if (!inactive_44052) {
                        float defunc_1_op_res_36487 = x_36485 + x_36486;
                        
                        x_36485 = defunc_1_op_res_36487;
                    }
                }
            }
            if (sle32(wave_sizze_44042, skip_threads_44051)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_44051, local_tid_44040 -
                      squot32(local_tid_44040, 32) * 32) &&
                ltid_in_bounds_44050) {
                // write result
                {
                    ((volatile __local
                      float *) scan_arr_mem_44044)[sext_i32_i64(local_tid_44040)] =
                        x_36485;
                    x_36486 = x_36485;
                }
            }
            if (sle32(wave_sizze_44042, skip_threads_44051)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_44051 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_44040 - squot32(local_tid_44040, 32) * 32) == 31 &&
            ltid_in_bounds_44050) {
            ((volatile __local
              float *) scan_arr_mem_44044)[sext_i32_i64(squot32(local_tid_44040,
                                                                32))] = x_36485;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_44053;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_44040, 32) == 0 && ltid_in_bounds_44050) {
                x_44048 = ((volatile __local
                            float *) scan_arr_mem_44044)[sext_i32_i64(local_tid_44040)];
                if ((local_tid_44040 - squot32(local_tid_44040, 32) * 32) ==
                    0) {
                    x_44047 = x_44048;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_44053 = 1;
            while (slt32(skip_threads_44053, 32)) {
                if (sle32(skip_threads_44053, local_tid_44040 -
                          squot32(local_tid_44040, 32) * 32) &&
                    (squot32(local_tid_44040, 32) == 0 &&
                     ltid_in_bounds_44050)) {
                    // read operands
                    {
                        x_44047 = ((volatile __local
                                    float *) scan_arr_mem_44044)[sext_i32_i64(local_tid_44040) -
                                                                 sext_i32_i64(skip_threads_44053)];
                    }
                    // perform operation
                    {
                        bool inactive_44054 =
                             slt64(srem64((sext_i32_i64(local_tid_44040 * 32 +
                                           32 - 1) + (int64_t) 1) *
                                          (segscan_group_sizze_36481 *
                                           sdiv_up64(m_28875 * iota32_arg_29304,
                                                     sext_i32_i64(num_threads_44014))) -
                                          (int64_t) 1, iota32_arg_29304),
                                   (sext_i32_i64(local_tid_44040 * 32 + 32 -
                                    1) + (int64_t) 1) *
                                   (segscan_group_sizze_36481 *
                                    sdiv_up64(m_28875 * iota32_arg_29304,
                                              sext_i32_i64(num_threads_44014))) -
                                   (int64_t) 1 -
                                   ((sext_i32_i64((local_tid_44040 -
                                                   skip_threads_44053) * 32 +
                                     32 - 1) + (int64_t) 1) *
                                    (segscan_group_sizze_36481 *
                                     sdiv_up64(m_28875 * iota32_arg_29304,
                                               sext_i32_i64(num_threads_44014))) -
                                    (int64_t) 1));
                        
                        if (inactive_44054) {
                            x_44047 = x_44048;
                        }
                        if (!inactive_44054) {
                            float defunc_1_op_res_44049 = x_44047 + x_44048;
                            
                            x_44047 = defunc_1_op_res_44049;
                        }
                    }
                }
                if (sle32(wave_sizze_44042, skip_threads_44053)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_44053, local_tid_44040 -
                          squot32(local_tid_44040, 32) * 32) &&
                    (squot32(local_tid_44040, 32) == 0 &&
                     ltid_in_bounds_44050)) {
                    // write result
                    {
                        ((volatile __local
                          float *) scan_arr_mem_44044)[sext_i32_i64(local_tid_44040)] =
                            x_44047;
                        x_44048 = x_44047;
                    }
                }
                if (sle32(wave_sizze_44042, skip_threads_44053)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_44053 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_44040, 32) == 0 || !ltid_in_bounds_44050)) {
            // read operands
            {
                x_36486 = x_36485;
                x_36485 = ((__local
                            float *) scan_arr_mem_44044)[sext_i32_i64(squot32(local_tid_44040,
                                                                              32)) -
                                                         (int64_t) 1];
            }
            // perform operation
            {
                bool inactive_44055 =
                     slt64(srem64((sext_i32_i64(local_tid_44040) +
                                   (int64_t) 1) * (segscan_group_sizze_36481 *
                                                   sdiv_up64(m_28875 *
                                                             iota32_arg_29304,
                                                             sext_i32_i64(num_threads_44014))) -
                                  (int64_t) 1, iota32_arg_29304),
                           (sext_i32_i64(local_tid_44040) + (int64_t) 1) *
                           (segscan_group_sizze_36481 * sdiv_up64(m_28875 *
                                                                  iota32_arg_29304,
                                                                  sext_i32_i64(num_threads_44014))) -
                           (int64_t) 1 - ((sext_i32_i64(squot32(local_tid_44040,
                                                                32) * 32 - 1) +
                                           (int64_t) 1) *
                                          (segscan_group_sizze_36481 *
                                           sdiv_up64(m_28875 * iota32_arg_29304,
                                                     sext_i32_i64(num_threads_44014))) -
                                          (int64_t) 1));
                
                if (inactive_44055) {
                    x_36485 = x_36486;
                }
                if (!inactive_44055) {
                    float defunc_1_op_res_36487 = x_36485 + x_36486;
                    
                    x_36485 = defunc_1_op_res_36487;
                }
            }
            // write final result
            {
                ((__local
                  float *) scan_arr_mem_44044)[sext_i32_i64(local_tid_44040)] =
                    x_36485;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_44040, 32) == 0) {
            ((__local
              float *) scan_arr_mem_44044)[sext_i32_i64(local_tid_44040)] =
                x_36486;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // threads in bounds write scanned carries
    {
        if (slt64(gtid_36386, m_28875) && slt64(gtid_36394, iota32_arg_29304)) {
            ((__global float *) mem_42460)[gtid_36386 * iota32_arg_29304 +
                                           gtid_36394] = ((__local
                                                           float *) scan_arr_mem_44044)[sext_i32_i64(local_tid_44040)];
        }
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_36481
}
__kernel void mainMagnitudeziscan_stage3_35341(__global int *global_failure,
                                               int64_t N_28874, int64_t m_28875,
                                               int64_t num_groups_35359,
                                               int32_t num_threads_43563,
                                               int32_t required_groups_43605,
                                               __global
                                               unsigned char *mem_42247)
{
    #define segscan_group_sizze_35358 (mainMagnitudezisegscan_group_sizze_35335)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43606;
    int32_t local_tid_43607;
    int64_t group_sizze_43610;
    int32_t wave_sizze_43609;
    int32_t group_tid_43608;
    
    global_tid_43606 = get_global_id(0);
    local_tid_43607 = get_local_id(0);
    group_sizze_43610 = get_local_size(0);
    wave_sizze_43609 = LOCKSTEP_WIDTH;
    group_tid_43608 = get_group_id(0);
    
    int32_t phys_tid_35341 = global_tid_43606;
    int32_t phys_group_id_43611;
    
    phys_group_id_43611 = get_group_id(0);
    for (int32_t i_43612 = 0; i_43612 < sdiv_up32(required_groups_43605 -
                                                  phys_group_id_43611,
                                                  sext_i64_i32(num_groups_35359));
         i_43612++) {
        int32_t virt_group_id_43613 = phys_group_id_43611 + i_43612 *
                sext_i64_i32(num_groups_35359);
        int64_t flat_idx_43614 = sext_i32_i64(virt_group_id_43613) *
                segscan_group_sizze_35358 + sext_i32_i64(local_tid_43607);
        int64_t gtid_35332 = squot64(flat_idx_43614, N_28874);
        int64_t gtid_35340 = flat_idx_43614 - squot64(flat_idx_43614, N_28874) *
                N_28874;
        int64_t orig_group_43615 = squot64(flat_idx_43614,
                                           segscan_group_sizze_35358 *
                                           sdiv_up64(m_28875 * N_28874,
                                                     sext_i32_i64(num_threads_43563)));
        int64_t carry_in_flat_idx_43616 = orig_group_43615 *
                (segscan_group_sizze_35358 * sdiv_up64(m_28875 * N_28874,
                                                       sext_i32_i64(num_threads_43563))) -
                (int64_t) 1;
        
        if (slt64(gtid_35332, m_28875) && slt64(gtid_35340, N_28874)) {
            if (!(orig_group_43615 == (int64_t) 0 || (flat_idx_43614 ==
                                                      (orig_group_43615 +
                                                       (int64_t) 1) *
                                                      (segscan_group_sizze_35358 *
                                                       sdiv_up64(m_28875 *
                                                                 N_28874,
                                                                 sext_i32_i64(num_threads_43563))) -
                                                      (int64_t) 1 ||
                                                      slt64(srem64(flat_idx_43614,
                                                                   N_28874),
                                                            flat_idx_43614 -
                                                            carry_in_flat_idx_43616)))) {
                int64_t x_35363;
                int64_t x_35364;
                
                x_35363 = ((__global
                            int64_t *) mem_42247)[squot64(carry_in_flat_idx_43616,
                                                          N_28874) * N_28874 +
                                                  (carry_in_flat_idx_43616 -
                                                   squot64(carry_in_flat_idx_43616,
                                                           N_28874) * N_28874)];
                x_35364 = ((__global int64_t *) mem_42247)[gtid_35332 *
                                                           N_28874 +
                                                           gtid_35340];
                
                int64_t defunc_1_op_res_35365 = add64(x_35363, x_35364);
                
                x_35363 = defunc_1_op_res_35365;
                ((__global int64_t *) mem_42247)[gtid_35332 * N_28874 +
                                                 gtid_35340] = x_35363;
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_35358
}
__kernel void mainMagnitudeziscan_stage3_36395(__global int *global_failure,
                                               int64_t m_28875,
                                               int64_t iota32_arg_29304,
                                               int64_t num_groups_36482,
                                               int32_t num_threads_44014,
                                               int32_t required_groups_44056,
                                               __global
                                               unsigned char *mem_42460)
{
    #define segscan_group_sizze_36481 (mainMagnitudezisegscan_group_sizze_36389)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_44057;
    int32_t local_tid_44058;
    int64_t group_sizze_44061;
    int32_t wave_sizze_44060;
    int32_t group_tid_44059;
    
    global_tid_44057 = get_global_id(0);
    local_tid_44058 = get_local_id(0);
    group_sizze_44061 = get_local_size(0);
    wave_sizze_44060 = LOCKSTEP_WIDTH;
    group_tid_44059 = get_group_id(0);
    
    int32_t phys_tid_36395 = global_tid_44057;
    int32_t phys_group_id_44062;
    
    phys_group_id_44062 = get_group_id(0);
    for (int32_t i_44063 = 0; i_44063 < sdiv_up32(required_groups_44056 -
                                                  phys_group_id_44062,
                                                  sext_i64_i32(num_groups_36482));
         i_44063++) {
        int32_t virt_group_id_44064 = phys_group_id_44062 + i_44063 *
                sext_i64_i32(num_groups_36482);
        int64_t flat_idx_44065 = sext_i32_i64(virt_group_id_44064) *
                segscan_group_sizze_36481 + sext_i32_i64(local_tid_44058);
        int64_t gtid_36386 = squot64(flat_idx_44065, iota32_arg_29304);
        int64_t gtid_36394 = flat_idx_44065 - squot64(flat_idx_44065,
                                                      iota32_arg_29304) *
                iota32_arg_29304;
        int64_t orig_group_44066 = squot64(flat_idx_44065,
                                           segscan_group_sizze_36481 *
                                           sdiv_up64(m_28875 * iota32_arg_29304,
                                                     sext_i32_i64(num_threads_44014)));
        int64_t carry_in_flat_idx_44067 = orig_group_44066 *
                (segscan_group_sizze_36481 * sdiv_up64(m_28875 *
                                                       iota32_arg_29304,
                                                       sext_i32_i64(num_threads_44014))) -
                (int64_t) 1;
        
        if (slt64(gtid_36386, m_28875) && slt64(gtid_36394, iota32_arg_29304)) {
            if (!(orig_group_44066 == (int64_t) 0 || (flat_idx_44065 ==
                                                      (orig_group_44066 +
                                                       (int64_t) 1) *
                                                      (segscan_group_sizze_36481 *
                                                       sdiv_up64(m_28875 *
                                                                 iota32_arg_29304,
                                                                 sext_i32_i64(num_threads_44014))) -
                                                      (int64_t) 1 ||
                                                      slt64(srem64(flat_idx_44065,
                                                                   iota32_arg_29304),
                                                            flat_idx_44065 -
                                                            carry_in_flat_idx_44067)))) {
                float x_36485;
                float x_36486;
                
                x_36485 = ((__global
                            float *) mem_42460)[squot64(carry_in_flat_idx_44067,
                                                        iota32_arg_29304) *
                                                iota32_arg_29304 +
                                                (carry_in_flat_idx_44067 -
                                                 squot64(carry_in_flat_idx_44067,
                                                         iota32_arg_29304) *
                                                 iota32_arg_29304)];
                x_36486 = ((__global float *) mem_42460)[gtid_36386 *
                                                         iota32_arg_29304 +
                                                         gtid_36394];
                
                float defunc_1_op_res_36487 = x_36485 + x_36486;
                
                x_36485 = defunc_1_op_res_36487;
                ((__global float *) mem_42460)[gtid_36386 * iota32_arg_29304 +
                                               gtid_36394] = x_36485;
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_36481
}
__kernel void mainMagnitudezisegmap_33557(__global int *global_failure,
                                          int64_t N_28874, float freq_28879,
                                          int64_t i32_res_28890, __global
                                          unsigned char *mappingindices_mem_41420,
                                          __global unsigned char *mem_41426)
{
    #define segmap_group_sizze_33627 (mainMagnitudezisegmap_group_sizze_33560)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_42877;
    int32_t local_tid_42878;
    int64_t group_sizze_42881;
    int32_t wave_sizze_42880;
    int32_t group_tid_42879;
    
    global_tid_42877 = get_global_id(0);
    local_tid_42878 = get_local_id(0);
    group_sizze_42881 = get_local_size(0);
    wave_sizze_42880 = LOCKSTEP_WIDTH;
    group_tid_42879 = get_group_id(0);
    
    int32_t phys_tid_33557 = global_tid_42877;
    int64_t global_tid_42882 = sext_i32_i64(group_tid_42879) *
            segmap_group_sizze_33627 + sext_i32_i64(local_tid_42878);
    int64_t slice_42883 = N_28874;
    int64_t slice_42884 = i32_res_28890 * slice_42883;
    int64_t gtid_33555 = squot64(global_tid_42882, slice_42883);
    int64_t remnant_42885 = global_tid_42882 - gtid_33555 * slice_42883;
    int64_t gtid_33556 = remnant_42885;
    int64_t remnant_42886 = remnant_42885 - gtid_33556;
    
    if (slt64(gtid_33555, i32_res_28890) && slt64(gtid_33556, N_28874)) {
        int32_t index_primexp_39391 = sext_i64_i32(gtid_33555);
        bool index_primexp_39388 = index_primexp_39391 == 0;
        float defunc_0_f_res_33633;
        
        if (index_primexp_39388) {
            defunc_0_f_res_33633 = 1.0F;
        } else {
            int32_t x_33632 = ((__global
                                int32_t *) mappingindices_mem_41420)[gtid_33556];
            bool cond_33634 = index_primexp_39391 == 1;
            float defunc_0_f_res_f_res_33635;
            
            if (cond_33634) {
                float i32_res_33636 = sitofp_i32_f32(x_33632);
                
                defunc_0_f_res_f_res_33635 = i32_res_33636;
            } else {
                int32_t r32_arg_33637 = sdiv32(index_primexp_39391, 2);
                float i32_res_33638 = sitofp_i32_f32(r32_arg_33637);
                float i32_res_33639 = sitofp_i32_f32(x_33632);
                float x_33640 = 6.2831855F * i32_res_33638;
                float x_33641 = i32_res_33639 * x_33640;
                float angle_33642 = x_33641 / freq_28879;
                int32_t x_33643 = smod32(index_primexp_39391, 2);
                bool cond_33644 = x_33643 == 0;
                float defunc_0_f_res_f_res_f_res_33645;
                
                if (cond_33644) {
                    float sin_res_33646;
                    
                    sin_res_33646 = futrts_sin32(angle_33642);
                    defunc_0_f_res_f_res_f_res_33645 = sin_res_33646;
                } else {
                    float cos_res_33647;
                    
                    cos_res_33647 = futrts_cos32(angle_33642);
                    defunc_0_f_res_f_res_f_res_33645 = cos_res_33647;
                }
                defunc_0_f_res_f_res_33635 = defunc_0_f_res_f_res_f_res_33645;
            }
            defunc_0_f_res_33633 = defunc_0_f_res_f_res_33635;
        }
        ((__global float *) mem_41426)[gtid_33555 * N_28874 + gtid_33556] =
            defunc_0_f_res_33633;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_33627
}
__kernel void mainMagnitudezisegmap_33661(__global int *global_failure,
                                          int64_t N_28874, float freq_28879,
                                          int64_t i32_res_28890, __global
                                          unsigned char *mappingindices_mem_41420,
                                          __global unsigned char *mem_41431)
{
    #define segmap_group_sizze_33727 (mainMagnitudezisegmap_group_sizze_33664)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_42887;
    int32_t local_tid_42888;
    int64_t group_sizze_42891;
    int32_t wave_sizze_42890;
    int32_t group_tid_42889;
    
    global_tid_42887 = get_global_id(0);
    local_tid_42888 = get_local_id(0);
    group_sizze_42891 = get_local_size(0);
    wave_sizze_42890 = LOCKSTEP_WIDTH;
    group_tid_42889 = get_group_id(0);
    
    int32_t phys_tid_33661 = global_tid_42887;
    int64_t global_tid_42892 = sext_i32_i64(group_tid_42889) *
            segmap_group_sizze_33727 + sext_i32_i64(local_tid_42888);
    int64_t slice_42893 = N_28874;
    int64_t slice_42894 = i32_res_28890 * slice_42893;
    int64_t gtid_33659 = squot64(global_tid_42892, slice_42893);
    int64_t remnant_42895 = global_tid_42892 - gtid_33659 * slice_42893;
    int64_t gtid_33660 = remnant_42895;
    int64_t remnant_42896 = remnant_42895 - gtid_33660;
    
    if (slt64(gtid_33659, i32_res_28890) && slt64(gtid_33660, N_28874)) {
        int32_t index_primexp_39400 = sext_i64_i32(gtid_33659);
        bool index_primexp_39397 = index_primexp_39400 == 0;
        float defunc_0_f_res_33733;
        
        if (index_primexp_39397) {
            defunc_0_f_res_33733 = 1.0F;
        } else {
            int32_t x_33732 = ((__global
                                int32_t *) mappingindices_mem_41420)[gtid_33660];
            int32_t i_33734 = add32(1, index_primexp_39400);
            int32_t r32_arg_33735 = sdiv32(i_33734, 2);
            float i32_res_33736 = sitofp_i32_f32(r32_arg_33735);
            float i32_res_33737 = sitofp_i32_f32(x_33732);
            float x_33738 = 6.2831855F * i32_res_33736;
            float x_33739 = i32_res_33737 * x_33738;
            float angle_33740 = x_33739 / freq_28879;
            int32_t x_33741 = smod32(i_33734, 2);
            bool cond_33742 = x_33741 == 0;
            float defunc_0_f_res_f_res_33743;
            
            if (cond_33742) {
                float sin_res_33744;
                
                sin_res_33744 = futrts_sin32(angle_33740);
                defunc_0_f_res_f_res_33743 = sin_res_33744;
            } else {
                float cos_res_33745;
                
                cos_res_33745 = futrts_cos32(angle_33740);
                defunc_0_f_res_f_res_33743 = cos_res_33745;
            }
            defunc_0_f_res_33733 = defunc_0_f_res_f_res_33743;
        }
        ((__global float *) mem_41431)[gtid_33659 * N_28874 + gtid_33660] =
            defunc_0_f_res_33733;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_33727
}
__kernel void mainMagnitudezisegmap_33757(__global int *global_failure,
                                          int64_t N_28874,
                                          int64_t i32_res_28890,
                                          float i32_res_28955, __global
                                          unsigned char *mem_41435, __global
                                          unsigned char *mem_41440)
{
    #define segmap_group_sizze_33778 (mainMagnitudezisegmap_group_sizze_33760)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_42897;
    int32_t local_tid_42898;
    int64_t group_sizze_42901;
    int32_t wave_sizze_42900;
    int32_t group_tid_42899;
    
    global_tid_42897 = get_global_id(0);
    local_tid_42898 = get_local_id(0);
    group_sizze_42901 = get_local_size(0);
    wave_sizze_42900 = LOCKSTEP_WIDTH;
    group_tid_42899 = get_group_id(0);
    
    int32_t phys_tid_33757 = global_tid_42897;
    int64_t global_tid_42902 = sext_i32_i64(group_tid_42899) *
            segmap_group_sizze_33778 + sext_i32_i64(local_tid_42898);
    int64_t slice_42903 = i32_res_28890;
    int64_t slice_42904 = N_28874 * slice_42903;
    int64_t gtid_33755 = squot64(global_tid_42902, slice_42903);
    int64_t remnant_42905 = global_tid_42902 - gtid_33755 * slice_42903;
    int64_t gtid_33756 = remnant_42905;
    int64_t remnant_42906 = remnant_42905 - gtid_33756;
    
    if (slt64(gtid_33755, N_28874) && slt64(gtid_33756, i32_res_28890)) {
        float x_33781 = ((__global float *) mem_41435)[gtid_33755 *
                                                       i32_res_28890 +
                                                       gtid_33756];
        float defunc_0_f_res_33782 = i32_res_28955 + x_33781;
        
        ((__global float *) mem_41440)[gtid_33755 * i32_res_28890 +
                                       gtid_33756] = defunc_0_f_res_33782;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_33778
}
__kernel void mainMagnitudezisegmap_33787(__global int *global_failure,
                                          int64_t N_28874, int64_t m_28875,
                                          int32_t n_28878, int32_t k2p2zq_28888,
                                          int64_t i32_res_28890,
                                          int64_t num_groups_33812,
                                          int64_t num_threads_42780, __global
                                          unsigned char *binop_p_mem_41432,
                                          __global unsigned char *mem_41440,
                                          __global unsigned char *mem_41443,
                                          __global unsigned char *mem_41492,
                                          __global unsigned char *color_42657)
{
    #define segmap_group_sizze_33811 (mainMagnitudezisegmap_group_sizze_33789)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_42910;
    int32_t local_tid_42911;
    int64_t group_sizze_42914;
    int32_t wave_sizze_42913;
    int32_t group_tid_42912;
    
    global_tid_42910 = get_global_id(0);
    local_tid_42911 = get_local_id(0);
    group_sizze_42914 = get_local_size(0);
    wave_sizze_42913 = LOCKSTEP_WIDTH;
    group_tid_42912 = get_group_id(0);
    
    int32_t phys_tid_33787 = global_tid_42910;
    int32_t phys_group_id_42915;
    
    phys_group_id_42915 = get_group_id(0);
    for (int32_t i_42916 = 0; i_42916 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_28875, segmap_group_sizze_33811)) -
                   phys_group_id_42915, sext_i64_i32(num_groups_33812));
         i_42916++) {
        int32_t virt_group_id_42917 = phys_group_id_42915 + i_42916 *
                sext_i64_i32(num_groups_33812);
        int64_t global_tid_42918 = sext_i32_i64(virt_group_id_42917) *
                segmap_group_sizze_33811 + sext_i32_i64(local_tid_42911);
        int64_t slice_42919 = m_28875;
        int64_t gtid_33786 = global_tid_42918;
        int64_t remnant_42920 = global_tid_42918 - gtid_33786;
        
        if (slt64(gtid_33786, m_28875)) {
            for (int32_t i_41400 = 0; i_41400 < k2p2zq_28888; i_41400++) {
                int64_t i_41334 = sext_i32_i64(i_41400);
                
                for (int32_t i_41399 = 0; i_41399 < k2p2zq_28888; i_41399++) {
                    int64_t i_41338 = sext_i32_i64(i_41399);
                    float defunc_2_reduce_res_33820;
                    float redout_41340 = 0.0F;
                    
                    for (int32_t i_41398 = 0; i_41398 < n_28878; i_41398++) {
                        int64_t i_41341 = sext_i32_i64(i_41398);
                        float x_33824 = ((__global float *) mem_41443)[i_41341 *
                                                                       m_28875 +
                                                                       gtid_33786];
                        float x_33825 = ((__global
                                          float *) binop_p_mem_41432)[i_41334 *
                                                                      N_28874 +
                                                                      i_41341];
                        float x_33826 = ((__global float *) mem_41440)[i_41341 *
                                                                       i32_res_28890 +
                                                                       i_41338];
                        float x_33827 = x_33825 * x_33826;
                        bool isnan_res_33828;
                        
                        isnan_res_33828 = futrts_isnan32(x_33824);
                        
                        float y_33829;
                        
                        if (isnan_res_33828) {
                            y_33829 = 0.0F;
                        } else {
                            y_33829 = 1.0F;
                        }
                        
                        float defunc_2_f_res_33830 = x_33827 * y_33829;
                        float defunc_1_op_res_33823 = defunc_2_f_res_33830 +
                              redout_41340;
                        float redout_tmp_42923 = defunc_1_op_res_33823;
                        
                        redout_41340 = redout_tmp_42923;
                    }
                    defunc_2_reduce_res_33820 = redout_41340;
                    ((__global float *) color_42657)[phys_tid_33787 + (i_41334 *
                                                                       (num_threads_42780 *
                                                                        i32_res_28890) +
                                                                       i_41338 *
                                                                       num_threads_42780)] =
                        defunc_2_reduce_res_33820;
                }
            }
            for (int64_t i_42924 = 0; i_42924 < i32_res_28890; i_42924++) {
                for (int64_t i_42925 = 0; i_42925 < i32_res_28890; i_42925++) {
                    ((__global float *) mem_41492)[i_42924 * (m_28875 *
                                                              i32_res_28890) +
                                                   i_42925 * m_28875 +
                                                   gtid_33786] = ((__global
                                                                   float *) color_42657)[phys_tid_33787 +
                                                                                         (i_42924 *
                                                                                          (num_threads_42780 *
                                                                                           i32_res_28890) +
                                                                                          i_42925 *
                                                                                          num_threads_42780)];
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_33811
}
__kernel void mainMagnitudezisegmap_33833(__global int *global_failure,
                                          int64_t N_28874, int64_t m_28875,
                                          int32_t n_28878, int32_t k2p2zq_28888,
                                          int64_t i32_res_28890,
                                          int64_t num_groups_33989,
                                          int64_t num_threads_42782, __global
                                          unsigned char *images_mem_41421,
                                          __global unsigned char *mem_41435,
                                          __global unsigned char *mem_41440,
                                          __global unsigned char *mem_41512,
                                          __global unsigned char *color_42658)
{
    #define segmap_group_sizze_33988 (mainMagnitudezisegmap_group_sizze_33836)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_42926;
    int32_t local_tid_42927;
    int64_t group_sizze_42930;
    int32_t wave_sizze_42929;
    int32_t group_tid_42928;
    
    global_tid_42926 = get_global_id(0);
    local_tid_42927 = get_local_id(0);
    group_sizze_42930 = get_local_size(0);
    wave_sizze_42929 = LOCKSTEP_WIDTH;
    group_tid_42928 = get_group_id(0);
    
    int32_t phys_tid_33833 = global_tid_42926;
    int32_t phys_group_id_42931;
    
    phys_group_id_42931 = get_group_id(0);
    for (int32_t i_42932 = 0; i_42932 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_28875 * i32_res_28890,
                                          segmap_group_sizze_33988)) -
                   phys_group_id_42931, sext_i64_i32(num_groups_33989));
         i_42932++) {
        int32_t virt_group_id_42933 = phys_group_id_42931 + i_42932 *
                sext_i64_i32(num_groups_33989);
        int64_t global_tid_42934 = sext_i32_i64(virt_group_id_42933) *
                segmap_group_sizze_33988 + sext_i32_i64(local_tid_42927);
        int64_t slice_42935 = i32_res_28890;
        int64_t slice_42936 = m_28875 * slice_42935;
        int64_t gtid_33831 = squot64(global_tid_42934, slice_42935);
        int64_t remnant_42937 = global_tid_42934 - gtid_33831 * slice_42935;
        int64_t gtid_33832 = remnant_42937;
        int64_t remnant_42938 = remnant_42937 - gtid_33832;
        
        if (slt64(gtid_33831, m_28875) && slt64(gtid_33832, i32_res_28890)) {
            for (int32_t i_41402 = 0; i_41402 < k2p2zq_28888; i_41402++) {
                int64_t i_41344 = sext_i32_i64(i_41402);
                float defunc_2_reduce_res_34000;
                float redout_41346 = 0.0F;
                
                for (int32_t i_41401 = 0; i_41401 < n_28878; i_41401++) {
                    int64_t i_41347 = sext_i32_i64(i_41401);
                    float x_34004 = ((__global
                                      float *) images_mem_41421)[gtid_33831 *
                                                                 N_28874 +
                                                                 i_41347];
                    float x_34005 = ((__global float *) mem_41435)[i_41347 *
                                                                   i32_res_28890 +
                                                                   gtid_33832];
                    float x_34006 = ((__global float *) mem_41440)[i_41347 *
                                                                   i32_res_28890 +
                                                                   i_41344];
                    float x_34007 = x_34005 * x_34006;
                    bool isnan_res_34008;
                    
                    isnan_res_34008 = futrts_isnan32(x_34004);
                    
                    float y_34009;
                    
                    if (isnan_res_34008) {
                        y_34009 = 0.0F;
                    } else {
                        y_34009 = 1.0F;
                    }
                    
                    float defunc_2_f_res_34010 = x_34007 * y_34009;
                    float defunc_1_op_res_34003 = defunc_2_f_res_34010 +
                          redout_41346;
                    float redout_tmp_42940 = defunc_1_op_res_34003;
                    
                    redout_41346 = redout_tmp_42940;
                }
                defunc_2_reduce_res_34000 = redout_41346;
                ((__global float *) color_42658)[phys_tid_33833 + i_41344 *
                                                 num_threads_42782] =
                    defunc_2_reduce_res_34000;
            }
            for (int64_t i_42941 = 0; i_42941 < i32_res_28890; i_42941++) {
                ((__global float *) mem_41512)[i_42941 * (i32_res_28890 *
                                                          m_28875) +
                                               gtid_33831 * i32_res_28890 +
                                               gtid_33832] = ((__global
                                                               float *) color_42658)[phys_tid_33833 +
                                                                                     i_42941 *
                                                                                     num_threads_42782];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_33988
}
__kernel void mainMagnitudezisegmap_34236(__global int *global_failure,
                                          int64_t m_28875,
                                          int64_t i32_res_28890,
                                          int64_t nm_29020,
                                          int64_t i32_res_29035,
                                          int64_t x_29036,
                                          int64_t gauss_jordan_res_r_ixfn_41675,
                                          int64_t gauss_jordan_res_r_ixfn_41676,
                                          int64_t gauss_jordan_res_r_ixfn_41678,
                                          __global
                                          unsigned char *gauss_jordan_res_r_mem_41680,
                                          __global unsigned char *mem_41686)
{
    #define segmap_group_sizze_34786 (mainMagnitudezisegmap_group_sizze_34240)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43131;
    int32_t local_tid_43132;
    int64_t group_sizze_43135;
    int32_t wave_sizze_43134;
    int32_t group_tid_43133;
    
    global_tid_43131 = get_global_id(0);
    local_tid_43132 = get_local_id(0);
    group_sizze_43135 = get_local_size(0);
    wave_sizze_43134 = LOCKSTEP_WIDTH;
    group_tid_43133 = get_group_id(0);
    
    int32_t phys_tid_34236 = global_tid_43131;
    int64_t global_tid_43136 = sext_i32_i64(group_tid_43133) *
            segmap_group_sizze_34786 + sext_i32_i64(local_tid_43132);
    int64_t slice_43137 = i32_res_28890;
    int64_t slice_43138 = i32_res_28890 * slice_43137;
    int64_t slice_43139 = m_28875 * slice_43138;
    int64_t gtid_34233 = squot64(global_tid_43136, slice_43138);
    int64_t remnant_43140 = global_tid_43136 - gtid_34233 * slice_43138;
    int64_t gtid_slice_34231 = squot64(remnant_43140, slice_43137);
    int64_t remnant_43141 = remnant_43140 - gtid_slice_34231 * slice_43137;
    int64_t gtid_slice_34232 = remnant_43141;
    int64_t remnant_43142 = remnant_43141 - gtid_slice_34232;
    
    if ((slt64(gtid_34233, m_28875) && slt64(gtid_slice_34231,
                                             i32_res_28890)) &&
        slt64(gtid_slice_34232, i32_res_28890)) {
        int64_t slice_34790 = i32_res_28890 + gtid_slice_34232;
        int64_t binop_x_39463 = x_29036 * gtid_34233;
        int64_t binop_y_39464 = i32_res_29035 * gtid_slice_34231;
        int64_t binop_x_39465 = binop_x_39463 + binop_y_39464;
        int64_t binop_x_39466 = slice_34790 + binop_x_39465;
        int64_t new_index_39467 = squot64(binop_x_39466, nm_29020);
        int64_t binop_y_39479 = nm_29020 * new_index_39467;
        int64_t new_index_39480 = binop_x_39466 - binop_y_39479;
        float v_34791 = ((__global
                          float *) gauss_jordan_res_r_mem_41680)[gauss_jordan_res_r_ixfn_41675 +
                                                                 (new_index_39467 *
                                                                  gauss_jordan_res_r_ixfn_41676 +
                                                                  new_index_39480 *
                                                                  gauss_jordan_res_r_ixfn_41678)];
        
        ((__global float *) mem_41686)[gtid_34233 * (i32_res_28890 *
                                                     i32_res_28890) +
                                       gtid_slice_34231 * i32_res_28890 +
                                       gtid_slice_34232] = v_34791;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_34786
}
__kernel void mainMagnitudezisegmap_34357(__global int *global_failure,
                                          int64_t m_28875, int64_t nm_29020,
                                          int64_t ctx_param_ext_41635,
                                          int64_t ctx_param_ext_41636,
                                          int64_t ctx_param_ext_41638, __global
                                          unsigned char *mem_param_41640,
                                          __global unsigned char *mem_41663)
{
    #define segmap_group_sizze_34776 (mainMagnitudezisegmap_group_sizze_34360)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43120;
    int32_t local_tid_43121;
    int64_t group_sizze_43124;
    int32_t wave_sizze_43123;
    int32_t group_tid_43122;
    
    global_tid_43120 = get_global_id(0);
    local_tid_43121 = get_local_id(0);
    group_sizze_43124 = get_local_size(0);
    wave_sizze_43123 = LOCKSTEP_WIDTH;
    group_tid_43122 = get_group_id(0);
    
    int32_t phys_tid_34357 = global_tid_43120;
    int64_t global_tid_43125 = sext_i32_i64(group_tid_43122) *
            segmap_group_sizze_34776 + sext_i32_i64(local_tid_43121);
    int64_t slice_43126 = nm_29020;
    int64_t slice_43127 = m_28875 * slice_43126;
    int64_t gtid_34355 = squot64(global_tid_43125, slice_43126);
    int64_t remnant_43128 = global_tid_43125 - gtid_34355 * slice_43126;
    int64_t gtid_34356 = remnant_43128;
    int64_t remnant_43129 = remnant_43128 - gtid_34356;
    
    if (slt64(gtid_34355, m_28875) && slt64(gtid_34356, nm_29020)) {
        float write_value_34780 = ((__global float *) mem_41663)[gtid_34355 *
                                                                 nm_29020 +
                                                                 gtid_34356];
        
        if ((sle64((int64_t) 0, gtid_34355) && slt64(gtid_34355, m_28875)) &&
            (sle64((int64_t) 0, gtid_34356) && slt64(gtid_34356, nm_29020))) {
            ((__global float *) mem_param_41640)[ctx_param_ext_41635 +
                                                 (gtid_34355 *
                                                  ctx_param_ext_41636 +
                                                  gtid_34356 *
                                                  ctx_param_ext_41638)] =
                write_value_34780;
        }
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_34776
}
__kernel void mainMagnitudezisegmap_34377(__global int *global_failure,
                                          int failure_is_an_option, __global
                                          int64_t *global_failure_args,
                                          int64_t m_28875, int32_t k2p2zq_28888,
                                          int32_t m_29018, int64_t nm_29020,
                                          int32_t i_34647,
                                          int64_t i32_res_34649,
                                          int64_t ctx_param_ext_41635,
                                          int64_t ctx_param_ext_41636,
                                          int64_t ctx_param_ext_41638, __global
                                          unsigned char *mem_param_41640,
                                          __global unsigned char *mem_41658,
                                          __global unsigned char *mem_41663)
{
    #define segmap_group_sizze_34726 (mainMagnitudezisegmap_group_sizze_34380)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43110;
    int32_t local_tid_43111;
    int64_t group_sizze_43114;
    int32_t wave_sizze_43113;
    int32_t group_tid_43112;
    
    global_tid_43110 = get_global_id(0);
    local_tid_43111 = get_local_id(0);
    group_sizze_43114 = get_local_size(0);
    wave_sizze_43113 = LOCKSTEP_WIDTH;
    group_tid_43112 = get_group_id(0);
    
    int32_t phys_tid_34377 = global_tid_43110;
    int64_t global_tid_43115 = sext_i32_i64(group_tid_43112) *
            segmap_group_sizze_34726 + sext_i32_i64(local_tid_43111);
    int64_t slice_43116 = nm_29020;
    int64_t slice_43117 = m_28875 * slice_43116;
    int64_t gtid_34375 = squot64(global_tid_43115, slice_43116);
    int64_t remnant_43118 = global_tid_43115 - gtid_34375 * slice_43116;
    int64_t gtid_34376 = remnant_43118;
    int64_t remnant_43119 = remnant_43118 - gtid_34376;
    
    if (slt64(gtid_34375, m_28875) && slt64(gtid_34376, nm_29020)) {
        bool cond_34731 = ((__global bool *) mem_41658)[gtid_34375];
        int32_t defunc_0_f_res_34733 = sext_i64_i32(gtid_34376);
        int32_t defunc_0_f_res_34734 = sdiv32(defunc_0_f_res_34733, m_29018);
        int32_t defunc_0_f_res_34735 = smod32(defunc_0_f_res_34733, m_29018);
        float defunc_0_f_res_34736;
        
        if (cond_34731) {
            int32_t x_34737 = mul32(m_29018, defunc_0_f_res_34734);
            int32_t i32_arg_34738 = add32(defunc_0_f_res_34735, x_34737);
            int64_t i32_res_34739 = sext_i32_i64(i32_arg_34738);
            bool x_34740 = sle64((int64_t) 0, i32_res_34739);
            bool y_34741 = slt64(i32_res_34739, nm_29020);
            bool bounds_check_34742 = x_34740 && y_34741;
            bool index_certs_34743;
            
            if (!bounds_check_34742) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 90) ==
                        -1) {
                        global_failure_args[0] = i32_res_34739;
                        global_failure_args[1] = nm_29020;
                        ;
                    }
                    return;
                }
            }
            
            float defunc_0_f_res_t_res_34744 = ((__global
                                                 float *) mem_param_41640)[ctx_param_ext_41635 +
                                                                           (gtid_34375 *
                                                                            ctx_param_ext_41636 +
                                                                            i32_res_34739 *
                                                                            ctx_param_ext_41638)];
            
            defunc_0_f_res_34736 = defunc_0_f_res_t_res_34744;
        } else {
            float v1_34730 = ((__global
                               float *) mem_param_41640)[ctx_param_ext_41635 +
                                                         (gtid_34375 *
                                                          ctx_param_ext_41636 +
                                                          i32_res_34649 *
                                                          ctx_param_ext_41638)];
            int64_t i32_res_34745 = sext_i32_i64(defunc_0_f_res_34735);
            bool x_34746 = sle64((int64_t) 0, i32_res_34745);
            bool y_34747 = slt64(i32_res_34745, nm_29020);
            bool bounds_check_34748 = x_34746 && y_34747;
            bool index_certs_34749;
            
            if (!bounds_check_34748) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 91) ==
                        -1) {
                        global_failure_args[0] = i32_res_34745;
                        global_failure_args[1] = nm_29020;
                        ;
                    }
                    return;
                }
            }
            
            float x_34750 = ((__global
                              float *) mem_param_41640)[ctx_param_ext_41635 +
                                                        (gtid_34375 *
                                                         ctx_param_ext_41636 +
                                                         i32_res_34745 *
                                                         ctx_param_ext_41638)];
            float x_34751 = x_34750 / v1_34730;
            int32_t y_34752 = sub32(k2p2zq_28888, 1);
            bool cond_34753 = slt32(defunc_0_f_res_34734, y_34752);
            float defunc_0_f_res_f_res_34754;
            
            if (cond_34753) {
                int32_t x_34755 = add32(1, defunc_0_f_res_34734);
                int32_t x_34756 = mul32(m_29018, x_34755);
                int32_t i32_arg_34757 = add32(defunc_0_f_res_34735, x_34756);
                int64_t i32_res_34758 = sext_i32_i64(i32_arg_34757);
                bool x_34759 = sle64((int64_t) 0, i32_res_34758);
                bool y_34760 = slt64(i32_res_34758, nm_29020);
                bool bounds_check_34761 = x_34759 && y_34760;
                bool index_certs_34762;
                
                if (!bounds_check_34761) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 92) ==
                            -1) {
                            global_failure_args[0] = i32_res_34758;
                            global_failure_args[1] = nm_29020;
                            ;
                        }
                        return;
                    }
                }
                
                float x_34763 = ((__global
                                  float *) mem_param_41640)[ctx_param_ext_41635 +
                                                            (gtid_34375 *
                                                             ctx_param_ext_41636 +
                                                             i32_res_34758 *
                                                             ctx_param_ext_41638)];
                int32_t i32_arg_34764 = add32(i_34647, x_34756);
                int64_t i32_res_34765 = sext_i32_i64(i32_arg_34764);
                bool x_34766 = sle64((int64_t) 0, i32_res_34765);
                bool y_34767 = slt64(i32_res_34765, nm_29020);
                bool bounds_check_34768 = x_34766 && y_34767;
                bool index_certs_34769;
                
                if (!bounds_check_34768) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 93) ==
                            -1) {
                            global_failure_args[0] = i32_res_34765;
                            global_failure_args[1] = nm_29020;
                            ;
                        }
                        return;
                    }
                }
                
                float x_34770 = ((__global
                                  float *) mem_param_41640)[ctx_param_ext_41635 +
                                                            (gtid_34375 *
                                                             ctx_param_ext_41636 +
                                                             i32_res_34765 *
                                                             ctx_param_ext_41638)];
                float y_34771 = x_34751 * x_34770;
                float defunc_0_f_res_f_res_t_res_34772 = x_34763 - y_34771;
                
                defunc_0_f_res_f_res_34754 = defunc_0_f_res_f_res_t_res_34772;
            } else {
                defunc_0_f_res_f_res_34754 = x_34751;
            }
            defunc_0_f_res_34736 = defunc_0_f_res_f_res_34754;
        }
        ((__global float *) mem_41663)[gtid_34375 * nm_29020 + gtid_34376] =
            defunc_0_f_res_34736;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_34726
}
__kernel void mainMagnitudezisegmap_34477(__global int *global_failure,
                                          int64_t m_28875,
                                          int64_t i32_res_34649,
                                          int64_t ctx_param_ext_41635,
                                          int64_t ctx_param_ext_41636,
                                          int64_t ctx_param_ext_41638, __global
                                          unsigned char *mem_param_41640,
                                          __global unsigned char *mem_41658)
{
    #define segmap_group_sizze_34713 (mainMagnitudezisegmap_group_sizze_34479)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43102;
    int32_t local_tid_43103;
    int64_t group_sizze_43106;
    int32_t wave_sizze_43105;
    int32_t group_tid_43104;
    
    global_tid_43102 = get_global_id(0);
    local_tid_43103 = get_local_id(0);
    group_sizze_43106 = get_local_size(0);
    wave_sizze_43105 = LOCKSTEP_WIDTH;
    group_tid_43104 = get_group_id(0);
    
    int32_t phys_tid_34477 = global_tid_43102;
    int64_t global_tid_43107 = sext_i32_i64(group_tid_43104) *
            segmap_group_sizze_34713 + sext_i32_i64(local_tid_43103);
    int64_t slice_43108 = m_28875;
    int64_t gtid_34476 = global_tid_43107;
    int64_t remnant_43109 = global_tid_43107 - gtid_34476;
    
    if (slt64(gtid_34476, m_28875)) {
        float v1_34718 = ((__global
                           float *) mem_param_41640)[ctx_param_ext_41635 +
                                                     (gtid_34476 *
                                                      ctx_param_ext_41636 +
                                                      i32_res_34649 *
                                                      ctx_param_ext_41638)];
        bool cond_34719 = v1_34718 == 0.0F;
        
        ((__global bool *) mem_41658)[gtid_34476] = cond_34719;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_34713
}
__kernel void mainMagnitudezisegmap_34565(__global int *global_failure,
                                          int failure_is_an_option, __global
                                          int64_t *global_failure_args,
                                          int64_t m_28875, int32_t k2p2zq_28888,
                                          int64_t i32_res_28890,
                                          int32_t m_29018, int64_t nm_29020,
                                          __global
                                          unsigned char *defunc_3_map_res_mem_41600,
                                          __global unsigned char *mem_41632)
{
    #define segmap_group_sizze_34622 (mainMagnitudezisegmap_group_sizze_34568)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43068;
    int32_t local_tid_43069;
    int64_t group_sizze_43072;
    int32_t wave_sizze_43071;
    int32_t group_tid_43070;
    
    global_tid_43068 = get_global_id(0);
    local_tid_43069 = get_local_id(0);
    group_sizze_43072 = get_local_size(0);
    wave_sizze_43071 = LOCKSTEP_WIDTH;
    group_tid_43070 = get_group_id(0);
    
    int32_t phys_tid_34565 = global_tid_43068;
    int64_t global_tid_43073 = sext_i32_i64(group_tid_43070) *
            segmap_group_sizze_34622 + sext_i32_i64(local_tid_43069);
    int64_t slice_43074 = nm_29020;
    int64_t slice_43075 = m_28875 * slice_43074;
    int64_t gtid_34563 = squot64(global_tid_43073, slice_43074);
    int64_t remnant_43076 = global_tid_43073 - gtid_34563 * slice_43074;
    int64_t gtid_34564 = remnant_43076;
    int64_t remnant_43077 = remnant_43076 - gtid_34564;
    
    if (slt64(gtid_34563, m_28875) && slt64(gtid_34564, nm_29020)) {
        int32_t index_primexp_39412 = sext_i64_i32(gtid_34564);
        int32_t defunc_0_f_res_34627 = sdiv32(index_primexp_39412, m_29018);
        int32_t defunc_0_f_res_34628 = smod32(index_primexp_39412, m_29018);
        bool cond_34629 = slt32(defunc_0_f_res_34628, k2p2zq_28888);
        float defunc_0_f_res_34630;
        
        if (cond_34629) {
            int64_t i_34631 = sext_i32_i64(defunc_0_f_res_34627);
            bool x_34632 = sle64((int64_t) 0, i_34631);
            bool y_34633 = slt64(i_34631, i32_res_28890);
            bool bounds_check_34634 = x_34632 && y_34633;
            int64_t j_34635 = sext_i32_i64(defunc_0_f_res_34628);
            bool x_34636 = sle64((int64_t) 0, j_34635);
            bool y_34637 = slt64(j_34635, i32_res_28890);
            bool bounds_check_34638 = x_34636 && y_34637;
            bool index_ok_34639 = bounds_check_34634 && bounds_check_34638;
            bool index_certs_34640;
            
            if (!index_ok_34639) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 85) ==
                        -1) {
                        global_failure_args[0] = i_34631;
                        global_failure_args[1] = j_34635;
                        global_failure_args[2] = i32_res_28890;
                        global_failure_args[3] = i32_res_28890;
                        ;
                    }
                    return;
                }
            }
            
            float defunc_0_f_res_t_res_34641 = ((__global
                                                 float *) defunc_3_map_res_mem_41600)[gtid_34563 *
                                                                                      (i32_res_28890 *
                                                                                       i32_res_28890) +
                                                                                      i_34631 *
                                                                                      i32_res_28890 +
                                                                                      j_34635];
            
            defunc_0_f_res_34630 = defunc_0_f_res_t_res_34641;
        } else {
            int32_t y_34642 = add32(k2p2zq_28888, defunc_0_f_res_34627);
            bool cond_34643 = defunc_0_f_res_34628 == y_34642;
            float defunc_0_f_res_f_res_34644;
            
            if (cond_34643) {
                defunc_0_f_res_f_res_34644 = 1.0F;
            } else {
                defunc_0_f_res_f_res_34644 = 0.0F;
            }
            defunc_0_f_res_34630 = defunc_0_f_res_f_res_34644;
        }
        ((__global float *) mem_41632)[gtid_34563 * nm_29020 + gtid_34564] =
            defunc_0_f_res_34630;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_34622
}
__kernel void mainMagnitudezisegmap_34796(__global int *global_failure,
                                          int64_t N_28874, int64_t m_28875,
                                          int32_t n_28878, int32_t k2p2zq_28888,
                                          int64_t i32_res_28890,
                                          int64_t num_groups_34817,
                                          int64_t num_threads_42793, __global
                                          unsigned char *binop_p_mem_41432,
                                          __global unsigned char *mem_41690,
                                          __global unsigned char *mem_41709,
                                          __global unsigned char *color_42670)
{
    #define segmap_group_sizze_34816 (mainMagnitudezisegmap_group_sizze_34798)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43146;
    int32_t local_tid_43147;
    int64_t group_sizze_43150;
    int32_t wave_sizze_43149;
    int32_t group_tid_43148;
    
    global_tid_43146 = get_global_id(0);
    local_tid_43147 = get_local_id(0);
    group_sizze_43150 = get_local_size(0);
    wave_sizze_43149 = LOCKSTEP_WIDTH;
    group_tid_43148 = get_group_id(0);
    
    int32_t phys_tid_34796 = global_tid_43146;
    int32_t phys_group_id_43151;
    
    phys_group_id_43151 = get_group_id(0);
    for (int32_t i_43152 = 0; i_43152 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_28875, segmap_group_sizze_34816)) -
                   phys_group_id_43151, sext_i64_i32(num_groups_34817));
         i_43152++) {
        int32_t virt_group_id_43153 = phys_group_id_43151 + i_43152 *
                sext_i64_i32(num_groups_34817);
        int64_t global_tid_43154 = sext_i32_i64(virt_group_id_43153) *
                segmap_group_sizze_34816 + sext_i32_i64(local_tid_43147);
        int64_t slice_43155 = m_28875;
        int64_t gtid_34795 = global_tid_43154;
        int64_t remnant_43156 = global_tid_43154 - gtid_34795;
        
        if (slt64(gtid_34795, m_28875)) {
            for (int32_t i_41404 = 0; i_41404 < k2p2zq_28888; i_41404++) {
                int64_t i_41350 = sext_i32_i64(i_41404);
                float defunc_2_reduce_res_34823;
                float redout_41352 = 0.0F;
                
                for (int32_t i_41403 = 0; i_41403 < n_28878; i_41403++) {
                    int64_t i_41353 = sext_i32_i64(i_41403);
                    float x_34828 = ((__global float *) mem_41690)[i_41353 *
                                                                   m_28875 +
                                                                   gtid_34795];
                    bool isnan_res_34829;
                    
                    isnan_res_34829 = futrts_isnan32(x_34828);
                    
                    float defunc_1_f_res_34830;
                    
                    if (isnan_res_34829) {
                        defunc_1_f_res_34830 = 0.0F;
                    } else {
                        float x_34827 = ((__global
                                          float *) binop_p_mem_41432)[i_41350 *
                                                                      N_28874 +
                                                                      i_41353];
                        float defunc_1_f_res_f_res_34831 = x_34827 * x_34828;
                        
                        defunc_1_f_res_34830 = defunc_1_f_res_f_res_34831;
                    }
                    
                    float defunc_1_op_res_34826 = defunc_1_f_res_34830 +
                          redout_41352;
                    float redout_tmp_43158 = defunc_1_op_res_34826;
                    
                    redout_41352 = redout_tmp_43158;
                }
                defunc_2_reduce_res_34823 = redout_41352;
                ((__global float *) color_42670)[phys_tid_34796 + i_41350 *
                                                 num_threads_42793] =
                    defunc_2_reduce_res_34823;
            }
            for (int64_t i_43159 = 0; i_43159 < i32_res_28890; i_43159++) {
                ((__global float *) mem_41709)[i_43159 * m_28875 + gtid_34795] =
                    ((__global float *) color_42670)[phys_tid_34796 + i_43159 *
                                                     num_threads_42793];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_34816
}
__kernel void mainMagnitudezisegmap_34937(__global int *global_failure,
                                          int64_t m_28875, int32_t k2p2zq_28888,
                                          int64_t i32_res_28890,
                                          int64_t num_groups_34957,
                                          int64_t num_threads_42797, __global
                                          unsigned char *mem_41918, __global
                                          unsigned char *mem_41921, __global
                                          unsigned char *mem_41940, __global
                                          unsigned char *color_42683)
{
    #define segmap_group_sizze_34956 (mainMagnitudezisegmap_group_sizze_34939)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43293;
    int32_t local_tid_43294;
    int64_t group_sizze_43297;
    int32_t wave_sizze_43296;
    int32_t group_tid_43295;
    
    global_tid_43293 = get_global_id(0);
    local_tid_43294 = get_local_id(0);
    group_sizze_43297 = get_local_size(0);
    wave_sizze_43296 = LOCKSTEP_WIDTH;
    group_tid_43295 = get_group_id(0);
    
    int32_t phys_tid_34937 = global_tid_43293;
    int32_t phys_group_id_43298;
    
    phys_group_id_43298 = get_group_id(0);
    for (int32_t i_43299 = 0; i_43299 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_28875, segmap_group_sizze_34956)) -
                   phys_group_id_43298, sext_i64_i32(num_groups_34957));
         i_43299++) {
        int32_t virt_group_id_43300 = phys_group_id_43298 + i_43299 *
                sext_i64_i32(num_groups_34957);
        int64_t global_tid_43301 = sext_i32_i64(virt_group_id_43300) *
                segmap_group_sizze_34956 + sext_i32_i64(local_tid_43294);
        int64_t slice_43302 = m_28875;
        int64_t gtid_34936 = global_tid_43301;
        int64_t remnant_43303 = global_tid_43301 - gtid_34936;
        
        if (slt64(gtid_34936, m_28875)) {
            for (int32_t i_41406 = 0; i_41406 < k2p2zq_28888; i_41406++) {
                int64_t i_41356 = sext_i32_i64(i_41406);
                float defunc_0_f_res_34964;
                float redout_41358 = 0.0F;
                
                for (int32_t i_41405 = 0; i_41405 < k2p2zq_28888; i_41405++) {
                    int64_t i_41359 = sext_i32_i64(i_41405);
                    float x_34968 = ((__global float *) mem_41921)[i_41359 *
                                                                   m_28875 +
                                                                   gtid_34936];
                    float x_34969 = ((__global float *) mem_41918)[i_41356 *
                                                                   (m_28875 *
                                                                    i32_res_28890) +
                                                                   i_41359 *
                                                                   m_28875 +
                                                                   gtid_34936];
                    float defunc_1_f_res_34970 = x_34968 * x_34969;
                    float defunc_1_op_res_34967 = defunc_1_f_res_34970 +
                          redout_41358;
                    float redout_tmp_43305 = defunc_1_op_res_34967;
                    
                    redout_41358 = redout_tmp_43305;
                }
                defunc_0_f_res_34964 = redout_41358;
                ((__global float *) color_42683)[phys_tid_34937 + i_41356 *
                                                 num_threads_42797] =
                    defunc_0_f_res_34964;
            }
            for (int64_t i_43306 = 0; i_43306 < i32_res_28890; i_43306++) {
                ((__global float *) mem_41940)[i_43306 * m_28875 + gtid_34936] =
                    ((__global float *) color_42683)[phys_tid_34937 + i_43306 *
                                                     num_threads_42797];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_34956
}
__kernel void mainMagnitudezisegmap_35069(__global int *global_failure,
                                          int64_t N_28874, int64_t m_28875,
                                          int32_t k2p2zq_28888,
                                          int64_t i32_res_28890,
                                          int64_t num_groups_35088,
                                          int64_t num_threads_42801, __global
                                          unsigned char *mem_41440, __global
                                          unsigned char *mem_41989, __global
                                          unsigned char *mem_42008, __global
                                          unsigned char *color_42688)
{
    #define segmap_group_sizze_35087 (mainMagnitudezisegmap_group_sizze_35071)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43396;
    int32_t local_tid_43397;
    int64_t group_sizze_43400;
    int32_t wave_sizze_43399;
    int32_t group_tid_43398;
    
    global_tid_43396 = get_global_id(0);
    local_tid_43397 = get_local_id(0);
    group_sizze_43400 = get_local_size(0);
    wave_sizze_43399 = LOCKSTEP_WIDTH;
    group_tid_43398 = get_group_id(0);
    
    int32_t phys_tid_35069 = global_tid_43396;
    int32_t phys_group_id_43401;
    
    phys_group_id_43401 = get_group_id(0);
    for (int32_t i_43402 = 0; i_43402 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_28875, segmap_group_sizze_35087)) -
                   phys_group_id_43401, sext_i64_i32(num_groups_35088));
         i_43402++) {
        int32_t virt_group_id_43403 = phys_group_id_43401 + i_43402 *
                sext_i64_i32(num_groups_35088);
        int64_t global_tid_43404 = sext_i32_i64(virt_group_id_43403) *
                segmap_group_sizze_35087 + sext_i32_i64(local_tid_43397);
        int64_t slice_43405 = m_28875;
        int64_t gtid_35068 = global_tid_43404;
        int64_t remnant_43406 = global_tid_43404 - gtid_35068;
        
        if (slt64(gtid_35068, m_28875)) {
            for (int64_t i_41366 = 0; i_41366 < N_28874; i_41366++) {
                float defunc_0_f_res_35094;
                float redout_41368 = 0.0F;
                
                for (int32_t i_41409 = 0; i_41409 < k2p2zq_28888; i_41409++) {
                    int64_t i_41369 = sext_i32_i64(i_41409);
                    float x_35098 = ((__global float *) mem_41989)[i_41369 *
                                                                   m_28875 +
                                                                   gtid_35068];
                    float x_35099 = ((__global float *) mem_41440)[i_41366 *
                                                                   i32_res_28890 +
                                                                   i_41369];
                    float defunc_1_f_res_35100 = x_35098 * x_35099;
                    float defunc_1_op_res_35097 = defunc_1_f_res_35100 +
                          redout_41368;
                    float redout_tmp_43408 = defunc_1_op_res_35097;
                    
                    redout_41368 = redout_tmp_43408;
                }
                defunc_0_f_res_35094 = redout_41368;
                ((__global float *) color_42688)[phys_tid_35069 + i_41366 *
                                                 num_threads_42801] =
                    defunc_0_f_res_35094;
            }
            for (int64_t i_43409 = 0; i_43409 < N_28874; i_43409++) {
                ((__global float *) mem_42008)[i_43409 * m_28875 + gtid_35068] =
                    ((__global float *) color_42688)[phys_tid_35069 + i_43409 *
                                                     num_threads_42801];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_35087
}
__kernel void mainMagnitudezisegmap_35262(__global int *global_failure,
                                          int64_t N_28874, int64_t m_28875,
                                          __global unsigned char *mem_42247,
                                          __global unsigned char *mem_42251,
                                          __global unsigned char *mem_42259,
                                          __global unsigned char *mem_42263)
{
    #define segmap_group_sizze_35408 (mainMagnitudezisegmap_group_sizze_35265)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43643;
    int32_t local_tid_43644;
    int64_t group_sizze_43647;
    int32_t wave_sizze_43646;
    int32_t group_tid_43645;
    
    global_tid_43643 = get_global_id(0);
    local_tid_43644 = get_local_id(0);
    group_sizze_43647 = get_local_size(0);
    wave_sizze_43646 = LOCKSTEP_WIDTH;
    group_tid_43645 = get_group_id(0);
    
    int32_t phys_tid_35262 = global_tid_43643;
    int64_t global_tid_43648 = sext_i32_i64(group_tid_43645) *
            segmap_group_sizze_35408 + sext_i32_i64(local_tid_43644);
    int64_t slice_43649 = N_28874;
    int64_t slice_43650 = m_28875 * slice_43649;
    int64_t gtid_35260 = squot64(global_tid_43648, slice_43649);
    int64_t remnant_43651 = global_tid_43648 - gtid_35260 * slice_43649;
    int64_t gtid_35261 = remnant_43651;
    int64_t remnant_43652 = remnant_43651 - gtid_35261;
    
    if (slt64(gtid_35260, m_28875) && slt64(gtid_35261, N_28874)) {
        float x_35412 = ((__global float *) mem_42251)[gtid_35260 * N_28874 +
                                                       gtid_35261];
        int32_t index_primexp_39428 = sext_i64_i32(gtid_35261);
        bool isnan_res_35415;
        
        isnan_res_35415 = futrts_isnan32(x_35412);
        
        bool defunc_0_p_res_35416 = !isnan_res_35415;
        int64_t defunc_1_f_res_35417;
        
        if (defunc_0_p_res_35416) {
            int64_t x_35413 = ((__global int64_t *) mem_42247)[gtid_35260 *
                                                               N_28874 +
                                                               gtid_35261];
            int64_t defunc_1_f_res_t_res_35418 = sub64(x_35413, (int64_t) 1);
            
            defunc_1_f_res_35417 = defunc_1_f_res_t_res_35418;
        } else {
            defunc_1_f_res_35417 = (int64_t) -1;
        }
        if ((sle64((int64_t) 0, gtid_35260) && slt64(gtid_35260, m_28875)) &&
            (sle64((int64_t) 0, defunc_1_f_res_35417) &&
             slt64(defunc_1_f_res_35417, N_28874))) {
            ((__global int32_t *) mem_42263)[gtid_35260 * N_28874 +
                                             defunc_1_f_res_35417] =
                index_primexp_39428;
        }
        if ((sle64((int64_t) 0, gtid_35260) && slt64(gtid_35260, m_28875)) &&
            (sle64((int64_t) 0, defunc_1_f_res_35417) &&
             slt64(defunc_1_f_res_35417, N_28874))) {
            ((__global float *) mem_42259)[gtid_35260 * N_28874 +
                                           defunc_1_f_res_35417] = x_35412;
        }
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_35408
}
__kernel void mainMagnitudezisegmap_35324(__global int *global_failure,
                                          int64_t N_28874, int64_t m_28875,
                                          int64_t i_29176, __global
                                          unsigned char *mem_42247, __global
                                          unsigned char *mem_42255)
{
    #define segmap_group_sizze_35378 (mainMagnitudezisegmap_group_sizze_35326)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43617;
    int32_t local_tid_43618;
    int64_t group_sizze_43621;
    int32_t wave_sizze_43620;
    int32_t group_tid_43619;
    
    global_tid_43617 = get_global_id(0);
    local_tid_43618 = get_local_id(0);
    group_sizze_43621 = get_local_size(0);
    wave_sizze_43620 = LOCKSTEP_WIDTH;
    group_tid_43619 = get_group_id(0);
    
    int32_t phys_tid_35324 = global_tid_43617;
    int64_t global_tid_43622 = sext_i32_i64(group_tid_43619) *
            segmap_group_sizze_35378 + sext_i32_i64(local_tid_43618);
    int64_t slice_43623 = m_28875;
    int64_t gtid_35323 = global_tid_43622;
    int64_t remnant_43624 = global_tid_43622 - gtid_35323;
    
    if (slt64(gtid_35323, m_28875)) {
        int64_t last_res_35382 = ((__global int64_t *) mem_42247)[gtid_35323 *
                                                                  N_28874 +
                                                                  i_29176];
        int32_t defunc_0_f_res_35383 = sext_i64_i32(last_res_35382);
        
        ((__global int32_t *) mem_42255)[gtid_35323] = defunc_0_f_res_35383;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_35378
}
__kernel void mainMagnitudezisegmap_35565(__global int *global_failure,
                                          int64_t m_28875, float hfrac_28880,
                                          int32_t k2p2_28886, __global
                                          unsigned char *mem_42329, __global
                                          unsigned char *mem_42333, __global
                                          unsigned char *mem_42337, __global
                                          unsigned char *mem_42340)
{
    #define segmap_group_sizze_35658 (mainMagnitudezisegmap_group_sizze_35567)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43813;
    int32_t local_tid_43814;
    int64_t group_sizze_43817;
    int32_t wave_sizze_43816;
    int32_t group_tid_43815;
    
    global_tid_43813 = get_global_id(0);
    local_tid_43814 = get_local_id(0);
    group_sizze_43817 = get_local_size(0);
    wave_sizze_43816 = LOCKSTEP_WIDTH;
    group_tid_43815 = get_group_id(0);
    
    int32_t phys_tid_35565 = global_tid_43813;
    int64_t global_tid_43818 = sext_i32_i64(group_tid_43815) *
            segmap_group_sizze_35658 + sext_i32_i64(local_tid_43814);
    int64_t slice_43819 = m_28875;
    int64_t gtid_35564 = global_tid_43818;
    int64_t remnant_43820 = global_tid_43818 - gtid_35564;
    
    if (slt64(gtid_35564, m_28875)) {
        int32_t defunc_0_f_res_35662 = ((__global
                                         int32_t *) mem_42329)[gtid_35564];
        float defunc_0_f_res_35663 = ((__global float *) mem_42333)[gtid_35564];
        int32_t r32_arg_35664 = sub32(defunc_0_f_res_35662, k2p2_28886);
        float i32_res_35665 = sitofp_i32_f32(r32_arg_35664);
        float sqrt_arg_35666 = defunc_0_f_res_35663 / i32_res_35665;
        float sqrt_res_35667;
        
        sqrt_res_35667 = futrts_sqrt32(sqrt_arg_35666);
        
        float i32_res_35668 = sitofp_i32_f32(defunc_0_f_res_35662);
        float t32_arg_35669 = hfrac_28880 * i32_res_35668;
        int32_t f32_res_35670 = fptosi_f32_i32(t32_arg_35669);
        
        ((__global int32_t *) mem_42337)[gtid_35564] = f32_res_35670;
        ((__global float *) mem_42340)[gtid_35564] = sqrt_res_35667;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_35658
}
__kernel void mainMagnitudezisegmap_35805(__global int *global_failure,
                                          int failure_is_an_option, __global
                                          int64_t *global_failure_args,
                                          int64_t N_28874, int32_t n_28878,
                                          float lam_28881,
                                          int64_t iota32_arg_29304,
                                          float i32_res_29316, __global
                                          unsigned char *mappingindices_mem_41420,
                                          __global unsigned char *mem_42387,
                                          __global unsigned char *mem_42390)
{
    #define segmap_group_sizze_35827 (mainMagnitudezisegmap_group_sizze_35807)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43932;
    int32_t local_tid_43933;
    int64_t group_sizze_43936;
    int32_t wave_sizze_43935;
    int32_t group_tid_43934;
    
    global_tid_43932 = get_global_id(0);
    local_tid_43933 = get_local_id(0);
    group_sizze_43936 = get_local_size(0);
    wave_sizze_43935 = LOCKSTEP_WIDTH;
    group_tid_43934 = get_group_id(0);
    
    int32_t phys_tid_35805 = global_tid_43932;
    int64_t global_tid_43937 = sext_i32_i64(group_tid_43934) *
            segmap_group_sizze_35827 + sext_i32_i64(local_tid_43933);
    int64_t slice_43938 = iota32_arg_29304;
    int64_t gtid_35804 = global_tid_43937;
    int64_t remnant_43939 = global_tid_43937 - gtid_35804;
    
    if (slt64(gtid_35804, iota32_arg_29304)) {
        int32_t defunc_0_f_res_35832 = sext_i64_i32(gtid_35804);
        int32_t i_35833 = add32(n_28878, defunc_0_f_res_35832);
        int64_t i_35834 = sext_i32_i64(i_35833);
        bool x_35835 = sle64((int64_t) 0, i_35834);
        bool y_35836 = slt64(i_35834, N_28874);
        bool bounds_check_35837 = x_35835 && y_35836;
        bool index_certs_35838;
        
        if (!bounds_check_35837) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 103) == -1) {
                    global_failure_args[0] = i_35834;
                    global_failure_args[1] = N_28874;
                    ;
                }
                return;
            }
        }
        
        int32_t time_35839 = ((__global
                               int32_t *) mappingindices_mem_41420)[i_35834];
        float i32_res_35840 = sitofp_i32_f32(time_35839);
        float logplus_arg_35841 = i32_res_35840 / i32_res_29316;
        bool cond_35842 = 2.7182817F < logplus_arg_35841;
        float logplus_res_35843;
        
        if (cond_35842) {
            float log_res_35844;
            
            log_res_35844 = futrts_log32(logplus_arg_35841);
            logplus_res_35843 = log_res_35844;
        } else {
            logplus_res_35843 = 1.0F;
        }
        
        float sqrt_res_35845;
        
        sqrt_res_35845 = futrts_sqrt32(logplus_res_35843);
        
        float defunc_0_f_res_35846 = lam_28881 * sqrt_res_35845;
        
        ((__global int32_t *) mem_42387)[gtid_35804] = defunc_0_f_res_35832;
        ((__global float *) mem_42390)[gtid_35804] = defunc_0_f_res_35846;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_35827
}
__kernel void mainMagnitudezisegmap_35850(__global int *global_failure,
                                          int failure_is_an_option, __global
                                          int64_t *global_failure_args,
                                          int64_t m_28875,
                                          int64_t iota32_arg_29304,
                                          int64_t distance_29338,
                                          int64_t num_threads_42820, __global
                                          unsigned char *defunc_4_map_res_mem_42265,
                                          __global
                                          unsigned char *defunc_3_map_res_mem_42345,
                                          __global unsigned char *mem_42394,
                                          __global unsigned char *mem_42402,
                                          __global unsigned char *mem_42436,
                                          __global unsigned char *color_42716)
{
    #define segmap_group_sizze_36050 (mainMagnitudezisegmap_group_sizze_35852)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43958;
    int32_t local_tid_43959;
    int64_t group_sizze_43962;
    int32_t wave_sizze_43961;
    int32_t group_tid_43960;
    
    global_tid_43958 = get_global_id(0);
    local_tid_43959 = get_local_id(0);
    group_sizze_43962 = get_local_size(0);
    wave_sizze_43961 = LOCKSTEP_WIDTH;
    group_tid_43960 = get_group_id(0);
    
    int32_t phys_tid_35850 = global_tid_43958;
    int64_t global_tid_43963 = sext_i32_i64(group_tid_43960) *
            segmap_group_sizze_36050 + sext_i32_i64(local_tid_43959);
    int64_t slice_43964 = m_28875;
    int64_t gtid_35849 = global_tid_43963;
    int64_t remnant_43965 = global_tid_43963 - gtid_35849;
    
    if (slt64(gtid_35849, m_28875)) {
        int32_t x_36053 = ((__global
                            int32_t *) defunc_4_map_res_mem_42265)[gtid_35849];
        int32_t x_36054 = ((__global
                            int32_t *) defunc_3_map_res_mem_42345)[gtid_35849];
        int32_t y_36055 = ((__global int32_t *) mem_42394)[gtid_35849];
        
        for (int64_t i_43966 = 0; i_43966 < iota32_arg_29304; i_43966++) {
            ((__global float *) color_42716)[phys_tid_35850 + i_43966 *
                                             num_threads_42820] = ((__global
                                                                    float *) mem_42402)[gtid_35849 +
                                                                                        i_43966 *
                                                                                        m_28875];
        }
        for (int64_t i_36058 = 0; i_36058 < distance_29338; i_36058++) {
            int64_t index_primexp_36060 = add64((int64_t) 1, i_36058);
            bool cond_36061 = slt64((int64_t) 0, index_primexp_36060);
            bool loop_cond_36062;
            
            if (cond_36061) {
                bool x_36063 = sle64((int64_t) 0, index_primexp_36060);
                bool y_36064 = slt64(index_primexp_36060, iota32_arg_29304);
                bool bounds_check_36065 = x_36063 && y_36064;
                bool index_certs_36066;
                
                if (!bounds_check_36065) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                      106) == -1) {
                            global_failure_args[0] = index_primexp_36060;
                            global_failure_args[1] = iota32_arg_29304;
                            ;
                        }
                        return;
                    }
                }
                
                float defunc_2_lifted_gt_arg_36067 = ((__global
                                                       float *) color_42716)[phys_tid_35850 +
                                                                             index_primexp_36060 *
                                                                             num_threads_42820];
                bool y_36068 = slt64(i_36058, iota32_arg_29304);
                bool index_certs_36069;
                
                if (!y_36068) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                      107) == -1) {
                            global_failure_args[0] = i_36058;
                            global_failure_args[1] = iota32_arg_29304;
                            ;
                        }
                        return;
                    }
                }
                
                float defunc_1_lifted_gt_arg_36070 = ((__global
                                                       float *) color_42716)[phys_tid_35850 +
                                                                             i_36058 *
                                                                             num_threads_42820];
                bool defunc_1_zlze_res_36071 = defunc_1_lifted_gt_arg_36070 <=
                     defunc_2_lifted_gt_arg_36067;
                bool defunc_2_lifted_gt_res_36072 = !defunc_1_zlze_res_36071;
                
                loop_cond_36062 = defunc_2_lifted_gt_res_36072;
            } else {
                loop_cond_36062 = 0;
            }
            
            bool xszq_36073;
            int64_t xszq_36074;
            bool loop_while_36076;
            int64_t j_36077;
            
            loop_while_36076 = loop_cond_36062;
            j_36077 = index_primexp_36060;
            while (loop_while_36076) {
                int64_t loopres_36079 = sub64(j_36077, (int64_t) 1);
                bool x_36080 = sle64((int64_t) 0, j_36077);
                bool y_36081 = slt64(j_36077, iota32_arg_29304);
                bool bounds_check_36082 = x_36080 && y_36081;
                bool index_certs_36083;
                
                if (!bounds_check_36082) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                      108) == -1) {
                            global_failure_args[0] = j_36077;
                            global_failure_args[1] = iota32_arg_29304;
                            ;
                        }
                        return;
                    }
                }
                
                float copy_arg_36084 = ((__global
                                         float *) color_42716)[phys_tid_35850 +
                                                               j_36077 *
                                                               num_threads_42820];
                bool x_36085 = sle64((int64_t) 0, loopres_36079);
                bool y_36086 = slt64(loopres_36079, iota32_arg_29304);
                bool bounds_check_36087 = x_36085 && y_36086;
                bool index_certs_36088;
                
                if (!bounds_check_36087) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                      109) == -1) {
                            global_failure_args[0] = loopres_36079;
                            global_failure_args[1] = iota32_arg_29304;
                            ;
                        }
                        return;
                    }
                }
                
                float copy_arg_36089 = ((__global
                                         float *) color_42716)[phys_tid_35850 +
                                                               loopres_36079 *
                                                               num_threads_42820];
                
                ((__global float *) color_42716)[phys_tid_35850 + j_36077 *
                                                 num_threads_42820] =
                    copy_arg_36089;
                ((__global float *) color_42716)[phys_tid_35850 +
                                                 loopres_36079 *
                                                 num_threads_42820] =
                    copy_arg_36084;
                
                bool cond_36092 = slt64((int64_t) 0, loopres_36079);
                bool loop_cond_36093;
                
                if (cond_36092) {
                    bool index_certs_36094;
                    
                    if (!bounds_check_36087) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          110) == -1) {
                                global_failure_args[0] = loopres_36079;
                                global_failure_args[1] = iota32_arg_29304;
                                ;
                            }
                            return;
                        }
                    }
                    
                    float defunc_2_lifted_gt_arg_36095 = ((__global
                                                           float *) color_42716)[phys_tid_35850 +
                                                                                 loopres_36079 *
                                                                                 num_threads_42820];
                    int64_t i_36096 = sub64(loopres_36079, (int64_t) 1);
                    bool x_36097 = sle64((int64_t) 0, i_36096);
                    bool y_36098 = slt64(i_36096, iota32_arg_29304);
                    bool bounds_check_36099 = x_36097 && y_36098;
                    bool index_certs_36100;
                    
                    if (!bounds_check_36099) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          111) == -1) {
                                global_failure_args[0] = i_36096;
                                global_failure_args[1] = iota32_arg_29304;
                                ;
                            }
                            return;
                        }
                    }
                    
                    float defunc_1_lifted_gt_arg_36101 = ((__global
                                                           float *) color_42716)[phys_tid_35850 +
                                                                                 i_36096 *
                                                                                 num_threads_42820];
                    bool defunc_1_zlze_res_36102 =
                         defunc_1_lifted_gt_arg_36101 <=
                         defunc_2_lifted_gt_arg_36095;
                    bool defunc_2_lifted_gt_res_36103 =
                         !defunc_1_zlze_res_36102;
                    
                    loop_cond_36093 = defunc_2_lifted_gt_res_36103;
                } else {
                    loop_cond_36093 = 0;
                }
                
                bool loop_while_tmp_43968 = loop_cond_36093;
                int64_t j_tmp_43969 = loopres_36079;
                
                loop_while_36076 = loop_while_tmp_43968;
                j_36077 = j_tmp_43969;
            }
            xszq_36073 = loop_while_36076;
            xszq_36074 = j_36077;
        }
        
        int32_t i_36104 = sdiv32(y_36055, 2);
        int32_t j_36105 = sub32(i_36104, 1);
        bool cond_36106 = x_36053 == x_36054;
        float defunc_0_f_res_36107;
        
        if (cond_36106) {
            defunc_0_f_res_36107 = 0.0F;
        } else {
            int32_t x_36108 = smod32(y_36055, 2);
            bool cond_36109 = x_36108 == 0;
            float defunc_0_f_res_f_res_36110;
            
            if (cond_36109) {
                int64_t j_36111 = sext_i32_i64(j_36105);
                bool x_36112 = sle64((int64_t) 0, j_36111);
                bool y_36113 = slt64(j_36111, iota32_arg_29304);
                bool bounds_check_36114 = x_36112 && y_36113;
                bool index_certs_36115;
                
                if (!bounds_check_36114) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                      112) == -1) {
                            global_failure_args[0] = j_36111;
                            global_failure_args[1] = iota32_arg_29304;
                            ;
                        }
                        return;
                    }
                }
                
                float x_36116 = ((__global
                                  float *) color_42716)[phys_tid_35850 +
                                                        j_36111 *
                                                        num_threads_42820];
                int64_t i_36117 = sext_i32_i64(i_36104);
                bool x_36118 = sle64((int64_t) 0, i_36117);
                bool y_36119 = slt64(i_36117, iota32_arg_29304);
                bool bounds_check_36120 = x_36118 && y_36119;
                bool index_certs_36121;
                
                if (!bounds_check_36120) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                      113) == -1) {
                            global_failure_args[0] = i_36117;
                            global_failure_args[1] = iota32_arg_29304;
                            ;
                        }
                        return;
                    }
                }
                
                float y_36122 = ((__global
                                  float *) color_42716)[phys_tid_35850 +
                                                        i_36117 *
                                                        num_threads_42820];
                float x_36123 = x_36116 + y_36122;
                float defunc_0_f_res_f_res_t_res_36124 = x_36123 / 2.0F;
                
                defunc_0_f_res_f_res_36110 = defunc_0_f_res_f_res_t_res_36124;
            } else {
                int64_t i_36125 = sext_i32_i64(i_36104);
                bool x_36126 = sle64((int64_t) 0, i_36125);
                bool y_36127 = slt64(i_36125, iota32_arg_29304);
                bool bounds_check_36128 = x_36126 && y_36127;
                bool index_certs_36129;
                
                if (!bounds_check_36128) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                      114) == -1) {
                            global_failure_args[0] = i_36125;
                            global_failure_args[1] = iota32_arg_29304;
                            ;
                        }
                        return;
                    }
                }
                
                float defunc_0_f_res_f_res_f_res_36130 = ((__global
                                                           float *) color_42716)[phys_tid_35850 +
                                                                                 i_36125 *
                                                                                 num_threads_42820];
                
                defunc_0_f_res_f_res_36110 = defunc_0_f_res_f_res_f_res_36130;
            }
            defunc_0_f_res_36107 = defunc_0_f_res_f_res_36110;
        }
        ((__global float *) mem_42436)[gtid_35849] = defunc_0_f_res_36107;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_36050
}
__kernel void mainMagnitudezisegmap_35943(__global int *global_failure,
                                          int failure_is_an_option, __global
                                          int64_t *global_failure_args,
                                          int64_t N_28874, int64_t m_28875,
                                          int64_t iota32_arg_29304, __global
                                          unsigned char *defunc_4_map_res_mem_42266,
                                          __global
                                          unsigned char *defunc_3_map_res_mem_42345,
                                          __global unsigned char *mem_42394,
                                          __global unsigned char *mem_42399)
{
    #define segmap_group_sizze_36022 (mainMagnitudezisegmap_group_sizze_35946)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43948;
    int32_t local_tid_43949;
    int64_t group_sizze_43952;
    int32_t wave_sizze_43951;
    int32_t group_tid_43950;
    
    global_tid_43948 = get_global_id(0);
    local_tid_43949 = get_local_id(0);
    group_sizze_43952 = get_local_size(0);
    wave_sizze_43951 = LOCKSTEP_WIDTH;
    group_tid_43950 = get_group_id(0);
    
    int32_t phys_tid_35943 = global_tid_43948;
    int64_t global_tid_43953 = sext_i32_i64(group_tid_43950) *
            segmap_group_sizze_36022 + sext_i32_i64(local_tid_43949);
    int64_t slice_43954 = iota32_arg_29304;
    int64_t slice_43955 = m_28875 * slice_43954;
    int64_t gtid_35941 = squot64(global_tid_43953, slice_43954);
    int64_t remnant_43956 = global_tid_43953 - gtid_35941 * slice_43954;
    int64_t gtid_35942 = remnant_43956;
    int64_t remnant_43957 = remnant_43956 - gtid_35942;
    
    if (slt64(gtid_35941, m_28875) && slt64(gtid_35942, iota32_arg_29304)) {
        int32_t x_36025 = ((__global
                            int32_t *) defunc_3_map_res_mem_42345)[gtid_35941];
        int32_t y_36027 = ((__global int32_t *) mem_42394)[gtid_35941];
        int32_t index_primexp_39446 = sext_i64_i32(gtid_35942);
        bool cond_36029 = slt32(index_primexp_39446, y_36027);
        bool cond_36030;
        
        if (cond_36029) {
            int32_t i_36031 = add32(x_36025, index_primexp_39446);
            int64_t i_36032 = sext_i32_i64(i_36031);
            bool x_36033 = sle64((int64_t) 0, i_36032);
            bool y_36034 = slt64(i_36032, N_28874);
            bool bounds_check_36035 = x_36033 && y_36034;
            bool index_certs_36036;
            
            if (!bounds_check_36035) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 104) ==
                        -1) {
                        global_failure_args[0] = i_36032;
                        global_failure_args[1] = N_28874;
                        ;
                    }
                    return;
                }
            }
            
            float isnan_arg_36037 = ((__global
                                      float *) defunc_4_map_res_mem_42266)[gtid_35941 *
                                                                           N_28874 +
                                                                           i_36032];
            bool isnan_res_36038;
            
            isnan_res_36038 = futrts_isnan32(isnan_arg_36037);
            
            bool cond_t_res_36039 = !isnan_res_36038;
            
            cond_36030 = cond_t_res_36039;
        } else {
            cond_36030 = 0;
        }
        
        float defunc_0_f_res_36040;
        
        if (cond_36030) {
            int32_t i_36041 = add32(x_36025, index_primexp_39446);
            int64_t i_36042 = sext_i32_i64(i_36041);
            bool x_36043 = sle64((int64_t) 0, i_36042);
            bool y_36044 = slt64(i_36042, N_28874);
            bool bounds_check_36045 = x_36043 && y_36044;
            bool index_certs_36046;
            
            if (!bounds_check_36045) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 105) ==
                        -1) {
                        global_failure_args[0] = i_36042;
                        global_failure_args[1] = N_28874;
                        ;
                    }
                    return;
                }
            }
            
            float defunc_0_f_res_t_res_36047 = ((__global
                                                 float *) defunc_4_map_res_mem_42266)[gtid_35941 *
                                                                                      N_28874 +
                                                                                      i_36042];
            
            defunc_0_f_res_36040 = defunc_0_f_res_t_res_36047;
        } else {
            defunc_0_f_res_36040 = INFINITY;
        }
        ((__global float *) mem_42399)[gtid_35941 * iota32_arg_29304 +
                                       gtid_35942] = defunc_0_f_res_36040;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_36022
}
__kernel void mainMagnitudezisegmap_36001(__global int *global_failure,
                                          int64_t m_28875, __global
                                          unsigned char *defunc_4_map_res_mem_42265,
                                          __global
                                          unsigned char *defunc_3_map_res_mem_42345,
                                          __global unsigned char *mem_42394)
{
    #define segmap_group_sizze_36010 (mainMagnitudezisegmap_group_sizze_36003)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43940;
    int32_t local_tid_43941;
    int64_t group_sizze_43944;
    int32_t wave_sizze_43943;
    int32_t group_tid_43942;
    
    global_tid_43940 = get_global_id(0);
    local_tid_43941 = get_local_id(0);
    group_sizze_43944 = get_local_size(0);
    wave_sizze_43943 = LOCKSTEP_WIDTH;
    group_tid_43942 = get_group_id(0);
    
    int32_t phys_tid_36001 = global_tid_43940;
    int64_t global_tid_43945 = sext_i32_i64(group_tid_43942) *
            segmap_group_sizze_36010 + sext_i32_i64(local_tid_43941);
    int64_t slice_43946 = m_28875;
    int64_t gtid_36000 = global_tid_43945;
    int64_t remnant_43947 = global_tid_43945 - gtid_36000;
    
    if (slt64(gtid_36000, m_28875)) {
        int32_t x_36013 = ((__global
                            int32_t *) defunc_4_map_res_mem_42265)[gtid_36000];
        int32_t x_36014 = ((__global
                            int32_t *) defunc_3_map_res_mem_42345)[gtid_36000];
        int32_t y_36015 = sub32(x_36013, x_36014);
        
        ((__global int32_t *) mem_42394)[gtid_36000] = y_36015;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_36010
}
__kernel void mainMagnitudezisegmap_36282(__global int *global_failure,
                                          int failure_is_an_option, __global
                                          int64_t *global_failure_args,
                                          int64_t N_28874, int64_t m_28875,
                                          int32_t n_28878, __global
                                          unsigned char *defunc_4_map_res_mem_42267,
                                          __global
                                          unsigned char *defunc_3_map_res_mem_42345,
                                          __global unsigned char *mem_42455,
                                          __global unsigned char *mem_42463,
                                          __global unsigned char *mem_42466,
                                          __global unsigned char *mem_42469,
                                          __global unsigned char *mem_42473,
                                          __global unsigned char *mem_42476)
{
    #define segmap_group_sizze_36566 (mainMagnitudezisegmap_group_sizze_36284)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_44170;
    int32_t local_tid_44171;
    int64_t group_sizze_44174;
    int32_t wave_sizze_44173;
    int32_t group_tid_44172;
    
    global_tid_44170 = get_global_id(0);
    local_tid_44171 = get_local_id(0);
    group_sizze_44174 = get_local_size(0);
    wave_sizze_44173 = LOCKSTEP_WIDTH;
    group_tid_44172 = get_group_id(0);
    
    int32_t phys_tid_36282 = global_tid_44170;
    int64_t global_tid_44175 = sext_i32_i64(group_tid_44172) *
            segmap_group_sizze_36566 + sext_i32_i64(local_tid_44171);
    int64_t slice_44176 = m_28875;
    int64_t gtid_36281 = global_tid_44175;
    int64_t remnant_44177 = global_tid_44175 - gtid_36281;
    
    if (slt64(gtid_36281, m_28875)) {
        int32_t x_36570 = ((__global
                            int32_t *) defunc_3_map_res_mem_42345)[gtid_36281];
        int32_t y_36572 = ((__global int32_t *) mem_42455)[gtid_36281];
        bool acc0_36574 = ((__global bool *) mem_42463)[gtid_36281];
        bool x_36579 = acc0_36574 && acc0_36574;
        int32_t defunc_1_op_res_f_res_36583;
        
        if (acc0_36574) {
            int32_t acc0_36575 = ((__global int32_t *) mem_42466)[gtid_36281];
            
            defunc_1_op_res_f_res_36583 = acc0_36575;
        } else {
            defunc_1_op_res_f_res_36583 = -1;
        }
        
        bool cond_36589 = y_36572 == 0;
        float defunc_0_f_res_36590;
        
        if (cond_36589) {
            defunc_0_f_res_36590 = 0.0F;
        } else {
            float acc0_36576 = ((__global float *) mem_42469)[gtid_36281];
            float i32_res_36591 = sitofp_i32_f32(y_36572);
            float defunc_0_f_res_f_res_36592 = acc0_36576 / i32_res_36591;
            
            defunc_0_f_res_36590 = defunc_0_f_res_f_res_36592;
        }
        
        bool cond_36593 = !x_36579;
        int32_t fst_breakzq_36594;
        
        if (cond_36593) {
            fst_breakzq_36594 = -1;
        } else {
            bool cond_36595 = slt32(defunc_1_op_res_f_res_36583, y_36572);
            int32_t adjustValInds_res_36596;
            
            if (cond_36595) {
                int32_t i_36597 = add32(x_36570, defunc_1_op_res_f_res_36583);
                int64_t i_36598 = sext_i32_i64(i_36597);
                bool x_36599 = sle64((int64_t) 0, i_36598);
                bool y_36600 = slt64(i_36598, N_28874);
                bool bounds_check_36601 = x_36599 && y_36600;
                bool index_certs_36602;
                
                if (!bounds_check_36601) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                      120) == -1) {
                            global_failure_args[0] = i_36598;
                            global_failure_args[1] = N_28874;
                            ;
                        }
                        return;
                    }
                }
                
                int32_t x_36603 = ((__global
                                    int32_t *) defunc_4_map_res_mem_42267)[gtid_36281 *
                                                                           N_28874 +
                                                                           i_36598];
                int32_t adjustValInds_res_t_res_36604 = sub32(x_36603, n_28878);
                
                adjustValInds_res_36596 = adjustValInds_res_t_res_36604;
            } else {
                adjustValInds_res_36596 = -1;
            }
            fst_breakzq_36594 = adjustValInds_res_36596;
        }
        
        bool cond_36605 = sle32(x_36570, 5);
        bool cond_f_res_36606 = sle32(y_36572, 5);
        bool x_36607 = !cond_36605;
        bool y_36608 = cond_f_res_36606 && x_36607;
        bool cond_36609 = cond_36605 || y_36608;
        int32_t fst_breakzq_36610;
        
        if (cond_36609) {
            fst_breakzq_36610 = -2;
        } else {
            fst_breakzq_36610 = fst_breakzq_36594;
        }
        ((__global int32_t *) mem_42473)[gtid_36281] = fst_breakzq_36610;
        ((__global float *) mem_42476)[gtid_36281] = defunc_0_f_res_36590;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_36566
}
__kernel void mainMagnitudezisegmap_36436(__global int *global_failure,
                                          int64_t m_28875,
                                          int64_t num_groups_36459, __global
                                          unsigned char *defunc_4_map_res_mem_42265,
                                          __global
                                          unsigned char *defunc_3_map_res_mem_42345,
                                          __global
                                          unsigned char *defunc_3_map_res_mem_42346,
                                          __global unsigned char *mem_42452,
                                          __global unsigned char *mem_42455)
{
    #define segmap_group_sizze_36458 (mainMagnitudezisegmap_group_sizze_36438)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_44001;
    int32_t local_tid_44002;
    int64_t group_sizze_44005;
    int32_t wave_sizze_44004;
    int32_t group_tid_44003;
    
    global_tid_44001 = get_global_id(0);
    local_tid_44002 = get_local_id(0);
    group_sizze_44005 = get_local_size(0);
    wave_sizze_44004 = LOCKSTEP_WIDTH;
    group_tid_44003 = get_group_id(0);
    
    int32_t phys_tid_36436 = global_tid_44001;
    int32_t phys_group_id_44006;
    
    phys_group_id_44006 = get_group_id(0);
    for (int32_t i_44007 = 0; i_44007 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_28875, segmap_group_sizze_36458)) -
                   phys_group_id_44006, sext_i64_i32(num_groups_36459));
         i_44007++) {
        int32_t virt_group_id_44008 = phys_group_id_44006 + i_44007 *
                sext_i64_i32(num_groups_36459);
        int64_t global_tid_44009 = sext_i32_i64(virt_group_id_44008) *
                segmap_group_sizze_36458 + sext_i32_i64(local_tid_44002);
        int64_t slice_44010 = m_28875;
        int64_t gtid_36435 = global_tid_44009;
        int64_t remnant_44011 = global_tid_44009 - gtid_36435;
        
        if (slt64(gtid_36435, m_28875)) {
            int32_t x_36465 = ((__global
                                int32_t *) defunc_4_map_res_mem_42265)[gtid_36435];
            int32_t x_36466 = ((__global
                                int32_t *) defunc_3_map_res_mem_42345)[gtid_36435];
            float x_36467 = ((__global
                              float *) defunc_3_map_res_mem_42346)[gtid_36435];
            int32_t y_36468 = sub32(x_36465, x_36466);
            float i32_res_36469 = sitofp_i32_f32(x_36466);
            float sqrt_res_36470;
            
            sqrt_res_36470 = futrts_sqrt32(i32_res_36469);
            
            float y_36471 = x_36467 * sqrt_res_36470;
            
            ((__global float *) mem_42452)[gtid_36435] = y_36471;
            ((__global int32_t *) mem_42455)[gtid_36435] = y_36468;
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_36458
}
__kernel void mainMagnitudezisegmap_intragroup_34144(__global
                                                     int *global_failure,
                                                     int failure_is_an_option,
                                                     __global
                                                     int64_t *global_failure_args,
                                                     __local volatile
                                                     int64_t *color_42667_backing_aligned_0,
                                                     __local volatile
                                                     int64_t *color_42666_backing_aligned_1,
                                                     int64_t m_28875,
                                                     int32_t k2p2zq_28888,
                                                     int64_t i32_res_28890,
                                                     int32_t m_29018,
                                                     int64_t nm_29020,
                                                     int64_t i32_res_29035,
                                                     __global
                                                     unsigned char *defunc_3_map_res_mem_41600,
                                                     __global
                                                     unsigned char *mem_41627)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict color_42667_backing_1 = (__local volatile
                                                             char *) color_42667_backing_aligned_0;
    __local volatile char *restrict color_42666_backing_0 = (__local volatile
                                                             char *) color_42666_backing_aligned_1;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43058;
    int32_t local_tid_43059;
    int64_t group_sizze_43062;
    int32_t wave_sizze_43061;
    int32_t group_tid_43060;
    
    global_tid_43058 = get_global_id(0);
    local_tid_43059 = get_local_id(0);
    group_sizze_43062 = get_local_size(0);
    wave_sizze_43061 = LOCKSTEP_WIDTH;
    group_tid_43060 = get_group_id(0);
    
    int32_t phys_tid_34144 = group_tid_43060;
    int32_t ltid_pre_43063 = local_tid_43059;
    int64_t slice_43064 = m_28875;
    int64_t gtid_34074 = sext_i32_i64(group_tid_43060);
    int64_t remnant_43065 = sext_i32_i64(group_tid_43060) - gtid_34074;
    __local char *color_42666;
    
    color_42666 = (__local char *) color_42666_backing_0;
    
    __local char *color_42667;
    
    color_42667 = (__local char *) color_42667_backing_1;
    
    int64_t gtid_34077 = sext_i32_i64(ltid_pre_43063);
    int32_t phys_tid_34078 = local_tid_43059;
    int32_t index_primexp_39405 = sext_i64_i32(gtid_34077);
    int32_t defunc_0_f_res_34155 = sdiv32(index_primexp_39405, m_29018);
    int32_t defunc_0_f_res_34156 = smod32(index_primexp_39405, m_29018);
    bool cond_34157 = slt32(defunc_0_f_res_34156, k2p2zq_28888);
    float defunc_0_f_res_34158;
    
    if (cond_34157) {
        int64_t i_34159 = sext_i32_i64(defunc_0_f_res_34155);
        bool x_34160 = sle64((int64_t) 0, i_34159);
        bool y_34161 = slt64(i_34159, i32_res_28890);
        bool bounds_check_34162 = x_34160 && y_34161;
        int64_t j_34163 = sext_i32_i64(defunc_0_f_res_34156);
        bool x_34164 = sle64((int64_t) 0, j_34163);
        bool y_34165 = slt64(j_34163, i32_res_28890);
        bool bounds_check_34166 = x_34164 && y_34165;
        bool index_ok_34167 = bounds_check_34162 && bounds_check_34166;
        bool index_certs_34168;
        
        if (!index_ok_34167) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 79) == -1) {
                    global_failure_args[0] = i_34159;
                    global_failure_args[1] = j_34163;
                    global_failure_args[2] = i32_res_28890;
                    global_failure_args[3] = i32_res_28890;
                    ;
                }
                local_failure = true;
                goto error_0;
            }
        }
        
        float defunc_0_f_res_t_res_34169 = ((__global
                                             float *) defunc_3_map_res_mem_41600)[gtid_34074 *
                                                                                  (i32_res_28890 *
                                                                                   i32_res_28890) +
                                                                                  i_34159 *
                                                                                  i32_res_28890 +
                                                                                  j_34163];
        
        defunc_0_f_res_34158 = defunc_0_f_res_t_res_34169;
    } else {
        int32_t y_34170 = add32(k2p2zq_28888, defunc_0_f_res_34155);
        bool cond_34171 = defunc_0_f_res_34156 == y_34170;
        float defunc_0_f_res_f_res_34172;
        
        if (cond_34171) {
            defunc_0_f_res_f_res_34172 = 1.0F;
        } else {
            defunc_0_f_res_f_res_34172 = 0.0F;
        }
        defunc_0_f_res_34158 = defunc_0_f_res_f_res_34172;
    }
    ((__local float *) color_42667)[gtid_34077] = defunc_0_f_res_34158;
    
  error_0:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int32_t i_34174 = 0; i_34174 < k2p2zq_28888; i_34174++) {
        int64_t i32_res_34176 = sext_i32_i64(i_34174);
        bool x_34177 = sle64((int64_t) 0, i32_res_34176);
        bool y_34178 = slt64(i32_res_34176, nm_29020);
        bool bounds_check_34179 = x_34177 && y_34178;
        bool index_certs_34180;
        
        if (!bounds_check_34179) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 80) == -1) {
                    global_failure_args[0] = i32_res_34176;
                    global_failure_args[1] = nm_29020;
                    ;
                }
                local_failure = true;
                goto error_1;
            }
        }
        
        float v1_34181 = ((__local float *) color_42667)[i32_res_34176];
        bool cond_34182 = v1_34181 == 0.0F;
        int64_t gtid_34098 = sext_i32_i64(ltid_pre_43063);
        int32_t phys_tid_34099 = local_tid_43059;
        int32_t defunc_0_f_res_34185 = sext_i64_i32(gtid_34098);
        int32_t defunc_0_f_res_34186 = sdiv32(defunc_0_f_res_34185, m_29018);
        int32_t defunc_0_f_res_34187 = smod32(defunc_0_f_res_34185, m_29018);
        float defunc_0_f_res_34188;
        
        if (cond_34182) {
            int32_t x_34189 = mul32(m_29018, defunc_0_f_res_34186);
            int32_t i32_arg_34190 = add32(defunc_0_f_res_34187, x_34189);
            int64_t i32_res_34191 = sext_i32_i64(i32_arg_34190);
            bool x_34192 = sle64((int64_t) 0, i32_res_34191);
            bool y_34193 = slt64(i32_res_34191, nm_29020);
            bool bounds_check_34194 = x_34192 && y_34193;
            bool index_certs_34195;
            
            if (!bounds_check_34194) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 81) ==
                        -1) {
                        global_failure_args[0] = i32_res_34191;
                        global_failure_args[1] = nm_29020;
                        ;
                    }
                    local_failure = true;
                    goto error_1;
                }
            }
            
            float defunc_0_f_res_t_res_34196 = ((__local
                                                 float *) color_42667)[i32_res_34191];
            
            defunc_0_f_res_34188 = defunc_0_f_res_t_res_34196;
        } else {
            int64_t i32_res_34197 = sext_i32_i64(defunc_0_f_res_34187);
            bool x_34198 = sle64((int64_t) 0, i32_res_34197);
            bool y_34199 = slt64(i32_res_34197, nm_29020);
            bool bounds_check_34200 = x_34198 && y_34199;
            bool index_certs_34201;
            
            if (!bounds_check_34200) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 82) ==
                        -1) {
                        global_failure_args[0] = i32_res_34197;
                        global_failure_args[1] = nm_29020;
                        ;
                    }
                    local_failure = true;
                    goto error_1;
                }
            }
            
            float x_34202 = ((__local float *) color_42667)[i32_res_34197];
            float x_34203 = x_34202 / v1_34181;
            int32_t y_34204 = sub32(k2p2zq_28888, 1);
            bool cond_34205 = slt32(defunc_0_f_res_34186, y_34204);
            float defunc_0_f_res_f_res_34206;
            
            if (cond_34205) {
                int32_t x_34207 = add32(1, defunc_0_f_res_34186);
                int32_t x_34208 = mul32(m_29018, x_34207);
                int32_t i32_arg_34209 = add32(defunc_0_f_res_34187, x_34208);
                int64_t i32_res_34210 = sext_i32_i64(i32_arg_34209);
                bool x_34211 = sle64((int64_t) 0, i32_res_34210);
                bool y_34212 = slt64(i32_res_34210, nm_29020);
                bool bounds_check_34213 = x_34211 && y_34212;
                bool index_certs_34214;
                
                if (!bounds_check_34213) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 83) ==
                            -1) {
                            global_failure_args[0] = i32_res_34210;
                            global_failure_args[1] = nm_29020;
                            ;
                        }
                        local_failure = true;
                        goto error_1;
                    }
                }
                
                float x_34215 = ((__local float *) color_42667)[i32_res_34210];
                int32_t i32_arg_34216 = add32(i_34174, x_34208);
                int64_t i32_res_34217 = sext_i32_i64(i32_arg_34216);
                bool x_34218 = sle64((int64_t) 0, i32_res_34217);
                bool y_34219 = slt64(i32_res_34217, nm_29020);
                bool bounds_check_34220 = x_34218 && y_34219;
                bool index_certs_34221;
                
                if (!bounds_check_34220) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 84) ==
                            -1) {
                            global_failure_args[0] = i32_res_34217;
                            global_failure_args[1] = nm_29020;
                            ;
                        }
                        local_failure = true;
                        goto error_1;
                    }
                }
                
                float x_34222 = ((__local float *) color_42667)[i32_res_34217];
                float y_34223 = x_34203 * x_34222;
                float defunc_0_f_res_f_res_t_res_34224 = x_34215 - y_34223;
                
                defunc_0_f_res_f_res_34206 = defunc_0_f_res_f_res_t_res_34224;
            } else {
                defunc_0_f_res_f_res_34206 = x_34203;
            }
            defunc_0_f_res_34188 = defunc_0_f_res_f_res_34206;
        }
        ((__local float *) color_42666)[gtid_34098] = defunc_0_f_res_34188;
        
      error_1:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t write_i_34141 = sext_i32_i64(ltid_pre_43063);
        int32_t phys_tid_34142 = local_tid_43059;
        float write_value_34227 = ((__local
                                    float *) color_42666)[write_i_34141];
        
        if (sle64((int64_t) 0, write_i_34141) && slt64(write_i_34141,
                                                       nm_29020)) {
            ((__local float *) color_42667)[write_i_34141] = write_value_34227;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    for (int64_t i_43067 = 0; i_43067 < sdiv_up64(i32_res_28890 *
                                                  i32_res_28890 -
                                                  sext_i32_i64(local_tid_43059),
                                                  nm_29020); i_43067++) {
        ((__global float *) mem_41627)[gtid_34074 * (i32_res_28890 *
                                                     i32_res_28890) +
                                       squot64(i_43067 * nm_29020 +
                                               sext_i32_i64(local_tid_43059),
                                               i32_res_28890) * i32_res_28890 +
                                       (i_43067 * nm_29020 +
                                        sext_i32_i64(local_tid_43059) -
                                        squot64(i_43067 * nm_29020 +
                                                sext_i32_i64(local_tid_43059),
                                                i32_res_28890) *
                                        i32_res_28890)] = ((__local
                                                            float *) color_42667)[i32_res_28890 +
                                                                                  (squot64(i_43067 *
                                                                                           nm_29020 +
                                                                                           sext_i32_i64(local_tid_43059),
                                                                                           i32_res_28890) *
                                                                                   i32_res_29035 +
                                                                                   (i_43067 *
                                                                                    nm_29020 +
                                                                                    sext_i32_i64(local_tid_43059) -
                                                                                    squot64(i_43067 *
                                                                                            nm_29020 +
                                                                                            sext_i32_i64(local_tid_43059),
                                                                                            i32_res_28890) *
                                                                                    i32_res_28890))];
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_3:
    return;
}
__kernel void mainMagnitudezisegmap_intragroup_34298(__global
                                                     int *global_failure,
                                                     int failure_is_an_option,
                                                     __global
                                                     int64_t *global_failure_args,
                                                     __local volatile
                                                     int64_t *color_42669_backing_aligned_0,
                                                     __local volatile
                                                     int64_t *color_42668_backing_aligned_1,
                                                     int64_t m_28875,
                                                     int32_t k2p2zq_28888,
                                                     int32_t m_29018,
                                                     int64_t nm_29020,
                                                     int32_t i_34647,
                                                     int64_t i32_res_34649,
                                                     int64_t ctx_param_ext_41635,
                                                     int64_t ctx_param_ext_41636,
                                                     int64_t ctx_param_ext_41638,
                                                     __global
                                                     unsigned char *mem_param_41640,
                                                     __global
                                                     unsigned char *mem_41655)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict color_42669_backing_1 = (__local volatile
                                                             char *) color_42669_backing_aligned_0;
    __local volatile char *restrict color_42668_backing_0 = (__local volatile
                                                             char *) color_42668_backing_aligned_1;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43094;
    int32_t local_tid_43095;
    int64_t group_sizze_43098;
    int32_t wave_sizze_43097;
    int32_t group_tid_43096;
    
    global_tid_43094 = get_global_id(0);
    local_tid_43095 = get_local_id(0);
    group_sizze_43098 = get_local_size(0);
    wave_sizze_43097 = LOCKSTEP_WIDTH;
    group_tid_43096 = get_group_id(0);
    
    int32_t phys_tid_34298 = group_tid_43096;
    int32_t ltid_pre_43099 = local_tid_43095;
    int64_t slice_43100 = m_28875;
    int64_t gtid_34249 = sext_i32_i64(group_tid_43096);
    int64_t remnant_43101 = sext_i32_i64(group_tid_43096) - gtid_34249;
    __local char *color_42668;
    
    color_42668 = (__local char *) color_42668_backing_0;
    
    __local char *color_42669;
    
    color_42669 = (__local char *) color_42669_backing_1;
    ((__local float *) color_42669)[sext_i32_i64(local_tid_43095)] = ((__global
                                                                       float *) mem_param_41640)[ctx_param_ext_41635 +
                                                                                                 gtid_34249 *
                                                                                                 ctx_param_ext_41636 +
                                                                                                 sext_i32_i64(local_tid_43095) *
                                                                                                 ctx_param_ext_41638];
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float v1_34665 = ((__global float *) mem_param_41640)[ctx_param_ext_41635 +
                                                          (gtid_34249 *
                                                           ctx_param_ext_41636 +
                                                           i32_res_34649 *
                                                           ctx_param_ext_41638)];
    bool cond_34666 = v1_34665 == 0.0F;
    int64_t gtid_34252 = sext_i32_i64(ltid_pre_43099);
    int32_t phys_tid_34253 = local_tid_43095;
    int32_t defunc_0_f_res_34669 = sext_i64_i32(gtid_34252);
    int32_t defunc_0_f_res_34670 = sdiv32(defunc_0_f_res_34669, m_29018);
    int32_t defunc_0_f_res_34671 = smod32(defunc_0_f_res_34669, m_29018);
    float defunc_0_f_res_34672;
    
    if (cond_34666) {
        int32_t x_34673 = mul32(m_29018, defunc_0_f_res_34670);
        int32_t i32_arg_34674 = add32(defunc_0_f_res_34671, x_34673);
        int64_t i32_res_34675 = sext_i32_i64(i32_arg_34674);
        bool x_34676 = sle64((int64_t) 0, i32_res_34675);
        bool y_34677 = slt64(i32_res_34675, nm_29020);
        bool bounds_check_34678 = x_34676 && y_34677;
        bool index_certs_34679;
        
        if (!bounds_check_34678) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 86) == -1) {
                    global_failure_args[0] = i32_res_34675;
                    global_failure_args[1] = nm_29020;
                    ;
                }
                local_failure = true;
                goto error_0;
            }
        }
        
        float defunc_0_f_res_t_res_34680 = ((__local
                                             float *) color_42669)[i32_res_34675];
        
        defunc_0_f_res_34672 = defunc_0_f_res_t_res_34680;
    } else {
        int64_t i32_res_34681 = sext_i32_i64(defunc_0_f_res_34671);
        bool x_34682 = sle64((int64_t) 0, i32_res_34681);
        bool y_34683 = slt64(i32_res_34681, nm_29020);
        bool bounds_check_34684 = x_34682 && y_34683;
        bool index_certs_34685;
        
        if (!bounds_check_34684) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 87) == -1) {
                    global_failure_args[0] = i32_res_34681;
                    global_failure_args[1] = nm_29020;
                    ;
                }
                local_failure = true;
                goto error_0;
            }
        }
        
        float x_34686 = ((__global
                          float *) mem_param_41640)[ctx_param_ext_41635 +
                                                    (gtid_34249 *
                                                     ctx_param_ext_41636 +
                                                     i32_res_34681 *
                                                     ctx_param_ext_41638)];
        float x_34687 = x_34686 / v1_34665;
        int32_t y_34688 = sub32(k2p2zq_28888, 1);
        bool cond_34689 = slt32(defunc_0_f_res_34670, y_34688);
        float defunc_0_f_res_f_res_34690;
        
        if (cond_34689) {
            int32_t x_34691 = add32(1, defunc_0_f_res_34670);
            int32_t x_34692 = mul32(m_29018, x_34691);
            int32_t i32_arg_34693 = add32(defunc_0_f_res_34671, x_34692);
            int64_t i32_res_34694 = sext_i32_i64(i32_arg_34693);
            bool x_34695 = sle64((int64_t) 0, i32_res_34694);
            bool y_34696 = slt64(i32_res_34694, nm_29020);
            bool bounds_check_34697 = x_34695 && y_34696;
            bool index_certs_34698;
            
            if (!bounds_check_34697) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 88) ==
                        -1) {
                        global_failure_args[0] = i32_res_34694;
                        global_failure_args[1] = nm_29020;
                        ;
                    }
                    local_failure = true;
                    goto error_0;
                }
            }
            
            float x_34699 = ((__global
                              float *) mem_param_41640)[ctx_param_ext_41635 +
                                                        (gtid_34249 *
                                                         ctx_param_ext_41636 +
                                                         i32_res_34694 *
                                                         ctx_param_ext_41638)];
            int32_t i32_arg_34700 = add32(i_34647, x_34692);
            int64_t i32_res_34701 = sext_i32_i64(i32_arg_34700);
            bool x_34702 = sle64((int64_t) 0, i32_res_34701);
            bool y_34703 = slt64(i32_res_34701, nm_29020);
            bool bounds_check_34704 = x_34702 && y_34703;
            bool index_certs_34705;
            
            if (!bounds_check_34704) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 89) ==
                        -1) {
                        global_failure_args[0] = i32_res_34701;
                        global_failure_args[1] = nm_29020;
                        ;
                    }
                    local_failure = true;
                    goto error_0;
                }
            }
            
            float x_34706 = ((__global
                              float *) mem_param_41640)[ctx_param_ext_41635 +
                                                        (gtid_34249 *
                                                         ctx_param_ext_41636 +
                                                         i32_res_34701 *
                                                         ctx_param_ext_41638)];
            float y_34707 = x_34687 * x_34706;
            float defunc_0_f_res_f_res_t_res_34708 = x_34699 - y_34707;
            
            defunc_0_f_res_f_res_34690 = defunc_0_f_res_f_res_t_res_34708;
        } else {
            defunc_0_f_res_f_res_34690 = x_34687;
        }
        defunc_0_f_res_34672 = defunc_0_f_res_f_res_34690;
    }
    ((__local float *) color_42668)[gtid_34252] = defunc_0_f_res_34672;
    
  error_0:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t write_i_34295 = sext_i32_i64(ltid_pre_43099);
    int32_t phys_tid_34296 = local_tid_43095;
    float write_value_34711 = ((__local float *) color_42668)[write_i_34295];
    
    if (sle64((int64_t) 0, write_i_34295) && slt64(write_i_34295, nm_29020)) {
        ((__local float *) color_42669)[write_i_34295] = write_value_34711;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    ((__global float *) mem_41655)[gtid_34249 * nm_29020 +
                                   sext_i32_i64(local_tid_43095)] = ((__local
                                                                      float *) color_42669)[sext_i32_i64(local_tid_43095)];
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_2:
    return;
}
__kernel void mainMagnitudezisegmap_intragroup_35216(__global
                                                     int *global_failure,
                                                     __local volatile
                                                     int64_t *color_42704_backing_aligned_0,
                                                     __local volatile
                                                     int64_t *color_42703_backing_aligned_1,
                                                     __local volatile
                                                     int64_t *color_42702_backing_aligned_2,
                                                     __local volatile
                                                     int64_t *color_42701_backing_aligned_3,
                                                     int64_t N_28874,
                                                     int64_t m_28875,
                                                     int64_t i_29176, __global
                                                     unsigned char *images_mem_41421,
                                                     __global
                                                     unsigned char *defunc_3_map_res_mem_42216,
                                                     __global
                                                     unsigned char *mem_42234,
                                                     __global
                                                     unsigned char *mem_42238,
                                                     __global
                                                     unsigned char *mem_42242)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict color_42704_backing_3 = (__local volatile
                                                             char *) color_42704_backing_aligned_0;
    __local volatile char *restrict color_42703_backing_2 = (__local volatile
                                                             char *) color_42703_backing_aligned_1;
    __local volatile char *restrict color_42702_backing_1 = (__local volatile
                                                             char *) color_42702_backing_aligned_2;
    __local volatile char *restrict color_42701_backing_0 = (__local volatile
                                                             char *) color_42701_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43542;
    int32_t local_tid_43543;
    int64_t group_sizze_43546;
    int32_t wave_sizze_43545;
    int32_t group_tid_43544;
    
    global_tid_43542 = get_global_id(0);
    local_tid_43543 = get_local_id(0);
    group_sizze_43546 = get_local_size(0);
    wave_sizze_43545 = LOCKSTEP_WIDTH;
    group_tid_43544 = get_group_id(0);
    
    int32_t phys_tid_35216 = group_tid_43544;
    int32_t ltid_pre_43547 = local_tid_43543;
    int64_t slice_43548 = m_28875;
    int64_t gtid_35207 = sext_i32_i64(group_tid_43544);
    int64_t remnant_43549 = sext_i32_i64(group_tid_43544) - gtid_35207;
    __local char *color_42701;
    
    color_42701 = (__local char *) color_42701_backing_0;
    
    __local char *color_42702;
    
    color_42702 = (__local char *) color_42702_backing_1;
    
    __local char *color_42703;
    
    color_42703 = (__local char *) color_42703_backing_2;
    
    __local char *color_42704;
    
    color_42704 = (__local char *) color_42704_backing_3;
    
    int64_t gtid_35210 = sext_i32_i64(ltid_pre_43547);
    int32_t phys_tid_35211 = local_tid_43543;
    float x_35234 = ((__global float *) images_mem_41421)[gtid_35207 * N_28874 +
                                                          gtid_35210];
    bool isnan_res_35236;
    
    isnan_res_35236 = futrts_isnan32(x_35234);
    
    bool cond_35237 = !isnan_res_35236;
    float defunc_1_f_res_35238;
    
    if (cond_35237) {
        float x_35235 = ((__global
                          float *) defunc_3_map_res_mem_42216)[gtid_35207 *
                                                               N_28874 +
                                                               gtid_35210];
        float defunc_1_f_res_t_res_35239 = x_35234 - x_35235;
        
        defunc_1_f_res_35238 = defunc_1_f_res_t_res_35239;
    } else {
        defunc_1_f_res_35238 = NAN;
    }
    
    bool isnan_res_35240;
    
    isnan_res_35240 = futrts_isnan32(defunc_1_f_res_35238);
    
    bool defunc_0_p_res_35241 = !isnan_res_35240;
    int64_t defunc_0_f_res_35242 = btoi_bool_i64(defunc_0_p_res_35241);
    
    ((__local int64_t *) color_42704)[gtid_35210] = defunc_0_f_res_35242;
    ((__local float *) color_42703)[gtid_35210] = defunc_1_f_res_35238;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t dims_flat_43550 = N_28874;
    int64_t x_35231;
    int64_t x_35232;
    int64_t x_43552;
    int64_t x_43553;
    bool ltid_in_bounds_43555 = slt64(sext_i32_i64(local_tid_43543), N_28874);
    int32_t skip_threads_43556;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_43555) {
            x_35232 = ((volatile __local
                        int64_t *) color_42704)[sext_i32_i64(local_tid_43543)];
            if ((local_tid_43543 - squot32(local_tid_43543, 32) * 32) == 0) {
                x_35231 = x_35232;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_43556 = 1;
        while (slt32(skip_threads_43556, 32)) {
            if (sle32(skip_threads_43556, local_tid_43543 -
                      squot32(local_tid_43543, 32) * 32) &&
                ltid_in_bounds_43555) {
                // read operands
                {
                    x_35231 = ((volatile __local
                                int64_t *) color_42704)[sext_i32_i64(local_tid_43543) -
                                                        sext_i32_i64(skip_threads_43556)];
                }
                // perform operation
                {
                    bool inactive_43557 =
                         slt64(srem64(sext_i32_i64(local_tid_43543), N_28874),
                               sext_i32_i64(local_tid_43543) -
                               sext_i32_i64(local_tid_43543 -
                               skip_threads_43556));
                    
                    if (inactive_43557) {
                        x_35231 = x_35232;
                    }
                    if (!inactive_43557) {
                        int64_t defunc_1_op_res_35233 = add64(x_35231, x_35232);
                        
                        x_35231 = defunc_1_op_res_35233;
                    }
                }
            }
            if (sle32(wave_sizze_43545, skip_threads_43556)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_43556, local_tid_43543 -
                      squot32(local_tid_43543, 32) * 32) &&
                ltid_in_bounds_43555) {
                // write result
                {
                    ((volatile __local
                      int64_t *) color_42704)[sext_i32_i64(local_tid_43543)] =
                        x_35231;
                    x_35232 = x_35231;
                }
            }
            if (sle32(wave_sizze_43545, skip_threads_43556)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_43556 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_43543 - squot32(local_tid_43543, 32) * 32) == 31 &&
            ltid_in_bounds_43555) {
            ((volatile __local
              int64_t *) color_42704)[sext_i32_i64(squot32(local_tid_43543,
                                                           32))] = x_35231;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_43558;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_43543, 32) == 0 && ltid_in_bounds_43555) {
                x_43553 = ((volatile __local
                            int64_t *) color_42704)[sext_i32_i64(local_tid_43543)];
                if ((local_tid_43543 - squot32(local_tid_43543, 32) * 32) ==
                    0) {
                    x_43552 = x_43553;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_43558 = 1;
            while (slt32(skip_threads_43558, 32)) {
                if (sle32(skip_threads_43558, local_tid_43543 -
                          squot32(local_tid_43543, 32) * 32) &&
                    (squot32(local_tid_43543, 32) == 0 &&
                     ltid_in_bounds_43555)) {
                    // read operands
                    {
                        x_43552 = ((volatile __local
                                    int64_t *) color_42704)[sext_i32_i64(local_tid_43543) -
                                                            sext_i32_i64(skip_threads_43558)];
                    }
                    // perform operation
                    {
                        bool inactive_43559 =
                             slt64(srem64(sext_i32_i64(local_tid_43543 * 32 +
                                          32 - 1), N_28874),
                                   sext_i32_i64(local_tid_43543 * 32 + 32 - 1) -
                                   sext_i32_i64((local_tid_43543 -
                                                 skip_threads_43558) * 32 + 32 -
                                   1));
                        
                        if (inactive_43559) {
                            x_43552 = x_43553;
                        }
                        if (!inactive_43559) {
                            int64_t defunc_1_op_res_43554 = add64(x_43552,
                                                                  x_43553);
                            
                            x_43552 = defunc_1_op_res_43554;
                        }
                    }
                }
                if (sle32(wave_sizze_43545, skip_threads_43558)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_43558, local_tid_43543 -
                          squot32(local_tid_43543, 32) * 32) &&
                    (squot32(local_tid_43543, 32) == 0 &&
                     ltid_in_bounds_43555)) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) color_42704)[sext_i32_i64(local_tid_43543)] =
                            x_43552;
                        x_43553 = x_43552;
                    }
                }
                if (sle32(wave_sizze_43545, skip_threads_43558)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_43558 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_43543, 32) == 0 || !ltid_in_bounds_43555)) {
            // read operands
            {
                x_35232 = x_35231;
                x_35231 = ((__local
                            int64_t *) color_42704)[sext_i32_i64(squot32(local_tid_43543,
                                                                         32)) -
                                                    (int64_t) 1];
            }
            // perform operation
            {
                bool inactive_43560 =
                     slt64(srem64(sext_i32_i64(local_tid_43543), N_28874),
                           sext_i32_i64(local_tid_43543) -
                           sext_i32_i64(squot32(local_tid_43543, 32) * 32 - 1));
                
                if (inactive_43560) {
                    x_35231 = x_35232;
                }
                if (!inactive_43560) {
                    int64_t defunc_1_op_res_35233 = add64(x_35231, x_35232);
                    
                    x_35231 = defunc_1_op_res_35233;
                }
            }
            // write final result
            {
                ((__local
                  int64_t *) color_42704)[sext_i32_i64(local_tid_43543)] =
                    x_35231;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_43543, 32) == 0) {
            ((__local int64_t *) color_42704)[sext_i32_i64(local_tid_43543)] =
                x_35232;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t last_res_35243 = ((__local int64_t *) color_42704)[i_29176];
    int32_t defunc_0_f_res_35244 = sext_i64_i32(last_res_35243);
    
    ((__local float *) color_42702)[sext_i32_i64(local_tid_43543)] = NAN;
    barrier(CLK_LOCAL_MEM_FENCE);
    ((__local int32_t *) color_42701)[sext_i32_i64(local_tid_43543)] = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t write_i_35212 = sext_i32_i64(ltid_pre_43547);
    int32_t phys_tid_35213 = local_tid_43543;
    float x_35249 = ((__local float *) color_42703)[write_i_35212];
    int32_t index_primexp_39425 = sext_i64_i32(write_i_35212);
    bool isnan_res_35252;
    
    isnan_res_35252 = futrts_isnan32(x_35249);
    
    bool defunc_0_p_res_35253 = !isnan_res_35252;
    int64_t defunc_1_f_res_35254;
    
    if (defunc_0_p_res_35253) {
        int64_t x_35250 = ((__local int64_t *) color_42704)[write_i_35212];
        int64_t defunc_1_f_res_t_res_35255 = sub64(x_35250, (int64_t) 1);
        
        defunc_1_f_res_35254 = defunc_1_f_res_t_res_35255;
    } else {
        defunc_1_f_res_35254 = (int64_t) -1;
    }
    if (sle64((int64_t) 0, defunc_1_f_res_35254) && slt64(defunc_1_f_res_35254,
                                                          N_28874)) {
        ((__local int32_t *) color_42701)[defunc_1_f_res_35254] =
            index_primexp_39425;
    }
    if (sle64((int64_t) 0, defunc_1_f_res_35254) && slt64(defunc_1_f_res_35254,
                                                          N_28874)) {
        ((__local float *) color_42702)[defunc_1_f_res_35254] = x_35249;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_tid_43543 == 0) {
        ((__global int32_t *) mem_42234)[gtid_35207] = defunc_0_f_res_35244;
    }
    ((__global float *) mem_42238)[gtid_35207 * N_28874 +
                                   sext_i32_i64(local_tid_43543)] = ((__local
                                                                      float *) color_42702)[sext_i32_i64(local_tid_43543)];
    barrier(CLK_LOCAL_MEM_FENCE);
    ((__global int32_t *) mem_42242)[gtid_35207 * N_28874 +
                                     sext_i32_i64(local_tid_43543)] = ((__local
                                                                        int32_t *) color_42701)[sext_i32_i64(local_tid_43543)];
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_2:
    return;
}
__kernel void mainMagnitudezisegmap_intragroup_35445(__global
                                                     int *global_failure,
                                                     int failure_is_an_option,
                                                     __global
                                                     int64_t *global_failure_args,
                                                     __local volatile
                                                     int64_t *red_arr_mem_43681_backing_aligned_0,
                                                     __local volatile
                                                     int64_t *red_arr_mem_43677_backing_aligned_1,
                                                     int64_t N_28874,
                                                     int64_t m_28875,
                                                     float hfrac_28880,
                                                     int64_t i32_res_28884,
                                                     int32_t k2p2_28886,
                                                     __global
                                                     unsigned char *images_mem_41421,
                                                     __global
                                                     unsigned char *defunc_4_map_res_mem_42266,
                                                     __global
                                                     unsigned char *mem_42319,
                                                     __global
                                                     unsigned char *mem_42322,
                                                     __global
                                                     unsigned char *mem_42325)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_43681_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_43681_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_43677_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43677_backing_aligned_1;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43669;
    int32_t local_tid_43670;
    int64_t group_sizze_43673;
    int32_t wave_sizze_43672;
    int32_t group_tid_43671;
    
    global_tid_43669 = get_global_id(0);
    local_tid_43670 = get_local_id(0);
    group_sizze_43673 = get_local_size(0);
    wave_sizze_43672 = LOCKSTEP_WIDTH;
    group_tid_43671 = get_group_id(0);
    
    int32_t phys_tid_35445 = group_tid_43671;
    int32_t ltid_pre_43674 = local_tid_43670;
    int64_t slice_43675 = m_28875;
    int64_t gtid_35436 = sext_i32_i64(group_tid_43671);
    int64_t remnant_43676 = sext_i32_i64(group_tid_43671) - gtid_35436;
    int32_t defunc_0_f_res_35534;
    int64_t gtid_35439 = sext_i32_i64(ltid_pre_43674);
    int32_t phys_tid_35440 = local_tid_43670;
    __local char *red_arr_mem_43677;
    
    red_arr_mem_43677 = (__local char *) red_arr_mem_43677_backing_0;
    
    float x_35538 = ((__global float *) images_mem_41421)[gtid_35436 * N_28874 +
                                                          gtid_35439];
    bool isnan_res_35539;
    
    isnan_res_35539 = futrts_isnan32(x_35538);
    
    bool cond_35540 = !isnan_res_35539;
    int32_t defunc_0_f_res_35541 = btoi_bool_i32(cond_35540);
    
    ((__local int32_t *) red_arr_mem_43677)[gtid_35439] = defunc_0_f_res_35541;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_43679;
    int32_t skip_waves_43680 = 1;
    int32_t x_35535;
    int32_t x_35536;
    
    offset_43679 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_43670, sext_i64_i32(i32_res_28884))) {
            x_35535 = ((__local
                        int32_t *) red_arr_mem_43677)[sext_i32_i64(local_tid_43670 +
                                                      offset_43679)];
        }
    }
    offset_43679 = 1;
    while (slt32(offset_43679, wave_sizze_43672)) {
        if (slt32(local_tid_43670 + offset_43679,
                  sext_i64_i32(i32_res_28884)) && ((local_tid_43670 -
                                                    squot32(local_tid_43670,
                                                            wave_sizze_43672) *
                                                    wave_sizze_43672) & (2 *
                                                                         offset_43679 -
                                                                         1)) ==
            0) {
            // read array element
            {
                x_35536 = ((volatile __local
                            int32_t *) red_arr_mem_43677)[sext_i32_i64(local_tid_43670 +
                                                          offset_43679)];
            }
            // apply reduction operation
            {
                int32_t defunc_1_op_res_35537 = add32(x_35535, x_35536);
                
                x_35535 = defunc_1_op_res_35537;
            }
            // write result of operation
            {
                ((volatile __local
                  int32_t *) red_arr_mem_43677)[sext_i32_i64(local_tid_43670)] =
                    x_35535;
            }
        }
        offset_43679 *= 2;
    }
    while (slt32(skip_waves_43680, squot32(sext_i64_i32(i32_res_28884) +
                                           wave_sizze_43672 - 1,
                                           wave_sizze_43672))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_43679 = skip_waves_43680 * wave_sizze_43672;
        if (slt32(local_tid_43670 + offset_43679,
                  sext_i64_i32(i32_res_28884)) && ((local_tid_43670 -
                                                    squot32(local_tid_43670,
                                                            wave_sizze_43672) *
                                                    wave_sizze_43672) == 0 &&
                                                   (squot32(local_tid_43670,
                                                            wave_sizze_43672) &
                                                    (2 * skip_waves_43680 -
                                                     1)) == 0)) {
            // read array element
            {
                x_35536 = ((__local
                            int32_t *) red_arr_mem_43677)[sext_i32_i64(local_tid_43670 +
                                                          offset_43679)];
            }
            // apply reduction operation
            {
                int32_t defunc_1_op_res_35537 = add32(x_35535, x_35536);
                
                x_35535 = defunc_1_op_res_35537;
            }
            // write result of operation
            {
                ((__local
                  int32_t *) red_arr_mem_43677)[sext_i32_i64(local_tid_43670)] =
                    x_35535;
            }
        }
        skip_waves_43680 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    defunc_0_f_res_35534 = ((__local int32_t *) red_arr_mem_43677)[(int64_t) 0];
    
    float defunc_0_f_res_35542;
    int64_t gtid_35441 = sext_i32_i64(ltid_pre_43674);
    int32_t phys_tid_35442 = local_tid_43670;
    __local char *red_arr_mem_43681;
    
    red_arr_mem_43681 = (__local char *) red_arr_mem_43681_backing_1;
    
    int32_t index_primexp_39433 = sext_i64_i32(gtid_35441);
    bool cond_35547 = slt32(index_primexp_39433, defunc_0_f_res_35534);
    float defunc_0_f_res_35548;
    
    if (cond_35547) {
        int64_t i_35549 = sext_i32_i64(index_primexp_39433);
        bool x_35550 = sle64((int64_t) 0, i_35549);
        bool y_35551 = slt64(i_35549, N_28874);
        bool bounds_check_35552 = x_35550 && y_35551;
        bool index_certs_35553;
        
        if (!bounds_check_35552) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 96) == -1) {
                    global_failure_args[0] = i_35549;
                    global_failure_args[1] = N_28874;
                    ;
                }
                local_failure = true;
                goto error_2;
            }
        }
        
        float defunc_0_f_res_t_res_35554 = ((__global
                                             float *) defunc_4_map_res_mem_42266)[gtid_35436 *
                                                                                  N_28874 +
                                                                                  i_35549];
        
        defunc_0_f_res_35548 = defunc_0_f_res_t_res_35554;
    } else {
        defunc_0_f_res_35548 = 0.0F;
    }
    
    float defunc_0_f_res_35555 = defunc_0_f_res_35548 * defunc_0_f_res_35548;
    
    ((__local float *) red_arr_mem_43681)[gtid_35441] = defunc_0_f_res_35555;
    
  error_2:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_43683;
    int32_t skip_waves_43684 = 1;
    float x_35543;
    float x_35544;
    
    offset_43683 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_43670, sext_i64_i32(i32_res_28884))) {
            x_35543 = ((__local
                        float *) red_arr_mem_43681)[sext_i32_i64(local_tid_43670 +
                                                    offset_43683)];
        }
    }
    offset_43683 = 1;
    while (slt32(offset_43683, wave_sizze_43672)) {
        if (slt32(local_tid_43670 + offset_43683,
                  sext_i64_i32(i32_res_28884)) && ((local_tid_43670 -
                                                    squot32(local_tid_43670,
                                                            wave_sizze_43672) *
                                                    wave_sizze_43672) & (2 *
                                                                         offset_43683 -
                                                                         1)) ==
            0) {
            // read array element
            {
                x_35544 = ((volatile __local
                            float *) red_arr_mem_43681)[sext_i32_i64(local_tid_43670 +
                                                        offset_43683)];
            }
            // apply reduction operation
            {
                float defunc_1_op_res_35545 = x_35543 + x_35544;
                
                x_35543 = defunc_1_op_res_35545;
            }
            // write result of operation
            {
                ((volatile __local
                  float *) red_arr_mem_43681)[sext_i32_i64(local_tid_43670)] =
                    x_35543;
            }
        }
        offset_43683 *= 2;
    }
    while (slt32(skip_waves_43684, squot32(sext_i64_i32(i32_res_28884) +
                                           wave_sizze_43672 - 1,
                                           wave_sizze_43672))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_43683 = skip_waves_43684 * wave_sizze_43672;
        if (slt32(local_tid_43670 + offset_43683,
                  sext_i64_i32(i32_res_28884)) && ((local_tid_43670 -
                                                    squot32(local_tid_43670,
                                                            wave_sizze_43672) *
                                                    wave_sizze_43672) == 0 &&
                                                   (squot32(local_tid_43670,
                                                            wave_sizze_43672) &
                                                    (2 * skip_waves_43684 -
                                                     1)) == 0)) {
            // read array element
            {
                x_35544 = ((__local
                            float *) red_arr_mem_43681)[sext_i32_i64(local_tid_43670 +
                                                        offset_43683)];
            }
            // apply reduction operation
            {
                float defunc_1_op_res_35545 = x_35543 + x_35544;
                
                x_35543 = defunc_1_op_res_35545;
            }
            // write result of operation
            {
                ((__local
                  float *) red_arr_mem_43681)[sext_i32_i64(local_tid_43670)] =
                    x_35543;
            }
        }
        skip_waves_43684 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    defunc_0_f_res_35542 = ((__local float *) red_arr_mem_43681)[(int64_t) 0];
    
    int32_t r32_arg_35556 = sub32(defunc_0_f_res_35534, k2p2_28886);
    float i32_res_35557 = sitofp_i32_f32(r32_arg_35556);
    float sqrt_arg_35558 = defunc_0_f_res_35542 / i32_res_35557;
    float sqrt_res_35559;
    
    sqrt_res_35559 = futrts_sqrt32(sqrt_arg_35558);
    
    float i32_res_35560 = sitofp_i32_f32(defunc_0_f_res_35534);
    float t32_arg_35561 = hfrac_28880 * i32_res_35560;
    int32_t f32_res_35562 = fptosi_f32_i32(t32_arg_35561);
    
    if (local_tid_43670 == 0) {
        ((__global int32_t *) mem_42319)[gtid_35436] = f32_res_35562;
    }
    if (local_tid_43670 == 0) {
        ((__global int32_t *) mem_42322)[gtid_35436] = defunc_0_f_res_35534;
    }
    if (local_tid_43670 == 0) {
        ((__global float *) mem_42325)[gtid_35436] = sqrt_res_35559;
    }
    
  error_4:
    return;
}
__kernel void mainMagnitudezisegmap_intragroup_36154(__global
                                                     int *global_failure,
                                                     int failure_is_an_option,
                                                     __global
                                                     int64_t *global_failure_args,
                                                     __local volatile
                                                     int64_t *red_arr_mem_43997_backing_aligned_0,
                                                     __local volatile
                                                     int64_t *red_arr_mem_43995_backing_aligned_1,
                                                     __local volatile
                                                     int64_t *red_arr_mem_43993_backing_aligned_2,
                                                     __local volatile
                                                     int64_t *color_42717_backing_aligned_3,
                                                     int64_t N_28874,
                                                     int64_t m_28875,
                                                     int32_t n_28878,
                                                     int64_t iota32_arg_29304,
                                                     __global
                                                     unsigned char *defunc_4_map_res_mem_42265,
                                                     __global
                                                     unsigned char *defunc_4_map_res_mem_42266,
                                                     __global
                                                     unsigned char *defunc_4_map_res_mem_42267,
                                                     __global
                                                     unsigned char *defunc_3_map_res_mem_42344,
                                                     __global
                                                     unsigned char *defunc_3_map_res_mem_42345,
                                                     __global
                                                     unsigned char *defunc_3_map_res_mem_42346,
                                                     __global
                                                     unsigned char *defunc_0_f_res_mem_42383,
                                                     __global
                                                     unsigned char *mem_42390,
                                                     __global
                                                     unsigned char *mem_42445,
                                                     __global
                                                     unsigned char *mem_42448)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_43997_backing_3 =
                          (__local volatile
                           char *) red_arr_mem_43997_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_43995_backing_2 =
                          (__local volatile
                           char *) red_arr_mem_43995_backing_aligned_1;
    __local volatile char *restrict red_arr_mem_43993_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_43993_backing_aligned_2;
    __local volatile char *restrict color_42717_backing_0 = (__local volatile
                                                             char *) color_42717_backing_aligned_3;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43974;
    int32_t local_tid_43975;
    int64_t group_sizze_43978;
    int32_t wave_sizze_43977;
    int32_t group_tid_43976;
    
    global_tid_43974 = get_global_id(0);
    local_tid_43975 = get_local_id(0);
    group_sizze_43978 = get_local_size(0);
    wave_sizze_43977 = LOCKSTEP_WIDTH;
    group_tid_43976 = get_group_id(0);
    
    int32_t phys_tid_36154 = group_tid_43976;
    int32_t ltid_pre_43979 = local_tid_43975;
    int64_t slice_43980 = m_28875;
    int64_t gtid_36145 = sext_i32_i64(group_tid_43976);
    int64_t remnant_43981 = sext_i32_i64(group_tid_43976) - gtid_36145;
    __local char *color_42717;
    
    color_42717 = (__local char *) color_42717_backing_0;
    
    int32_t x_36162 = ((__global
                        int32_t *) defunc_4_map_res_mem_42265)[gtid_36145];
    int32_t x_36163 = ((__global
                        int32_t *) defunc_3_map_res_mem_42345)[gtid_36145];
    float x_36164 = ((__global float *) defunc_3_map_res_mem_42346)[gtid_36145];
    int32_t x_36165 = ((__global
                        int32_t *) defunc_3_map_res_mem_42344)[gtid_36145];
    float x_36166 = ((__global float *) defunc_0_f_res_mem_42383)[gtid_36145];
    int32_t y_36171 = sub32(x_36162, x_36163);
    float i32_res_36172 = sitofp_i32_f32(x_36163);
    float sqrt_res_36173;
    
    sqrt_res_36173 = futrts_sqrt32(i32_res_36172);
    
    float y_36174 = x_36164 * sqrt_res_36173;
    int64_t gtid_36148 = sext_i32_i64(ltid_pre_43979);
    int32_t phys_tid_36149 = local_tid_43975;
    int32_t index_primexp_39451 = sext_i64_i32(gtid_36148);
    bool cond_36187 = sle32(y_36171, index_primexp_39451);
    float defunc_0_f_res_36188;
    
    if (cond_36187) {
        defunc_0_f_res_36188 = 0.0F;
    } else {
        bool cond_36189 = index_primexp_39451 == 0;
        float defunc_0_f_res_f_res_36190;
        
        if (cond_36189) {
            defunc_0_f_res_f_res_36190 = x_36166;
        } else {
            int32_t i_36191 = add32(x_36163, index_primexp_39451);
            int64_t i_36192 = sext_i32_i64(i_36191);
            bool x_36193 = sle64((int64_t) 0, i_36192);
            bool y_36194 = slt64(i_36192, N_28874);
            bool bounds_check_36195 = x_36193 && y_36194;
            bool index_certs_36196;
            
            if (!bounds_check_36195) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 115) ==
                        -1) {
                        global_failure_args[0] = i_36192;
                        global_failure_args[1] = N_28874;
                        ;
                    }
                    local_failure = true;
                    goto error_0;
                }
            }
            
            float x_36197 = ((__global
                              float *) defunc_4_map_res_mem_42266)[gtid_36145 *
                                                                   N_28874 +
                                                                   i_36192];
            int32_t x_36198 = sub32(x_36163, x_36165);
            int32_t i_36199 = add32(x_36198, index_primexp_39451);
            int64_t i_36200 = sext_i32_i64(i_36199);
            bool x_36201 = sle64((int64_t) 0, i_36200);
            bool y_36202 = slt64(i_36200, N_28874);
            bool bounds_check_36203 = x_36201 && y_36202;
            bool index_certs_36204;
            
            if (!bounds_check_36203) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 116) ==
                        -1) {
                        global_failure_args[0] = i_36200;
                        global_failure_args[1] = N_28874;
                        ;
                    }
                    local_failure = true;
                    goto error_0;
                }
            }
            
            float y_36205 = ((__global
                              float *) defunc_4_map_res_mem_42266)[gtid_36145 *
                                                                   N_28874 +
                                                                   i_36200];
            float defunc_0_f_res_f_res_f_res_36206 = x_36197 - y_36205;
            
            defunc_0_f_res_f_res_36190 = defunc_0_f_res_f_res_f_res_36206;
        }
        defunc_0_f_res_36188 = defunc_0_f_res_f_res_36190;
    }
    ((__local float *) color_42717)[gtid_36148] = defunc_0_f_res_36188;
    
  error_0:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t dims_flat_43982 = iota32_arg_29304;
    float x_36183;
    float x_36184;
    float x_43984;
    float x_43985;
    bool ltid_in_bounds_43987 = slt64(sext_i32_i64(local_tid_43975),
                                      iota32_arg_29304);
    int32_t skip_threads_43988;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_43987) {
            x_36184 = ((volatile __local
                        float *) color_42717)[sext_i32_i64(local_tid_43975)];
            if ((local_tid_43975 - squot32(local_tid_43975, 32) * 32) == 0) {
                x_36183 = x_36184;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_43988 = 1;
        while (slt32(skip_threads_43988, 32)) {
            if (sle32(skip_threads_43988, local_tid_43975 -
                      squot32(local_tid_43975, 32) * 32) &&
                ltid_in_bounds_43987) {
                // read operands
                {
                    x_36183 = ((volatile __local
                                float *) color_42717)[sext_i32_i64(local_tid_43975) -
                                                      sext_i32_i64(skip_threads_43988)];
                }
                // perform operation
                {
                    bool inactive_43989 =
                         slt64(srem64(sext_i32_i64(local_tid_43975),
                                      iota32_arg_29304),
                               sext_i32_i64(local_tid_43975) -
                               sext_i32_i64(local_tid_43975 -
                               skip_threads_43988));
                    
                    if (inactive_43989) {
                        x_36183 = x_36184;
                    }
                    if (!inactive_43989) {
                        float defunc_1_op_res_36185 = x_36183 + x_36184;
                        
                        x_36183 = defunc_1_op_res_36185;
                    }
                }
            }
            if (sle32(wave_sizze_43977, skip_threads_43988)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_43988, local_tid_43975 -
                      squot32(local_tid_43975, 32) * 32) &&
                ltid_in_bounds_43987) {
                // write result
                {
                    ((volatile __local
                      float *) color_42717)[sext_i32_i64(local_tid_43975)] =
                        x_36183;
                    x_36184 = x_36183;
                }
            }
            if (sle32(wave_sizze_43977, skip_threads_43988)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_43988 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_43975 - squot32(local_tid_43975, 32) * 32) == 31 &&
            ltid_in_bounds_43987) {
            ((volatile __local
              float *) color_42717)[sext_i32_i64(squot32(local_tid_43975,
                                                         32))] = x_36183;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_43990;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_43975, 32) == 0 && ltid_in_bounds_43987) {
                x_43985 = ((volatile __local
                            float *) color_42717)[sext_i32_i64(local_tid_43975)];
                if ((local_tid_43975 - squot32(local_tid_43975, 32) * 32) ==
                    0) {
                    x_43984 = x_43985;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_43990 = 1;
            while (slt32(skip_threads_43990, 32)) {
                if (sle32(skip_threads_43990, local_tid_43975 -
                          squot32(local_tid_43975, 32) * 32) &&
                    (squot32(local_tid_43975, 32) == 0 &&
                     ltid_in_bounds_43987)) {
                    // read operands
                    {
                        x_43984 = ((volatile __local
                                    float *) color_42717)[sext_i32_i64(local_tid_43975) -
                                                          sext_i32_i64(skip_threads_43990)];
                    }
                    // perform operation
                    {
                        bool inactive_43991 =
                             slt64(srem64(sext_i32_i64(local_tid_43975 * 32 +
                                          32 - 1), iota32_arg_29304),
                                   sext_i32_i64(local_tid_43975 * 32 + 32 - 1) -
                                   sext_i32_i64((local_tid_43975 -
                                                 skip_threads_43990) * 32 + 32 -
                                   1));
                        
                        if (inactive_43991) {
                            x_43984 = x_43985;
                        }
                        if (!inactive_43991) {
                            float defunc_1_op_res_43986 = x_43984 + x_43985;
                            
                            x_43984 = defunc_1_op_res_43986;
                        }
                    }
                }
                if (sle32(wave_sizze_43977, skip_threads_43990)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_43990, local_tid_43975 -
                          squot32(local_tid_43975, 32) * 32) &&
                    (squot32(local_tid_43975, 32) == 0 &&
                     ltid_in_bounds_43987)) {
                    // write result
                    {
                        ((volatile __local
                          float *) color_42717)[sext_i32_i64(local_tid_43975)] =
                            x_43984;
                        x_43985 = x_43984;
                    }
                }
                if (sle32(wave_sizze_43977, skip_threads_43990)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_43990 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_43975, 32) == 0 || !ltid_in_bounds_43987)) {
            // read operands
            {
                x_36184 = x_36183;
                x_36183 = ((__local
                            float *) color_42717)[sext_i32_i64(squot32(local_tid_43975,
                                                                       32)) -
                                                  (int64_t) 1];
            }
            // perform operation
            {
                bool inactive_43992 =
                     slt64(srem64(sext_i32_i64(local_tid_43975),
                                  iota32_arg_29304),
                           sext_i32_i64(local_tid_43975) -
                           sext_i32_i64(squot32(local_tid_43975, 32) * 32 - 1));
                
                if (inactive_43992) {
                    x_36183 = x_36184;
                }
                if (!inactive_43992) {
                    float defunc_1_op_res_36185 = x_36183 + x_36184;
                    
                    x_36183 = defunc_1_op_res_36185;
                }
            }
            // write final result
            {
                ((__local float *) color_42717)[sext_i32_i64(local_tid_43975)] =
                    x_36183;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_43975, 32) == 0) {
            ((__local float *) color_42717)[sext_i32_i64(local_tid_43975)] =
                x_36184;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    bool acc0_36212;
    int32_t acc0_36213;
    float acc0_36214;
    int64_t gtid_36150 = sext_i32_i64(ltid_pre_43979);
    int32_t phys_tid_36151 = local_tid_43975;
    __local char *red_arr_mem_43993;
    
    red_arr_mem_43993 = (__local char *) red_arr_mem_43993_backing_1;
    
    __local char *red_arr_mem_43995;
    
    red_arr_mem_43995 = (__local char *) red_arr_mem_43995_backing_2;
    
    __local char *red_arr_mem_43997;
    
    red_arr_mem_43997 = (__local char *) red_arr_mem_43997_backing_3;
    
    float x_36229 = ((__local float *) color_42717)[gtid_36150];
    float x_36230 = ((__global float *) mem_42390)[gtid_36150];
    int32_t index_primexp_39454 = sext_i64_i32(gtid_36150);
    float defunc_0_f_res_36233 = x_36229 / y_36174;
    bool cond_36234 = slt32(index_primexp_39454, y_36171);
    bool isnan_res_36235;
    
    isnan_res_36235 = futrts_isnan32(defunc_0_f_res_36233);
    
    bool cond_t_res_36236 = !isnan_res_36235;
    bool x_36237 = cond_36234 && cond_t_res_36236;
    float abs_res_36238 = (float) fabs(defunc_0_f_res_36233);
    bool defunc_2_f_res_t_res_36239 = x_36230 < abs_res_36238;
    bool x_36240 = x_36237 && defunc_2_f_res_t_res_36239;
    float defunc_1_f_res_36241;
    
    if (cond_36234) {
        defunc_1_f_res_36241 = defunc_0_f_res_36233;
    } else {
        defunc_1_f_res_36241 = 0.0F;
    }
    ((__local bool *) red_arr_mem_43993)[gtid_36150] = x_36240;
    ((__local int32_t *) red_arr_mem_43995)[gtid_36150] = index_primexp_39454;
    ((__local float *) red_arr_mem_43997)[gtid_36150] = defunc_1_f_res_36241;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_43999;
    int32_t skip_waves_44000 = 1;
    bool x_36215;
    int32_t x_36216;
    float x_36217;
    bool x_36218;
    int32_t x_36219;
    float x_36220;
    
    offset_43999 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_43975, sext_i64_i32(iota32_arg_29304))) {
            x_36215 = ((__local
                        bool *) red_arr_mem_43993)[sext_i32_i64(local_tid_43975 +
                                                   offset_43999)];
            x_36216 = ((__local
                        int32_t *) red_arr_mem_43995)[sext_i32_i64(local_tid_43975 +
                                                      offset_43999)];
            x_36217 = ((__local
                        float *) red_arr_mem_43997)[sext_i32_i64(local_tid_43975 +
                                                    offset_43999)];
        }
    }
    offset_43999 = 1;
    while (slt32(offset_43999, wave_sizze_43977)) {
        if (slt32(local_tid_43975 + offset_43999,
                  sext_i64_i32(iota32_arg_29304)) && ((local_tid_43975 -
                                                       squot32(local_tid_43975,
                                                               wave_sizze_43977) *
                                                       wave_sizze_43977) & (2 *
                                                                            offset_43999 -
                                                                            1)) ==
            0) {
            // read array element
            {
                x_36218 = ((volatile __local
                            bool *) red_arr_mem_43993)[sext_i32_i64(local_tid_43975 +
                                                       offset_43999)];
                x_36219 = ((volatile __local
                            int32_t *) red_arr_mem_43995)[sext_i32_i64(local_tid_43975 +
                                                          offset_43999)];
                x_36220 = ((volatile __local
                            float *) red_arr_mem_43997)[sext_i32_i64(local_tid_43975 +
                                                        offset_43999)];
            }
            // apply reduction operation
            {
                bool defunc_1_op_res_36221;
                int32_t defunc_1_op_res_36222;
                
                if (x_36215) {
                    defunc_1_op_res_36221 = x_36215;
                    defunc_1_op_res_36222 = x_36216;
                } else {
                    bool x_36223 = x_36218 && x_36218;
                    bool x_36224 = !x_36218;
                    bool y_36225 = x_36215 && x_36224;
                    bool defunc_1_op_res_f_res_36226 = x_36223 || y_36225;
                    int32_t defunc_1_op_res_f_res_36227;
                    
                    if (x_36218) {
                        defunc_1_op_res_f_res_36227 = x_36219;
                    } else {
                        defunc_1_op_res_f_res_36227 = x_36216;
                    }
                    defunc_1_op_res_36221 = defunc_1_op_res_f_res_36226;
                    defunc_1_op_res_36222 = defunc_1_op_res_f_res_36227;
                }
                
                float defunc_1_op_res_36228 = x_36217 + x_36220;
                
                x_36215 = defunc_1_op_res_36221;
                x_36216 = defunc_1_op_res_36222;
                x_36217 = defunc_1_op_res_36228;
            }
            // write result of operation
            {
                ((volatile __local
                  bool *) red_arr_mem_43993)[sext_i32_i64(local_tid_43975)] =
                    x_36215;
                ((volatile __local
                  int32_t *) red_arr_mem_43995)[sext_i32_i64(local_tid_43975)] =
                    x_36216;
                ((volatile __local
                  float *) red_arr_mem_43997)[sext_i32_i64(local_tid_43975)] =
                    x_36217;
            }
        }
        offset_43999 *= 2;
    }
    while (slt32(skip_waves_44000, squot32(sext_i64_i32(iota32_arg_29304) +
                                           wave_sizze_43977 - 1,
                                           wave_sizze_43977))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_43999 = skip_waves_44000 * wave_sizze_43977;
        if (slt32(local_tid_43975 + offset_43999,
                  sext_i64_i32(iota32_arg_29304)) && ((local_tid_43975 -
                                                       squot32(local_tid_43975,
                                                               wave_sizze_43977) *
                                                       wave_sizze_43977) == 0 &&
                                                      (squot32(local_tid_43975,
                                                               wave_sizze_43977) &
                                                       (2 * skip_waves_44000 -
                                                        1)) == 0)) {
            // read array element
            {
                x_36218 = ((__local
                            bool *) red_arr_mem_43993)[sext_i32_i64(local_tid_43975 +
                                                       offset_43999)];
                x_36219 = ((__local
                            int32_t *) red_arr_mem_43995)[sext_i32_i64(local_tid_43975 +
                                                          offset_43999)];
                x_36220 = ((__local
                            float *) red_arr_mem_43997)[sext_i32_i64(local_tid_43975 +
                                                        offset_43999)];
            }
            // apply reduction operation
            {
                bool defunc_1_op_res_36221;
                int32_t defunc_1_op_res_36222;
                
                if (x_36215) {
                    defunc_1_op_res_36221 = x_36215;
                    defunc_1_op_res_36222 = x_36216;
                } else {
                    bool x_36223 = x_36218 && x_36218;
                    bool x_36224 = !x_36218;
                    bool y_36225 = x_36215 && x_36224;
                    bool defunc_1_op_res_f_res_36226 = x_36223 || y_36225;
                    int32_t defunc_1_op_res_f_res_36227;
                    
                    if (x_36218) {
                        defunc_1_op_res_f_res_36227 = x_36219;
                    } else {
                        defunc_1_op_res_f_res_36227 = x_36216;
                    }
                    defunc_1_op_res_36221 = defunc_1_op_res_f_res_36226;
                    defunc_1_op_res_36222 = defunc_1_op_res_f_res_36227;
                }
                
                float defunc_1_op_res_36228 = x_36217 + x_36220;
                
                x_36215 = defunc_1_op_res_36221;
                x_36216 = defunc_1_op_res_36222;
                x_36217 = defunc_1_op_res_36228;
            }
            // write result of operation
            {
                ((__local
                  bool *) red_arr_mem_43993)[sext_i32_i64(local_tid_43975)] =
                    x_36215;
                ((__local
                  int32_t *) red_arr_mem_43995)[sext_i32_i64(local_tid_43975)] =
                    x_36216;
                ((__local
                  float *) red_arr_mem_43997)[sext_i32_i64(local_tid_43975)] =
                    x_36217;
            }
        }
        skip_waves_44000 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    acc0_36212 = ((__local bool *) red_arr_mem_43993)[(int64_t) 0];
    acc0_36213 = ((__local int32_t *) red_arr_mem_43995)[(int64_t) 0];
    acc0_36214 = ((__local float *) red_arr_mem_43997)[(int64_t) 0];
    
    bool x_36244 = acc0_36212 && acc0_36212;
    int32_t defunc_1_op_res_f_res_36248;
    
    if (acc0_36212) {
        defunc_1_op_res_f_res_36248 = acc0_36213;
    } else {
        defunc_1_op_res_f_res_36248 = -1;
    }
    
    bool cond_36254 = y_36171 == 0;
    float defunc_0_f_res_36255;
    
    if (cond_36254) {
        defunc_0_f_res_36255 = 0.0F;
    } else {
        float i32_res_36256 = sitofp_i32_f32(y_36171);
        float defunc_0_f_res_f_res_36257 = acc0_36214 / i32_res_36256;
        
        defunc_0_f_res_36255 = defunc_0_f_res_f_res_36257;
    }
    
    bool cond_36258 = !x_36244;
    int32_t fst_breakzq_36259;
    
    if (cond_36258) {
        fst_breakzq_36259 = -1;
    } else {
        bool cond_36260 = slt32(defunc_1_op_res_f_res_36248, y_36171);
        int32_t adjustValInds_res_36261;
        
        if (cond_36260) {
            int32_t i_36262 = add32(x_36163, defunc_1_op_res_f_res_36248);
            int64_t i_36263 = sext_i32_i64(i_36262);
            bool x_36264 = sle64((int64_t) 0, i_36263);
            bool y_36265 = slt64(i_36263, N_28874);
            bool bounds_check_36266 = x_36264 && y_36265;
            bool index_certs_36267;
            
            if (!bounds_check_36266) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 117) ==
                        -1) {
                        global_failure_args[0] = i_36263;
                        global_failure_args[1] = N_28874;
                        ;
                    }
                    local_failure = true;
                    goto error_3;
                }
            }
            
            int32_t x_36268 = ((__global
                                int32_t *) defunc_4_map_res_mem_42267)[gtid_36145 *
                                                                       N_28874 +
                                                                       i_36263];
            int32_t adjustValInds_res_t_res_36269 = sub32(x_36268, n_28878);
            
            adjustValInds_res_36261 = adjustValInds_res_t_res_36269;
        } else {
            adjustValInds_res_36261 = -1;
        }
        fst_breakzq_36259 = adjustValInds_res_36261;
    }
    
    bool cond_36270 = sle32(x_36163, 5);
    bool cond_f_res_36271 = sle32(y_36171, 5);
    bool x_36272 = !cond_36270;
    bool y_36273 = cond_f_res_36271 && x_36272;
    bool cond_36274 = cond_36270 || y_36273;
    int32_t fst_breakzq_36275;
    
    if (cond_36274) {
        fst_breakzq_36275 = -2;
    } else {
        fst_breakzq_36275 = fst_breakzq_36259;
    }
    if (local_tid_43975 == 0) {
        ((__global int32_t *) mem_42445)[gtid_36145] = fst_breakzq_36275;
    }
    if (local_tid_43975 == 0) {
        ((__global float *) mem_42448)[gtid_36145] = defunc_0_f_res_36255;
    }
    
  error_3:
    return;
}
__kernel void mainMagnitudezisegmap_intragroup_39586(__global
                                                     int *global_failure,
                                                     __local volatile
                                                     int64_t *color_42664_backing_aligned_0,
                                                     int64_t m_28875,
                                                     int32_t n_28878,
                                                     int64_t i32_res_28890,
                                                     int64_t Ty_39574,
                                                     int64_t Tx_39575,
                                                     int64_t gridDim_x_39576,
                                                     int64_t gridDim_y_39577,
                                                     int64_t gridDim_zz_39578,
                                                     int64_t group_sizze_tile3d_39581,
                                                     int64_t count_shmem_39582,
                                                     __global
                                                     unsigned char *mem_41435,
                                                     __global
                                                     unsigned char *mem_41440,
                                                     __global
                                                     unsigned char *mem_41515,
                                                     __global
                                                     unsigned char *mem_41576)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict color_42664_backing_0 = (__local volatile
                                                             char *) color_42664_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_42942;
    int32_t local_tid_42943;
    int64_t group_sizze_42946;
    int32_t wave_sizze_42945;
    int32_t group_tid_42944;
    
    global_tid_42942 = get_global_id(0);
    local_tid_42943 = get_local_id(0);
    group_sizze_42946 = get_local_size(0);
    wave_sizze_42945 = LOCKSTEP_WIDTH;
    group_tid_42944 = get_group_id(0);
    
    int32_t gid_flat_39586 = group_tid_42944;
    int32_t ltid_pre_42947 = squot32(local_tid_42943, sext_i64_i32(Ty_39574) *
                                     sext_i64_i32(Tx_39575));
    int32_t ltid_pre_42948 = squot32(local_tid_42943 - squot32(local_tid_42943,
                                                               sext_i64_i32(Ty_39574) *
                                                               sext_i64_i32(Tx_39575)) *
                                     (sext_i64_i32(Ty_39574) *
                                      sext_i64_i32(Tx_39575)),
                                     sext_i64_i32(Tx_39575));
    int32_t ltid_pre_42949 = local_tid_42943 - squot32(local_tid_42943,
                                                       sext_i64_i32(Ty_39574) *
                                                       sext_i64_i32(Tx_39575)) *
            (sext_i64_i32(Ty_39574) * sext_i64_i32(Tx_39575)) -
            squot32(local_tid_42943 - squot32(local_tid_42943,
                                              sext_i64_i32(Ty_39574) *
                                              sext_i64_i32(Tx_39575)) *
                    (sext_i64_i32(Ty_39574) * sext_i64_i32(Tx_39575)),
                    sext_i64_i32(Tx_39575)) * sext_i64_i32(Tx_39575);
    int32_t ltid_pre_42950 = squot32(local_tid_42943, sext_i64_i32(Tx_39575));
    int32_t ltid_pre_42951 = local_tid_42943 - squot32(local_tid_42943,
                                                       sext_i64_i32(Tx_39575)) *
            sext_i64_i32(Tx_39575);
    int32_t ltid_pre_42952 = local_tid_42943;
    int64_t slice_42953 = gridDim_x_39576;
    int64_t slice_42954 = gridDim_y_39577 * slice_42953;
    int64_t slice_42955 = gridDim_zz_39578 * slice_42954;
    int64_t gid_zz_39585 = squot64(sext_i32_i64(group_tid_42944), slice_42954);
    int64_t remnant_42956 = sext_i32_i64(group_tid_42944) - gid_zz_39585 *
            slice_42954;
    int64_t gid_y_39584 = squot64(remnant_42956, slice_42953);
    int64_t remnant_42957 = remnant_42956 - gid_y_39584 * slice_42953;
    int64_t gid_x_39583 = remnant_42957;
    int64_t remnant_42958 = remnant_42957 - gid_x_39583;
    float color_42662[30 * 1 * 1];
    float color_42663[30];
    __local char *color_42664;
    
    color_42664 = (__local char *) color_42664_backing_0;
    
    float color_42665[30];
    int64_t ii_39587 = (int64_t) 30 * gid_zz_39585;
    int64_t jj1_39588 = Ty_39574 * gid_y_39584;
    int64_t jj2_39589 = Tx_39575 * gid_x_39583;
    int64_t ltid_y_39592 = sext_i32_i64(ltid_pre_42950);
    int64_t ltid_x_39590 = sext_i32_i64(ltid_pre_42951);
    int32_t ltid_flat_39591 = local_tid_42943;
    float color_42659[30];
    
    for (int32_t i_41315 = 0; i_41315 < 30; i_41315++) {
        int64_t i_39600 = sext_i32_i64(i_41315);
        
        color_42659[i_39600] = 0.0F;
    }
    for (int64_t i_42960 = 0; i_42960 < (int64_t) 30; i_42960++) {
        color_42665[i_42960] = color_42659[i_42960];
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float loop_mem_41557[30];
    float mem_param_41528[30];
    
    for (int32_t i_1 = 0; i_1 < 30; i_1++)
        mem_param_41528[i_1] = color_42665[i_1];
    for (int32_t i_41317 = 0; i_41317 < n_28878; i_41317++) {
        int64_t i_39605 = sext_i32_i64(i_41317);
        
        for (int64_t i_39608 = 0; i_39608 < count_shmem_39582; i_39608++) {
            int64_t offs_39621 = group_sizze_tile3d_39581 * i_39608;
            int64_t ltid_39611 = sext_i32_i64(ltid_pre_42952);
            int32_t ltid_flat_39610 = local_tid_42943;
            int64_t loc_ind_39622 = ltid_39611 + offs_39621;
            int64_t gtid_39623 = ii_39587 + loc_ind_39622;
            bool cond_39624 = slt64(gtid_39623, m_28875);
            float y_elem_39625;
            
            if (cond_39624) {
                float Y_elem_39627 = ((__global float *) mem_41515)[i_39605 *
                                                                    m_28875 +
                                                                    gtid_39623];
                
                y_elem_39625 = Y_elem_39627;
            } else {
                y_elem_39625 = 0.0F;
            }
            
            bool cond_39629 = slt64(loc_ind_39622, (int64_t) 30);
            int64_t y_loc_ind_39630;
            
            if (cond_39629) {
                y_loc_ind_39630 = loc_ind_39622;
            } else {
                y_loc_ind_39630 = (int64_t) -1;
            }
            if (sle64((int64_t) 0, y_loc_ind_39630) && slt64(y_loc_ind_39630,
                                                             (int64_t) 30)) {
                ((__local float *) color_42664)[y_loc_ind_39630] = y_elem_39625;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        
        int64_t ltid_y_39636 = sext_i32_i64(ltid_pre_42950);
        int64_t ltid_x_39634 = sext_i32_i64(ltid_pre_42951);
        int32_t ltid_flat_39635 = local_tid_42943;
        float color_42660[30];
        int64_t gtid_39663 = jj1_39588 + ltid_y_39636;
        int64_t gtid_39664 = jj2_39589 + ltid_x_39634;
        bool binop_x_39666 = slt64(gtid_39663, i32_res_28890);
        bool binop_y_39667 = slt64(gtid_39664, i32_res_28890);
        bool cond_39668 = binop_x_39666 && binop_y_39667;
        
        if (cond_39668) {
            float x_39671 = ((__global float *) mem_41435)[i_39605 *
                                                           i32_res_28890 +
                                                           gtid_39663];
            float x_39673 = ((__global float *) mem_41440)[i_39605 *
                                                           i32_res_28890 +
                                                           gtid_39664];
            
            for (int32_t i_41316 = 0; i_41316 < 30; i_41316++) {
                int64_t i_39675 = sext_i32_i64(i_41316);
                int64_t gtid_39677 = ii_39587 + i_39675;
                bool cond_39678 = slt64(gtid_39677, m_28875);
                
                if (cond_39678) {
                    float inp_reg_var2zz_39680 = ((__local
                                                   float *) color_42664)[i_39675];
                    float res_reg_var2zz_39681 = mem_param_41528[i_39675];
                    float x_39685 = x_39671 * x_39673;
                    bool isnan_res_39686;
                    
                    isnan_res_39686 = futrts_isnan32(inp_reg_var2zz_39680);
                    
                    float y_39687;
                    
                    if (isnan_res_39686) {
                        y_39687 = 0.0F;
                    } else {
                        y_39687 = 1.0F;
                    }
                    
                    float defunc_2_f_res_39688 = x_39685 * y_39687;
                    float defunc_1_op_res_39692 = res_reg_var2zz_39681 +
                          defunc_2_f_res_39688;
                    
                    mem_param_41528[i_39675] = defunc_1_op_res_39692;
                }
            }
            for (int64_t i_42966 = 0; i_42966 < (int64_t) 30; i_42966++) {
                color_42660[i_42966] = mem_param_41528[i_42966];
            }
        } else {
            for (int64_t i_42967 = 0; i_42967 < (int64_t) 30; i_42967++) {
                color_42660[i_42967] = mem_param_41528[i_42967];
            }
        }
        for (int64_t i_42968 = 0; i_42968 < (int64_t) 30; i_42968++) {
            color_42663[i_42968] = color_42660[i_42968];
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_42961[30];
        
        for (int32_t i_2 = 0; i_2 < 30; i_2++)
            mem_param_tmp_42961[i_2] = color_42663[i_2];
        for (int32_t i_3 = 0; i_3 < 30; i_3++)
            mem_param_41528[i_3] = mem_param_tmp_42961[i_3];
    }
    for (int32_t i_4 = 0; i_4 < 30; i_4++)
        loop_mem_41557[i_4] = mem_param_41528[i_4];
    
    int64_t ltid_zz_39701 = sext_i32_i64(ltid_pre_42947);
    int64_t ltid_y_39700 = sext_i32_i64(ltid_pre_42948);
    int64_t ltid_x_39698 = sext_i32_i64(ltid_pre_42949);
    int32_t ltid_flat_39699 = local_tid_42943;
    float color_42661[30 * 1 * 1];
    
    for (int32_t i_41319 = 0; i_41319 < 30; i_41319++) {
        int64_t i_39710 = sext_i32_i64(i_41319);
        
        for (int64_t i_42970 = 0; i_42970 < (int64_t) 1; i_42970++) {
            color_42661[i_39710 + i_42970] = loop_mem_41557[i_39710 + i_42970];
        }
    }
    for (int64_t i_42971 = 0; i_42971 < (int64_t) 30; i_42971++) {
        for (int64_t i_42972 = 0; i_42972 < (int64_t) 1; i_42972++) {
            for (int64_t i_42973 = 0; i_42973 < (int64_t) 1; i_42973++) {
                color_42662[i_42971 + i_42972 + i_42973] = color_42661[i_42971 +
                                                                       i_42972 +
                                                                       i_42973];
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t reg_tile_i_42974 = squot64(sext_i32_i64(local_tid_42943), Ty_39574 *
                                       Tx_39575);
    int64_t reg_tile_i_42975 = squot64(sext_i32_i64(local_tid_42943) -
                                       squot64(sext_i32_i64(local_tid_42943),
                                               Ty_39574 * Tx_39575) *
                                       (Ty_39574 * Tx_39575), Tx_39575);
    int64_t reg_tile_i_42976 = sext_i32_i64(local_tid_42943) -
            squot64(sext_i32_i64(local_tid_42943), Ty_39574 * Tx_39575) *
            (Ty_39574 * Tx_39575) - squot64(sext_i32_i64(local_tid_42943) -
                                            squot64(sext_i32_i64(local_tid_42943),
                                                    Ty_39574 * Tx_39575) *
                                            (Ty_39574 * Tx_39575), Tx_39575) *
            Tx_39575;
    int64_t tile_dim_start_42977 = (int64_t) 30 * (gid_zz_39585 +
                                                   reg_tile_i_42974);
    int64_t tile_dim_start_42978 = Ty_39574 * gid_y_39584 + reg_tile_i_42975;
    int64_t tile_dim_start_42979 = Tx_39575 * gid_x_39583 + reg_tile_i_42976;
    
    for (int64_t nest_i_42980 = 0; nest_i_42980 < (int64_t) 30;
         nest_i_42980++) {
        for (int64_t nest_i_42981 = 0; nest_i_42981 < (int64_t) 1;
             nest_i_42981++) {
            for (int64_t nest_i_42982 = 0; nest_i_42982 < (int64_t) 1;
                 nest_i_42982++) {
                if ((slt64(tile_dim_start_42977 + nest_i_42980, m_28875) &&
                     slt64(tile_dim_start_42978 + nest_i_42981,
                           i32_res_28890)) && slt64(tile_dim_start_42979 +
                                                    nest_i_42982,
                                                    i32_res_28890)) {
                    ((__global float *) mem_41576)[(tile_dim_start_42977 +
                                                    nest_i_42980) *
                                                   (i32_res_28890 *
                                                    i32_res_28890) +
                                                   (tile_dim_start_42978 +
                                                    nest_i_42981) *
                                                   i32_res_28890 +
                                                   (tile_dim_start_42979 +
                                                    nest_i_42982)] =
                        color_42662[nest_i_42980 + nest_i_42981 + nest_i_42982];
                }
            }
        }
    }
    
  error_4:
    return;
}
__kernel void mainMagnitudezisegmap_intragroup_39739(__global
                                                     int *global_failure,
                                                     __local volatile
                                                     int64_t *color_42682_backing_aligned_0,
                                                     __local volatile
                                                     int64_t *color_42681_backing_aligned_1,
                                                     int64_t N_28874,
                                                     int64_t m_28875,
                                                     int64_t i32_res_28884,
                                                     int64_t i32_res_28890,
                                                     int64_t gridDim_x_39733,
                                                     int64_t gridDim_y_39734,
                                                     int64_t full_tiles_39764,
                                                     int64_t kk_39971, __global
                                                     unsigned char *images_mem_41421,
                                                     __global
                                                     unsigned char *mem_41435,
                                                     __global
                                                     unsigned char *mem_41902)
{
    #define Ty_39720 (mainMagnitudeziTy_39717)
    #define Ry_39721 (mainMagnitudeziRy_39719)
    #define Tx_39722 (mainMagnitudeziTx_39716)
    #define Rx_39723 (mainMagnitudeziRx_39718)
    #define Tk_39724 (mainMagnitudeziTk_39715)
    #define tk_div_tx_39725 (sdiv_up64(mainMagnitudeziTk_39715, mainMagnitudeziTx_39716))
    #define tk_div_ty_39726 (sdiv_up64(mainMagnitudeziTk_39715, mainMagnitudeziTy_39717))
    #define TxRx_39727 (mainMagnitudeziTx_39716 * mainMagnitudeziRx_39718)
    #define TyRy_39728 (mainMagnitudeziTy_39717 * mainMagnitudeziRy_39719)
    #define a_loc_szz_39730 (mainMagnitudeziTk_39715 * (mainMagnitudeziTy_39717 * mainMagnitudeziRy_39719))
    #define b_loc_szz_39732 (mainMagnitudeziRx_39718 * (mainMagnitudeziTx_39716 * mainMagnitudeziTk_39715))
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict color_42682_backing_1 = (__local volatile
                                                             char *) color_42682_backing_aligned_0;
    __local volatile char *restrict color_42681_backing_0 = (__local volatile
                                                             char *) color_42681_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43160;
    int32_t local_tid_43161;
    int64_t group_sizze_43164;
    int32_t wave_sizze_43163;
    int32_t group_tid_43162;
    
    global_tid_43160 = get_global_id(0);
    local_tid_43161 = get_local_id(0);
    group_sizze_43164 = get_local_size(0);
    wave_sizze_43163 = LOCKSTEP_WIDTH;
    group_tid_43162 = get_group_id(0);
    
    int32_t gid_flat_39739 = group_tid_43162;
    int32_t ltid_pre_43165 = squot32(local_tid_43161, sext_i64_i32(Tx_39722));
    int32_t ltid_pre_43166 = local_tid_43161 - squot32(local_tid_43161,
                                                       sext_i64_i32(Tx_39722)) *
            sext_i64_i32(Tx_39722);
    int64_t slice_43167 = gridDim_x_39733;
    int64_t slice_43168 = gridDim_y_39734 * slice_43167;
    int64_t gid_y_39738 = squot64(sext_i32_i64(group_tid_43162), slice_43167);
    int64_t remnant_43169 = sext_i32_i64(group_tid_43162) - gid_y_39738 *
            slice_43167;
    int64_t gid_x_39737 = remnant_43169;
    int64_t remnant_43170 = remnant_43169 - gid_x_39737;
    float color_42677[Ry_39721 * Rx_39723];
    float color_42678[Ry_39721 * Rx_39723];
    float color_42679[Rx_39723];
    float color_42680[Ry_39721];
    __local char *color_42681;
    
    color_42681 = (__local char *) color_42681_backing_0;
    
    __local char *color_42682;
    
    color_42682 = (__local char *) color_42682_backing_1;
    
    int64_t iii_39740 = TyRy_39728 * gid_y_39738;
    int64_t jjj_39741 = TxRx_39727 * gid_x_39737;
    int64_t ltid_y_39744 = sext_i32_i64(ltid_pre_43165);
    int64_t ltid_x_39742 = sext_i32_i64(ltid_pre_43166);
    int32_t ltid_flat_39743 = local_tid_43161;
    float color_42671[Ry_39721 * Rx_39723];
    
    for (int64_t i_39755 = 0; i_39755 < Ry_39721; i_39755++) {
        for (int64_t i_39758 = 0; i_39758 < Rx_39723; i_39758++) {
            color_42671[i_39755 * Rx_39723 + i_39758] = 0.0F;
        }
    }
    for (int64_t i_43173 = 0; i_43173 < Ry_39721; i_43173++) {
        for (int64_t i_43174 = 0; i_43174 < Rx_39723; i_43174++) {
            color_42678[i_43173 * Rx_39723 + i_43174] = color_42671[i_43173 *
                                                                    Rx_39723 +
                                                                    i_43174];
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float loop_mem_41816[Ry_39721 * Rx_39723];
    float mem_param_41730[Ry_39721 * Rx_39723];
    
    for (int32_t i_2 = 0; i_2 < Ry_39721 * Rx_39723; i_2++)
        mem_param_41730[i_2] = color_42678[i_2];
    for (int64_t i_39765 = 0; i_39765 < full_tiles_39764; i_39765++) {
        int64_t kk_39769 = Tk_39724 * i_39765;
        
        for (int64_t i_39770 = 0; i_39770 < Ry_39721; i_39770++) {
            int64_t binop_y_39793 = Ty_39720 * i_39770;
            
            for (int64_t i_39772 = 0; i_39772 < tk_div_tx_39725; i_39772++) {
                int64_t binop_y_39791 = Tx_39722 * i_39772;
                int64_t ltid_x_39774 = sext_i32_i64(ltid_pre_43165);
                int64_t ltid_y_39775 = sext_i32_i64(ltid_pre_43166);
                int32_t ltid_flat_39776 = local_tid_43161;
                int64_t k_39792 = ltid_y_39775 + binop_y_39791;
                int64_t i_39794 = ltid_x_39774 + binop_y_39793;
                int64_t gtid_39795 = iii_39740 + i_39794;
                int64_t A_col_idx_39796 = kk_39769 + k_39792;
                bool cond_39797 = slt64(gtid_39795, m_28875);
                float A_elem_39798;
                
                if (cond_39797) {
                    float A_elem_39800 = ((__global
                                           float *) images_mem_41421)[gtid_39795 *
                                                                      N_28874 +
                                                                      A_col_idx_39796];
                    
                    A_elem_39798 = A_elem_39800;
                } else {
                    A_elem_39798 = 0.0F;
                }
                
                bool cond_39802 = slt64(k_39792, Tk_39724);
                int64_t a_loc_ind_39803;
                
                if (cond_39802) {
                    int64_t binop_y_39804 = Tk_39724 * i_39794;
                    int64_t loc_fi_39805 = k_39792 + binop_y_39804;
                    
                    a_loc_ind_39803 = loc_fi_39805;
                } else {
                    a_loc_ind_39803 = (int64_t) -1;
                }
                if (sle64((int64_t) 0, a_loc_ind_39803) &&
                    slt64(a_loc_ind_39803, a_loc_szz_39730)) {
                    ((__local float *) color_42682)[a_loc_ind_39803] =
                        A_elem_39798;
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        for (int64_t i_39810 = 0; i_39810 < tk_div_ty_39726; i_39810++) {
            int64_t binop_y_39831 = Ty_39720 * i_39810;
            
            for (int64_t i_39812 = 0; i_39812 < Rx_39723; i_39812++) {
                int64_t binop_y_39833 = Tx_39722 * i_39812;
                int64_t ltid_x_39814 = sext_i32_i64(ltid_pre_43165);
                int64_t ltid_y_39815 = sext_i32_i64(ltid_pre_43166);
                int32_t ltid_flat_39816 = local_tid_43161;
                int64_t k_39832 = ltid_x_39814 + binop_y_39831;
                int64_t j_39834 = ltid_y_39815 + binop_y_39833;
                int64_t gtid_39835 = jjj_39741 + j_39834;
                int64_t B_row_idx_39836 = kk_39769 + k_39832;
                bool cond_39837 = slt64(gtid_39835, i32_res_28890);
                float B_elem_39838;
                
                if (cond_39837) {
                    float B_elem_39840 = ((__global
                                           float *) mem_41435)[B_row_idx_39836 *
                                                               i32_res_28890 +
                                                               gtid_39835];
                    
                    B_elem_39838 = B_elem_39840;
                } else {
                    B_elem_39838 = 0.0F;
                }
                
                bool cond_39842 = slt64(k_39832, Tk_39724);
                int64_t b_loc_ind_39843;
                
                if (cond_39842) {
                    int64_t binop_y_39844 = TxRx_39727 * k_39832;
                    int64_t loc_fi_39845 = j_39834 + binop_y_39844;
                    
                    b_loc_ind_39843 = loc_fi_39845;
                } else {
                    b_loc_ind_39843 = (int64_t) -1;
                }
                if (sle64((int64_t) 0, b_loc_ind_39843) &&
                    slt64(b_loc_ind_39843, b_loc_szz_39732)) {
                    ((__local float *) color_42681)[b_loc_ind_39843] =
                        B_elem_39838;
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        
        float loop_mem_41815[Ry_39721 * Rx_39723];
        float mem_param_41787[Ry_39721 * Rx_39723];
        
        for (int32_t i_3 = 0; i_3 < Ry_39721 * Rx_39723; i_3++)
            mem_param_41787[i_3] = mem_param_41730[i_3];
        for (int64_t i_39850 = 0; i_39850 < Tk_39724; i_39850++) {
            int64_t binop_y_39889 = TxRx_39727 * i_39850;
            int64_t ltid_y_39854 = sext_i32_i64(ltid_pre_43165);
            int64_t ltid_x_39852 = sext_i32_i64(ltid_pre_43166);
            int32_t ltid_flat_39853 = local_tid_43161;
            float color_42672[Rx_39723];
            float color_42673[Ry_39721];
            int64_t binop_x_39880 = Ry_39721 * ltid_y_39854;
            
            for (int64_t i_39878 = 0; i_39878 < Ry_39721; i_39878++) {
                int64_t binop_x_39881 = i_39878 + binop_x_39880;
                int64_t binop_y_39882 = Tk_39724 * binop_x_39881;
                int64_t a_loc_ind_39883 = i_39850 + binop_y_39882;
                
                for (int64_t i_43186 = 0; i_43186 < (int64_t) 1; i_43186++) {
                    color_42673[i_39878 + i_43186] = ((__local
                                                       float *) color_42682)[a_loc_ind_39883 +
                                                                             i_43186];
                }
            }
            
            int64_t binop_y_39891 = Rx_39723 * ltid_x_39852;
            
            for (int64_t i_39887 = 0; i_39887 < Rx_39723; i_39887++) {
                int64_t binop_x_39890 = i_39887 + binop_y_39889;
                int64_t b_loc_ind_39892 = binop_x_39890 + binop_y_39891;
                
                for (int64_t i_43188 = 0; i_43188 < (int64_t) 1; i_43188++) {
                    color_42672[i_39887 + i_43188] = ((__local
                                                       float *) color_42681)[b_loc_ind_39892 +
                                                                             i_43188];
                }
            }
            for (int64_t i_43189 = 0; i_43189 < Ry_39721; i_43189++) {
                color_42680[i_43189] = color_42673[i_43189];
            }
            for (int64_t i_43190 = 0; i_43190 < Rx_39723; i_43190++) {
                color_42679[i_43190] = color_42672[i_43190];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int64_t ltid_y_39899 = sext_i32_i64(ltid_pre_43165);
            int64_t ltid_x_39897 = sext_i32_i64(ltid_pre_43166);
            int32_t ltid_flat_39898 = local_tid_43161;
            int64_t binop_y_39942 = Ry_39721 * ltid_y_39899;
            int64_t binop_y_39946 = Rx_39723 * ltid_x_39897;
            
            for (int64_t i_39936 = 0; i_39936 < Ry_39721; i_39936++) {
                int64_t binop_x_39941 = iii_39740 + i_39936;
                int64_t cmpop_x_39943 = binop_x_39941 + binop_y_39942;
                bool binop_x_39944 = slt64(cmpop_x_39943, m_28875);
                
                for (int64_t i_39939 = 0; i_39939 < Rx_39723; i_39939++) {
                    int64_t binop_x_39945 = jjj_39741 + i_39939;
                    int64_t cmpop_x_39947 = binop_x_39945 + binop_y_39946;
                    bool binop_y_39948 = slt64(cmpop_x_39947, i32_res_28890);
                    bool cond_39949 = binop_x_39944 && binop_y_39948;
                    
                    if (cond_39949) {
                        float a_39951 = color_42680[i_39936];
                        float c_39953 = mem_param_41787[i_39936 * Rx_39723 +
                                                        i_39939];
                        bool isnan_res_39956;
                        
                        isnan_res_39956 = futrts_isnan32(a_39951);
                        
                        float defunc_1_f_res_39957;
                        
                        if (isnan_res_39956) {
                            defunc_1_f_res_39957 = 0.0F;
                        } else {
                            float b_39952 = color_42679[i_39939];
                            float defunc_1_f_res_f_res_39958 = a_39951 *
                                  b_39952;
                            
                            defunc_1_f_res_39957 = defunc_1_f_res_f_res_39958;
                        }
                        
                        float defunc_1_op_res_39962 = c_39953 +
                              defunc_1_f_res_39957;
                        
                        mem_param_41787[i_39936 * Rx_39723 + i_39939] =
                            defunc_1_op_res_39962;
                    }
                }
            }
            for (int64_t i_43193 = 0; i_43193 < Ry_39721; i_43193++) {
                for (int64_t i_43194 = 0; i_43194 < Rx_39723; i_43194++) {
                    color_42677[i_43193 * Rx_39723 + i_43194] =
                        mem_param_41787[i_43193 * Rx_39723 + i_43194];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            float mem_param_tmp_43183[Ry_39721 * Rx_39723];
            
            for (int32_t i_4 = 0; i_4 < Ry_39721 * Rx_39723; i_4++)
                mem_param_tmp_43183[i_4] = color_42677[i_4];
            for (int32_t i_5 = 0; i_5 < Ry_39721 * Rx_39723; i_5++)
                mem_param_41787[i_5] = mem_param_tmp_43183[i_5];
        }
        for (int32_t i_6 = 0; i_6 < Ry_39721 * Rx_39723; i_6++)
            loop_mem_41815[i_6] = mem_param_41787[i_6];
        
        float mem_param_tmp_43175[Ry_39721 * Rx_39723];
        
        for (int32_t i_7 = 0; i_7 < Ry_39721 * Rx_39723; i_7++)
            mem_param_tmp_43175[i_7] = loop_mem_41815[i_7];
        for (int32_t i_8 = 0; i_8 < Ry_39721 * Rx_39723; i_8++)
            mem_param_41730[i_8] = mem_param_tmp_43175[i_8];
    }
    for (int32_t i_9 = 0; i_9 < Ry_39721 * Rx_39723; i_9++)
        loop_mem_41816[i_9] = mem_param_41730[i_9];
    for (int64_t i_39972 = 0; i_39972 < Ry_39721; i_39972++) {
        int64_t binop_y_39997 = Ty_39720 * i_39972;
        
        for (int64_t i_39974 = 0; i_39974 < tk_div_tx_39725; i_39974++) {
            int64_t binop_y_39995 = Tx_39722 * i_39974;
            int64_t ltid_x_39976 = sext_i32_i64(ltid_pre_43165);
            int64_t ltid_y_39977 = sext_i32_i64(ltid_pre_43166);
            int32_t ltid_flat_39978 = local_tid_43161;
            int64_t k_39996 = ltid_y_39977 + binop_y_39995;
            int64_t i_39998 = ltid_x_39976 + binop_y_39997;
            int64_t gtid_39999 = iii_39740 + i_39998;
            int64_t A_col_idx_40000 = kk_39971 + k_39996;
            bool binop_x_40001 = slt64(gtid_39999, m_28875);
            bool binop_y_40002 = slt64(A_col_idx_40000, i32_res_28884);
            bool cond_40003 = binop_x_40001 && binop_y_40002;
            float A_elem_40004;
            
            if (cond_40003) {
                float A_elem_40006 = ((__global
                                       float *) images_mem_41421)[gtid_39999 *
                                                                  N_28874 +
                                                                  A_col_idx_40000];
                
                A_elem_40004 = A_elem_40006;
            } else {
                A_elem_40004 = 0.0F;
            }
            
            bool cond_40008 = slt64(k_39996, Tk_39724);
            int64_t a_loc_ind_40009;
            
            if (cond_40008) {
                int64_t binop_y_40010 = Tk_39724 * i_39998;
                int64_t loc_fi_40011 = k_39996 + binop_y_40010;
                
                a_loc_ind_40009 = loc_fi_40011;
            } else {
                a_loc_ind_40009 = (int64_t) -1;
            }
            if (sle64((int64_t) 0, a_loc_ind_40009) && slt64(a_loc_ind_40009,
                                                             a_loc_szz_39730)) {
                ((__local float *) color_42682)[a_loc_ind_40009] = A_elem_40004;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    for (int64_t i_40016 = 0; i_40016 < tk_div_ty_39726; i_40016++) {
        int64_t binop_y_40039 = Ty_39720 * i_40016;
        
        for (int64_t i_40018 = 0; i_40018 < Rx_39723; i_40018++) {
            int64_t binop_y_40041 = Tx_39722 * i_40018;
            int64_t ltid_x_40020 = sext_i32_i64(ltid_pre_43165);
            int64_t ltid_y_40021 = sext_i32_i64(ltid_pre_43166);
            int32_t ltid_flat_40022 = local_tid_43161;
            int64_t k_40040 = ltid_x_40020 + binop_y_40039;
            int64_t j_40042 = ltid_y_40021 + binop_y_40041;
            int64_t gtid_40043 = jjj_39741 + j_40042;
            int64_t B_row_idx_40044 = kk_39971 + k_40040;
            bool binop_x_40045 = slt64(gtid_40043, i32_res_28890);
            bool binop_y_40046 = slt64(B_row_idx_40044, i32_res_28884);
            bool cond_40047 = binop_x_40045 && binop_y_40046;
            float B_elem_40048;
            
            if (cond_40047) {
                float B_elem_40050 = ((__global
                                       float *) mem_41435)[B_row_idx_40044 *
                                                           i32_res_28890 +
                                                           gtid_40043];
                
                B_elem_40048 = B_elem_40050;
            } else {
                B_elem_40048 = 0.0F;
            }
            
            bool cond_40052 = slt64(k_40040, Tk_39724);
            int64_t b_loc_ind_40053;
            
            if (cond_40052) {
                int64_t binop_y_40054 = TxRx_39727 * k_40040;
                int64_t loc_fi_40055 = j_40042 + binop_y_40054;
                
                b_loc_ind_40053 = loc_fi_40055;
            } else {
                b_loc_ind_40053 = (int64_t) -1;
            }
            if (sle64((int64_t) 0, b_loc_ind_40053) && slt64(b_loc_ind_40053,
                                                             b_loc_szz_39732)) {
                ((__local float *) color_42681)[b_loc_ind_40053] = B_elem_40048;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
    float loop_mem_41898[Ry_39721 * Rx_39723];
    float mem_param_41869[Ry_39721 * Rx_39723];
    
    for (int32_t i_10 = 0; i_10 < Ry_39721 * Rx_39723; i_10++)
        mem_param_41869[i_10] = loop_mem_41816[i_10];
    for (int64_t i_40060 = 0; i_40060 < Tk_39724; i_40060++) {
        int64_t cmpop_x_40062 = kk_39971 + i_40060;
        bool cond_40063 = slt64(cmpop_x_40062, i32_res_28884);
        
        if (cond_40063) {
            int64_t binop_y_40101 = TxRx_39727 * i_40060;
            int64_t bytes_41871 = (int64_t) 4 * Ry_39721;
            int64_t bytes_41873 = (int64_t) 4 * Rx_39723;
            int64_t ltid_y_40066 = sext_i32_i64(ltid_pre_43165);
            int64_t ltid_x_40064 = sext_i32_i64(ltid_pre_43166);
            int32_t ltid_flat_40065 = local_tid_43161;
            float color_42674[Rx_39723];
            float color_42675[Ry_39721];
            int64_t binop_x_40092 = Ry_39721 * ltid_y_40066;
            
            for (int64_t i_40090 = 0; i_40090 < Ry_39721; i_40090++) {
                int64_t binop_x_40093 = i_40090 + binop_x_40092;
                int64_t binop_y_40094 = Tk_39724 * binop_x_40093;
                int64_t a_loc_ind_40095 = i_40060 + binop_y_40094;
                
                for (int64_t i_43202 = 0; i_43202 < (int64_t) 1; i_43202++) {
                    color_42675[i_40090 + i_43202] = ((__local
                                                       float *) color_42682)[a_loc_ind_40095 +
                                                                             i_43202];
                }
            }
            
            int64_t binop_y_40103 = Rx_39723 * ltid_x_40064;
            
            for (int64_t i_40099 = 0; i_40099 < Rx_39723; i_40099++) {
                int64_t binop_x_40102 = i_40099 + binop_y_40101;
                int64_t b_loc_ind_40104 = binop_x_40102 + binop_y_40103;
                
                for (int64_t i_43204 = 0; i_43204 < (int64_t) 1; i_43204++) {
                    color_42674[i_40099 + i_43204] = ((__local
                                                       float *) color_42681)[b_loc_ind_40104 +
                                                                             i_43204];
                }
            }
            for (int64_t i_43205 = 0; i_43205 < Ry_39721; i_43205++) {
                color_42680[i_43205] = color_42675[i_43205];
            }
            for (int64_t i_43206 = 0; i_43206 < Rx_39723; i_43206++) {
                color_42679[i_43206] = color_42674[i_43206];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int64_t ltid_y_40111 = sext_i32_i64(ltid_pre_43165);
            int64_t ltid_x_40109 = sext_i32_i64(ltid_pre_43166);
            int32_t ltid_flat_40110 = local_tid_43161;
            int64_t binop_y_40154 = Ry_39721 * ltid_y_40111;
            int64_t binop_y_40158 = Rx_39723 * ltid_x_40109;
            
            for (int64_t i_40148 = 0; i_40148 < Ry_39721; i_40148++) {
                int64_t binop_x_40153 = iii_39740 + i_40148;
                int64_t cmpop_x_40155 = binop_x_40153 + binop_y_40154;
                bool binop_x_40156 = slt64(cmpop_x_40155, m_28875);
                
                for (int64_t i_40151 = 0; i_40151 < Rx_39723; i_40151++) {
                    int64_t binop_x_40157 = jjj_39741 + i_40151;
                    int64_t cmpop_x_40159 = binop_x_40157 + binop_y_40158;
                    bool binop_y_40160 = slt64(cmpop_x_40159, i32_res_28890);
                    bool cond_40161 = binop_x_40156 && binop_y_40160;
                    
                    if (cond_40161) {
                        float a_40163 = color_42680[i_40148];
                        float c_40165 = mem_param_41869[i_40148 * Rx_39723 +
                                                        i_40151];
                        bool isnan_res_40168;
                        
                        isnan_res_40168 = futrts_isnan32(a_40163);
                        
                        float defunc_1_f_res_40169;
                        
                        if (isnan_res_40168) {
                            defunc_1_f_res_40169 = 0.0F;
                        } else {
                            float b_40164 = color_42679[i_40151];
                            float defunc_1_f_res_f_res_40170 = a_40163 *
                                  b_40164;
                            
                            defunc_1_f_res_40169 = defunc_1_f_res_f_res_40170;
                        }
                        
                        float defunc_1_op_res_40174 = c_40165 +
                              defunc_1_f_res_40169;
                        
                        mem_param_41869[i_40148 * Rx_39723 + i_40151] =
                            defunc_1_op_res_40174;
                    }
                }
            }
            for (int64_t i_43209 = 0; i_43209 < Ry_39721; i_43209++) {
                for (int64_t i_43210 = 0; i_43210 < Rx_39723; i_43210++) {
                    color_42678[i_43209 * Rx_39723 + i_43210] =
                        mem_param_41869[i_43209 * Rx_39723 + i_43210];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            for (int64_t i_43211 = 0; i_43211 < Ry_39721; i_43211++) {
                for (int64_t i_43212 = 0; i_43212 < Rx_39723; i_43212++) {
                    color_42677[i_43211 * Rx_39723 + i_43212] =
                        color_42678[i_43211 * Rx_39723 + i_43212];
                }
            }
        } else {
            for (int64_t i_43213 = 0; i_43213 < Ry_39721; i_43213++) {
                for (int64_t i_43214 = 0; i_43214 < Rx_39723; i_43214++) {
                    color_42677[i_43213 * Rx_39723 + i_43214] =
                        mem_param_41869[i_43213 * Rx_39723 + i_43214];
                }
            }
        }
        
        float mem_param_tmp_43199[Ry_39721 * Rx_39723];
        
        for (int32_t i_11 = 0; i_11 < Ry_39721 * Rx_39723; i_11++)
            mem_param_tmp_43199[i_11] = color_42677[i_11];
        for (int32_t i_12 = 0; i_12 < Ry_39721 * Rx_39723; i_12++)
            mem_param_41869[i_12] = mem_param_tmp_43199[i_12];
    }
    for (int32_t i_13 = 0; i_13 < Ry_39721 * Rx_39723; i_13++)
        loop_mem_41898[i_13] = mem_param_41869[i_13];
    
    int64_t reg_tile_i_43215 = squot64(sext_i32_i64(local_tid_43161), Tx_39722);
    int64_t reg_tile_i_43216 = sext_i32_i64(local_tid_43161) -
            squot64(sext_i32_i64(local_tid_43161), Tx_39722) * Tx_39722;
    int64_t tile_dim_start_43217 = Ry_39721 * (Ty_39720 * gid_y_39738 +
                                               reg_tile_i_43215);
    int64_t tile_dim_start_43218 = Rx_39723 * (Tx_39722 * gid_x_39737 +
                                               reg_tile_i_43216);
    
    for (int64_t nest_i_43219 = 0; nest_i_43219 < Ry_39721; nest_i_43219++) {
        for (int64_t nest_i_43220 = 0; nest_i_43220 < Rx_39723;
             nest_i_43220++) {
            if (slt64(tile_dim_start_43217 + nest_i_43219, m_28875) &&
                slt64(tile_dim_start_43218 + nest_i_43220, i32_res_28890)) {
                ((__global float *) mem_41902)[(tile_dim_start_43217 +
                                                nest_i_43219) * i32_res_28890 +
                                               (tile_dim_start_43218 +
                                                nest_i_43220)] =
                    loop_mem_41898[nest_i_43219 * Rx_39723 + nest_i_43220];
            }
        }
    }
    
  error_9:
    return;
    #undef Ty_39720
    #undef Ry_39721
    #undef Tx_39722
    #undef Rx_39723
    #undef Tk_39724
    #undef tk_div_tx_39725
    #undef tk_div_ty_39726
    #undef TxRx_39727
    #undef TyRy_39728
    #undef a_loc_szz_39730
    #undef b_loc_szz_39732
}
__kernel void mainMagnitudezisegmap_intragroup_40188(__global
                                                     int *global_failure,
                                                     __local volatile
                                                     int64_t *color_42687_backing_aligned_0,
                                                     int64_t m_28875,
                                                     int64_t i32_res_28890,
                                                     int64_t num_groups_x_40185,
                                                     int64_t num_groups_y_40186,
                                                     int64_t num_whole_tiles_40204,
                                                     int64_t residual_input_40331,
                                                     unsigned char cond_40332,
                                                     __global
                                                     unsigned char *defunc_3_map_res_mem_41914,
                                                     __global
                                                     unsigned char *mem_41944,
                                                     __global
                                                     unsigned char *mem_41974)
{
    #define tile_sizze_40183 (mainMagnitudezitile_sizze_40182)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict color_42687_backing_0 = (__local volatile
                                                             char *) color_42687_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43307;
    int32_t local_tid_43308;
    int64_t group_sizze_43311;
    int32_t wave_sizze_43310;
    int32_t group_tid_43309;
    
    global_tid_43307 = get_global_id(0);
    local_tid_43308 = get_local_id(0);
    group_sizze_43311 = get_local_size(0);
    wave_sizze_43310 = LOCKSTEP_WIDTH;
    group_tid_43309 = get_group_id(0);
    
    int32_t gid_flat_40188 = group_tid_43309;
    int32_t ltid_pre_43312 = squot32(local_tid_43308,
                                     sext_i64_i32(tile_sizze_40183));
    int32_t ltid_pre_43313 = local_tid_43308 - squot32(local_tid_43308,
                                                       sext_i64_i32(tile_sizze_40183)) *
            sext_i64_i32(tile_sizze_40183);
    int64_t slice_43314 = num_groups_y_40186;
    int64_t slice_43315 = num_groups_x_40185 * slice_43314;
    int64_t gid_x_40180 = squot64(sext_i32_i64(group_tid_43309), slice_43314);
    int64_t remnant_43316 = sext_i32_i64(group_tid_43309) - gid_x_40180 *
            slice_43314;
    int64_t gid_y_40181 = remnant_43316;
    int64_t remnant_43317 = remnant_43316 - gid_y_40181;
    float color_42685[1];
    float color_42686[1];
    __local char *color_42687;
    
    color_42687 = (__local char *) color_42687_backing_0;
    
    int64_t ltid_y_40207 = sext_i32_i64(ltid_pre_43312);
    int64_t ltid_x_40205 = sext_i32_i64(ltid_pre_43313);
    int32_t ltid_flat_40206 = local_tid_43308;
    
    if (slt64(ltid_y_40207, tile_sizze_40183) && slt64(ltid_x_40205,
                                                       tile_sizze_40183)) {
        color_42686[(int64_t) 0] = 0.0F;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t binop_x_40290 = gid_x_40180 * tile_sizze_40183;
    int64_t binop_x_40305 = gid_y_40181 * tile_sizze_40183;
    float accs_mem_41960[1];
    float mem_param_41950[1];
    
    for (int32_t i_1 = 0; i_1 < 1; i_1++)
        mem_param_41950[i_1] = color_42686[i_1];
    for (int64_t tile_id_40216 = 0; tile_id_40216 < num_whole_tiles_40204;
         tile_id_40216++) {
        int64_t binop_x_40288 = tile_sizze_40183 * tile_id_40216;
        int64_t ltid_y_40219 = sext_i32_i64(ltid_pre_43312);
        int64_t ltid_x_40217 = sext_i32_i64(ltid_pre_43313);
        int32_t ltid_flat_40218 = local_tid_43308;
        int64_t j_40289 = ltid_x_40217 + binop_x_40288;
        int64_t gtid_40291 = ltid_y_40219 + binop_x_40290;
        bool binop_x_40296 = slt64(j_40289, i32_res_28890);
        bool binop_y_40297 = slt64(gtid_40291, m_28875);
        bool cond_40298 = binop_x_40296 && binop_y_40297;
        float pre_40299;
        
        if (cond_40298) {
            float x_40300 = ((__global
                              float *) defunc_3_map_res_mem_41914)[gtid_40291 *
                                                                   i32_res_28890 +
                                                                   j_40289];
            
            pre_40299 = x_40300;
        } else {
            pre_40299 = 0.0F;
        }
        ((__local float *) color_42687)[ltid_y_40219 * tile_sizze_40183 +
                                        ltid_x_40217] = pre_40299;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_y_40251 = sext_i32_i64(ltid_pre_43312);
        int64_t ltid_x_40249 = sext_i32_i64(ltid_pre_43313);
        int32_t ltid_flat_40250 = local_tid_43308;
        int64_t gtid_40304 = ltid_y_40251 + binop_x_40290;
        int64_t gtid_40306 = ltid_x_40249 + binop_x_40305;
        float acc_40309 = mem_param_41950[(int64_t) 0];
        bool binop_x_40313 = slt64(gtid_40304, m_28875);
        bool binop_y_40314 = slt64(gtid_40306, i32_res_28890);
        bool cond_40315 = binop_x_40313 && binop_y_40314;
        float acc_40316;
        
        if (cond_40315) {
            float x_40317;
            float redout_41360 = acc_40309;
            
            for (int64_t i_41361 = 0; i_41361 < tile_sizze_40183; i_41361++) {
                float x_40321 = ((__local float *) color_42687)[ltid_y_40251 *
                                                                tile_sizze_40183 +
                                                                i_41361];
                int64_t slice_41407 = binop_x_40288 + i_41361;
                float x_40322 = ((__global float *) mem_41944)[slice_41407 *
                                                               (i32_res_28890 *
                                                                m_28875) +
                                                               gtid_40304 *
                                                               i32_res_28890 +
                                                               gtid_40306];
                float defunc_1_f_res_40323 = x_40321 * x_40322;
                float defunc_1_op_res_40320 = defunc_1_f_res_40323 +
                      redout_41360;
                float redout_tmp_43320 = defunc_1_op_res_40320;
                
                redout_41360 = redout_tmp_43320;
            }
            x_40317 = redout_41360;
            acc_40316 = x_40317;
        } else {
            acc_40316 = acc_40309;
        }
        color_42685[(int64_t) 0] = acc_40316;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_43318[1];
        
        for (int32_t i_2 = 0; i_2 < 1; i_2++)
            mem_param_tmp_43318[i_2] = color_42685[i_2];
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_41950[i_3] = mem_param_tmp_43318[i_3];
    }
    for (int32_t i_4 = 0; i_4 < 1; i_4++)
        accs_mem_41960[i_4] = mem_param_41950[i_4];
    if (cond_40332) {
        color_42685[(int64_t) 0] = accs_mem_41960[(int64_t) 0];
    } else {
        int64_t binop_x_40405 = tile_sizze_40183 * num_whole_tiles_40204;
        int64_t ltid_y_40335 = sext_i32_i64(ltid_pre_43312);
        int64_t ltid_x_40333 = sext_i32_i64(ltid_pre_43313);
        int32_t ltid_flat_40334 = local_tid_43308;
        int64_t j_40406 = ltid_x_40333 + binop_x_40405;
        int64_t gtid_40408 = binop_x_40290 + ltid_y_40335;
        bool binop_x_40413 = slt64(j_40406, i32_res_28890);
        bool binop_y_40414 = slt64(gtid_40408, m_28875);
        bool cond_40415 = binop_x_40413 && binop_y_40414;
        float pre_40416;
        
        if (cond_40415) {
            float x_40417 = ((__global
                              float *) defunc_3_map_res_mem_41914)[gtid_40408 *
                                                                   i32_res_28890 +
                                                                   j_40406];
            
            pre_40416 = x_40417;
        } else {
            pre_40416 = 0.0F;
        }
        ((__local float *) color_42687)[ltid_y_40335 * tile_sizze_40183 +
                                        ltid_x_40333] = pre_40416;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_y_40368 = sext_i32_i64(ltid_pre_43312);
        int64_t ltid_x_40366 = sext_i32_i64(ltid_pre_43313);
        int32_t ltid_flat_40367 = local_tid_43308;
        int64_t gtid_40422 = binop_x_40290 + ltid_y_40368;
        int64_t gtid_40424 = binop_x_40305 + ltid_x_40366;
        float acc_40427 = accs_mem_41960[(int64_t) 0];
        bool binop_x_40431 = slt64(gtid_40422, m_28875);
        bool binop_y_40432 = slt64(gtid_40424, i32_res_28890);
        bool cond_40433 = binop_x_40431 && binop_y_40432;
        float acc_40434;
        
        if (cond_40433) {
            float x_40435;
            float redout_41362 = acc_40427;
            
            for (int64_t i_41363 = 0; i_41363 < residual_input_40331;
                 i_41363++) {
                float x_40439 = ((__local float *) color_42687)[ltid_y_40368 *
                                                                tile_sizze_40183 +
                                                                i_41363];
                int64_t slice_41408 = binop_x_40405 + i_41363;
                float x_40440 = ((__global float *) mem_41944)[slice_41408 *
                                                               (i32_res_28890 *
                                                                m_28875) +
                                                               gtid_40422 *
                                                               i32_res_28890 +
                                                               gtid_40424];
                float defunc_1_f_res_40441 = x_40439 * x_40440;
                float defunc_1_op_res_40438 = defunc_1_f_res_40441 +
                      redout_41362;
                float redout_tmp_43321 = defunc_1_op_res_40438;
                
                redout_41362 = redout_tmp_43321;
            }
            x_40435 = redout_41362;
            acc_40434 = x_40435;
        } else {
            acc_40434 = acc_40427;
        }
        color_42686[(int64_t) 0] = acc_40434;
        barrier(CLK_LOCAL_MEM_FENCE);
        color_42685[(int64_t) 0] = color_42686[(int64_t) 0];
    }
    
    int64_t thread_out_index_43322 = gid_x_40180 * tile_sizze_40183 +
            sext_i32_i64(ltid_pre_43312);
    int64_t thread_out_index_43323 = gid_y_40181 * tile_sizze_40183 +
            sext_i32_i64(ltid_pre_43313);
    
    if (slt64(thread_out_index_43322, m_28875) && slt64(thread_out_index_43323,
                                                        i32_res_28890)) {
        ((__global float *) mem_41974)[thread_out_index_43322 * i32_res_28890 +
                                       thread_out_index_43323] =
            color_42685[(int64_t) 0];
    }
    
  error_5:
    return;
    #undef tile_sizze_40183
}
__kernel void mainMagnitudezisegmap_intragroup_40480(__global
                                                     int *global_failure,
                                                     __local volatile
                                                     int64_t *color_42700_backing_aligned_0,
                                                     __local volatile
                                                     int64_t *color_42699_backing_aligned_1,
                                                     int64_t N_28874,
                                                     int64_t m_28875,
                                                     int64_t i32_res_28890,
                                                     int64_t gridDim_x_40474,
                                                     int64_t gridDim_y_40475,
                                                     int64_t full_tiles_40505,
                                                     int64_t kk_40708, __global
                                                     unsigned char *defunc_4_map_res_mem_41986,
                                                     __global
                                                     unsigned char *mem_42011,
                                                     __global
                                                     unsigned char *mem_42204)
{
    #define Ty_40461 (mainMagnitudeziTy_40458)
    #define Ry_40462 (mainMagnitudeziRy_40460)
    #define Tx_40463 (mainMagnitudeziTx_40457)
    #define Rx_40464 (mainMagnitudeziRx_40459)
    #define Tk_40465 (mainMagnitudeziTk_40456)
    #define tk_div_tx_40466 (sdiv_up64(mainMagnitudeziTk_40456, mainMagnitudeziTx_40457))
    #define tk_div_ty_40467 (sdiv_up64(mainMagnitudeziTk_40456, mainMagnitudeziTy_40458))
    #define TxRx_40468 (mainMagnitudeziTx_40457 * mainMagnitudeziRx_40459)
    #define TyRy_40469 (mainMagnitudeziTy_40458 * mainMagnitudeziRy_40460)
    #define a_loc_szz_40471 (mainMagnitudeziTk_40456 * (mainMagnitudeziTy_40458 * mainMagnitudeziRy_40460))
    #define b_loc_szz_40473 (mainMagnitudeziRx_40459 * (mainMagnitudeziTx_40457 * mainMagnitudeziTk_40456))
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict color_42700_backing_1 = (__local volatile
                                                             char *) color_42700_backing_aligned_0;
    __local volatile char *restrict color_42699_backing_0 = (__local volatile
                                                             char *) color_42699_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43410;
    int32_t local_tid_43411;
    int64_t group_sizze_43414;
    int32_t wave_sizze_43413;
    int32_t group_tid_43412;
    
    global_tid_43410 = get_global_id(0);
    local_tid_43411 = get_local_id(0);
    group_sizze_43414 = get_local_size(0);
    wave_sizze_43413 = LOCKSTEP_WIDTH;
    group_tid_43412 = get_group_id(0);
    
    int32_t gid_flat_40480 = group_tid_43412;
    int32_t ltid_pre_43415 = squot32(local_tid_43411, sext_i64_i32(Tx_40463));
    int32_t ltid_pre_43416 = local_tid_43411 - squot32(local_tid_43411,
                                                       sext_i64_i32(Tx_40463)) *
            sext_i64_i32(Tx_40463);
    int64_t slice_43417 = gridDim_x_40474;
    int64_t slice_43418 = gridDim_y_40475 * slice_43417;
    int64_t gid_y_40479 = squot64(sext_i32_i64(group_tid_43412), slice_43417);
    int64_t remnant_43419 = sext_i32_i64(group_tid_43412) - gid_y_40479 *
            slice_43417;
    int64_t gid_x_40478 = remnant_43419;
    int64_t remnant_43420 = remnant_43419 - gid_x_40478;
    float color_42695[Ry_40462 * Rx_40464];
    float color_42696[Ry_40462 * Rx_40464];
    float color_42697[Rx_40464];
    float color_42698[Ry_40462];
    __local char *color_42699;
    
    color_42699 = (__local char *) color_42699_backing_0;
    
    __local char *color_42700;
    
    color_42700 = (__local char *) color_42700_backing_1;
    
    int64_t iii_40481 = TyRy_40469 * gid_y_40479;
    int64_t jjj_40482 = TxRx_40468 * gid_x_40478;
    int64_t ltid_y_40485 = sext_i32_i64(ltid_pre_43415);
    int64_t ltid_x_40483 = sext_i32_i64(ltid_pre_43416);
    int32_t ltid_flat_40484 = local_tid_43411;
    float color_42689[Ry_40462 * Rx_40464];
    
    for (int64_t i_40496 = 0; i_40496 < Ry_40462; i_40496++) {
        for (int64_t i_40499 = 0; i_40499 < Rx_40464; i_40499++) {
            color_42689[i_40496 * Rx_40464 + i_40499] = 0.0F;
        }
    }
    for (int64_t i_43423 = 0; i_43423 < Ry_40462; i_43423++) {
        for (int64_t i_43424 = 0; i_43424 < Rx_40464; i_43424++) {
            color_42696[i_43423 * Rx_40464 + i_43424] = color_42689[i_43423 *
                                                                    Rx_40464 +
                                                                    i_43424];
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float loop_mem_42118[Ry_40462 * Rx_40464];
    float mem_param_42032[Ry_40462 * Rx_40464];
    
    for (int32_t i_2 = 0; i_2 < Ry_40462 * Rx_40464; i_2++)
        mem_param_42032[i_2] = color_42696[i_2];
    for (int64_t i_40506 = 0; i_40506 < full_tiles_40505; i_40506++) {
        int64_t kk_40510 = Tk_40465 * i_40506;
        
        for (int64_t i_40511 = 0; i_40511 < Ry_40462; i_40511++) {
            int64_t binop_y_40534 = Ty_40461 * i_40511;
            
            for (int64_t i_40513 = 0; i_40513 < tk_div_tx_40466; i_40513++) {
                int64_t binop_y_40532 = Tx_40463 * i_40513;
                int64_t ltid_x_40515 = sext_i32_i64(ltid_pre_43415);
                int64_t ltid_y_40516 = sext_i32_i64(ltid_pre_43416);
                int32_t ltid_flat_40517 = local_tid_43411;
                int64_t k_40533 = ltid_y_40516 + binop_y_40532;
                int64_t i_40535 = ltid_x_40515 + binop_y_40534;
                int64_t gtid_40536 = iii_40481 + i_40535;
                int64_t A_col_idx_40537 = kk_40510 + k_40533;
                bool cond_40538 = slt64(gtid_40536, m_28875);
                float A_elem_40539;
                
                if (cond_40538) {
                    float A_elem_40541 = ((__global
                                           float *) defunc_4_map_res_mem_41986)[gtid_40536 *
                                                                                i32_res_28890 +
                                                                                A_col_idx_40537];
                    
                    A_elem_40539 = A_elem_40541;
                } else {
                    A_elem_40539 = 0.0F;
                }
                
                bool cond_40543 = slt64(k_40533, Tk_40465);
                int64_t a_loc_ind_40544;
                
                if (cond_40543) {
                    int64_t binop_y_40545 = Tk_40465 * i_40535;
                    int64_t loc_fi_40546 = k_40533 + binop_y_40545;
                    
                    a_loc_ind_40544 = loc_fi_40546;
                } else {
                    a_loc_ind_40544 = (int64_t) -1;
                }
                if (sle64((int64_t) 0, a_loc_ind_40544) &&
                    slt64(a_loc_ind_40544, a_loc_szz_40471)) {
                    ((__local float *) color_42700)[a_loc_ind_40544] =
                        A_elem_40539;
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        for (int64_t i_40551 = 0; i_40551 < tk_div_ty_40467; i_40551++) {
            int64_t binop_y_40572 = Ty_40461 * i_40551;
            
            for (int64_t i_40553 = 0; i_40553 < Rx_40464; i_40553++) {
                int64_t binop_y_40574 = Tx_40463 * i_40553;
                int64_t ltid_x_40555 = sext_i32_i64(ltid_pre_43415);
                int64_t ltid_y_40556 = sext_i32_i64(ltid_pre_43416);
                int32_t ltid_flat_40557 = local_tid_43411;
                int64_t k_40573 = ltid_x_40555 + binop_y_40572;
                int64_t j_40575 = ltid_y_40556 + binop_y_40574;
                int64_t gtid_40576 = jjj_40482 + j_40575;
                int64_t B_row_idx_40577 = kk_40510 + k_40573;
                bool cond_40578 = slt64(gtid_40576, N_28874);
                float B_elem_40579;
                
                if (cond_40578) {
                    float B_elem_40581 = ((__global
                                           float *) mem_42011)[B_row_idx_40577 *
                                                               N_28874 +
                                                               gtid_40576];
                    
                    B_elem_40579 = B_elem_40581;
                } else {
                    B_elem_40579 = 0.0F;
                }
                
                bool cond_40583 = slt64(k_40573, Tk_40465);
                int64_t b_loc_ind_40584;
                
                if (cond_40583) {
                    int64_t binop_y_40585 = TxRx_40468 * k_40573;
                    int64_t loc_fi_40586 = j_40575 + binop_y_40585;
                    
                    b_loc_ind_40584 = loc_fi_40586;
                } else {
                    b_loc_ind_40584 = (int64_t) -1;
                }
                if (sle64((int64_t) 0, b_loc_ind_40584) &&
                    slt64(b_loc_ind_40584, b_loc_szz_40473)) {
                    ((__local float *) color_42699)[b_loc_ind_40584] =
                        B_elem_40579;
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        
        float loop_mem_42117[Ry_40462 * Rx_40464];
        float mem_param_42089[Ry_40462 * Rx_40464];
        
        for (int32_t i_3 = 0; i_3 < Ry_40462 * Rx_40464; i_3++)
            mem_param_42089[i_3] = mem_param_42032[i_3];
        for (int64_t i_40591 = 0; i_40591 < Tk_40465; i_40591++) {
            int64_t binop_y_40630 = TxRx_40468 * i_40591;
            int64_t ltid_y_40595 = sext_i32_i64(ltid_pre_43415);
            int64_t ltid_x_40593 = sext_i32_i64(ltid_pre_43416);
            int32_t ltid_flat_40594 = local_tid_43411;
            float color_42690[Rx_40464];
            float color_42691[Ry_40462];
            int64_t binop_x_40621 = Ry_40462 * ltid_y_40595;
            
            for (int64_t i_40619 = 0; i_40619 < Ry_40462; i_40619++) {
                int64_t binop_x_40622 = i_40619 + binop_x_40621;
                int64_t binop_y_40623 = Tk_40465 * binop_x_40622;
                int64_t a_loc_ind_40624 = i_40591 + binop_y_40623;
                
                for (int64_t i_43436 = 0; i_43436 < (int64_t) 1; i_43436++) {
                    color_42691[i_40619 + i_43436] = ((__local
                                                       float *) color_42700)[a_loc_ind_40624 +
                                                                             i_43436];
                }
            }
            
            int64_t binop_y_40632 = Rx_40464 * ltid_x_40593;
            
            for (int64_t i_40628 = 0; i_40628 < Rx_40464; i_40628++) {
                int64_t binop_x_40631 = i_40628 + binop_y_40630;
                int64_t b_loc_ind_40633 = binop_x_40631 + binop_y_40632;
                
                for (int64_t i_43438 = 0; i_43438 < (int64_t) 1; i_43438++) {
                    color_42690[i_40628 + i_43438] = ((__local
                                                       float *) color_42699)[b_loc_ind_40633 +
                                                                             i_43438];
                }
            }
            for (int64_t i_43439 = 0; i_43439 < Ry_40462; i_43439++) {
                color_42698[i_43439] = color_42691[i_43439];
            }
            for (int64_t i_43440 = 0; i_43440 < Rx_40464; i_43440++) {
                color_42697[i_43440] = color_42690[i_43440];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int64_t ltid_y_40640 = sext_i32_i64(ltid_pre_43415);
            int64_t ltid_x_40638 = sext_i32_i64(ltid_pre_43416);
            int32_t ltid_flat_40639 = local_tid_43411;
            int64_t binop_y_40681 = Ry_40462 * ltid_y_40640;
            int64_t binop_y_40685 = Rx_40464 * ltid_x_40638;
            
            for (int64_t i_40675 = 0; i_40675 < Ry_40462; i_40675++) {
                int64_t binop_x_40680 = iii_40481 + i_40675;
                int64_t cmpop_x_40682 = binop_x_40680 + binop_y_40681;
                bool binop_x_40683 = slt64(cmpop_x_40682, m_28875);
                
                for (int64_t i_40678 = 0; i_40678 < Rx_40464; i_40678++) {
                    int64_t binop_x_40684 = jjj_40482 + i_40678;
                    int64_t cmpop_x_40686 = binop_x_40684 + binop_y_40685;
                    bool binop_y_40687 = slt64(cmpop_x_40686, N_28874);
                    bool cond_40688 = binop_x_40683 && binop_y_40687;
                    
                    if (cond_40688) {
                        float a_40690 = color_42698[i_40675];
                        float b_40691 = color_42697[i_40678];
                        float c_40692 = mem_param_42089[i_40675 * Rx_40464 +
                                                        i_40678];
                        float defunc_1_f_res_40695 = a_40690 * b_40691;
                        float defunc_1_op_res_40699 = c_40692 +
                              defunc_1_f_res_40695;
                        
                        mem_param_42089[i_40675 * Rx_40464 + i_40678] =
                            defunc_1_op_res_40699;
                    }
                }
            }
            for (int64_t i_43443 = 0; i_43443 < Ry_40462; i_43443++) {
                for (int64_t i_43444 = 0; i_43444 < Rx_40464; i_43444++) {
                    color_42695[i_43443 * Rx_40464 + i_43444] =
                        mem_param_42089[i_43443 * Rx_40464 + i_43444];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            float mem_param_tmp_43433[Ry_40462 * Rx_40464];
            
            for (int32_t i_4 = 0; i_4 < Ry_40462 * Rx_40464; i_4++)
                mem_param_tmp_43433[i_4] = color_42695[i_4];
            for (int32_t i_5 = 0; i_5 < Ry_40462 * Rx_40464; i_5++)
                mem_param_42089[i_5] = mem_param_tmp_43433[i_5];
        }
        for (int32_t i_6 = 0; i_6 < Ry_40462 * Rx_40464; i_6++)
            loop_mem_42117[i_6] = mem_param_42089[i_6];
        
        float mem_param_tmp_43425[Ry_40462 * Rx_40464];
        
        for (int32_t i_7 = 0; i_7 < Ry_40462 * Rx_40464; i_7++)
            mem_param_tmp_43425[i_7] = loop_mem_42117[i_7];
        for (int32_t i_8 = 0; i_8 < Ry_40462 * Rx_40464; i_8++)
            mem_param_42032[i_8] = mem_param_tmp_43425[i_8];
    }
    for (int32_t i_9 = 0; i_9 < Ry_40462 * Rx_40464; i_9++)
        loop_mem_42118[i_9] = mem_param_42032[i_9];
    for (int64_t i_40709 = 0; i_40709 < Ry_40462; i_40709++) {
        int64_t binop_y_40734 = Ty_40461 * i_40709;
        
        for (int64_t i_40711 = 0; i_40711 < tk_div_tx_40466; i_40711++) {
            int64_t binop_y_40732 = Tx_40463 * i_40711;
            int64_t ltid_x_40713 = sext_i32_i64(ltid_pre_43415);
            int64_t ltid_y_40714 = sext_i32_i64(ltid_pre_43416);
            int32_t ltid_flat_40715 = local_tid_43411;
            int64_t k_40733 = ltid_y_40714 + binop_y_40732;
            int64_t i_40735 = ltid_x_40713 + binop_y_40734;
            int64_t gtid_40736 = iii_40481 + i_40735;
            int64_t A_col_idx_40737 = kk_40708 + k_40733;
            bool binop_x_40738 = slt64(gtid_40736, m_28875);
            bool binop_y_40739 = slt64(A_col_idx_40737, i32_res_28890);
            bool cond_40740 = binop_x_40738 && binop_y_40739;
            float A_elem_40741;
            
            if (cond_40740) {
                float A_elem_40743 = ((__global
                                       float *) defunc_4_map_res_mem_41986)[gtid_40736 *
                                                                            i32_res_28890 +
                                                                            A_col_idx_40737];
                
                A_elem_40741 = A_elem_40743;
            } else {
                A_elem_40741 = 0.0F;
            }
            
            bool cond_40745 = slt64(k_40733, Tk_40465);
            int64_t a_loc_ind_40746;
            
            if (cond_40745) {
                int64_t binop_y_40747 = Tk_40465 * i_40735;
                int64_t loc_fi_40748 = k_40733 + binop_y_40747;
                
                a_loc_ind_40746 = loc_fi_40748;
            } else {
                a_loc_ind_40746 = (int64_t) -1;
            }
            if (sle64((int64_t) 0, a_loc_ind_40746) && slt64(a_loc_ind_40746,
                                                             a_loc_szz_40471)) {
                ((__local float *) color_42700)[a_loc_ind_40746] = A_elem_40741;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    for (int64_t i_40753 = 0; i_40753 < tk_div_ty_40467; i_40753++) {
        int64_t binop_y_40776 = Ty_40461 * i_40753;
        
        for (int64_t i_40755 = 0; i_40755 < Rx_40464; i_40755++) {
            int64_t binop_y_40778 = Tx_40463 * i_40755;
            int64_t ltid_x_40757 = sext_i32_i64(ltid_pre_43415);
            int64_t ltid_y_40758 = sext_i32_i64(ltid_pre_43416);
            int32_t ltid_flat_40759 = local_tid_43411;
            int64_t k_40777 = ltid_x_40757 + binop_y_40776;
            int64_t j_40779 = ltid_y_40758 + binop_y_40778;
            int64_t gtid_40780 = jjj_40482 + j_40779;
            int64_t B_row_idx_40781 = kk_40708 + k_40777;
            bool binop_x_40782 = slt64(gtid_40780, N_28874);
            bool binop_y_40783 = slt64(B_row_idx_40781, i32_res_28890);
            bool cond_40784 = binop_x_40782 && binop_y_40783;
            float B_elem_40785;
            
            if (cond_40784) {
                float B_elem_40787 = ((__global
                                       float *) mem_42011)[B_row_idx_40781 *
                                                           N_28874 +
                                                           gtid_40780];
                
                B_elem_40785 = B_elem_40787;
            } else {
                B_elem_40785 = 0.0F;
            }
            
            bool cond_40789 = slt64(k_40777, Tk_40465);
            int64_t b_loc_ind_40790;
            
            if (cond_40789) {
                int64_t binop_y_40791 = TxRx_40468 * k_40777;
                int64_t loc_fi_40792 = j_40779 + binop_y_40791;
                
                b_loc_ind_40790 = loc_fi_40792;
            } else {
                b_loc_ind_40790 = (int64_t) -1;
            }
            if (sle64((int64_t) 0, b_loc_ind_40790) && slt64(b_loc_ind_40790,
                                                             b_loc_szz_40473)) {
                ((__local float *) color_42699)[b_loc_ind_40790] = B_elem_40785;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
    float loop_mem_42200[Ry_40462 * Rx_40464];
    float mem_param_42171[Ry_40462 * Rx_40464];
    
    for (int32_t i_10 = 0; i_10 < Ry_40462 * Rx_40464; i_10++)
        mem_param_42171[i_10] = loop_mem_42118[i_10];
    for (int64_t i_40797 = 0; i_40797 < Tk_40465; i_40797++) {
        int64_t cmpop_x_40799 = kk_40708 + i_40797;
        bool cond_40800 = slt64(cmpop_x_40799, i32_res_28890);
        
        if (cond_40800) {
            int64_t binop_y_40838 = TxRx_40468 * i_40797;
            int64_t bytes_42173 = (int64_t) 4 * Ry_40462;
            int64_t bytes_42175 = (int64_t) 4 * Rx_40464;
            int64_t ltid_y_40803 = sext_i32_i64(ltid_pre_43415);
            int64_t ltid_x_40801 = sext_i32_i64(ltid_pre_43416);
            int32_t ltid_flat_40802 = local_tid_43411;
            float color_42692[Rx_40464];
            float color_42693[Ry_40462];
            int64_t binop_x_40829 = Ry_40462 * ltid_y_40803;
            
            for (int64_t i_40827 = 0; i_40827 < Ry_40462; i_40827++) {
                int64_t binop_x_40830 = i_40827 + binop_x_40829;
                int64_t binop_y_40831 = Tk_40465 * binop_x_40830;
                int64_t a_loc_ind_40832 = i_40797 + binop_y_40831;
                
                for (int64_t i_43452 = 0; i_43452 < (int64_t) 1; i_43452++) {
                    color_42693[i_40827 + i_43452] = ((__local
                                                       float *) color_42700)[a_loc_ind_40832 +
                                                                             i_43452];
                }
            }
            
            int64_t binop_y_40840 = Rx_40464 * ltid_x_40801;
            
            for (int64_t i_40836 = 0; i_40836 < Rx_40464; i_40836++) {
                int64_t binop_x_40839 = i_40836 + binop_y_40838;
                int64_t b_loc_ind_40841 = binop_x_40839 + binop_y_40840;
                
                for (int64_t i_43454 = 0; i_43454 < (int64_t) 1; i_43454++) {
                    color_42692[i_40836 + i_43454] = ((__local
                                                       float *) color_42699)[b_loc_ind_40841 +
                                                                             i_43454];
                }
            }
            for (int64_t i_43455 = 0; i_43455 < Ry_40462; i_43455++) {
                color_42698[i_43455] = color_42693[i_43455];
            }
            for (int64_t i_43456 = 0; i_43456 < Rx_40464; i_43456++) {
                color_42697[i_43456] = color_42692[i_43456];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int64_t ltid_y_40848 = sext_i32_i64(ltid_pre_43415);
            int64_t ltid_x_40846 = sext_i32_i64(ltid_pre_43416);
            int32_t ltid_flat_40847 = local_tid_43411;
            int64_t binop_y_40889 = Ry_40462 * ltid_y_40848;
            int64_t binop_y_40893 = Rx_40464 * ltid_x_40846;
            
            for (int64_t i_40883 = 0; i_40883 < Ry_40462; i_40883++) {
                int64_t binop_x_40888 = iii_40481 + i_40883;
                int64_t cmpop_x_40890 = binop_x_40888 + binop_y_40889;
                bool binop_x_40891 = slt64(cmpop_x_40890, m_28875);
                
                for (int64_t i_40886 = 0; i_40886 < Rx_40464; i_40886++) {
                    int64_t binop_x_40892 = jjj_40482 + i_40886;
                    int64_t cmpop_x_40894 = binop_x_40892 + binop_y_40893;
                    bool binop_y_40895 = slt64(cmpop_x_40894, N_28874);
                    bool cond_40896 = binop_x_40891 && binop_y_40895;
                    
                    if (cond_40896) {
                        float a_40898 = color_42698[i_40883];
                        float b_40899 = color_42697[i_40886];
                        float c_40900 = mem_param_42171[i_40883 * Rx_40464 +
                                                        i_40886];
                        float defunc_1_f_res_40903 = a_40898 * b_40899;
                        float defunc_1_op_res_40907 = c_40900 +
                              defunc_1_f_res_40903;
                        
                        mem_param_42171[i_40883 * Rx_40464 + i_40886] =
                            defunc_1_op_res_40907;
                    }
                }
            }
            for (int64_t i_43459 = 0; i_43459 < Ry_40462; i_43459++) {
                for (int64_t i_43460 = 0; i_43460 < Rx_40464; i_43460++) {
                    color_42696[i_43459 * Rx_40464 + i_43460] =
                        mem_param_42171[i_43459 * Rx_40464 + i_43460];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            for (int64_t i_43461 = 0; i_43461 < Ry_40462; i_43461++) {
                for (int64_t i_43462 = 0; i_43462 < Rx_40464; i_43462++) {
                    color_42695[i_43461 * Rx_40464 + i_43462] =
                        color_42696[i_43461 * Rx_40464 + i_43462];
                }
            }
        } else {
            for (int64_t i_43463 = 0; i_43463 < Ry_40462; i_43463++) {
                for (int64_t i_43464 = 0; i_43464 < Rx_40464; i_43464++) {
                    color_42695[i_43463 * Rx_40464 + i_43464] =
                        mem_param_42171[i_43463 * Rx_40464 + i_43464];
                }
            }
        }
        
        float mem_param_tmp_43449[Ry_40462 * Rx_40464];
        
        for (int32_t i_11 = 0; i_11 < Ry_40462 * Rx_40464; i_11++)
            mem_param_tmp_43449[i_11] = color_42695[i_11];
        for (int32_t i_12 = 0; i_12 < Ry_40462 * Rx_40464; i_12++)
            mem_param_42171[i_12] = mem_param_tmp_43449[i_12];
    }
    for (int32_t i_13 = 0; i_13 < Ry_40462 * Rx_40464; i_13++)
        loop_mem_42200[i_13] = mem_param_42171[i_13];
    
    int64_t reg_tile_i_43465 = squot64(sext_i32_i64(local_tid_43411), Tx_40463);
    int64_t reg_tile_i_43466 = sext_i32_i64(local_tid_43411) -
            squot64(sext_i32_i64(local_tid_43411), Tx_40463) * Tx_40463;
    int64_t tile_dim_start_43467 = Ry_40462 * (Ty_40461 * gid_y_40479 +
                                               reg_tile_i_43465);
    int64_t tile_dim_start_43468 = Rx_40464 * (Tx_40463 * gid_x_40478 +
                                               reg_tile_i_43466);
    
    for (int64_t nest_i_43469 = 0; nest_i_43469 < Ry_40462; nest_i_43469++) {
        for (int64_t nest_i_43470 = 0; nest_i_43470 < Rx_40464;
             nest_i_43470++) {
            if (slt64(tile_dim_start_43467 + nest_i_43469, m_28875) &&
                slt64(tile_dim_start_43468 + nest_i_43470, N_28874)) {
                ((__global float *) mem_42204)[(tile_dim_start_43467 +
                                                nest_i_43469) * N_28874 +
                                               (tile_dim_start_43468 +
                                                nest_i_43470)] =
                    loop_mem_42200[nest_i_43469 * Rx_40464 + nest_i_43470];
            }
        }
    }
    
  error_9:
    return;
    #undef Ty_40461
    #undef Ry_40462
    #undef Tx_40463
    #undef Rx_40464
    #undef Tk_40465
    #undef tk_div_tx_40466
    #undef tk_div_ty_40467
    #undef TxRx_40468
    #undef TyRy_40469
    #undef a_loc_szz_40471
    #undef b_loc_szz_40473
}
__kernel void mainMagnitudezisegmap_intragroup_40914(__global
                                                     int *global_failure,
                                                     int failure_is_an_option,
                                                     __global
                                                     int64_t *global_failure_args,
                                                     __local volatile
                                                     int64_t *color_42709_backing_aligned_0,
                                                     int64_t N_28874,
                                                     int64_t m_28875,
                                                     int32_t n_28878,
                                                     float hfrac_28880,
                                                     int64_t i32_res_28884,
                                                     int32_t k2p2_28886,
                                                     int64_t segmap_usable_groups_35487,
                                                     int64_t num_whole_tiles_40936,
                                                     int64_t residual_input_41037,
                                                     unsigned char cond_41038,
                                                     __global
                                                     unsigned char *mem_42270,
                                                     __global
                                                     unsigned char *mem_42273,
                                                     __global
                                                     unsigned char *mem_42307,
                                                     __global
                                                     unsigned char *mem_42310,
                                                     __global
                                                     unsigned char *mem_42313)
{
    #define segmap_group_sizze_35486 (mainMagnitudezisegmap_group_sizze_35451)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict color_42709_backing_0 = (__local volatile
                                                             char *) color_42709_backing_aligned_0;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43656;
    int32_t local_tid_43657;
    int64_t group_sizze_43660;
    int32_t wave_sizze_43659;
    int32_t group_tid_43658;
    
    global_tid_43656 = get_global_id(0);
    local_tid_43657 = get_local_id(0);
    group_sizze_43660 = get_local_size(0);
    wave_sizze_43659 = LOCKSTEP_WIDTH;
    group_tid_43658 = get_group_id(0);
    
    int32_t gid_flat_40914 = group_tid_43658;
    int32_t ltid_pre_43661 = local_tid_43657;
    int64_t slice_43662 = segmap_usable_groups_35487;
    int64_t gid_40913 = sext_i32_i64(group_tid_43658);
    int64_t remnant_43663 = sext_i32_i64(group_tid_43658) - gid_40913;
    float color_42705[1];
    float color_42706[1];
    int32_t color_42707[1];
    int32_t color_42708[1];
    __local char *color_42709;
    
    color_42709 = (__local char *) color_42709_backing_0;
    
    int32_t color_42710[1];
    int64_t binop_x_40921 = segmap_group_sizze_35486 * gid_40913;
    int64_t ltid_40915 = sext_i32_i64(ltid_pre_43661);
    int32_t ltid_flat_40916 = local_tid_43657;
    int64_t gtid_40922 = ltid_40915 + binop_x_40921;
    bool cond_40923 = slt64(gtid_40922, m_28875);
    int32_t pre_40924;
    
    if (cond_40923) {
        int32_t defunc_0_f_res_40926;
        int32_t redout_41370 = 0;
        
        for (int32_t i_41410 = 0; i_41410 < n_28878; i_41410++) {
            int64_t i_41371 = sext_i32_i64(i_41410);
            float x_40930 = ((__global float *) mem_42270)[i_41371 * m_28875 +
                                                           gtid_40922];
            bool isnan_res_40931;
            
            isnan_res_40931 = futrts_isnan32(x_40930);
            
            bool cond_40932 = !isnan_res_40931;
            int32_t defunc_0_f_res_40933 = btoi_bool_i32(cond_40932);
            int32_t defunc_1_op_res_40929 = add32(defunc_0_f_res_40933,
                                                  redout_41370);
            int32_t redout_tmp_43664 = defunc_1_op_res_40929;
            
            redout_41370 = redout_tmp_43664;
        }
        defunc_0_f_res_40926 = redout_41370;
        pre_40924 = defunc_0_f_res_40926;
    } else {
        pre_40924 = 0;
    }
    color_42710[(int64_t) 0] = pre_40924;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t ltid_40937 = sext_i32_i64(ltid_pre_43661);
    int32_t ltid_flat_40938 = local_tid_43657;
    
    color_42706[(int64_t) 0] = 0.0F;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float accs_mem_42289[1];
    float mem_param_42281[1];
    
    for (int32_t i_1 = 0; i_1 < 1; i_1++)
        mem_param_42281[i_1] = color_42706[i_1];
    for (int64_t tile_id_40944 = 0; tile_id_40944 < num_whole_tiles_40936;
         tile_id_40944++) {
        int64_t binop_x_40993 = segmap_group_sizze_35486 * tile_id_40944;
        int64_t ltid_40945 = sext_i32_i64(ltid_pre_43661);
        int32_t ltid_flat_40946 = local_tid_43657;
        int64_t j_40994 = ltid_40945 + binop_x_40993;
        bool cond_40998 = slt64(j_40994, i32_res_28884);
        int32_t pre_40999;
        
        if (cond_40998) {
            int32_t index_primexp_41328 = sext_i64_i32(j_40994);
            
            pre_40999 = index_primexp_41328;
        } else {
            pre_40999 = 0;
        }
        ((__local int32_t *) color_42709)[ltid_40945] = pre_40999;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_40964 = sext_i32_i64(ltid_pre_43661);
        int32_t ltid_flat_40965 = local_tid_43657;
        int64_t gtid_41004 = binop_x_40921 + ltid_40964;
        float acc_41006 = mem_param_42281[(int64_t) 0];
        bool cond_41007 = slt64(gtid_41004, m_28875);
        float acc_41008;
        
        if (cond_41007) {
            int32_t defunc_0_f_res_41005 = color_42710[(int64_t) 0];
            float x_41009;
            float redout_41372 = acc_41006;
            
            for (int64_t i_41373 = 0; i_41373 < segmap_group_sizze_35486;
                 i_41373++) {
                int32_t x_41013 = ((__local int32_t *) color_42709)[i_41373];
                bool cond_41014 = slt32(x_41013, defunc_0_f_res_41005);
                float defunc_0_f_res_41015;
                
                if (cond_41014) {
                    int64_t i_41016 = sext_i32_i64(x_41013);
                    bool x_41017 = sle64((int64_t) 0, i_41016);
                    bool y_41018 = slt64(i_41016, N_28874);
                    bool bounds_check_41019 = x_41017 && y_41018;
                    bool index_certs_41020;
                    
                    if (!bounds_check_41019) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          94) == -1) {
                                global_failure_args[0] = i_41016;
                                global_failure_args[1] = N_28874;
                                ;
                            }
                            local_failure = true;
                            goto error_3;
                        }
                    }
                    
                    float defunc_0_f_res_t_res_41021 = ((__global
                                                         float *) mem_42273)[i_41016 *
                                                                             m_28875 +
                                                                             gtid_41004];
                    
                    defunc_0_f_res_41015 = defunc_0_f_res_t_res_41021;
                } else {
                    defunc_0_f_res_41015 = 0.0F;
                }
                
                float defunc_0_f_res_41022 = defunc_0_f_res_41015 *
                      defunc_0_f_res_41015;
                float defunc_1_op_res_41012 = defunc_0_f_res_41022 +
                      redout_41372;
                float redout_tmp_43667 = defunc_1_op_res_41012;
                
                redout_41372 = redout_tmp_43667;
            }
            x_41009 = redout_41372;
            acc_41008 = x_41009;
        } else {
            acc_41008 = acc_41006;
        }
        color_42705[(int64_t) 0] = acc_41008;
        
      error_3:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_43665[1];
        
        for (int32_t i_2 = 0; i_2 < 1; i_2++)
            mem_param_tmp_43665[i_2] = color_42705[i_2];
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_42281[i_3] = mem_param_tmp_43665[i_3];
    }
    for (int32_t i_4 = 0; i_4 < 1; i_4++)
        accs_mem_42289[i_4] = mem_param_42281[i_4];
    if (cond_41038) {
        color_42705[(int64_t) 0] = accs_mem_42289[(int64_t) 0];
    } else {
        int64_t binop_x_41048 = segmap_group_sizze_35486 *
                num_whole_tiles_40936;
        int64_t ltid_41039 = sext_i32_i64(ltid_pre_43661);
        int32_t ltid_flat_41040 = local_tid_43657;
        int64_t j_41049 = ltid_41039 + binop_x_41048;
        bool cond_41053 = slt64(j_41049, i32_res_28884);
        int32_t pre_41054;
        
        if (cond_41053) {
            int32_t index_primexp_41329 = sext_i64_i32(j_41049);
            
            pre_41054 = index_primexp_41329;
        } else {
            pre_41054 = 0;
        }
        ((__local int32_t *) color_42709)[ltid_41039] = pre_41054;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_41059 = sext_i32_i64(ltid_pre_43661);
        int32_t ltid_flat_41060 = local_tid_43657;
        int64_t gtid_41067 = binop_x_40921 + ltid_41059;
        float acc_41069 = accs_mem_42289[(int64_t) 0];
        bool cond_41070 = slt64(gtid_41067, m_28875);
        float acc_41071;
        
        if (cond_41070) {
            int32_t defunc_0_f_res_41068 = color_42710[(int64_t) 0];
            float x_41072;
            float redout_41374 = acc_41069;
            
            for (int64_t i_41375 = 0; i_41375 < residual_input_41037;
                 i_41375++) {
                int32_t x_41076 = ((__local int32_t *) color_42709)[i_41375];
                bool cond_41077 = slt32(x_41076, defunc_0_f_res_41068);
                float defunc_0_f_res_41078;
                
                if (cond_41077) {
                    int64_t i_41079 = sext_i32_i64(x_41076);
                    bool x_41080 = sle64((int64_t) 0, i_41079);
                    bool y_41081 = slt64(i_41079, N_28874);
                    bool bounds_check_41082 = x_41080 && y_41081;
                    bool index_certs_41083;
                    
                    if (!bounds_check_41082) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          95) == -1) {
                                global_failure_args[0] = i_41079;
                                global_failure_args[1] = N_28874;
                                ;
                            }
                            local_failure = true;
                            goto error_5;
                        }
                    }
                    
                    float defunc_0_f_res_t_res_41084 = ((__global
                                                         float *) mem_42273)[i_41079 *
                                                                             m_28875 +
                                                                             gtid_41067];
                    
                    defunc_0_f_res_41078 = defunc_0_f_res_t_res_41084;
                } else {
                    defunc_0_f_res_41078 = 0.0F;
                }
                
                float defunc_0_f_res_41085 = defunc_0_f_res_41078 *
                      defunc_0_f_res_41078;
                float defunc_1_op_res_41075 = defunc_0_f_res_41085 +
                      redout_41374;
                float redout_tmp_43668 = defunc_1_op_res_41075;
                
                redout_41374 = redout_tmp_43668;
            }
            x_41072 = redout_41374;
            acc_41071 = x_41072;
        } else {
            acc_41071 = acc_41069;
        }
        color_42706[(int64_t) 0] = acc_41071;
        
      error_5:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        color_42705[(int64_t) 0] = color_42706[(int64_t) 0];
    }
    
    int64_t ltid_41088 = sext_i32_i64(ltid_pre_43661);
    int32_t ltid_flat_41089 = local_tid_43657;
    int64_t gtid_41099 = binop_x_40921 + ltid_41088;
    bool cond_41101 = slt64(gtid_41099, m_28875);
    int32_t postlude_41102;
    int32_t postlude_41103;
    float postlude_41104;
    
    if (cond_41101) {
        float defunc_0_f_res_41100 = color_42705[(int64_t) 0];
        int32_t defunc_0_f_res_41105 = color_42710[(int64_t) 0];
        int32_t r32_arg_41106 = sub32(defunc_0_f_res_41105, k2p2_28886);
        float i32_res_41107 = sitofp_i32_f32(r32_arg_41106);
        float sqrt_arg_41108 = defunc_0_f_res_41100 / i32_res_41107;
        float sqrt_res_41109;
        
        sqrt_res_41109 = futrts_sqrt32(sqrt_arg_41108);
        
        float i32_res_41110 = sitofp_i32_f32(defunc_0_f_res_41105);
        float t32_arg_41111 = hfrac_28880 * i32_res_41110;
        int32_t f32_res_41112 = fptosi_f32_i32(t32_arg_41111);
        
        postlude_41102 = f32_res_41112;
        postlude_41103 = defunc_0_f_res_41105;
        postlude_41104 = sqrt_res_41109;
    } else {
        postlude_41102 = 0;
        postlude_41103 = 0;
        postlude_41104 = 0.0F;
    }
    color_42708[(int64_t) 0] = postlude_41102;
    color_42707[(int64_t) 0] = postlude_41103;
    color_42706[(int64_t) 0] = postlude_41104;
    barrier(CLK_LOCAL_MEM_FENCE);
    if (slt64(sext_i32_i64(local_tid_43657) + segmap_group_sizze_35486 *
              sext_i32_i64(group_tid_43658), m_28875)) {
        ((__global int32_t *) mem_42307)[sext_i32_i64(local_tid_43657) +
                                         segmap_group_sizze_35486 *
                                         sext_i32_i64(group_tid_43658)] =
            color_42708[(int64_t) 0];
    }
    if (slt64(sext_i32_i64(local_tid_43657) + segmap_group_sizze_35486 *
              sext_i32_i64(group_tid_43658), m_28875)) {
        ((__global int32_t *) mem_42310)[sext_i32_i64(local_tid_43657) +
                                         segmap_group_sizze_35486 *
                                         sext_i32_i64(group_tid_43658)] =
            color_42707[(int64_t) 0];
    }
    if (slt64(sext_i32_i64(local_tid_43657) + segmap_group_sizze_35486 *
              sext_i32_i64(group_tid_43658), m_28875)) {
        ((__global float *) mem_42313)[sext_i32_i64(local_tid_43657) +
                                       segmap_group_sizze_35486 *
                                       sext_i32_i64(group_tid_43658)] =
            color_42706[(int64_t) 0];
    }
    
  error_7:
    return;
    #undef segmap_group_sizze_35486
}
__kernel void mainMagnitudezisegmap_intragroup_41120(__global
                                                     int *global_failure,
                                                     int failure_is_an_option,
                                                     __global
                                                     int64_t *global_failure_args,
                                                     __local volatile
                                                     int64_t *color_42713_backing_aligned_0,
                                                     int64_t N_28874,
                                                     int64_t m_28875,
                                                     int64_t i32_res_29275,
                                                     int64_t segmap_usable_groups_35730,
                                                     int64_t num_whole_tiles_41140,
                                                     int64_t residual_input_41251,
                                                     unsigned char cond_41252,
                                                     __global
                                                     unsigned char *defunc_4_map_res_mem_42266,
                                                     __global
                                                     unsigned char *defunc_3_map_res_mem_42344,
                                                     __global
                                                     unsigned char *defunc_3_map_res_mem_42345,
                                                     __global
                                                     unsigned char *mem_42378)
{
    #define segmap_group_sizze_35729 (mainMagnitudezisegmap_group_sizze_35706)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict color_42713_backing_0 = (__local volatile
                                                             char *) color_42713_backing_aligned_0;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43855;
    int32_t local_tid_43856;
    int64_t group_sizze_43859;
    int32_t wave_sizze_43858;
    int32_t group_tid_43857;
    
    global_tid_43855 = get_global_id(0);
    local_tid_43856 = get_local_id(0);
    group_sizze_43859 = get_local_size(0);
    wave_sizze_43858 = LOCKSTEP_WIDTH;
    group_tid_43857 = get_group_id(0);
    
    int32_t gid_flat_41120 = group_tid_43857;
    int32_t ltid_pre_43860 = local_tid_43856;
    int64_t slice_43861 = segmap_usable_groups_35730;
    int64_t gid_41119 = sext_i32_i64(group_tid_43857);
    int64_t remnant_43862 = sext_i32_i64(group_tid_43857) - gid_41119;
    float color_42711[1];
    float color_42712[1];
    __local char *color_42713;
    
    color_42713 = (__local char *) color_42713_backing_0;
    
    int32_t color_42714[1];
    int32_t color_42715[1];
    int64_t binop_x_41129 = segmap_group_sizze_35729 * gid_41119;
    int64_t ltid_41121 = sext_i32_i64(ltid_pre_43860);
    int32_t ltid_flat_41122 = local_tid_43856;
    int64_t gtid_41130 = ltid_41121 + binop_x_41129;
    bool cond_41131 = slt64(gtid_41130, m_28875);
    int32_t pre_41132;
    int32_t pre_41133;
    
    if (cond_41131) {
        int32_t x_41134 = ((__global
                            int32_t *) defunc_3_map_res_mem_42345)[gtid_41130];
        int32_t x_41135 = ((__global
                            int32_t *) defunc_3_map_res_mem_42344)[gtid_41130];
        
        pre_41132 = x_41134;
        pre_41133 = x_41135;
    } else {
        pre_41132 = 0;
        pre_41133 = 0;
    }
    color_42715[(int64_t) 0] = pre_41132;
    color_42714[(int64_t) 0] = pre_41133;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t ltid_41141 = sext_i32_i64(ltid_pre_43860);
    int32_t ltid_flat_41142 = local_tid_43856;
    
    color_42712[(int64_t) 0] = 0.0F;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float accs_mem_42367[1];
    float mem_param_42359[1];
    
    for (int32_t i_1 = 0; i_1 < 1; i_1++)
        mem_param_42359[i_1] = color_42712[i_1];
    for (int64_t tile_id_41148 = 0; tile_id_41148 < num_whole_tiles_41140;
         tile_id_41148++) {
        int64_t binop_x_41201 = segmap_group_sizze_35729 * tile_id_41148;
        int64_t ltid_41149 = sext_i32_i64(ltid_pre_43860);
        int32_t ltid_flat_41150 = local_tid_43856;
        int64_t j_41202 = ltid_41149 + binop_x_41201;
        bool cond_41207 = slt64(j_41202, i32_res_29275);
        int32_t pre_41208;
        
        if (cond_41207) {
            int32_t index_primexp_41330 = sext_i64_i32(j_41202);
            int32_t tile_elem_41209 = index_primexp_41330;
            
            pre_41208 = tile_elem_41209;
        } else {
            pre_41208 = 0;
        }
        ((__local int32_t *) color_42713)[ltid_41149] = pre_41208;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_41169 = sext_i32_i64(ltid_pre_43860);
        int32_t ltid_flat_41170 = local_tid_43856;
        int64_t gtid_41213 = binop_x_41129 + ltid_41169;
        float acc_41216 = mem_param_42359[(int64_t) 0];
        bool cond_41217 = slt64(gtid_41213, m_28875);
        float acc_41218;
        
        if (cond_41217) {
            int32_t x_41214 = color_42715[(int64_t) 0];
            int32_t x_41215 = color_42714[(int64_t) 0];
            float x_41219;
            float redout_41376 = acc_41216;
            
            for (int64_t i_41377 = 0; i_41377 < segmap_group_sizze_35729;
                 i_41377++) {
                int32_t x_41223 = ((__local int32_t *) color_42713)[i_41377];
                bool cond_41224 = slt32(x_41223, x_41215);
                float defunc_0_f_res_41225;
                
                if (cond_41224) {
                    int32_t x_41226 = add32(x_41214, x_41223);
                    int32_t x_41227 = sub32(x_41226, x_41215);
                    int32_t i_41228 = add32(1, x_41227);
                    int64_t i_41229 = sext_i32_i64(i_41228);
                    bool x_41230 = sle64((int64_t) 0, i_41229);
                    bool y_41231 = slt64(i_41229, N_28874);
                    bool bounds_check_41232 = x_41230 && y_41231;
                    bool index_certs_41233;
                    
                    if (!bounds_check_41232) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          99) == -1) {
                                global_failure_args[0] = i_41229;
                                global_failure_args[1] = N_28874;
                                ;
                            }
                            local_failure = true;
                            goto error_3;
                        }
                    }
                    
                    float defunc_0_f_res_t_res_41234 = ((__global
                                                         float *) defunc_4_map_res_mem_42266)[gtid_41213 *
                                                                                              N_28874 +
                                                                                              i_41229];
                    
                    defunc_0_f_res_41225 = defunc_0_f_res_t_res_41234;
                } else {
                    defunc_0_f_res_41225 = 0.0F;
                }
                
                float defunc_1_op_res_41222 = defunc_0_f_res_41225 +
                      redout_41376;
                float redout_tmp_43865 = defunc_1_op_res_41222;
                
                redout_41376 = redout_tmp_43865;
            }
            x_41219 = redout_41376;
            acc_41218 = x_41219;
        } else {
            acc_41218 = acc_41216;
        }
        color_42711[(int64_t) 0] = acc_41218;
        
      error_3:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_43863[1];
        
        for (int32_t i_2 = 0; i_2 < 1; i_2++)
            mem_param_tmp_43863[i_2] = color_42711[i_2];
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_42359[i_3] = mem_param_tmp_43863[i_3];
    }
    for (int32_t i_4 = 0; i_4 < 1; i_4++)
        accs_mem_42367[i_4] = mem_param_42359[i_4];
    if (cond_41252) {
        color_42711[(int64_t) 0] = accs_mem_42367[(int64_t) 0];
    } else {
        int64_t binop_x_41262 = segmap_group_sizze_35729 *
                num_whole_tiles_41140;
        int64_t ltid_41253 = sext_i32_i64(ltid_pre_43860);
        int32_t ltid_flat_41254 = local_tid_43856;
        int64_t j_41263 = ltid_41253 + binop_x_41262;
        bool cond_41268 = slt64(j_41263, i32_res_29275);
        int32_t pre_41269;
        
        if (cond_41268) {
            int32_t index_primexp_41331 = sext_i64_i32(j_41263);
            int32_t tile_elem_41270 = index_primexp_41331;
            
            pre_41269 = tile_elem_41270;
        } else {
            pre_41269 = 0;
        }
        ((__local int32_t *) color_42713)[ltid_41253] = pre_41269;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_41274 = sext_i32_i64(ltid_pre_43860);
        int32_t ltid_flat_41275 = local_tid_43856;
        int64_t gtid_41282 = binop_x_41129 + ltid_41274;
        float acc_41285 = accs_mem_42367[(int64_t) 0];
        bool cond_41286 = slt64(gtid_41282, m_28875);
        float acc_41287;
        
        if (cond_41286) {
            int32_t x_41283 = color_42715[(int64_t) 0];
            int32_t x_41284 = color_42714[(int64_t) 0];
            float x_41288;
            float redout_41378 = acc_41285;
            
            for (int64_t i_41379 = 0; i_41379 < residual_input_41251;
                 i_41379++) {
                int32_t x_41292 = ((__local int32_t *) color_42713)[i_41379];
                bool cond_41293 = slt32(x_41292, x_41284);
                float defunc_0_f_res_41294;
                
                if (cond_41293) {
                    int32_t x_41295 = add32(x_41283, x_41292);
                    int32_t x_41296 = sub32(x_41295, x_41284);
                    int32_t i_41297 = add32(1, x_41296);
                    int64_t i_41298 = sext_i32_i64(i_41297);
                    bool x_41299 = sle64((int64_t) 0, i_41298);
                    bool y_41300 = slt64(i_41298, N_28874);
                    bool bounds_check_41301 = x_41299 && y_41300;
                    bool index_certs_41302;
                    
                    if (!bounds_check_41301) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          100) == -1) {
                                global_failure_args[0] = i_41298;
                                global_failure_args[1] = N_28874;
                                ;
                            }
                            local_failure = true;
                            goto error_5;
                        }
                    }
                    
                    float defunc_0_f_res_t_res_41303 = ((__global
                                                         float *) defunc_4_map_res_mem_42266)[gtid_41282 *
                                                                                              N_28874 +
                                                                                              i_41298];
                    
                    defunc_0_f_res_41294 = defunc_0_f_res_t_res_41303;
                } else {
                    defunc_0_f_res_41294 = 0.0F;
                }
                
                float defunc_1_op_res_41291 = defunc_0_f_res_41294 +
                      redout_41378;
                float redout_tmp_43866 = defunc_1_op_res_41291;
                
                redout_41378 = redout_tmp_43866;
            }
            x_41288 = redout_41378;
            acc_41287 = x_41288;
        } else {
            acc_41287 = acc_41285;
        }
        color_42712[(int64_t) 0] = acc_41287;
        
      error_5:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        color_42711[(int64_t) 0] = color_42712[(int64_t) 0];
    }
    if (slt64(sext_i32_i64(local_tid_43856) + segmap_group_sizze_35729 *
              sext_i32_i64(group_tid_43857), m_28875)) {
        ((__global float *) mem_42378)[sext_i32_i64(local_tid_43856) +
                                       segmap_group_sizze_35729 *
                                       sext_i32_i64(group_tid_43857)] =
            color_42711[(int64_t) 0];
    }
    
  error_6:
    return;
    #undef segmap_group_sizze_35729
}
__kernel void mainMagnitudezisegred_large_33902(__global int *global_failure,
                                                __local volatile
                                                int64_t *sync_arr_mem_43026_backing_aligned_0,
                                                __local volatile
                                                int64_t *red_arr_mem_43024_backing_aligned_1,
                                                int64_t N_28874,
                                                int64_t m_28875,
                                                int64_t i32_res_28884,
                                                int64_t i32_res_28890,
                                                int64_t num_groups_34041,
                                                int64_t groups_per_segment_43010,
                                                int64_t elements_per_thread_43011,
                                                int64_t virt_num_groups_43012,
                                                int64_t threads_per_segment_43014,
                                                __global
                                                unsigned char *images_mem_41421,
                                                __global
                                                unsigned char *binop_p_mem_41432,
                                                __global
                                                unsigned char *mem_41579,
                                                __global
                                                unsigned char *mem_41585,
                                                __global
                                                unsigned char *segred_tmp_mem_43015,
                                                __global
                                                unsigned char *mainMagnitudezicounter_mem_43017)
{
    #define segred_group_sizze_34040 (mainMagnitudezisegred_group_sizze_33896)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_43026_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_43026_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_43024_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43024_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43019;
    int32_t local_tid_43020;
    int64_t group_sizze_43023;
    int32_t wave_sizze_43022;
    int32_t group_tid_43021;
    
    global_tid_43019 = get_global_id(0);
    local_tid_43020 = get_local_id(0);
    group_sizze_43023 = get_local_size(0);
    wave_sizze_43022 = LOCKSTEP_WIDTH;
    group_tid_43021 = get_group_id(0);
    
    int32_t phys_tid_33902 = global_tid_43019;
    __local char *red_arr_mem_43024;
    
    red_arr_mem_43024 = (__local char *) red_arr_mem_43024_backing_0;
    
    __local char *sync_arr_mem_43026;
    
    sync_arr_mem_43026 = (__local char *) sync_arr_mem_43026_backing_1;
    
    int32_t phys_group_id_43028;
    
    phys_group_id_43028 = get_group_id(0);
    for (int32_t i_43029 = 0; i_43029 <
         sdiv_up32(sext_i64_i32(virt_num_groups_43012) - phys_group_id_43028,
                   sext_i64_i32(num_groups_34041)); i_43029++) {
        int32_t virt_group_id_43030 = phys_group_id_43028 + i_43029 *
                sext_i64_i32(num_groups_34041);
        int32_t flat_segment_id_43031 = squot32(virt_group_id_43030,
                                                sext_i64_i32(groups_per_segment_43010));
        int64_t global_tid_43032 = srem64(sext_i32_i64(virt_group_id_43030) *
                                          segred_group_sizze_34040 +
                                          sext_i32_i64(local_tid_43020),
                                          segred_group_sizze_34040 *
                                          groups_per_segment_43010);
        int64_t slice_43033 = i32_res_28890;
        int64_t slice_43034 = i32_res_28890 * slice_43033;
        int64_t slice_43035 = m_28875 * slice_43034;
        int64_t gtid_33889 = squot64(sext_i32_i64(flat_segment_id_43031),
                                     slice_43034);
        int64_t remnant_43036 = sext_i32_i64(flat_segment_id_43031) -
                gtid_33889 * slice_43034;
        int64_t gtid_33890 = squot64(remnant_43036, slice_43033);
        int64_t remnant_43037 = remnant_43036 - gtid_33890 * slice_43033;
        int64_t gtid_33891 = remnant_43037;
        int64_t remnant_43038 = remnant_43037 - gtid_33891;
        int64_t gtid_33901;
        float x_acc_43039;
        int64_t chunk_sizze_43040 = smin64(elements_per_thread_43011,
                                           sdiv_up64(i32_res_28884 -
                                                     global_tid_43032,
                                                     threads_per_segment_43014));
        float x_34044;
        float x_34045;
        
        // neutral-initialise the accumulators
        {
            x_acc_43039 = 0.0F;
        }
        for (int64_t i_43044 = 0; i_43044 < chunk_sizze_43040; i_43044++) {
            gtid_33901 = global_tid_43032 + threads_per_segment_43014 * i_43044;
            // apply map function
            {
                float x_34050 = ((__global
                                  float *) images_mem_41421)[gtid_33889 *
                                                             N_28874 +
                                                             gtid_33901];
                float x_34051 = ((__global
                                  float *) binop_p_mem_41432)[gtid_33890 *
                                                              N_28874 +
                                                              gtid_33901];
                float x_34052 = ((__global float *) mem_41579)[gtid_33891 *
                                                               N_28874 +
                                                               gtid_33901];
                float x_34053 = x_34051 * x_34052;
                bool isnan_res_34054;
                
                isnan_res_34054 = futrts_isnan32(x_34050);
                
                float y_34055;
                
                if (isnan_res_34054) {
                    y_34055 = 0.0F;
                } else {
                    y_34055 = 1.0F;
                }
                
                float defunc_2_f_res_34056 = x_34053 * y_34055;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_34044 = x_acc_43039;
                }
                // load new values
                {
                    x_34045 = defunc_2_f_res_34056;
                }
                // apply reduction operator
                {
                    float defunc_1_op_res_34046 = x_34044 + x_34045;
                    
                    // store in accumulator
                    {
                        x_acc_43039 = defunc_1_op_res_34046;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_34044 = x_acc_43039;
            ((__local
              float *) red_arr_mem_43024)[sext_i32_i64(local_tid_43020)] =
                x_34044;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_43045;
        int32_t skip_waves_43046 = 1;
        float x_43041;
        float x_43042;
        
        offset_43045 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_43020,
                      sext_i64_i32(segred_group_sizze_34040))) {
                x_43041 = ((__local
                            float *) red_arr_mem_43024)[sext_i32_i64(local_tid_43020 +
                                                        offset_43045)];
            }
        }
        offset_43045 = 1;
        while (slt32(offset_43045, wave_sizze_43022)) {
            if (slt32(local_tid_43020 + offset_43045,
                      sext_i64_i32(segred_group_sizze_34040)) &&
                ((local_tid_43020 - squot32(local_tid_43020, wave_sizze_43022) *
                  wave_sizze_43022) & (2 * offset_43045 - 1)) == 0) {
                // read array element
                {
                    x_43042 = ((volatile __local
                                float *) red_arr_mem_43024)[sext_i32_i64(local_tid_43020 +
                                                            offset_43045)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43043 = x_43041 + x_43042;
                    
                    x_43041 = defunc_1_op_res_43043;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_43024)[sext_i32_i64(local_tid_43020)] =
                        x_43041;
                }
            }
            offset_43045 *= 2;
        }
        while (slt32(skip_waves_43046,
                     squot32(sext_i64_i32(segred_group_sizze_34040) +
                             wave_sizze_43022 - 1, wave_sizze_43022))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_43045 = skip_waves_43046 * wave_sizze_43022;
            if (slt32(local_tid_43020 + offset_43045,
                      sext_i64_i32(segred_group_sizze_34040)) &&
                ((local_tid_43020 - squot32(local_tid_43020, wave_sizze_43022) *
                  wave_sizze_43022) == 0 && (squot32(local_tid_43020,
                                                     wave_sizze_43022) & (2 *
                                                                          skip_waves_43046 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_43042 = ((__local
                                float *) red_arr_mem_43024)[sext_i32_i64(local_tid_43020 +
                                                            offset_43045)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43043 = x_43041 + x_43042;
                    
                    x_43041 = defunc_1_op_res_43043;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_43024)[sext_i32_i64(local_tid_43020)] =
                        x_43041;
                }
            }
            skip_waves_43046 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_43020) == (int64_t) 0) {
                x_acc_43039 = x_43041;
            }
        }
        if (groups_per_segment_43010 == (int64_t) 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_43020 == 0) {
                    ((__global float *) mem_41585)[gtid_33889 * (i32_res_28890 *
                                                                 i32_res_28890) +
                                                   gtid_33890 * i32_res_28890 +
                                                   gtid_33891] = x_acc_43039;
                }
            }
        } else {
            int32_t old_counter_43047;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_43020 == 0) {
                    ((__global
                      float *) segred_tmp_mem_43015)[sext_i32_i64(virt_group_id_43030)] =
                        x_acc_43039;
                    mem_fence_global();
                    old_counter_43047 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainMagnitudezicounter_mem_43017)[sext_i32_i64(srem32(flat_segment_id_43031,
                                                                                                              10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_43026)[(int64_t) 0] =
                        old_counter_43047 == groups_per_segment_43010 -
                        (int64_t) 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_43048 = ((__local
                                         bool *) sync_arr_mem_43026)[(int64_t) 0];
            
            if (is_last_group_43048) {
                if (local_tid_43020 == 0) {
                    old_counter_43047 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainMagnitudezicounter_mem_43017)[sext_i32_i64(srem32(flat_segment_id_43031,
                                                                                                              10240))],
                                              (int) ((int64_t) 0 -
                                                     groups_per_segment_43010));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_43049 =
                            sdiv_up64(groups_per_segment_43010,
                                      segred_group_sizze_34040);
                    
                    x_34044 = 0.0F;
                    for (int64_t i_43050 = 0; i_43050 < read_per_thread_43049;
                         i_43050++) {
                        int64_t group_res_id_43051 =
                                sext_i32_i64(local_tid_43020) *
                                read_per_thread_43049 + i_43050;
                        int64_t index_of_group_res_43052 =
                                sext_i32_i64(flat_segment_id_43031) *
                                groups_per_segment_43010 + group_res_id_43051;
                        
                        if (slt64(group_res_id_43051,
                                  groups_per_segment_43010)) {
                            x_34045 = ((__global
                                        float *) segred_tmp_mem_43015)[index_of_group_res_43052];
                            
                            float defunc_1_op_res_34046 = x_34044 + x_34045;
                            
                            x_34044 = defunc_1_op_res_34046;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_43024)[sext_i32_i64(local_tid_43020)] =
                    x_34044;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_43053;
                    int32_t skip_waves_43054 = 1;
                    float x_43041;
                    float x_43042;
                    
                    offset_43053 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_43020,
                                  sext_i64_i32(segred_group_sizze_34040))) {
                            x_43041 = ((__local
                                        float *) red_arr_mem_43024)[sext_i32_i64(local_tid_43020 +
                                                                    offset_43053)];
                        }
                    }
                    offset_43053 = 1;
                    while (slt32(offset_43053, wave_sizze_43022)) {
                        if (slt32(local_tid_43020 + offset_43053,
                                  sext_i64_i32(segred_group_sizze_34040)) &&
                            ((local_tid_43020 - squot32(local_tid_43020,
                                                        wave_sizze_43022) *
                              wave_sizze_43022) & (2 * offset_43053 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_43042 = ((volatile __local
                                            float *) red_arr_mem_43024)[sext_i32_i64(local_tid_43020 +
                                                                        offset_43053)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43043 = x_43041 + x_43042;
                                
                                x_43041 = defunc_1_op_res_43043;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43024)[sext_i32_i64(local_tid_43020)] =
                                    x_43041;
                            }
                        }
                        offset_43053 *= 2;
                    }
                    while (slt32(skip_waves_43054,
                                 squot32(sext_i64_i32(segred_group_sizze_34040) +
                                         wave_sizze_43022 - 1,
                                         wave_sizze_43022))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_43053 = skip_waves_43054 * wave_sizze_43022;
                        if (slt32(local_tid_43020 + offset_43053,
                                  sext_i64_i32(segred_group_sizze_34040)) &&
                            ((local_tid_43020 - squot32(local_tid_43020,
                                                        wave_sizze_43022) *
                              wave_sizze_43022) == 0 &&
                             (squot32(local_tid_43020, wave_sizze_43022) & (2 *
                                                                            skip_waves_43054 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_43042 = ((__local
                                            float *) red_arr_mem_43024)[sext_i32_i64(local_tid_43020 +
                                                                        offset_43053)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43043 = x_43041 + x_43042;
                                
                                x_43041 = defunc_1_op_res_43043;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_43024)[sext_i32_i64(local_tid_43020)] =
                                    x_43041;
                            }
                        }
                        skip_waves_43054 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_43020 == 0) {
                            ((__global float *) mem_41585)[gtid_33889 *
                                                           (i32_res_28890 *
                                                            i32_res_28890) +
                                                           gtid_33890 *
                                                           i32_res_28890 +
                                                           gtid_33891] =
                                x_43041;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_34040
}
__kernel void mainMagnitudezisegred_large_34866(__global int *global_failure,
                                                __local volatile
                                                int64_t *sync_arr_mem_43262_backing_aligned_0,
                                                __local volatile
                                                int64_t *red_arr_mem_43260_backing_aligned_1,
                                                int64_t N_28874,
                                                int64_t m_28875,
                                                int64_t i32_res_28884,
                                                int64_t i32_res_28890,
                                                int64_t num_groups_34919,
                                                int64_t groups_per_segment_43246,
                                                int64_t elements_per_thread_43247,
                                                int64_t virt_num_groups_43248,
                                                int64_t threads_per_segment_43250,
                                                __global
                                                unsigned char *images_mem_41421,
                                                __global
                                                unsigned char *binop_p_mem_41432,
                                                __global
                                                unsigned char *mem_41907,
                                                __global
                                                unsigned char *segred_tmp_mem_43251,
                                                __global
                                                unsigned char *mainMagnitudezicounter_mem_43253)
{
    #define segred_group_sizze_34918 (mainMagnitudezisegred_group_sizze_34860)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_43262_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_43262_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_43260_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43260_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43255;
    int32_t local_tid_43256;
    int64_t group_sizze_43259;
    int32_t wave_sizze_43258;
    int32_t group_tid_43257;
    
    global_tid_43255 = get_global_id(0);
    local_tid_43256 = get_local_id(0);
    group_sizze_43259 = get_local_size(0);
    wave_sizze_43258 = LOCKSTEP_WIDTH;
    group_tid_43257 = get_group_id(0);
    
    int32_t phys_tid_34866 = global_tid_43255;
    __local char *red_arr_mem_43260;
    
    red_arr_mem_43260 = (__local char *) red_arr_mem_43260_backing_0;
    
    __local char *sync_arr_mem_43262;
    
    sync_arr_mem_43262 = (__local char *) sync_arr_mem_43262_backing_1;
    
    int32_t phys_group_id_43264;
    
    phys_group_id_43264 = get_group_id(0);
    for (int32_t i_43265 = 0; i_43265 <
         sdiv_up32(sext_i64_i32(virt_num_groups_43248) - phys_group_id_43264,
                   sext_i64_i32(num_groups_34919)); i_43265++) {
        int32_t virt_group_id_43266 = phys_group_id_43264 + i_43265 *
                sext_i64_i32(num_groups_34919);
        int32_t flat_segment_id_43267 = squot32(virt_group_id_43266,
                                                sext_i64_i32(groups_per_segment_43246));
        int64_t global_tid_43268 = srem64(sext_i32_i64(virt_group_id_43266) *
                                          segred_group_sizze_34918 +
                                          sext_i32_i64(local_tid_43256),
                                          segred_group_sizze_34918 *
                                          groups_per_segment_43246);
        int64_t slice_43269 = i32_res_28890;
        int64_t slice_43270 = m_28875 * slice_43269;
        int64_t gtid_34855 = squot64(sext_i32_i64(flat_segment_id_43267),
                                     slice_43269);
        int64_t remnant_43271 = sext_i32_i64(flat_segment_id_43267) -
                gtid_34855 * slice_43269;
        int64_t gtid_34856 = remnant_43271;
        int64_t remnant_43272 = remnant_43271 - gtid_34856;
        int64_t gtid_34865;
        float x_acc_43273;
        int64_t chunk_sizze_43274 = smin64(elements_per_thread_43247,
                                           sdiv_up64(i32_res_28884 -
                                                     global_tid_43268,
                                                     threads_per_segment_43250));
        float x_34922;
        float x_34923;
        
        // neutral-initialise the accumulators
        {
            x_acc_43273 = 0.0F;
        }
        for (int64_t i_43278 = 0; i_43278 < chunk_sizze_43274; i_43278++) {
            gtid_34865 = global_tid_43268 + threads_per_segment_43250 * i_43278;
            // apply map function
            {
                float x_34928 = ((__global
                                  float *) images_mem_41421)[gtid_34855 *
                                                             N_28874 +
                                                             gtid_34865];
                bool isnan_res_34929;
                
                isnan_res_34929 = futrts_isnan32(x_34928);
                
                float defunc_1_f_res_34930;
                
                if (isnan_res_34929) {
                    defunc_1_f_res_34930 = 0.0F;
                } else {
                    float x_34927 = ((__global
                                      float *) binop_p_mem_41432)[gtid_34856 *
                                                                  N_28874 +
                                                                  gtid_34865];
                    float defunc_1_f_res_f_res_34931 = x_34927 * x_34928;
                    
                    defunc_1_f_res_34930 = defunc_1_f_res_f_res_34931;
                }
                // save map-out results
                { }
                // load accumulator
                {
                    x_34922 = x_acc_43273;
                }
                // load new values
                {
                    x_34923 = defunc_1_f_res_34930;
                }
                // apply reduction operator
                {
                    float defunc_1_op_res_34924 = x_34922 + x_34923;
                    
                    // store in accumulator
                    {
                        x_acc_43273 = defunc_1_op_res_34924;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_34922 = x_acc_43273;
            ((__local
              float *) red_arr_mem_43260)[sext_i32_i64(local_tid_43256)] =
                x_34922;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_43279;
        int32_t skip_waves_43280 = 1;
        float x_43275;
        float x_43276;
        
        offset_43279 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_43256,
                      sext_i64_i32(segred_group_sizze_34918))) {
                x_43275 = ((__local
                            float *) red_arr_mem_43260)[sext_i32_i64(local_tid_43256 +
                                                        offset_43279)];
            }
        }
        offset_43279 = 1;
        while (slt32(offset_43279, wave_sizze_43258)) {
            if (slt32(local_tid_43256 + offset_43279,
                      sext_i64_i32(segred_group_sizze_34918)) &&
                ((local_tid_43256 - squot32(local_tid_43256, wave_sizze_43258) *
                  wave_sizze_43258) & (2 * offset_43279 - 1)) == 0) {
                // read array element
                {
                    x_43276 = ((volatile __local
                                float *) red_arr_mem_43260)[sext_i32_i64(local_tid_43256 +
                                                            offset_43279)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43277 = x_43275 + x_43276;
                    
                    x_43275 = defunc_1_op_res_43277;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_43260)[sext_i32_i64(local_tid_43256)] =
                        x_43275;
                }
            }
            offset_43279 *= 2;
        }
        while (slt32(skip_waves_43280,
                     squot32(sext_i64_i32(segred_group_sizze_34918) +
                             wave_sizze_43258 - 1, wave_sizze_43258))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_43279 = skip_waves_43280 * wave_sizze_43258;
            if (slt32(local_tid_43256 + offset_43279,
                      sext_i64_i32(segred_group_sizze_34918)) &&
                ((local_tid_43256 - squot32(local_tid_43256, wave_sizze_43258) *
                  wave_sizze_43258) == 0 && (squot32(local_tid_43256,
                                                     wave_sizze_43258) & (2 *
                                                                          skip_waves_43280 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_43276 = ((__local
                                float *) red_arr_mem_43260)[sext_i32_i64(local_tid_43256 +
                                                            offset_43279)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43277 = x_43275 + x_43276;
                    
                    x_43275 = defunc_1_op_res_43277;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_43260)[sext_i32_i64(local_tid_43256)] =
                        x_43275;
                }
            }
            skip_waves_43280 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_43256) == (int64_t) 0) {
                x_acc_43273 = x_43275;
            }
        }
        if (groups_per_segment_43246 == (int64_t) 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_43256 == 0) {
                    ((__global float *) mem_41907)[gtid_34855 * i32_res_28890 +
                                                   gtid_34856] = x_acc_43273;
                }
            }
        } else {
            int32_t old_counter_43281;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_43256 == 0) {
                    ((__global
                      float *) segred_tmp_mem_43251)[sext_i32_i64(virt_group_id_43266)] =
                        x_acc_43273;
                    mem_fence_global();
                    old_counter_43281 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainMagnitudezicounter_mem_43253)[sext_i32_i64(srem32(flat_segment_id_43267,
                                                                                                              10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_43262)[(int64_t) 0] =
                        old_counter_43281 == groups_per_segment_43246 -
                        (int64_t) 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_43282 = ((__local
                                         bool *) sync_arr_mem_43262)[(int64_t) 0];
            
            if (is_last_group_43282) {
                if (local_tid_43256 == 0) {
                    old_counter_43281 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainMagnitudezicounter_mem_43253)[sext_i32_i64(srem32(flat_segment_id_43267,
                                                                                                              10240))],
                                              (int) ((int64_t) 0 -
                                                     groups_per_segment_43246));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_43283 =
                            sdiv_up64(groups_per_segment_43246,
                                      segred_group_sizze_34918);
                    
                    x_34922 = 0.0F;
                    for (int64_t i_43284 = 0; i_43284 < read_per_thread_43283;
                         i_43284++) {
                        int64_t group_res_id_43285 =
                                sext_i32_i64(local_tid_43256) *
                                read_per_thread_43283 + i_43284;
                        int64_t index_of_group_res_43286 =
                                sext_i32_i64(flat_segment_id_43267) *
                                groups_per_segment_43246 + group_res_id_43285;
                        
                        if (slt64(group_res_id_43285,
                                  groups_per_segment_43246)) {
                            x_34923 = ((__global
                                        float *) segred_tmp_mem_43251)[index_of_group_res_43286];
                            
                            float defunc_1_op_res_34924 = x_34922 + x_34923;
                            
                            x_34922 = defunc_1_op_res_34924;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_43260)[sext_i32_i64(local_tid_43256)] =
                    x_34922;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_43287;
                    int32_t skip_waves_43288 = 1;
                    float x_43275;
                    float x_43276;
                    
                    offset_43287 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_43256,
                                  sext_i64_i32(segred_group_sizze_34918))) {
                            x_43275 = ((__local
                                        float *) red_arr_mem_43260)[sext_i32_i64(local_tid_43256 +
                                                                    offset_43287)];
                        }
                    }
                    offset_43287 = 1;
                    while (slt32(offset_43287, wave_sizze_43258)) {
                        if (slt32(local_tid_43256 + offset_43287,
                                  sext_i64_i32(segred_group_sizze_34918)) &&
                            ((local_tid_43256 - squot32(local_tid_43256,
                                                        wave_sizze_43258) *
                              wave_sizze_43258) & (2 * offset_43287 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_43276 = ((volatile __local
                                            float *) red_arr_mem_43260)[sext_i32_i64(local_tid_43256 +
                                                                        offset_43287)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43277 = x_43275 + x_43276;
                                
                                x_43275 = defunc_1_op_res_43277;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43260)[sext_i32_i64(local_tid_43256)] =
                                    x_43275;
                            }
                        }
                        offset_43287 *= 2;
                    }
                    while (slt32(skip_waves_43288,
                                 squot32(sext_i64_i32(segred_group_sizze_34918) +
                                         wave_sizze_43258 - 1,
                                         wave_sizze_43258))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_43287 = skip_waves_43288 * wave_sizze_43258;
                        if (slt32(local_tid_43256 + offset_43287,
                                  sext_i64_i32(segred_group_sizze_34918)) &&
                            ((local_tid_43256 - squot32(local_tid_43256,
                                                        wave_sizze_43258) *
                              wave_sizze_43258) == 0 &&
                             (squot32(local_tid_43256, wave_sizze_43258) & (2 *
                                                                            skip_waves_43288 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_43276 = ((__local
                                            float *) red_arr_mem_43260)[sext_i32_i64(local_tid_43256 +
                                                                        offset_43287)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43277 = x_43275 + x_43276;
                                
                                x_43275 = defunc_1_op_res_43277;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_43260)[sext_i32_i64(local_tid_43256)] =
                                    x_43275;
                            }
                        }
                        skip_waves_43288 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_43256 == 0) {
                            ((__global float *) mem_41907)[gtid_34855 *
                                                           i32_res_28890 +
                                                           gtid_34856] =
                                x_43275;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_34918
}
__kernel void mainMagnitudezisegred_large_35003(__global int *global_failure,
                                                __local volatile
                                                int64_t *sync_arr_mem_43365_backing_aligned_0,
                                                __local volatile
                                                int64_t *red_arr_mem_43363_backing_aligned_1,
                                                int64_t m_28875,
                                                int64_t i32_res_28890,
                                                int64_t num_groups_35052,
                                                int64_t groups_per_segment_43349,
                                                int64_t elements_per_thread_43350,
                                                int64_t virt_num_groups_43351,
                                                int64_t threads_per_segment_43353,
                                                __global
                                                unsigned char *defunc_3_map_res_mem_41687,
                                                __global
                                                unsigned char *defunc_3_map_res_mem_41914,
                                                __global
                                                unsigned char *mem_41979,
                                                __global
                                                unsigned char *segred_tmp_mem_43354,
                                                __global
                                                unsigned char *mainMagnitudezicounter_mem_43356)
{
    #define segred_group_sizze_35051 (mainMagnitudezisegred_group_sizze_34997)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_43365_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_43365_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_43363_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43363_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43358;
    int32_t local_tid_43359;
    int64_t group_sizze_43362;
    int32_t wave_sizze_43361;
    int32_t group_tid_43360;
    
    global_tid_43358 = get_global_id(0);
    local_tid_43359 = get_local_id(0);
    group_sizze_43362 = get_local_size(0);
    wave_sizze_43361 = LOCKSTEP_WIDTH;
    group_tid_43360 = get_group_id(0);
    
    int32_t phys_tid_35003 = global_tid_43358;
    __local char *red_arr_mem_43363;
    
    red_arr_mem_43363 = (__local char *) red_arr_mem_43363_backing_0;
    
    __local char *sync_arr_mem_43365;
    
    sync_arr_mem_43365 = (__local char *) sync_arr_mem_43365_backing_1;
    
    int32_t phys_group_id_43367;
    
    phys_group_id_43367 = get_group_id(0);
    for (int32_t i_43368 = 0; i_43368 <
         sdiv_up32(sext_i64_i32(virt_num_groups_43351) - phys_group_id_43367,
                   sext_i64_i32(num_groups_35052)); i_43368++) {
        int32_t virt_group_id_43369 = phys_group_id_43367 + i_43368 *
                sext_i64_i32(num_groups_35052);
        int32_t flat_segment_id_43370 = squot32(virt_group_id_43369,
                                                sext_i64_i32(groups_per_segment_43349));
        int64_t global_tid_43371 = srem64(sext_i32_i64(virt_group_id_43369) *
                                          segred_group_sizze_35051 +
                                          sext_i32_i64(local_tid_43359),
                                          segred_group_sizze_35051 *
                                          groups_per_segment_43349);
        int64_t slice_43372 = i32_res_28890;
        int64_t slice_43373 = m_28875 * slice_43372;
        int64_t gtid_34992 = squot64(sext_i32_i64(flat_segment_id_43370),
                                     slice_43372);
        int64_t remnant_43374 = sext_i32_i64(flat_segment_id_43370) -
                gtid_34992 * slice_43372;
        int64_t gtid_34993 = remnant_43374;
        int64_t remnant_43375 = remnant_43374 - gtid_34993;
        int64_t gtid_35002;
        float x_acc_43376;
        int64_t chunk_sizze_43377 = smin64(elements_per_thread_43350,
                                           sdiv_up64(i32_res_28890 -
                                                     global_tid_43371,
                                                     threads_per_segment_43353));
        float x_35055;
        float x_35056;
        
        // neutral-initialise the accumulators
        {
            x_acc_43376 = 0.0F;
        }
        for (int64_t i_43381 = 0; i_43381 < chunk_sizze_43377; i_43381++) {
            gtid_35002 = global_tid_43371 + threads_per_segment_43353 * i_43381;
            // apply map function
            {
                float x_35061 = ((__global
                                  float *) defunc_3_map_res_mem_41914)[gtid_34992 *
                                                                       i32_res_28890 +
                                                                       gtid_35002];
                float x_35062 = ((__global
                                  float *) defunc_3_map_res_mem_41687)[gtid_34992 *
                                                                       (i32_res_28890 *
                                                                        i32_res_28890) +
                                                                       gtid_34993 *
                                                                       i32_res_28890 +
                                                                       gtid_35002];
                float defunc_1_f_res_35063 = x_35061 * x_35062;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_35055 = x_acc_43376;
                }
                // load new values
                {
                    x_35056 = defunc_1_f_res_35063;
                }
                // apply reduction operator
                {
                    float defunc_1_op_res_35057 = x_35055 + x_35056;
                    
                    // store in accumulator
                    {
                        x_acc_43376 = defunc_1_op_res_35057;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_35055 = x_acc_43376;
            ((__local
              float *) red_arr_mem_43363)[sext_i32_i64(local_tid_43359)] =
                x_35055;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_43382;
        int32_t skip_waves_43383 = 1;
        float x_43378;
        float x_43379;
        
        offset_43382 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_43359,
                      sext_i64_i32(segred_group_sizze_35051))) {
                x_43378 = ((__local
                            float *) red_arr_mem_43363)[sext_i32_i64(local_tid_43359 +
                                                        offset_43382)];
            }
        }
        offset_43382 = 1;
        while (slt32(offset_43382, wave_sizze_43361)) {
            if (slt32(local_tid_43359 + offset_43382,
                      sext_i64_i32(segred_group_sizze_35051)) &&
                ((local_tid_43359 - squot32(local_tid_43359, wave_sizze_43361) *
                  wave_sizze_43361) & (2 * offset_43382 - 1)) == 0) {
                // read array element
                {
                    x_43379 = ((volatile __local
                                float *) red_arr_mem_43363)[sext_i32_i64(local_tid_43359 +
                                                            offset_43382)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43380 = x_43378 + x_43379;
                    
                    x_43378 = defunc_1_op_res_43380;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_43363)[sext_i32_i64(local_tid_43359)] =
                        x_43378;
                }
            }
            offset_43382 *= 2;
        }
        while (slt32(skip_waves_43383,
                     squot32(sext_i64_i32(segred_group_sizze_35051) +
                             wave_sizze_43361 - 1, wave_sizze_43361))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_43382 = skip_waves_43383 * wave_sizze_43361;
            if (slt32(local_tid_43359 + offset_43382,
                      sext_i64_i32(segred_group_sizze_35051)) &&
                ((local_tid_43359 - squot32(local_tid_43359, wave_sizze_43361) *
                  wave_sizze_43361) == 0 && (squot32(local_tid_43359,
                                                     wave_sizze_43361) & (2 *
                                                                          skip_waves_43383 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_43379 = ((__local
                                float *) red_arr_mem_43363)[sext_i32_i64(local_tid_43359 +
                                                            offset_43382)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43380 = x_43378 + x_43379;
                    
                    x_43378 = defunc_1_op_res_43380;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_43363)[sext_i32_i64(local_tid_43359)] =
                        x_43378;
                }
            }
            skip_waves_43383 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_43359) == (int64_t) 0) {
                x_acc_43376 = x_43378;
            }
        }
        if (groups_per_segment_43349 == (int64_t) 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_43359 == 0) {
                    ((__global float *) mem_41979)[gtid_34992 * i32_res_28890 +
                                                   gtid_34993] = x_acc_43376;
                }
            }
        } else {
            int32_t old_counter_43384;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_43359 == 0) {
                    ((__global
                      float *) segred_tmp_mem_43354)[sext_i32_i64(virt_group_id_43369)] =
                        x_acc_43376;
                    mem_fence_global();
                    old_counter_43384 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainMagnitudezicounter_mem_43356)[sext_i32_i64(srem32(flat_segment_id_43370,
                                                                                                              10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_43365)[(int64_t) 0] =
                        old_counter_43384 == groups_per_segment_43349 -
                        (int64_t) 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_43385 = ((__local
                                         bool *) sync_arr_mem_43365)[(int64_t) 0];
            
            if (is_last_group_43385) {
                if (local_tid_43359 == 0) {
                    old_counter_43384 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainMagnitudezicounter_mem_43356)[sext_i32_i64(srem32(flat_segment_id_43370,
                                                                                                              10240))],
                                              (int) ((int64_t) 0 -
                                                     groups_per_segment_43349));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_43386 =
                            sdiv_up64(groups_per_segment_43349,
                                      segred_group_sizze_35051);
                    
                    x_35055 = 0.0F;
                    for (int64_t i_43387 = 0; i_43387 < read_per_thread_43386;
                         i_43387++) {
                        int64_t group_res_id_43388 =
                                sext_i32_i64(local_tid_43359) *
                                read_per_thread_43386 + i_43387;
                        int64_t index_of_group_res_43389 =
                                sext_i32_i64(flat_segment_id_43370) *
                                groups_per_segment_43349 + group_res_id_43388;
                        
                        if (slt64(group_res_id_43388,
                                  groups_per_segment_43349)) {
                            x_35056 = ((__global
                                        float *) segred_tmp_mem_43354)[index_of_group_res_43389];
                            
                            float defunc_1_op_res_35057 = x_35055 + x_35056;
                            
                            x_35055 = defunc_1_op_res_35057;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_43363)[sext_i32_i64(local_tid_43359)] =
                    x_35055;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_43390;
                    int32_t skip_waves_43391 = 1;
                    float x_43378;
                    float x_43379;
                    
                    offset_43390 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_43359,
                                  sext_i64_i32(segred_group_sizze_35051))) {
                            x_43378 = ((__local
                                        float *) red_arr_mem_43363)[sext_i32_i64(local_tid_43359 +
                                                                    offset_43390)];
                        }
                    }
                    offset_43390 = 1;
                    while (slt32(offset_43390, wave_sizze_43361)) {
                        if (slt32(local_tid_43359 + offset_43390,
                                  sext_i64_i32(segred_group_sizze_35051)) &&
                            ((local_tid_43359 - squot32(local_tid_43359,
                                                        wave_sizze_43361) *
                              wave_sizze_43361) & (2 * offset_43390 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_43379 = ((volatile __local
                                            float *) red_arr_mem_43363)[sext_i32_i64(local_tid_43359 +
                                                                        offset_43390)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43380 = x_43378 + x_43379;
                                
                                x_43378 = defunc_1_op_res_43380;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43363)[sext_i32_i64(local_tid_43359)] =
                                    x_43378;
                            }
                        }
                        offset_43390 *= 2;
                    }
                    while (slt32(skip_waves_43391,
                                 squot32(sext_i64_i32(segred_group_sizze_35051) +
                                         wave_sizze_43361 - 1,
                                         wave_sizze_43361))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_43390 = skip_waves_43391 * wave_sizze_43361;
                        if (slt32(local_tid_43359 + offset_43390,
                                  sext_i64_i32(segred_group_sizze_35051)) &&
                            ((local_tid_43359 - squot32(local_tid_43359,
                                                        wave_sizze_43361) *
                              wave_sizze_43361) == 0 &&
                             (squot32(local_tid_43359, wave_sizze_43361) & (2 *
                                                                            skip_waves_43391 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_43379 = ((__local
                                            float *) red_arr_mem_43363)[sext_i32_i64(local_tid_43359 +
                                                                        offset_43390)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43380 = x_43378 + x_43379;
                                
                                x_43378 = defunc_1_op_res_43380;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_43363)[sext_i32_i64(local_tid_43359)] =
                                    x_43378;
                            }
                        }
                        skip_waves_43391 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_43359 == 0) {
                            ((__global float *) mem_41979)[gtid_34992 *
                                                           i32_res_28890 +
                                                           gtid_34993] =
                                x_43378;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_35051
}
__kernel void mainMagnitudezisegred_large_35133(__global int *global_failure,
                                                __local volatile
                                                int64_t *sync_arr_mem_43512_backing_aligned_0,
                                                __local volatile
                                                int64_t *red_arr_mem_43510_backing_aligned_1,
                                                int64_t N_28874,
                                                int64_t m_28875,
                                                int64_t i32_res_28890,
                                                int64_t num_groups_35180,
                                                int64_t groups_per_segment_43496,
                                                int64_t elements_per_thread_43497,
                                                int64_t virt_num_groups_43498,
                                                int64_t threads_per_segment_43500,
                                                __global
                                                unsigned char *mem_41440,
                                                __global
                                                unsigned char *defunc_4_map_res_mem_41986,
                                                __global
                                                unsigned char *mem_42209,
                                                __global
                                                unsigned char *segred_tmp_mem_43501,
                                                __global
                                                unsigned char *mainMagnitudezicounter_mem_43503)
{
    #define segred_group_sizze_35179 (mainMagnitudezisegred_group_sizze_35127)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_43512_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_43512_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_43510_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43510_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43505;
    int32_t local_tid_43506;
    int64_t group_sizze_43509;
    int32_t wave_sizze_43508;
    int32_t group_tid_43507;
    
    global_tid_43505 = get_global_id(0);
    local_tid_43506 = get_local_id(0);
    group_sizze_43509 = get_local_size(0);
    wave_sizze_43508 = LOCKSTEP_WIDTH;
    group_tid_43507 = get_group_id(0);
    
    int32_t phys_tid_35133 = global_tid_43505;
    __local char *red_arr_mem_43510;
    
    red_arr_mem_43510 = (__local char *) red_arr_mem_43510_backing_0;
    
    __local char *sync_arr_mem_43512;
    
    sync_arr_mem_43512 = (__local char *) sync_arr_mem_43512_backing_1;
    
    int32_t phys_group_id_43514;
    
    phys_group_id_43514 = get_group_id(0);
    for (int32_t i_43515 = 0; i_43515 <
         sdiv_up32(sext_i64_i32(virt_num_groups_43498) - phys_group_id_43514,
                   sext_i64_i32(num_groups_35180)); i_43515++) {
        int32_t virt_group_id_43516 = phys_group_id_43514 + i_43515 *
                sext_i64_i32(num_groups_35180);
        int32_t flat_segment_id_43517 = squot32(virt_group_id_43516,
                                                sext_i64_i32(groups_per_segment_43496));
        int64_t global_tid_43518 = srem64(sext_i32_i64(virt_group_id_43516) *
                                          segred_group_sizze_35179 +
                                          sext_i32_i64(local_tid_43506),
                                          segred_group_sizze_35179 *
                                          groups_per_segment_43496);
        int64_t slice_43519 = N_28874;
        int64_t slice_43520 = m_28875 * slice_43519;
        int64_t gtid_35122 = squot64(sext_i32_i64(flat_segment_id_43517),
                                     slice_43519);
        int64_t remnant_43521 = sext_i32_i64(flat_segment_id_43517) -
                gtid_35122 * slice_43519;
        int64_t gtid_35123 = remnant_43521;
        int64_t remnant_43522 = remnant_43521 - gtid_35123;
        int64_t gtid_35132;
        float x_acc_43523;
        int64_t chunk_sizze_43524 = smin64(elements_per_thread_43497,
                                           sdiv_up64(i32_res_28890 -
                                                     global_tid_43518,
                                                     threads_per_segment_43500));
        float x_35183;
        float x_35184;
        
        // neutral-initialise the accumulators
        {
            x_acc_43523 = 0.0F;
        }
        for (int64_t i_43528 = 0; i_43528 < chunk_sizze_43524; i_43528++) {
            gtid_35132 = global_tid_43518 + threads_per_segment_43500 * i_43528;
            // apply map function
            {
                float x_35188 = ((__global
                                  float *) defunc_4_map_res_mem_41986)[gtid_35122 *
                                                                       i32_res_28890 +
                                                                       gtid_35132];
                float x_35189 = ((__global float *) mem_41440)[gtid_35123 *
                                                               i32_res_28890 +
                                                               gtid_35132];
                float defunc_1_f_res_35190 = x_35188 * x_35189;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_35183 = x_acc_43523;
                }
                // load new values
                {
                    x_35184 = defunc_1_f_res_35190;
                }
                // apply reduction operator
                {
                    float defunc_1_op_res_35185 = x_35183 + x_35184;
                    
                    // store in accumulator
                    {
                        x_acc_43523 = defunc_1_op_res_35185;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_35183 = x_acc_43523;
            ((__local
              float *) red_arr_mem_43510)[sext_i32_i64(local_tid_43506)] =
                x_35183;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_43529;
        int32_t skip_waves_43530 = 1;
        float x_43525;
        float x_43526;
        
        offset_43529 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_43506,
                      sext_i64_i32(segred_group_sizze_35179))) {
                x_43525 = ((__local
                            float *) red_arr_mem_43510)[sext_i32_i64(local_tid_43506 +
                                                        offset_43529)];
            }
        }
        offset_43529 = 1;
        while (slt32(offset_43529, wave_sizze_43508)) {
            if (slt32(local_tid_43506 + offset_43529,
                      sext_i64_i32(segred_group_sizze_35179)) &&
                ((local_tid_43506 - squot32(local_tid_43506, wave_sizze_43508) *
                  wave_sizze_43508) & (2 * offset_43529 - 1)) == 0) {
                // read array element
                {
                    x_43526 = ((volatile __local
                                float *) red_arr_mem_43510)[sext_i32_i64(local_tid_43506 +
                                                            offset_43529)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43527 = x_43525 + x_43526;
                    
                    x_43525 = defunc_1_op_res_43527;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_43510)[sext_i32_i64(local_tid_43506)] =
                        x_43525;
                }
            }
            offset_43529 *= 2;
        }
        while (slt32(skip_waves_43530,
                     squot32(sext_i64_i32(segred_group_sizze_35179) +
                             wave_sizze_43508 - 1, wave_sizze_43508))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_43529 = skip_waves_43530 * wave_sizze_43508;
            if (slt32(local_tid_43506 + offset_43529,
                      sext_i64_i32(segred_group_sizze_35179)) &&
                ((local_tid_43506 - squot32(local_tid_43506, wave_sizze_43508) *
                  wave_sizze_43508) == 0 && (squot32(local_tid_43506,
                                                     wave_sizze_43508) & (2 *
                                                                          skip_waves_43530 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_43526 = ((__local
                                float *) red_arr_mem_43510)[sext_i32_i64(local_tid_43506 +
                                                            offset_43529)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43527 = x_43525 + x_43526;
                    
                    x_43525 = defunc_1_op_res_43527;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_43510)[sext_i32_i64(local_tid_43506)] =
                        x_43525;
                }
            }
            skip_waves_43530 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_43506) == (int64_t) 0) {
                x_acc_43523 = x_43525;
            }
        }
        if (groups_per_segment_43496 == (int64_t) 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_43506 == 0) {
                    ((__global float *) mem_42209)[gtid_35122 * N_28874 +
                                                   gtid_35123] = x_acc_43523;
                }
            }
        } else {
            int32_t old_counter_43531;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_43506 == 0) {
                    ((__global
                      float *) segred_tmp_mem_43501)[sext_i32_i64(virt_group_id_43516)] =
                        x_acc_43523;
                    mem_fence_global();
                    old_counter_43531 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainMagnitudezicounter_mem_43503)[sext_i32_i64(srem32(flat_segment_id_43517,
                                                                                                              10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_43512)[(int64_t) 0] =
                        old_counter_43531 == groups_per_segment_43496 -
                        (int64_t) 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_43532 = ((__local
                                         bool *) sync_arr_mem_43512)[(int64_t) 0];
            
            if (is_last_group_43532) {
                if (local_tid_43506 == 0) {
                    old_counter_43531 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainMagnitudezicounter_mem_43503)[sext_i32_i64(srem32(flat_segment_id_43517,
                                                                                                              10240))],
                                              (int) ((int64_t) 0 -
                                                     groups_per_segment_43496));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_43533 =
                            sdiv_up64(groups_per_segment_43496,
                                      segred_group_sizze_35179);
                    
                    x_35183 = 0.0F;
                    for (int64_t i_43534 = 0; i_43534 < read_per_thread_43533;
                         i_43534++) {
                        int64_t group_res_id_43535 =
                                sext_i32_i64(local_tid_43506) *
                                read_per_thread_43533 + i_43534;
                        int64_t index_of_group_res_43536 =
                                sext_i32_i64(flat_segment_id_43517) *
                                groups_per_segment_43496 + group_res_id_43535;
                        
                        if (slt64(group_res_id_43535,
                                  groups_per_segment_43496)) {
                            x_35184 = ((__global
                                        float *) segred_tmp_mem_43501)[index_of_group_res_43536];
                            
                            float defunc_1_op_res_35185 = x_35183 + x_35184;
                            
                            x_35183 = defunc_1_op_res_35185;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_43510)[sext_i32_i64(local_tid_43506)] =
                    x_35183;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_43537;
                    int32_t skip_waves_43538 = 1;
                    float x_43525;
                    float x_43526;
                    
                    offset_43537 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_43506,
                                  sext_i64_i32(segred_group_sizze_35179))) {
                            x_43525 = ((__local
                                        float *) red_arr_mem_43510)[sext_i32_i64(local_tid_43506 +
                                                                    offset_43537)];
                        }
                    }
                    offset_43537 = 1;
                    while (slt32(offset_43537, wave_sizze_43508)) {
                        if (slt32(local_tid_43506 + offset_43537,
                                  sext_i64_i32(segred_group_sizze_35179)) &&
                            ((local_tid_43506 - squot32(local_tid_43506,
                                                        wave_sizze_43508) *
                              wave_sizze_43508) & (2 * offset_43537 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_43526 = ((volatile __local
                                            float *) red_arr_mem_43510)[sext_i32_i64(local_tid_43506 +
                                                                        offset_43537)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43527 = x_43525 + x_43526;
                                
                                x_43525 = defunc_1_op_res_43527;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43510)[sext_i32_i64(local_tid_43506)] =
                                    x_43525;
                            }
                        }
                        offset_43537 *= 2;
                    }
                    while (slt32(skip_waves_43538,
                                 squot32(sext_i64_i32(segred_group_sizze_35179) +
                                         wave_sizze_43508 - 1,
                                         wave_sizze_43508))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_43537 = skip_waves_43538 * wave_sizze_43508;
                        if (slt32(local_tid_43506 + offset_43537,
                                  sext_i64_i32(segred_group_sizze_35179)) &&
                            ((local_tid_43506 - squot32(local_tid_43506,
                                                        wave_sizze_43508) *
                              wave_sizze_43508) == 0 &&
                             (squot32(local_tid_43506, wave_sizze_43508) & (2 *
                                                                            skip_waves_43538 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_43526 = ((__local
                                            float *) red_arr_mem_43510)[sext_i32_i64(local_tid_43506 +
                                                                        offset_43537)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43527 = x_43525 + x_43526;
                                
                                x_43525 = defunc_1_op_res_43527;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_43510)[sext_i32_i64(local_tid_43506)] =
                                    x_43525;
                            }
                        }
                        skip_waves_43538 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_43506 == 0) {
                            ((__global float *) mem_42209)[gtid_35122 *
                                                           N_28874 +
                                                           gtid_35123] =
                                x_43525;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_35179
}
__kernel void mainMagnitudezisegred_large_35588(__global int *global_failure,
                                                int failure_is_an_option,
                                                __global
                                                int64_t *global_failure_args,
                                                __local volatile
                                                int64_t *sync_arr_mem_43788_backing_aligned_0,
                                                __local volatile
                                                int64_t *red_arr_mem_43786_backing_aligned_1,
                                                int64_t N_28874,
                                                int64_t m_28875,
                                                int64_t i32_res_28884,
                                                int64_t num_groups_35639,
                                                int64_t groups_per_segment_43772,
                                                int64_t elements_per_thread_43773,
                                                int64_t virt_num_groups_43774,
                                                int64_t threads_per_segment_43776,
                                                __global
                                                unsigned char *defunc_4_map_res_mem_42266,
                                                __global
                                                unsigned char *mem_42329,
                                                __global
                                                unsigned char *mem_42333,
                                                __global
                                                unsigned char *segred_tmp_mem_43777,
                                                __global
                                                unsigned char *mainMagnitudezicounter_mem_43779)
{
    #define segred_group_sizze_35638 (mainMagnitudezisegred_group_sizze_35582)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_43788_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_43788_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_43786_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43786_backing_aligned_1;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43781;
    int32_t local_tid_43782;
    int64_t group_sizze_43785;
    int32_t wave_sizze_43784;
    int32_t group_tid_43783;
    
    global_tid_43781 = get_global_id(0);
    local_tid_43782 = get_local_id(0);
    group_sizze_43785 = get_local_size(0);
    wave_sizze_43784 = LOCKSTEP_WIDTH;
    group_tid_43783 = get_group_id(0);
    
    int32_t phys_tid_35588 = global_tid_43781;
    __local char *red_arr_mem_43786;
    
    red_arr_mem_43786 = (__local char *) red_arr_mem_43786_backing_0;
    
    __local char *sync_arr_mem_43788;
    
    sync_arr_mem_43788 = (__local char *) sync_arr_mem_43788_backing_1;
    
    int32_t phys_group_id_43790;
    
    phys_group_id_43790 = get_group_id(0);
    for (int32_t i_43791 = 0; i_43791 <
         sdiv_up32(sext_i64_i32(virt_num_groups_43774) - phys_group_id_43790,
                   sext_i64_i32(num_groups_35639)); i_43791++) {
        int32_t virt_group_id_43792 = phys_group_id_43790 + i_43791 *
                sext_i64_i32(num_groups_35639);
        int32_t flat_segment_id_43793 = squot32(virt_group_id_43792,
                                                sext_i64_i32(groups_per_segment_43772));
        int64_t global_tid_43794 = srem64(sext_i32_i64(virt_group_id_43792) *
                                          segred_group_sizze_35638 +
                                          sext_i32_i64(local_tid_43782),
                                          segred_group_sizze_35638 *
                                          groups_per_segment_43772);
        int64_t slice_43795 = m_28875;
        int64_t gtid_35579 = sext_i32_i64(flat_segment_id_43793);
        int64_t remnant_43796 = sext_i32_i64(flat_segment_id_43793) -
                gtid_35579;
        int64_t gtid_35587;
        float x_acc_43797;
        int64_t chunk_sizze_43798 = smin64(elements_per_thread_43773,
                                           sdiv_up64(i32_res_28884 -
                                                     global_tid_43794,
                                                     threads_per_segment_43776));
        float x_35642;
        float x_35643;
        
        // neutral-initialise the accumulators
        {
            x_acc_43797 = 0.0F;
        }
        for (int64_t i_43802 = 0; i_43802 < chunk_sizze_43798; i_43802++) {
            gtid_35587 = global_tid_43794 + threads_per_segment_43776 * i_43802;
            // apply map function
            {
                int32_t defunc_0_f_res_35646 = ((__global
                                                 int32_t *) mem_42329)[gtid_35579];
                int32_t index_primexp_39436 = sext_i64_i32(gtid_35587);
                bool cond_35648 = slt32(index_primexp_39436,
                                        defunc_0_f_res_35646);
                float defunc_0_f_res_35649;
                
                if (cond_35648) {
                    int64_t i_35650 = sext_i32_i64(index_primexp_39436);
                    bool x_35651 = sle64((int64_t) 0, i_35650);
                    bool y_35652 = slt64(i_35650, N_28874);
                    bool bounds_check_35653 = x_35651 && y_35652;
                    bool index_certs_35654;
                    
                    if (!bounds_check_35653) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          98) == -1) {
                                global_failure_args[0] = i_35650;
                                global_failure_args[1] = N_28874;
                                ;
                            }
                            local_failure = true;
                            goto error_0;
                        }
                    }
                    
                    float defunc_0_f_res_t_res_35655 = ((__global
                                                         float *) defunc_4_map_res_mem_42266)[gtid_35579 *
                                                                                              N_28874 +
                                                                                              i_35650];
                    
                    defunc_0_f_res_35649 = defunc_0_f_res_t_res_35655;
                } else {
                    defunc_0_f_res_35649 = 0.0F;
                }
                
                float defunc_0_f_res_35656 = defunc_0_f_res_35649 *
                      defunc_0_f_res_35649;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_35642 = x_acc_43797;
                }
                // load new values
                {
                    x_35643 = defunc_0_f_res_35656;
                }
                // apply reduction operator
                {
                    float defunc_1_op_res_35644 = x_35642 + x_35643;
                    
                    // store in accumulator
                    {
                        x_acc_43797 = defunc_1_op_res_35644;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_35642 = x_acc_43797;
            ((__local
              float *) red_arr_mem_43786)[sext_i32_i64(local_tid_43782)] =
                x_35642;
        }
        
      error_0:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_43803;
        int32_t skip_waves_43804 = 1;
        float x_43799;
        float x_43800;
        
        offset_43803 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_43782,
                      sext_i64_i32(segred_group_sizze_35638))) {
                x_43799 = ((__local
                            float *) red_arr_mem_43786)[sext_i32_i64(local_tid_43782 +
                                                        offset_43803)];
            }
        }
        offset_43803 = 1;
        while (slt32(offset_43803, wave_sizze_43784)) {
            if (slt32(local_tid_43782 + offset_43803,
                      sext_i64_i32(segred_group_sizze_35638)) &&
                ((local_tid_43782 - squot32(local_tid_43782, wave_sizze_43784) *
                  wave_sizze_43784) & (2 * offset_43803 - 1)) == 0) {
                // read array element
                {
                    x_43800 = ((volatile __local
                                float *) red_arr_mem_43786)[sext_i32_i64(local_tid_43782 +
                                                            offset_43803)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43801 = x_43799 + x_43800;
                    
                    x_43799 = defunc_1_op_res_43801;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_43786)[sext_i32_i64(local_tid_43782)] =
                        x_43799;
                }
            }
            offset_43803 *= 2;
        }
        while (slt32(skip_waves_43804,
                     squot32(sext_i64_i32(segred_group_sizze_35638) +
                             wave_sizze_43784 - 1, wave_sizze_43784))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_43803 = skip_waves_43804 * wave_sizze_43784;
            if (slt32(local_tid_43782 + offset_43803,
                      sext_i64_i32(segred_group_sizze_35638)) &&
                ((local_tid_43782 - squot32(local_tid_43782, wave_sizze_43784) *
                  wave_sizze_43784) == 0 && (squot32(local_tid_43782,
                                                     wave_sizze_43784) & (2 *
                                                                          skip_waves_43804 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_43800 = ((__local
                                float *) red_arr_mem_43786)[sext_i32_i64(local_tid_43782 +
                                                            offset_43803)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43801 = x_43799 + x_43800;
                    
                    x_43799 = defunc_1_op_res_43801;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_43786)[sext_i32_i64(local_tid_43782)] =
                        x_43799;
                }
            }
            skip_waves_43804 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_43782) == (int64_t) 0) {
                x_acc_43797 = x_43799;
            }
        }
        if (groups_per_segment_43772 == (int64_t) 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_43782 == 0) {
                    ((__global float *) mem_42333)[gtid_35579] = x_acc_43797;
                }
            }
        } else {
            int32_t old_counter_43805;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_43782 == 0) {
                    ((__global
                      float *) segred_tmp_mem_43777)[sext_i32_i64(virt_group_id_43792)] =
                        x_acc_43797;
                    mem_fence_global();
                    old_counter_43805 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainMagnitudezicounter_mem_43779)[sext_i32_i64(srem32(flat_segment_id_43793,
                                                                                                              10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_43788)[(int64_t) 0] =
                        old_counter_43805 == groups_per_segment_43772 -
                        (int64_t) 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_43806 = ((__local
                                         bool *) sync_arr_mem_43788)[(int64_t) 0];
            
            if (is_last_group_43806) {
                if (local_tid_43782 == 0) {
                    old_counter_43805 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainMagnitudezicounter_mem_43779)[sext_i32_i64(srem32(flat_segment_id_43793,
                                                                                                              10240))],
                                              (int) ((int64_t) 0 -
                                                     groups_per_segment_43772));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_43807 =
                            sdiv_up64(groups_per_segment_43772,
                                      segred_group_sizze_35638);
                    
                    x_35642 = 0.0F;
                    for (int64_t i_43808 = 0; i_43808 < read_per_thread_43807;
                         i_43808++) {
                        int64_t group_res_id_43809 =
                                sext_i32_i64(local_tid_43782) *
                                read_per_thread_43807 + i_43808;
                        int64_t index_of_group_res_43810 =
                                sext_i32_i64(flat_segment_id_43793) *
                                groups_per_segment_43772 + group_res_id_43809;
                        
                        if (slt64(group_res_id_43809,
                                  groups_per_segment_43772)) {
                            x_35643 = ((__global
                                        float *) segred_tmp_mem_43777)[index_of_group_res_43810];
                            
                            float defunc_1_op_res_35644 = x_35642 + x_35643;
                            
                            x_35642 = defunc_1_op_res_35644;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_43786)[sext_i32_i64(local_tid_43782)] =
                    x_35642;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_43811;
                    int32_t skip_waves_43812 = 1;
                    float x_43799;
                    float x_43800;
                    
                    offset_43811 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_43782,
                                  sext_i64_i32(segred_group_sizze_35638))) {
                            x_43799 = ((__local
                                        float *) red_arr_mem_43786)[sext_i32_i64(local_tid_43782 +
                                                                    offset_43811)];
                        }
                    }
                    offset_43811 = 1;
                    while (slt32(offset_43811, wave_sizze_43784)) {
                        if (slt32(local_tid_43782 + offset_43811,
                                  sext_i64_i32(segred_group_sizze_35638)) &&
                            ((local_tid_43782 - squot32(local_tid_43782,
                                                        wave_sizze_43784) *
                              wave_sizze_43784) & (2 * offset_43811 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_43800 = ((volatile __local
                                            float *) red_arr_mem_43786)[sext_i32_i64(local_tid_43782 +
                                                                        offset_43811)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43801 = x_43799 + x_43800;
                                
                                x_43799 = defunc_1_op_res_43801;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43786)[sext_i32_i64(local_tid_43782)] =
                                    x_43799;
                            }
                        }
                        offset_43811 *= 2;
                    }
                    while (slt32(skip_waves_43812,
                                 squot32(sext_i64_i32(segred_group_sizze_35638) +
                                         wave_sizze_43784 - 1,
                                         wave_sizze_43784))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_43811 = skip_waves_43812 * wave_sizze_43784;
                        if (slt32(local_tid_43782 + offset_43811,
                                  sext_i64_i32(segred_group_sizze_35638)) &&
                            ((local_tid_43782 - squot32(local_tid_43782,
                                                        wave_sizze_43784) *
                              wave_sizze_43784) == 0 &&
                             (squot32(local_tid_43782, wave_sizze_43784) & (2 *
                                                                            skip_waves_43812 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_43800 = ((__local
                                            float *) red_arr_mem_43786)[sext_i32_i64(local_tid_43782 +
                                                                        offset_43811)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43801 = x_43799 + x_43800;
                                
                                x_43799 = defunc_1_op_res_43801;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_43786)[sext_i32_i64(local_tid_43782)] =
                                    x_43799;
                            }
                        }
                        skip_waves_43812 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_43782 == 0) {
                            ((__global float *) mem_42333)[gtid_35579] =
                                x_43799;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_35638
}
__kernel void mainMagnitudezisegred_large_35613(__global int *global_failure,
                                                __local volatile
                                                int64_t *sync_arr_mem_43724_backing_aligned_0,
                                                __local volatile
                                                int64_t *red_arr_mem_43722_backing_aligned_1,
                                                int64_t N_28874,
                                                int64_t m_28875,
                                                int64_t i32_res_28884,
                                                int64_t num_groups_35625,
                                                int64_t groups_per_segment_43708,
                                                int64_t elements_per_thread_43709,
                                                int64_t virt_num_groups_43710,
                                                int64_t threads_per_segment_43712,
                                                __global
                                                unsigned char *images_mem_41421,
                                                __global
                                                unsigned char *mem_42329,
                                                __global
                                                unsigned char *segred_tmp_mem_43713,
                                                __global
                                                unsigned char *mainMagnitudezicounter_mem_43715)
{
    #define segred_group_sizze_35624 (mainMagnitudezisegred_group_sizze_35607)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_43724_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_43724_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_43722_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43722_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43717;
    int32_t local_tid_43718;
    int64_t group_sizze_43721;
    int32_t wave_sizze_43720;
    int32_t group_tid_43719;
    
    global_tid_43717 = get_global_id(0);
    local_tid_43718 = get_local_id(0);
    group_sizze_43721 = get_local_size(0);
    wave_sizze_43720 = LOCKSTEP_WIDTH;
    group_tid_43719 = get_group_id(0);
    
    int32_t phys_tid_35613 = global_tid_43717;
    __local char *red_arr_mem_43722;
    
    red_arr_mem_43722 = (__local char *) red_arr_mem_43722_backing_0;
    
    __local char *sync_arr_mem_43724;
    
    sync_arr_mem_43724 = (__local char *) sync_arr_mem_43724_backing_1;
    
    int32_t phys_group_id_43726;
    
    phys_group_id_43726 = get_group_id(0);
    for (int32_t i_43727 = 0; i_43727 <
         sdiv_up32(sext_i64_i32(virt_num_groups_43710) - phys_group_id_43726,
                   sext_i64_i32(num_groups_35625)); i_43727++) {
        int32_t virt_group_id_43728 = phys_group_id_43726 + i_43727 *
                sext_i64_i32(num_groups_35625);
        int32_t flat_segment_id_43729 = squot32(virt_group_id_43728,
                                                sext_i64_i32(groups_per_segment_43708));
        int64_t global_tid_43730 = srem64(sext_i32_i64(virt_group_id_43728) *
                                          segred_group_sizze_35624 +
                                          sext_i32_i64(local_tid_43718),
                                          segred_group_sizze_35624 *
                                          groups_per_segment_43708);
        int64_t slice_43731 = m_28875;
        int64_t gtid_35604 = sext_i32_i64(flat_segment_id_43729);
        int64_t remnant_43732 = sext_i32_i64(flat_segment_id_43729) -
                gtid_35604;
        int64_t gtid_35612;
        int32_t x_acc_43733;
        int64_t chunk_sizze_43734 = smin64(elements_per_thread_43709,
                                           sdiv_up64(i32_res_28884 -
                                                     global_tid_43730,
                                                     threads_per_segment_43712));
        int32_t x_35628;
        int32_t x_35629;
        
        // neutral-initialise the accumulators
        {
            x_acc_43733 = 0;
        }
        for (int64_t i_43738 = 0; i_43738 < chunk_sizze_43734; i_43738++) {
            gtid_35612 = global_tid_43730 + threads_per_segment_43712 * i_43738;
            // apply map function
            {
                float x_35632 = ((__global
                                  float *) images_mem_41421)[gtid_35604 *
                                                             N_28874 +
                                                             gtid_35612];
                bool isnan_res_35633;
                
                isnan_res_35633 = futrts_isnan32(x_35632);
                
                bool cond_35634 = !isnan_res_35633;
                int32_t defunc_0_f_res_35635 = btoi_bool_i32(cond_35634);
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_35628 = x_acc_43733;
                }
                // load new values
                {
                    x_35629 = defunc_0_f_res_35635;
                }
                // apply reduction operator
                {
                    int32_t defunc_1_op_res_35630 = add32(x_35628, x_35629);
                    
                    // store in accumulator
                    {
                        x_acc_43733 = defunc_1_op_res_35630;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_35628 = x_acc_43733;
            ((__local
              int32_t *) red_arr_mem_43722)[sext_i32_i64(local_tid_43718)] =
                x_35628;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_43739;
        int32_t skip_waves_43740 = 1;
        int32_t x_43735;
        int32_t x_43736;
        
        offset_43739 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_43718,
                      sext_i64_i32(segred_group_sizze_35624))) {
                x_43735 = ((__local
                            int32_t *) red_arr_mem_43722)[sext_i32_i64(local_tid_43718 +
                                                          offset_43739)];
            }
        }
        offset_43739 = 1;
        while (slt32(offset_43739, wave_sizze_43720)) {
            if (slt32(local_tid_43718 + offset_43739,
                      sext_i64_i32(segred_group_sizze_35624)) &&
                ((local_tid_43718 - squot32(local_tid_43718, wave_sizze_43720) *
                  wave_sizze_43720) & (2 * offset_43739 - 1)) == 0) {
                // read array element
                {
                    x_43736 = ((volatile __local
                                int32_t *) red_arr_mem_43722)[sext_i32_i64(local_tid_43718 +
                                                              offset_43739)];
                }
                // apply reduction operation
                {
                    int32_t defunc_1_op_res_43737 = add32(x_43735, x_43736);
                    
                    x_43735 = defunc_1_op_res_43737;
                }
                // write result of operation
                {
                    ((volatile __local
                      int32_t *) red_arr_mem_43722)[sext_i32_i64(local_tid_43718)] =
                        x_43735;
                }
            }
            offset_43739 *= 2;
        }
        while (slt32(skip_waves_43740,
                     squot32(sext_i64_i32(segred_group_sizze_35624) +
                             wave_sizze_43720 - 1, wave_sizze_43720))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_43739 = skip_waves_43740 * wave_sizze_43720;
            if (slt32(local_tid_43718 + offset_43739,
                      sext_i64_i32(segred_group_sizze_35624)) &&
                ((local_tid_43718 - squot32(local_tid_43718, wave_sizze_43720) *
                  wave_sizze_43720) == 0 && (squot32(local_tid_43718,
                                                     wave_sizze_43720) & (2 *
                                                                          skip_waves_43740 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_43736 = ((__local
                                int32_t *) red_arr_mem_43722)[sext_i32_i64(local_tid_43718 +
                                                              offset_43739)];
                }
                // apply reduction operation
                {
                    int32_t defunc_1_op_res_43737 = add32(x_43735, x_43736);
                    
                    x_43735 = defunc_1_op_res_43737;
                }
                // write result of operation
                {
                    ((__local
                      int32_t *) red_arr_mem_43722)[sext_i32_i64(local_tid_43718)] =
                        x_43735;
                }
            }
            skip_waves_43740 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_43718) == (int64_t) 0) {
                x_acc_43733 = x_43735;
            }
        }
        if (groups_per_segment_43708 == (int64_t) 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_43718 == 0) {
                    ((__global int32_t *) mem_42329)[gtid_35604] = x_acc_43733;
                }
            }
        } else {
            int32_t old_counter_43741;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_43718 == 0) {
                    ((__global
                      int32_t *) segred_tmp_mem_43713)[sext_i32_i64(virt_group_id_43728)] =
                        x_acc_43733;
                    mem_fence_global();
                    old_counter_43741 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainMagnitudezicounter_mem_43715)[sext_i32_i64(srem32(flat_segment_id_43729,
                                                                                                              10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_43724)[(int64_t) 0] =
                        old_counter_43741 == groups_per_segment_43708 -
                        (int64_t) 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_43742 = ((__local
                                         bool *) sync_arr_mem_43724)[(int64_t) 0];
            
            if (is_last_group_43742) {
                if (local_tid_43718 == 0) {
                    old_counter_43741 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainMagnitudezicounter_mem_43715)[sext_i32_i64(srem32(flat_segment_id_43729,
                                                                                                              10240))],
                                              (int) ((int64_t) 0 -
                                                     groups_per_segment_43708));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_43743 =
                            sdiv_up64(groups_per_segment_43708,
                                      segred_group_sizze_35624);
                    
                    x_35628 = 0;
                    for (int64_t i_43744 = 0; i_43744 < read_per_thread_43743;
                         i_43744++) {
                        int64_t group_res_id_43745 =
                                sext_i32_i64(local_tid_43718) *
                                read_per_thread_43743 + i_43744;
                        int64_t index_of_group_res_43746 =
                                sext_i32_i64(flat_segment_id_43729) *
                                groups_per_segment_43708 + group_res_id_43745;
                        
                        if (slt64(group_res_id_43745,
                                  groups_per_segment_43708)) {
                            x_35629 = ((__global
                                        int32_t *) segred_tmp_mem_43713)[index_of_group_res_43746];
                            
                            int32_t defunc_1_op_res_35630 = add32(x_35628,
                                                                  x_35629);
                            
                            x_35628 = defunc_1_op_res_35630;
                        }
                    }
                }
                ((__local
                  int32_t *) red_arr_mem_43722)[sext_i32_i64(local_tid_43718)] =
                    x_35628;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_43747;
                    int32_t skip_waves_43748 = 1;
                    int32_t x_43735;
                    int32_t x_43736;
                    
                    offset_43747 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_43718,
                                  sext_i64_i32(segred_group_sizze_35624))) {
                            x_43735 = ((__local
                                        int32_t *) red_arr_mem_43722)[sext_i32_i64(local_tid_43718 +
                                                                      offset_43747)];
                        }
                    }
                    offset_43747 = 1;
                    while (slt32(offset_43747, wave_sizze_43720)) {
                        if (slt32(local_tid_43718 + offset_43747,
                                  sext_i64_i32(segred_group_sizze_35624)) &&
                            ((local_tid_43718 - squot32(local_tid_43718,
                                                        wave_sizze_43720) *
                              wave_sizze_43720) & (2 * offset_43747 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_43736 = ((volatile __local
                                            int32_t *) red_arr_mem_43722)[sext_i32_i64(local_tid_43718 +
                                                                          offset_43747)];
                            }
                            // apply reduction operation
                            {
                                int32_t defunc_1_op_res_43737 = add32(x_43735,
                                                                      x_43736);
                                
                                x_43735 = defunc_1_op_res_43737;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  int32_t *) red_arr_mem_43722)[sext_i32_i64(local_tid_43718)] =
                                    x_43735;
                            }
                        }
                        offset_43747 *= 2;
                    }
                    while (slt32(skip_waves_43748,
                                 squot32(sext_i64_i32(segred_group_sizze_35624) +
                                         wave_sizze_43720 - 1,
                                         wave_sizze_43720))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_43747 = skip_waves_43748 * wave_sizze_43720;
                        if (slt32(local_tid_43718 + offset_43747,
                                  sext_i64_i32(segred_group_sizze_35624)) &&
                            ((local_tid_43718 - squot32(local_tid_43718,
                                                        wave_sizze_43720) *
                              wave_sizze_43720) == 0 &&
                             (squot32(local_tid_43718, wave_sizze_43720) & (2 *
                                                                            skip_waves_43748 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_43736 = ((__local
                                            int32_t *) red_arr_mem_43722)[sext_i32_i64(local_tid_43718 +
                                                                          offset_43747)];
                            }
                            // apply reduction operation
                            {
                                int32_t defunc_1_op_res_43737 = add32(x_43735,
                                                                      x_43736);
                                
                                x_43735 = defunc_1_op_res_43737;
                            }
                            // write result of operation
                            {
                                ((__local
                                  int32_t *) red_arr_mem_43722)[sext_i32_i64(local_tid_43718)] =
                                    x_43735;
                            }
                        }
                        skip_waves_43748 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_43718 == 0) {
                            ((__global int32_t *) mem_42329)[gtid_35604] =
                                x_43735;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_35624
}
__kernel void mainMagnitudezisegred_large_35760(__global int *global_failure,
                                                int failure_is_an_option,
                                                __global
                                                int64_t *global_failure_args,
                                                __local volatile
                                                int64_t *sync_arr_mem_43906_backing_aligned_0,
                                                __local volatile
                                                int64_t *red_arr_mem_43904_backing_aligned_1,
                                                int64_t N_28874,
                                                int64_t m_28875,
                                                int64_t i32_res_29275,
                                                int64_t num_groups_35782,
                                                int64_t groups_per_segment_43890,
                                                int64_t elements_per_thread_43891,
                                                int64_t virt_num_groups_43892,
                                                int64_t threads_per_segment_43894,
                                                __global
                                                unsigned char *defunc_4_map_res_mem_42266,
                                                __global
                                                unsigned char *defunc_3_map_res_mem_42344,
                                                __global
                                                unsigned char *defunc_3_map_res_mem_42345,
                                                __global
                                                unsigned char *mem_42382,
                                                __global
                                                unsigned char *segred_tmp_mem_43895,
                                                __global
                                                unsigned char *mainMagnitudezicounter_mem_43897)
{
    #define segred_group_sizze_35781 (mainMagnitudezisegred_group_sizze_35754)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_43906_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_43906_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_43904_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43904_backing_aligned_1;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43899;
    int32_t local_tid_43900;
    int64_t group_sizze_43903;
    int32_t wave_sizze_43902;
    int32_t group_tid_43901;
    
    global_tid_43899 = get_global_id(0);
    local_tid_43900 = get_local_id(0);
    group_sizze_43903 = get_local_size(0);
    wave_sizze_43902 = LOCKSTEP_WIDTH;
    group_tid_43901 = get_group_id(0);
    
    int32_t phys_tid_35760 = global_tid_43899;
    __local char *red_arr_mem_43904;
    
    red_arr_mem_43904 = (__local char *) red_arr_mem_43904_backing_0;
    
    __local char *sync_arr_mem_43906;
    
    sync_arr_mem_43906 = (__local char *) sync_arr_mem_43906_backing_1;
    
    int32_t phys_group_id_43908;
    
    phys_group_id_43908 = get_group_id(0);
    for (int32_t i_43909 = 0; i_43909 <
         sdiv_up32(sext_i64_i32(virt_num_groups_43892) - phys_group_id_43908,
                   sext_i64_i32(num_groups_35782)); i_43909++) {
        int32_t virt_group_id_43910 = phys_group_id_43908 + i_43909 *
                sext_i64_i32(num_groups_35782);
        int32_t flat_segment_id_43911 = squot32(virt_group_id_43910,
                                                sext_i64_i32(groups_per_segment_43890));
        int64_t global_tid_43912 = srem64(sext_i32_i64(virt_group_id_43910) *
                                          segred_group_sizze_35781 +
                                          sext_i32_i64(local_tid_43900),
                                          segred_group_sizze_35781 *
                                          groups_per_segment_43890);
        int64_t slice_43913 = m_28875;
        int64_t gtid_35751 = sext_i32_i64(flat_segment_id_43911);
        int64_t remnant_43914 = sext_i32_i64(flat_segment_id_43911) -
                gtid_35751;
        int64_t gtid_35759;
        float x_acc_43915;
        int64_t chunk_sizze_43916 = smin64(elements_per_thread_43891,
                                           sdiv_up64(i32_res_29275 -
                                                     global_tid_43912,
                                                     threads_per_segment_43894));
        float x_35785;
        float x_35786;
        
        // neutral-initialise the accumulators
        {
            x_acc_43915 = 0.0F;
        }
        for (int64_t i_43920 = 0; i_43920 < chunk_sizze_43916; i_43920++) {
            gtid_35759 = global_tid_43912 + threads_per_segment_43894 * i_43920;
            // apply map function
            {
                int32_t x_35790 = ((__global
                                    int32_t *) defunc_3_map_res_mem_42344)[gtid_35751];
                int32_t index_primexp_39441 = sext_i64_i32(gtid_35759);
                bool cond_35792 = slt32(index_primexp_39441, x_35790);
                float defunc_0_f_res_35793;
                
                if (cond_35792) {
                    int32_t x_35789 = ((__global
                                        int32_t *) defunc_3_map_res_mem_42345)[gtid_35751];
                    int32_t x_35794 = add32(x_35789, index_primexp_39441);
                    int32_t x_35795 = sub32(x_35794, x_35790);
                    int32_t i_35796 = add32(1, x_35795);
                    int64_t i_35797 = sext_i32_i64(i_35796);
                    bool x_35798 = sle64((int64_t) 0, i_35797);
                    bool y_35799 = slt64(i_35797, N_28874);
                    bool bounds_check_35800 = x_35798 && y_35799;
                    bool index_certs_35801;
                    
                    if (!bounds_check_35800) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          102) == -1) {
                                global_failure_args[0] = i_35797;
                                global_failure_args[1] = N_28874;
                                ;
                            }
                            local_failure = true;
                            goto error_0;
                        }
                    }
                    
                    float defunc_0_f_res_t_res_35802 = ((__global
                                                         float *) defunc_4_map_res_mem_42266)[gtid_35751 *
                                                                                              N_28874 +
                                                                                              i_35797];
                    
                    defunc_0_f_res_35793 = defunc_0_f_res_t_res_35802;
                } else {
                    defunc_0_f_res_35793 = 0.0F;
                }
                // save map-out results
                { }
                // load accumulator
                {
                    x_35785 = x_acc_43915;
                }
                // load new values
                {
                    x_35786 = defunc_0_f_res_35793;
                }
                // apply reduction operator
                {
                    float defunc_1_op_res_35787 = x_35785 + x_35786;
                    
                    // store in accumulator
                    {
                        x_acc_43915 = defunc_1_op_res_35787;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_35785 = x_acc_43915;
            ((__local
              float *) red_arr_mem_43904)[sext_i32_i64(local_tid_43900)] =
                x_35785;
        }
        
      error_0:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_43921;
        int32_t skip_waves_43922 = 1;
        float x_43917;
        float x_43918;
        
        offset_43921 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_43900,
                      sext_i64_i32(segred_group_sizze_35781))) {
                x_43917 = ((__local
                            float *) red_arr_mem_43904)[sext_i32_i64(local_tid_43900 +
                                                        offset_43921)];
            }
        }
        offset_43921 = 1;
        while (slt32(offset_43921, wave_sizze_43902)) {
            if (slt32(local_tid_43900 + offset_43921,
                      sext_i64_i32(segred_group_sizze_35781)) &&
                ((local_tid_43900 - squot32(local_tid_43900, wave_sizze_43902) *
                  wave_sizze_43902) & (2 * offset_43921 - 1)) == 0) {
                // read array element
                {
                    x_43918 = ((volatile __local
                                float *) red_arr_mem_43904)[sext_i32_i64(local_tid_43900 +
                                                            offset_43921)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43919 = x_43917 + x_43918;
                    
                    x_43917 = defunc_1_op_res_43919;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_43904)[sext_i32_i64(local_tid_43900)] =
                        x_43917;
                }
            }
            offset_43921 *= 2;
        }
        while (slt32(skip_waves_43922,
                     squot32(sext_i64_i32(segred_group_sizze_35781) +
                             wave_sizze_43902 - 1, wave_sizze_43902))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_43921 = skip_waves_43922 * wave_sizze_43902;
            if (slt32(local_tid_43900 + offset_43921,
                      sext_i64_i32(segred_group_sizze_35781)) &&
                ((local_tid_43900 - squot32(local_tid_43900, wave_sizze_43902) *
                  wave_sizze_43902) == 0 && (squot32(local_tid_43900,
                                                     wave_sizze_43902) & (2 *
                                                                          skip_waves_43922 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_43918 = ((__local
                                float *) red_arr_mem_43904)[sext_i32_i64(local_tid_43900 +
                                                            offset_43921)];
                }
                // apply reduction operation
                {
                    float defunc_1_op_res_43919 = x_43917 + x_43918;
                    
                    x_43917 = defunc_1_op_res_43919;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_43904)[sext_i32_i64(local_tid_43900)] =
                        x_43917;
                }
            }
            skip_waves_43922 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_43900) == (int64_t) 0) {
                x_acc_43915 = x_43917;
            }
        }
        if (groups_per_segment_43890 == (int64_t) 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_43900 == 0) {
                    ((__global float *) mem_42382)[gtid_35751] = x_acc_43915;
                }
            }
        } else {
            int32_t old_counter_43923;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_43900 == 0) {
                    ((__global
                      float *) segred_tmp_mem_43895)[sext_i32_i64(virt_group_id_43910)] =
                        x_acc_43915;
                    mem_fence_global();
                    old_counter_43923 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainMagnitudezicounter_mem_43897)[sext_i32_i64(srem32(flat_segment_id_43911,
                                                                                                              10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_43906)[(int64_t) 0] =
                        old_counter_43923 == groups_per_segment_43890 -
                        (int64_t) 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_43924 = ((__local
                                         bool *) sync_arr_mem_43906)[(int64_t) 0];
            
            if (is_last_group_43924) {
                if (local_tid_43900 == 0) {
                    old_counter_43923 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainMagnitudezicounter_mem_43897)[sext_i32_i64(srem32(flat_segment_id_43911,
                                                                                                              10240))],
                                              (int) ((int64_t) 0 -
                                                     groups_per_segment_43890));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_43925 =
                            sdiv_up64(groups_per_segment_43890,
                                      segred_group_sizze_35781);
                    
                    x_35785 = 0.0F;
                    for (int64_t i_43926 = 0; i_43926 < read_per_thread_43925;
                         i_43926++) {
                        int64_t group_res_id_43927 =
                                sext_i32_i64(local_tid_43900) *
                                read_per_thread_43925 + i_43926;
                        int64_t index_of_group_res_43928 =
                                sext_i32_i64(flat_segment_id_43911) *
                                groups_per_segment_43890 + group_res_id_43927;
                        
                        if (slt64(group_res_id_43927,
                                  groups_per_segment_43890)) {
                            x_35786 = ((__global
                                        float *) segred_tmp_mem_43895)[index_of_group_res_43928];
                            
                            float defunc_1_op_res_35787 = x_35785 + x_35786;
                            
                            x_35785 = defunc_1_op_res_35787;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_43904)[sext_i32_i64(local_tid_43900)] =
                    x_35785;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_43929;
                    int32_t skip_waves_43930 = 1;
                    float x_43917;
                    float x_43918;
                    
                    offset_43929 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_43900,
                                  sext_i64_i32(segred_group_sizze_35781))) {
                            x_43917 = ((__local
                                        float *) red_arr_mem_43904)[sext_i32_i64(local_tid_43900 +
                                                                    offset_43929)];
                        }
                    }
                    offset_43929 = 1;
                    while (slt32(offset_43929, wave_sizze_43902)) {
                        if (slt32(local_tid_43900 + offset_43929,
                                  sext_i64_i32(segred_group_sizze_35781)) &&
                            ((local_tid_43900 - squot32(local_tid_43900,
                                                        wave_sizze_43902) *
                              wave_sizze_43902) & (2 * offset_43929 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_43918 = ((volatile __local
                                            float *) red_arr_mem_43904)[sext_i32_i64(local_tid_43900 +
                                                                        offset_43929)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43919 = x_43917 + x_43918;
                                
                                x_43917 = defunc_1_op_res_43919;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43904)[sext_i32_i64(local_tid_43900)] =
                                    x_43917;
                            }
                        }
                        offset_43929 *= 2;
                    }
                    while (slt32(skip_waves_43930,
                                 squot32(sext_i64_i32(segred_group_sizze_35781) +
                                         wave_sizze_43902 - 1,
                                         wave_sizze_43902))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_43929 = skip_waves_43930 * wave_sizze_43902;
                        if (slt32(local_tid_43900 + offset_43929,
                                  sext_i64_i32(segred_group_sizze_35781)) &&
                            ((local_tid_43900 - squot32(local_tid_43900,
                                                        wave_sizze_43902) *
                              wave_sizze_43902) == 0 &&
                             (squot32(local_tid_43900, wave_sizze_43902) & (2 *
                                                                            skip_waves_43930 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_43918 = ((__local
                                            float *) red_arr_mem_43904)[sext_i32_i64(local_tid_43900 +
                                                                        offset_43929)];
                            }
                            // apply reduction operation
                            {
                                float defunc_1_op_res_43919 = x_43917 + x_43918;
                                
                                x_43917 = defunc_1_op_res_43919;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_43904)[sext_i32_i64(local_tid_43900)] =
                                    x_43917;
                            }
                        }
                        skip_waves_43930 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_43900 == 0) {
                            ((__global float *) mem_42382)[gtid_35751] =
                                x_43917;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_35781
}
__kernel void mainMagnitudezisegred_large_36341(__global int *global_failure,
                                                __local volatile
                                                int64_t *sync_arr_mem_44130_backing_aligned_0,
                                                __local volatile
                                                int64_t *red_arr_mem_44128_backing_aligned_1,
                                                __local volatile
                                                int64_t *red_arr_mem_44126_backing_aligned_2,
                                                __local volatile
                                                int64_t *red_arr_mem_44124_backing_aligned_3,
                                                int64_t m_28875,
                                                int64_t iota32_arg_29304,
                                                int64_t num_groups_36528,
                                                int64_t groups_per_segment_44106,
                                                int64_t elements_per_thread_44107,
                                                int64_t virt_num_groups_44108,
                                                __global
                                                unsigned char *mem_42390,
                                                __global
                                                unsigned char *mem_42452,
                                                __global
                                                unsigned char *mem_42455,
                                                __global
                                                unsigned char *mem_42460,
                                                __global
                                                unsigned char *mem_42463,
                                                __global
                                                unsigned char *mem_42466,
                                                __global
                                                unsigned char *mem_42469,
                                                __global
                                                unsigned char *segred_tmp_mem_44111,
                                                __global
                                                unsigned char *segred_tmp_mem_44113,
                                                __global
                                                unsigned char *segred_tmp_mem_44115,
                                                __global
                                                unsigned char *mainMagnitudezicounter_mem_44117)
{
    #define segred_group_sizze_36527 (mainMagnitudezisegred_group_sizze_36335)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_44130_backing_3 =
                          (__local volatile
                           char *) sync_arr_mem_44130_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_44128_backing_2 =
                          (__local volatile
                           char *) red_arr_mem_44128_backing_aligned_1;
    __local volatile char *restrict red_arr_mem_44126_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_44126_backing_aligned_2;
    __local volatile char *restrict red_arr_mem_44124_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_44124_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_44119;
    int32_t local_tid_44120;
    int64_t group_sizze_44123;
    int32_t wave_sizze_44122;
    int32_t group_tid_44121;
    
    global_tid_44119 = get_global_id(0);
    local_tid_44120 = get_local_id(0);
    group_sizze_44123 = get_local_size(0);
    wave_sizze_44122 = LOCKSTEP_WIDTH;
    group_tid_44121 = get_group_id(0);
    
    int32_t phys_tid_36341 = global_tid_44119;
    __local char *red_arr_mem_44124;
    
    red_arr_mem_44124 = (__local char *) red_arr_mem_44124_backing_0;
    
    __local char *red_arr_mem_44126;
    
    red_arr_mem_44126 = (__local char *) red_arr_mem_44126_backing_1;
    
    __local char *red_arr_mem_44128;
    
    red_arr_mem_44128 = (__local char *) red_arr_mem_44128_backing_2;
    
    __local char *sync_arr_mem_44130;
    
    sync_arr_mem_44130 = (__local char *) sync_arr_mem_44130_backing_3;
    
    int32_t phys_group_id_44132;
    
    phys_group_id_44132 = get_group_id(0);
    for (int32_t i_44133 = 0; i_44133 <
         sdiv_up32(sext_i64_i32(virt_num_groups_44108) - phys_group_id_44132,
                   sext_i64_i32(num_groups_36528)); i_44133++) {
        int32_t virt_group_id_44134 = phys_group_id_44132 + i_44133 *
                sext_i64_i32(num_groups_36528);
        int32_t flat_segment_id_44135 = squot32(virt_group_id_44134,
                                                sext_i64_i32(groups_per_segment_44106));
        int64_t global_tid_44136 = srem64(sext_i32_i64(virt_group_id_44134) *
                                          segred_group_sizze_36527 +
                                          sext_i32_i64(local_tid_44120),
                                          segred_group_sizze_36527 *
                                          groups_per_segment_44106);
        int64_t slice_44137 = m_28875;
        int64_t gtid_36332 = sext_i32_i64(flat_segment_id_44135);
        int64_t remnant_44138 = sext_i32_i64(flat_segment_id_44135) -
                gtid_36332;
        int64_t gtid_36340;
        bool x_acc_44139;
        int32_t x_acc_44140;
        float x_acc_44141;
        int64_t chunk_sizze_44142;
        int64_t starting_point_44143 = global_tid_44136 *
                elements_per_thread_44107;
        int64_t remaining_elements_44144 = iota32_arg_29304 -
                starting_point_44143;
        
        if (sle64(remaining_elements_44144, (int64_t) 0) ||
            sle64(iota32_arg_29304, starting_point_44143)) {
            chunk_sizze_44142 = (int64_t) 0;
        } else {
            if (slt64(iota32_arg_29304, (global_tid_44136 + (int64_t) 1) *
                      elements_per_thread_44107)) {
                chunk_sizze_44142 = iota32_arg_29304 - global_tid_44136 *
                    elements_per_thread_44107;
            } else {
                chunk_sizze_44142 = elements_per_thread_44107;
            }
        }
        
        bool x_36533;
        int32_t x_36534;
        float x_36535;
        bool x_36536;
        int32_t x_36537;
        float x_36538;
        
        // neutral-initialise the accumulators
        {
            x_acc_44139 = 0;
            x_acc_44140 = -1;
            x_acc_44141 = 0.0F;
        }
        for (int64_t i_44159 = 0; i_44159 < elements_per_thread_44107;
             i_44159++) {
            gtid_36340 = sext_i32_i64(local_tid_44120) +
                (squot64(global_tid_44136, segred_group_sizze_36527) *
                 elements_per_thread_44107 + i_44159) *
                segred_group_sizze_36527;
            if (slt64(gtid_36340, iota32_arg_29304)) {
                // apply map function
                {
                    int32_t y_36547 = ((__global
                                        int32_t *) mem_42455)[gtid_36332];
                    float y_36548 = ((__global float *) mem_42452)[gtid_36332];
                    float x_36552 = ((__global float *) mem_42460)[gtid_36332 *
                                                                   iota32_arg_29304 +
                                                                   gtid_36340];
                    float x_36553 = ((__global float *) mem_42390)[gtid_36340];
                    int32_t index_primexp_39460 = sext_i64_i32(gtid_36340);
                    float defunc_0_f_res_36556 = x_36552 / y_36548;
                    bool cond_36557 = slt32(index_primexp_39460, y_36547);
                    bool isnan_res_36558;
                    
                    isnan_res_36558 = futrts_isnan32(defunc_0_f_res_36556);
                    
                    bool cond_t_res_36559 = !isnan_res_36558;
                    bool x_36560 = cond_36557 && cond_t_res_36559;
                    float abs_res_36561 = (float) fabs(defunc_0_f_res_36556);
                    bool defunc_2_f_res_t_res_36562 = x_36553 < abs_res_36561;
                    bool x_36563 = x_36560 && defunc_2_f_res_t_res_36562;
                    float defunc_1_f_res_36564;
                    
                    if (cond_36557) {
                        defunc_1_f_res_36564 = defunc_0_f_res_36556;
                    } else {
                        defunc_1_f_res_36564 = 0.0F;
                    }
                    // save map-out results
                    { }
                    // load accumulator
                    {
                        x_36533 = x_acc_44139;
                        x_36534 = x_acc_44140;
                        x_36535 = x_acc_44141;
                    }
                    // load new values
                    {
                        x_36536 = x_36563;
                        x_36537 = index_primexp_39460;
                        x_36538 = defunc_1_f_res_36564;
                    }
                    // apply reduction operator
                    {
                        bool defunc_1_op_res_36539;
                        int32_t defunc_1_op_res_36540;
                        
                        if (x_36533) {
                            defunc_1_op_res_36539 = x_36533;
                            defunc_1_op_res_36540 = x_36534;
                        } else {
                            bool x_36541 = x_36536 && x_36536;
                            bool x_36542 = !x_36536;
                            bool y_36543 = x_36533 && x_36542;
                            bool defunc_1_op_res_f_res_36544 = x_36541 ||
                                 y_36543;
                            int32_t defunc_1_op_res_f_res_36545;
                            
                            if (x_36536) {
                                defunc_1_op_res_f_res_36545 = x_36537;
                            } else {
                                defunc_1_op_res_f_res_36545 = x_36534;
                            }
                            defunc_1_op_res_36539 = defunc_1_op_res_f_res_36544;
                            defunc_1_op_res_36540 = defunc_1_op_res_f_res_36545;
                        }
                        
                        float defunc_1_op_res_36546 = x_36535 + x_36538;
                        
                        // store in accumulator
                        {
                            x_acc_44139 = defunc_1_op_res_36539;
                            x_acc_44140 = defunc_1_op_res_36540;
                            x_acc_44141 = defunc_1_op_res_36546;
                        }
                    }
                }
            }
            // to reduce current chunk, first store our result in memory
            {
                x_36533 = x_acc_44139;
                x_36534 = x_acc_44140;
                x_36535 = x_acc_44141;
                ((__local
                  bool *) red_arr_mem_44124)[sext_i32_i64(local_tid_44120)] =
                    x_36533;
                ((__local
                  int32_t *) red_arr_mem_44126)[sext_i32_i64(local_tid_44120)] =
                    x_36534;
                ((__local
                  float *) red_arr_mem_44128)[sext_i32_i64(local_tid_44120)] =
                    x_36535;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int32_t offset_44160;
            int32_t skip_waves_44161 = 1;
            bool x_44145;
            int32_t x_44146;
            float x_44147;
            bool x_44148;
            int32_t x_44149;
            float x_44150;
            
            offset_44160 = 0;
            // participating threads read initial accumulator
            {
                if (slt32(local_tid_44120,
                          sext_i64_i32(segred_group_sizze_36527))) {
                    x_44145 = ((__local
                                bool *) red_arr_mem_44124)[sext_i32_i64(local_tid_44120 +
                                                           offset_44160)];
                    x_44146 = ((__local
                                int32_t *) red_arr_mem_44126)[sext_i32_i64(local_tid_44120 +
                                                              offset_44160)];
                    x_44147 = ((__local
                                float *) red_arr_mem_44128)[sext_i32_i64(local_tid_44120 +
                                                            offset_44160)];
                }
            }
            offset_44160 = 1;
            while (slt32(offset_44160, wave_sizze_44122)) {
                if (slt32(local_tid_44120 + offset_44160,
                          sext_i64_i32(segred_group_sizze_36527)) &&
                    ((local_tid_44120 - squot32(local_tid_44120,
                                                wave_sizze_44122) *
                      wave_sizze_44122) & (2 * offset_44160 - 1)) == 0) {
                    // read array element
                    {
                        x_44148 = ((volatile __local
                                    bool *) red_arr_mem_44124)[sext_i32_i64(local_tid_44120 +
                                                               offset_44160)];
                        x_44149 = ((volatile __local
                                    int32_t *) red_arr_mem_44126)[sext_i32_i64(local_tid_44120 +
                                                                  offset_44160)];
                        x_44150 = ((volatile __local
                                    float *) red_arr_mem_44128)[sext_i32_i64(local_tid_44120 +
                                                                offset_44160)];
                    }
                    // apply reduction operation
                    {
                        bool defunc_1_op_res_44151;
                        int32_t defunc_1_op_res_44152;
                        
                        if (x_44145) {
                            defunc_1_op_res_44151 = x_44145;
                            defunc_1_op_res_44152 = x_44146;
                        } else {
                            bool x_44153 = x_44148 && x_44148;
                            bool x_44154 = !x_44148;
                            bool y_44155 = x_44145 && x_44154;
                            bool defunc_1_op_res_f_res_44156 = x_44153 ||
                                 y_44155;
                            int32_t defunc_1_op_res_f_res_44157;
                            
                            if (x_44148) {
                                defunc_1_op_res_f_res_44157 = x_44149;
                            } else {
                                defunc_1_op_res_f_res_44157 = x_44146;
                            }
                            defunc_1_op_res_44151 = defunc_1_op_res_f_res_44156;
                            defunc_1_op_res_44152 = defunc_1_op_res_f_res_44157;
                        }
                        
                        float defunc_1_op_res_44158 = x_44147 + x_44150;
                        
                        x_44145 = defunc_1_op_res_44151;
                        x_44146 = defunc_1_op_res_44152;
                        x_44147 = defunc_1_op_res_44158;
                    }
                    // write result of operation
                    {
                        ((volatile __local
                          bool *) red_arr_mem_44124)[sext_i32_i64(local_tid_44120)] =
                            x_44145;
                        ((volatile __local
                          int32_t *) red_arr_mem_44126)[sext_i32_i64(local_tid_44120)] =
                            x_44146;
                        ((volatile __local
                          float *) red_arr_mem_44128)[sext_i32_i64(local_tid_44120)] =
                            x_44147;
                    }
                }
                offset_44160 *= 2;
            }
            while (slt32(skip_waves_44161,
                         squot32(sext_i64_i32(segred_group_sizze_36527) +
                                 wave_sizze_44122 - 1, wave_sizze_44122))) {
                barrier(CLK_LOCAL_MEM_FENCE);
                offset_44160 = skip_waves_44161 * wave_sizze_44122;
                if (slt32(local_tid_44120 + offset_44160,
                          sext_i64_i32(segred_group_sizze_36527)) &&
                    ((local_tid_44120 - squot32(local_tid_44120,
                                                wave_sizze_44122) *
                      wave_sizze_44122) == 0 && (squot32(local_tid_44120,
                                                         wave_sizze_44122) &
                                                 (2 * skip_waves_44161 - 1)) ==
                     0)) {
                    // read array element
                    {
                        x_44148 = ((__local
                                    bool *) red_arr_mem_44124)[sext_i32_i64(local_tid_44120 +
                                                               offset_44160)];
                        x_44149 = ((__local
                                    int32_t *) red_arr_mem_44126)[sext_i32_i64(local_tid_44120 +
                                                                  offset_44160)];
                        x_44150 = ((__local
                                    float *) red_arr_mem_44128)[sext_i32_i64(local_tid_44120 +
                                                                offset_44160)];
                    }
                    // apply reduction operation
                    {
                        bool defunc_1_op_res_44151;
                        int32_t defunc_1_op_res_44152;
                        
                        if (x_44145) {
                            defunc_1_op_res_44151 = x_44145;
                            defunc_1_op_res_44152 = x_44146;
                        } else {
                            bool x_44153 = x_44148 && x_44148;
                            bool x_44154 = !x_44148;
                            bool y_44155 = x_44145 && x_44154;
                            bool defunc_1_op_res_f_res_44156 = x_44153 ||
                                 y_44155;
                            int32_t defunc_1_op_res_f_res_44157;
                            
                            if (x_44148) {
                                defunc_1_op_res_f_res_44157 = x_44149;
                            } else {
                                defunc_1_op_res_f_res_44157 = x_44146;
                            }
                            defunc_1_op_res_44151 = defunc_1_op_res_f_res_44156;
                            defunc_1_op_res_44152 = defunc_1_op_res_f_res_44157;
                        }
                        
                        float defunc_1_op_res_44158 = x_44147 + x_44150;
                        
                        x_44145 = defunc_1_op_res_44151;
                        x_44146 = defunc_1_op_res_44152;
                        x_44147 = defunc_1_op_res_44158;
                    }
                    // write result of operation
                    {
                        ((__local
                          bool *) red_arr_mem_44124)[sext_i32_i64(local_tid_44120)] =
                            x_44145;
                        ((__local
                          int32_t *) red_arr_mem_44126)[sext_i32_i64(local_tid_44120)] =
                            x_44146;
                        ((__local
                          float *) red_arr_mem_44128)[sext_i32_i64(local_tid_44120)] =
                            x_44147;
                    }
                }
                skip_waves_44161 *= 2;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread saves the result in accumulator
            {
                if (sext_i32_i64(local_tid_44120) == (int64_t) 0) {
                    x_acc_44139 = x_44145;
                    x_acc_44140 = x_44146;
                    x_acc_44141 = x_44147;
                }
            }
            // first thread keeps accumulator; others reset to neutral element
            {
                if (!(sext_i32_i64(local_tid_44120) == (int64_t) 0)) {
                    x_acc_44139 = 0;
                    x_acc_44140 = -1;
                    x_acc_44141 = 0.0F;
                }
            }
        }
        x_36533 = x_acc_44139;
        x_36534 = x_acc_44140;
        x_36535 = x_acc_44141;
        if (groups_per_segment_44106 == (int64_t) 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_44120 == 0) {
                    ((__global bool *) mem_42463)[gtid_36332] = x_acc_44139;
                    ((__global int32_t *) mem_42466)[gtid_36332] = x_acc_44140;
                    ((__global float *) mem_42469)[gtid_36332] = x_acc_44141;
                }
            }
        } else {
            int32_t old_counter_44162;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_44120 == 0) {
                    ((__global
                      bool *) segred_tmp_mem_44111)[sext_i32_i64(virt_group_id_44134)] =
                        x_acc_44139;
                    ((__global
                      int32_t *) segred_tmp_mem_44113)[sext_i32_i64(virt_group_id_44134)] =
                        x_acc_44140;
                    ((__global
                      float *) segred_tmp_mem_44115)[sext_i32_i64(virt_group_id_44134)] =
                        x_acc_44141;
                    mem_fence_global();
                    old_counter_44162 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainMagnitudezicounter_mem_44117)[sext_i32_i64(srem32(flat_segment_id_44135,
                                                                                                              10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_44130)[(int64_t) 0] =
                        old_counter_44162 == groups_per_segment_44106 -
                        (int64_t) 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_44163 = ((__local
                                         bool *) sync_arr_mem_44130)[(int64_t) 0];
            
            if (is_last_group_44163) {
                if (local_tid_44120 == 0) {
                    old_counter_44162 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainMagnitudezicounter_mem_44117)[sext_i32_i64(srem32(flat_segment_id_44135,
                                                                                                              10240))],
                                              (int) ((int64_t) 0 -
                                                     groups_per_segment_44106));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_44164 =
                            sdiv_up64(groups_per_segment_44106,
                                      segred_group_sizze_36527);
                    
                    x_36533 = 0;
                    x_36534 = -1;
                    x_36535 = 0.0F;
                    for (int64_t i_44165 = 0; i_44165 < read_per_thread_44164;
                         i_44165++) {
                        int64_t group_res_id_44166 =
                                sext_i32_i64(local_tid_44120) *
                                read_per_thread_44164 + i_44165;
                        int64_t index_of_group_res_44167 =
                                sext_i32_i64(flat_segment_id_44135) *
                                groups_per_segment_44106 + group_res_id_44166;
                        
                        if (slt64(group_res_id_44166,
                                  groups_per_segment_44106)) {
                            x_36536 = ((__global
                                        bool *) segred_tmp_mem_44111)[index_of_group_res_44167];
                            x_36537 = ((__global
                                        int32_t *) segred_tmp_mem_44113)[index_of_group_res_44167];
                            x_36538 = ((__global
                                        float *) segred_tmp_mem_44115)[index_of_group_res_44167];
                            
                            bool defunc_1_op_res_36539;
                            int32_t defunc_1_op_res_36540;
                            
                            if (x_36533) {
                                defunc_1_op_res_36539 = x_36533;
                                defunc_1_op_res_36540 = x_36534;
                            } else {
                                bool x_36541 = x_36536 && x_36536;
                                bool x_36542 = !x_36536;
                                bool y_36543 = x_36533 && x_36542;
                                bool defunc_1_op_res_f_res_36544 = x_36541 ||
                                     y_36543;
                                int32_t defunc_1_op_res_f_res_36545;
                                
                                if (x_36536) {
                                    defunc_1_op_res_f_res_36545 = x_36537;
                                } else {
                                    defunc_1_op_res_f_res_36545 = x_36534;
                                }
                                defunc_1_op_res_36539 =
                                    defunc_1_op_res_f_res_36544;
                                defunc_1_op_res_36540 =
                                    defunc_1_op_res_f_res_36545;
                            }
                            
                            float defunc_1_op_res_36546 = x_36535 + x_36538;
                            
                            x_36533 = defunc_1_op_res_36539;
                            x_36534 = defunc_1_op_res_36540;
                            x_36535 = defunc_1_op_res_36546;
                        }
                    }
                }
                ((__local
                  bool *) red_arr_mem_44124)[sext_i32_i64(local_tid_44120)] =
                    x_36533;
                ((__local
                  int32_t *) red_arr_mem_44126)[sext_i32_i64(local_tid_44120)] =
                    x_36534;
                ((__local
                  float *) red_arr_mem_44128)[sext_i32_i64(local_tid_44120)] =
                    x_36535;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_44168;
                    int32_t skip_waves_44169 = 1;
                    bool x_44145;
                    int32_t x_44146;
                    float x_44147;
                    bool x_44148;
                    int32_t x_44149;
                    float x_44150;
                    
                    offset_44168 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_44120,
                                  sext_i64_i32(segred_group_sizze_36527))) {
                            x_44145 = ((__local
                                        bool *) red_arr_mem_44124)[sext_i32_i64(local_tid_44120 +
                                                                   offset_44168)];
                            x_44146 = ((__local
                                        int32_t *) red_arr_mem_44126)[sext_i32_i64(local_tid_44120 +
                                                                      offset_44168)];
                            x_44147 = ((__local
                                        float *) red_arr_mem_44128)[sext_i32_i64(local_tid_44120 +
                                                                    offset_44168)];
                        }
                    }
                    offset_44168 = 1;
                    while (slt32(offset_44168, wave_sizze_44122)) {
                        if (slt32(local_tid_44120 + offset_44168,
                                  sext_i64_i32(segred_group_sizze_36527)) &&
                            ((local_tid_44120 - squot32(local_tid_44120,
                                                        wave_sizze_44122) *
                              wave_sizze_44122) & (2 * offset_44168 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_44148 = ((volatile __local
                                            bool *) red_arr_mem_44124)[sext_i32_i64(local_tid_44120 +
                                                                       offset_44168)];
                                x_44149 = ((volatile __local
                                            int32_t *) red_arr_mem_44126)[sext_i32_i64(local_tid_44120 +
                                                                          offset_44168)];
                                x_44150 = ((volatile __local
                                            float *) red_arr_mem_44128)[sext_i32_i64(local_tid_44120 +
                                                                        offset_44168)];
                            }
                            // apply reduction operation
                            {
                                bool defunc_1_op_res_44151;
                                int32_t defunc_1_op_res_44152;
                                
                                if (x_44145) {
                                    defunc_1_op_res_44151 = x_44145;
                                    defunc_1_op_res_44152 = x_44146;
                                } else {
                                    bool x_44153 = x_44148 && x_44148;
                                    bool x_44154 = !x_44148;
                                    bool y_44155 = x_44145 && x_44154;
                                    bool defunc_1_op_res_f_res_44156 =
                                         x_44153 || y_44155;
                                    int32_t defunc_1_op_res_f_res_44157;
                                    
                                    if (x_44148) {
                                        defunc_1_op_res_f_res_44157 = x_44149;
                                    } else {
                                        defunc_1_op_res_f_res_44157 = x_44146;
                                    }
                                    defunc_1_op_res_44151 =
                                        defunc_1_op_res_f_res_44156;
                                    defunc_1_op_res_44152 =
                                        defunc_1_op_res_f_res_44157;
                                }
                                
                                float defunc_1_op_res_44158 = x_44147 + x_44150;
                                
                                x_44145 = defunc_1_op_res_44151;
                                x_44146 = defunc_1_op_res_44152;
                                x_44147 = defunc_1_op_res_44158;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  bool *) red_arr_mem_44124)[sext_i32_i64(local_tid_44120)] =
                                    x_44145;
                                ((volatile __local
                                  int32_t *) red_arr_mem_44126)[sext_i32_i64(local_tid_44120)] =
                                    x_44146;
                                ((volatile __local
                                  float *) red_arr_mem_44128)[sext_i32_i64(local_tid_44120)] =
                                    x_44147;
                            }
                        }
                        offset_44168 *= 2;
                    }
                    while (slt32(skip_waves_44169,
                                 squot32(sext_i64_i32(segred_group_sizze_36527) +
                                         wave_sizze_44122 - 1,
                                         wave_sizze_44122))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_44168 = skip_waves_44169 * wave_sizze_44122;
                        if (slt32(local_tid_44120 + offset_44168,
                                  sext_i64_i32(segred_group_sizze_36527)) &&
                            ((local_tid_44120 - squot32(local_tid_44120,
                                                        wave_sizze_44122) *
                              wave_sizze_44122) == 0 &&
                             (squot32(local_tid_44120, wave_sizze_44122) & (2 *
                                                                            skip_waves_44169 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_44148 = ((__local
                                            bool *) red_arr_mem_44124)[sext_i32_i64(local_tid_44120 +
                                                                       offset_44168)];
                                x_44149 = ((__local
                                            int32_t *) red_arr_mem_44126)[sext_i32_i64(local_tid_44120 +
                                                                          offset_44168)];
                                x_44150 = ((__local
                                            float *) red_arr_mem_44128)[sext_i32_i64(local_tid_44120 +
                                                                        offset_44168)];
                            }
                            // apply reduction operation
                            {
                                bool defunc_1_op_res_44151;
                                int32_t defunc_1_op_res_44152;
                                
                                if (x_44145) {
                                    defunc_1_op_res_44151 = x_44145;
                                    defunc_1_op_res_44152 = x_44146;
                                } else {
                                    bool x_44153 = x_44148 && x_44148;
                                    bool x_44154 = !x_44148;
                                    bool y_44155 = x_44145 && x_44154;
                                    bool defunc_1_op_res_f_res_44156 =
                                         x_44153 || y_44155;
                                    int32_t defunc_1_op_res_f_res_44157;
                                    
                                    if (x_44148) {
                                        defunc_1_op_res_f_res_44157 = x_44149;
                                    } else {
                                        defunc_1_op_res_f_res_44157 = x_44146;
                                    }
                                    defunc_1_op_res_44151 =
                                        defunc_1_op_res_f_res_44156;
                                    defunc_1_op_res_44152 =
                                        defunc_1_op_res_f_res_44157;
                                }
                                
                                float defunc_1_op_res_44158 = x_44147 + x_44150;
                                
                                x_44145 = defunc_1_op_res_44151;
                                x_44146 = defunc_1_op_res_44152;
                                x_44147 = defunc_1_op_res_44158;
                            }
                            // write result of operation
                            {
                                ((__local
                                  bool *) red_arr_mem_44124)[sext_i32_i64(local_tid_44120)] =
                                    x_44145;
                                ((__local
                                  int32_t *) red_arr_mem_44126)[sext_i32_i64(local_tid_44120)] =
                                    x_44146;
                                ((__local
                                  float *) red_arr_mem_44128)[sext_i32_i64(local_tid_44120)] =
                                    x_44147;
                            }
                        }
                        skip_waves_44169 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_44120 == 0) {
                            ((__global bool *) mem_42463)[gtid_36332] = x_44145;
                            ((__global int32_t *) mem_42466)[gtid_36332] =
                                x_44146;
                            ((__global float *) mem_42469)[gtid_36332] =
                                x_44147;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_36527
}
__kernel void mainMagnitudezisegred_nonseg_35686(__global int *global_failure,
                                                 __local volatile
                                                 int64_t *red_arr_mem_43836_backing_aligned_0,
                                                 __local volatile
                                                 int64_t *sync_arr_mem_43834_backing_aligned_1,
                                                 int64_t m_28875,
                                                 int64_t num_groups_35681,
                                                 int64_t num_threads_43828,
                                                 __global
                                                 unsigned char *defunc_3_map_res_mem_42344,
                                                 __global
                                                 unsigned char *mem_42349,
                                                 __global
                                                 unsigned char *mainMagnitudezicounter_mem_43824,
                                                 __global
                                                 unsigned char *segred_tmp_mem_43826)
{
    #define segred_group_sizze_35679 (mainMagnitudezisegred_group_sizze_35678)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_43836_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_43836_backing_aligned_0;
    __local volatile char *restrict sync_arr_mem_43834_backing_0 =
                          (__local volatile
                           char *) sync_arr_mem_43834_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43829;
    int32_t local_tid_43830;
    int64_t group_sizze_43833;
    int32_t wave_sizze_43832;
    int32_t group_tid_43831;
    
    global_tid_43829 = get_global_id(0);
    local_tid_43830 = get_local_id(0);
    group_sizze_43833 = get_local_size(0);
    wave_sizze_43832 = LOCKSTEP_WIDTH;
    group_tid_43831 = get_group_id(0);
    
    int32_t phys_tid_35686 = global_tid_43829;
    __local char *sync_arr_mem_43834;
    
    sync_arr_mem_43834 = (__local char *) sync_arr_mem_43834_backing_0;
    
    __local char *red_arr_mem_43836;
    
    red_arr_mem_43836 = (__local char *) red_arr_mem_43836_backing_1;
    
    int64_t dummy_35684 = (int64_t) 0;
    int64_t gtid_35685 = (int64_t) 0;
    int32_t x_acc_43838;
    int64_t chunk_sizze_43839 = smin64(sdiv_up64(m_28875,
                                                 sext_i32_i64(sext_i64_i32(segred_group_sizze_35679 *
                                                 num_groups_35681))),
                                       sdiv_up64(m_28875 - phys_tid_35686,
                                                 num_threads_43828));
    int32_t x_29271;
    int32_t x_29272;
    
    // neutral-initialise the accumulators
    {
        x_acc_43838 = 0;
    }
    for (int64_t i_43843 = 0; i_43843 < chunk_sizze_43839; i_43843++) {
        gtid_35685 = phys_tid_35686 + num_threads_43828 * i_43843;
        // apply map function
        {
            int32_t x_29274 = ((__global
                                int32_t *) defunc_3_map_res_mem_42344)[gtid_35685];
            
            // save map-out results
            { }
            // load accumulator
            {
                x_29271 = x_acc_43838;
            }
            // load new values
            {
                x_29272 = x_29274;
            }
            // apply reduction operator
            {
                int32_t defunc_1_op_res_29273 = smax32(x_29271, x_29272);
                
                // store in accumulator
                {
                    x_acc_43838 = defunc_1_op_res_29273;
                }
            }
        }
    }
    // to reduce current chunk, first store our result in memory
    {
        x_29271 = x_acc_43838;
        ((__local int32_t *) red_arr_mem_43836)[sext_i32_i64(local_tid_43830)] =
            x_29271;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_43844;
    int32_t skip_waves_43845 = 1;
    int32_t x_43840;
    int32_t x_43841;
    
    offset_43844 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_43830, sext_i64_i32(segred_group_sizze_35679))) {
            x_43840 = ((__local
                        int32_t *) red_arr_mem_43836)[sext_i32_i64(local_tid_43830 +
                                                      offset_43844)];
        }
    }
    offset_43844 = 1;
    while (slt32(offset_43844, wave_sizze_43832)) {
        if (slt32(local_tid_43830 + offset_43844,
                  sext_i64_i32(segred_group_sizze_35679)) && ((local_tid_43830 -
                                                               squot32(local_tid_43830,
                                                                       wave_sizze_43832) *
                                                               wave_sizze_43832) &
                                                              (2 *
                                                               offset_43844 -
                                                               1)) == 0) {
            // read array element
            {
                x_43841 = ((volatile __local
                            int32_t *) red_arr_mem_43836)[sext_i32_i64(local_tid_43830 +
                                                          offset_43844)];
            }
            // apply reduction operation
            {
                int32_t defunc_1_op_res_43842 = smax32(x_43840, x_43841);
                
                x_43840 = defunc_1_op_res_43842;
            }
            // write result of operation
            {
                ((volatile __local
                  int32_t *) red_arr_mem_43836)[sext_i32_i64(local_tid_43830)] =
                    x_43840;
            }
        }
        offset_43844 *= 2;
    }
    while (slt32(skip_waves_43845,
                 squot32(sext_i64_i32(segred_group_sizze_35679) +
                         wave_sizze_43832 - 1, wave_sizze_43832))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_43844 = skip_waves_43845 * wave_sizze_43832;
        if (slt32(local_tid_43830 + offset_43844,
                  sext_i64_i32(segred_group_sizze_35679)) && ((local_tid_43830 -
                                                               squot32(local_tid_43830,
                                                                       wave_sizze_43832) *
                                                               wave_sizze_43832) ==
                                                              0 &&
                                                              (squot32(local_tid_43830,
                                                                       wave_sizze_43832) &
                                                               (2 *
                                                                skip_waves_43845 -
                                                                1)) == 0)) {
            // read array element
            {
                x_43841 = ((__local
                            int32_t *) red_arr_mem_43836)[sext_i32_i64(local_tid_43830 +
                                                          offset_43844)];
            }
            // apply reduction operation
            {
                int32_t defunc_1_op_res_43842 = smax32(x_43840, x_43841);
                
                x_43840 = defunc_1_op_res_43842;
            }
            // write result of operation
            {
                ((__local
                  int32_t *) red_arr_mem_43836)[sext_i32_i64(local_tid_43830)] =
                    x_43840;
            }
        }
        skip_waves_43845 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // first thread saves the result in accumulator
    {
        if (sext_i32_i64(local_tid_43830) == (int64_t) 0) {
            x_acc_43838 = x_43840;
        }
    }
    
    int32_t old_counter_43846;
    
    // first thread in group saves group result to global memory
    {
        if (local_tid_43830 == 0) {
            ((__global
              int32_t *) segred_tmp_mem_43826)[sext_i32_i64(group_tid_43831)] =
                x_acc_43838;
            mem_fence_global();
            old_counter_43846 = atomic_add_i32_global(&((volatile __global
                                                         int *) mainMagnitudezicounter_mem_43824)[(int64_t) 0],
                                                      (int) 1);
            ((__local bool *) sync_arr_mem_43834)[(int64_t) 0] =
                old_counter_43846 == num_groups_35681 - (int64_t) 1;
        }
    }
    barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    
    bool is_last_group_43847 = ((__local
                                 bool *) sync_arr_mem_43834)[(int64_t) 0];
    
    if (is_last_group_43847) {
        if (local_tid_43830 == 0) {
            old_counter_43846 = atomic_add_i32_global(&((volatile __global
                                                         int *) mainMagnitudezicounter_mem_43824)[(int64_t) 0],
                                                      (int) ((int64_t) 0 -
                                                             num_groups_35681));
        }
        // read in the per-group-results
        {
            int64_t read_per_thread_43848 = sdiv_up64(num_groups_35681,
                                                      segred_group_sizze_35679);
            
            x_29271 = 0;
            for (int64_t i_43849 = 0; i_43849 < read_per_thread_43848;
                 i_43849++) {
                int64_t group_res_id_43850 = sext_i32_i64(local_tid_43830) *
                        read_per_thread_43848 + i_43849;
                int64_t index_of_group_res_43851 = group_res_id_43850;
                
                if (slt64(group_res_id_43850, num_groups_35681)) {
                    x_29272 = ((__global
                                int32_t *) segred_tmp_mem_43826)[index_of_group_res_43851];
                    
                    int32_t defunc_1_op_res_29273 = smax32(x_29271, x_29272);
                    
                    x_29271 = defunc_1_op_res_29273;
                }
            }
        }
        ((__local int32_t *) red_arr_mem_43836)[sext_i32_i64(local_tid_43830)] =
            x_29271;
        barrier(CLK_LOCAL_MEM_FENCE);
        // reduce the per-group results
        {
            int32_t offset_43852;
            int32_t skip_waves_43853 = 1;
            int32_t x_43840;
            int32_t x_43841;
            
            offset_43852 = 0;
            // participating threads read initial accumulator
            {
                if (slt32(local_tid_43830,
                          sext_i64_i32(segred_group_sizze_35679))) {
                    x_43840 = ((__local
                                int32_t *) red_arr_mem_43836)[sext_i32_i64(local_tid_43830 +
                                                              offset_43852)];
                }
            }
            offset_43852 = 1;
            while (slt32(offset_43852, wave_sizze_43832)) {
                if (slt32(local_tid_43830 + offset_43852,
                          sext_i64_i32(segred_group_sizze_35679)) &&
                    ((local_tid_43830 - squot32(local_tid_43830,
                                                wave_sizze_43832) *
                      wave_sizze_43832) & (2 * offset_43852 - 1)) == 0) {
                    // read array element
                    {
                        x_43841 = ((volatile __local
                                    int32_t *) red_arr_mem_43836)[sext_i32_i64(local_tid_43830 +
                                                                  offset_43852)];
                    }
                    // apply reduction operation
                    {
                        int32_t defunc_1_op_res_43842 = smax32(x_43840,
                                                               x_43841);
                        
                        x_43840 = defunc_1_op_res_43842;
                    }
                    // write result of operation
                    {
                        ((volatile __local
                          int32_t *) red_arr_mem_43836)[sext_i32_i64(local_tid_43830)] =
                            x_43840;
                    }
                }
                offset_43852 *= 2;
            }
            while (slt32(skip_waves_43853,
                         squot32(sext_i64_i32(segred_group_sizze_35679) +
                                 wave_sizze_43832 - 1, wave_sizze_43832))) {
                barrier(CLK_LOCAL_MEM_FENCE);
                offset_43852 = skip_waves_43853 * wave_sizze_43832;
                if (slt32(local_tid_43830 + offset_43852,
                          sext_i64_i32(segred_group_sizze_35679)) &&
                    ((local_tid_43830 - squot32(local_tid_43830,
                                                wave_sizze_43832) *
                      wave_sizze_43832) == 0 && (squot32(local_tid_43830,
                                                         wave_sizze_43832) &
                                                 (2 * skip_waves_43853 - 1)) ==
                     0)) {
                    // read array element
                    {
                        x_43841 = ((__local
                                    int32_t *) red_arr_mem_43836)[sext_i32_i64(local_tid_43830 +
                                                                  offset_43852)];
                    }
                    // apply reduction operation
                    {
                        int32_t defunc_1_op_res_43842 = smax32(x_43840,
                                                               x_43841);
                        
                        x_43840 = defunc_1_op_res_43842;
                    }
                    // write result of operation
                    {
                        ((__local
                          int32_t *) red_arr_mem_43836)[sext_i32_i64(local_tid_43830)] =
                            x_43840;
                    }
                }
                skip_waves_43853 *= 2;
            }
            // and back to memory with the final result
            {
                if (local_tid_43830 == 0) {
                    ((__global int32_t *) mem_42349)[(int64_t) 0] = x_43840;
                }
            }
        }
    }
    
  error_1:
    return;
    #undef segred_group_sizze_35679
}
__kernel void mainMagnitudezisegred_small_33902(__global int *global_failure,
                                                __local volatile
                                                int64_t *red_arr_mem_42990_backing_aligned_0,
                                                int64_t N_28874,
                                                int64_t m_28875,
                                                int64_t i32_res_28884,
                                                int64_t i32_res_28890,
                                                int64_t num_groups_34041,
                                                int64_t segment_sizze_nonzzero_42983,
                                                __global
                                                unsigned char *images_mem_41421,
                                                __global
                                                unsigned char *binop_p_mem_41432,
                                                __global
                                                unsigned char *mem_41579,
                                                __global
                                                unsigned char *mem_41585)
{
    #define segred_group_sizze_34040 (mainMagnitudezisegred_group_sizze_33896)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_42990_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_42990_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_42985;
    int32_t local_tid_42986;
    int64_t group_sizze_42989;
    int32_t wave_sizze_42988;
    int32_t group_tid_42987;
    
    global_tid_42985 = get_global_id(0);
    local_tid_42986 = get_local_id(0);
    group_sizze_42989 = get_local_size(0);
    wave_sizze_42988 = LOCKSTEP_WIDTH;
    group_tid_42987 = get_group_id(0);
    
    int32_t phys_tid_33902 = global_tid_42985;
    __local char *red_arr_mem_42990;
    
    red_arr_mem_42990 = (__local char *) red_arr_mem_42990_backing_0;
    
    int32_t phys_group_id_42992;
    
    phys_group_id_42992 = get_group_id(0);
    for (int32_t i_42993 = 0; i_42993 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_28875 * i32_res_28890 *
                                          i32_res_28890,
                                          squot64(segred_group_sizze_34040,
                                                  segment_sizze_nonzzero_42983))) -
                   phys_group_id_42992, sext_i64_i32(num_groups_34041));
         i_42993++) {
        int32_t virt_group_id_42994 = phys_group_id_42992 + i_42993 *
                sext_i64_i32(num_groups_34041);
        int64_t slice_42995 = i32_res_28890;
        int64_t slice_42996 = i32_res_28890 * slice_42995;
        int64_t slice_42997 = m_28875 * slice_42996;
        int64_t gtid_33889 = squot64(squot64(sext_i32_i64(local_tid_42986),
                                             segment_sizze_nonzzero_42983) +
                                     sext_i32_i64(virt_group_id_42994) *
                                     squot64(segred_group_sizze_34040,
                                             segment_sizze_nonzzero_42983),
                                     slice_42996);
        int64_t remnant_42998 = squot64(sext_i32_i64(local_tid_42986),
                                        segment_sizze_nonzzero_42983) +
                sext_i32_i64(virt_group_id_42994) *
                squot64(segred_group_sizze_34040,
                        segment_sizze_nonzzero_42983) - gtid_33889 *
                slice_42996;
        int64_t gtid_33890 = squot64(remnant_42998, slice_42995);
        int64_t remnant_42999 = remnant_42998 - gtid_33890 * slice_42995;
        int64_t gtid_33891 = remnant_42999;
        int64_t remnant_43000 = remnant_42999 - gtid_33891;
        int64_t gtid_33901 = srem64(sext_i32_i64(local_tid_42986),
                                    i32_res_28884);
        
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, i32_res_28884) && (((slt64(gtid_33889,
                                                              m_28875) &&
                                                        slt64(gtid_33890,
                                                              i32_res_28890)) &&
                                                       slt64(gtid_33891,
                                                             i32_res_28890)) &&
                                                      slt64(sext_i32_i64(local_tid_42986),
                                                            i32_res_28884 *
                                                            squot64(segred_group_sizze_34040,
                                                                    segment_sizze_nonzzero_42983)))) {
                float x_34050 = ((__global
                                  float *) images_mem_41421)[gtid_33889 *
                                                             N_28874 +
                                                             gtid_33901];
                float x_34051 = ((__global
                                  float *) binop_p_mem_41432)[gtid_33890 *
                                                              N_28874 +
                                                              gtid_33901];
                float x_34052 = ((__global float *) mem_41579)[gtid_33891 *
                                                               N_28874 +
                                                               gtid_33901];
                float x_34053 = x_34051 * x_34052;
                bool isnan_res_34054;
                
                isnan_res_34054 = futrts_isnan32(x_34050);
                
                float y_34055;
                
                if (isnan_res_34054) {
                    y_34055 = 0.0F;
                } else {
                    y_34055 = 1.0F;
                }
                
                float defunc_2_f_res_34056 = x_34053 * y_34055;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_42990)[sext_i32_i64(local_tid_42986)] =
                        defunc_2_f_res_34056;
                }
            } else {
                ((__local
                  float *) red_arr_mem_42990)[sext_i32_i64(local_tid_42986)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, i32_res_28884)) {
            // perform segmented scan to imitate reduction
            {
                float x_34044;
                float x_34045;
                float x_43001;
                float x_43002;
                bool ltid_in_bounds_43004 = slt64(sext_i32_i64(local_tid_42986),
                                                  i32_res_28884 *
                                                  squot64(segred_group_sizze_34040,
                                                          segment_sizze_nonzzero_42983));
                int32_t skip_threads_43005;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_43004) {
                        x_34045 = ((volatile __local
                                    float *) red_arr_mem_42990)[sext_i32_i64(local_tid_42986)];
                        if ((local_tid_42986 - squot32(local_tid_42986, 32) *
                             32) == 0) {
                            x_34044 = x_34045;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_43005 = 1;
                    while (slt32(skip_threads_43005, 32)) {
                        if (sle32(skip_threads_43005, local_tid_42986 -
                                  squot32(local_tid_42986, 32) * 32) &&
                            ltid_in_bounds_43004) {
                            // read operands
                            {
                                x_34044 = ((volatile __local
                                            float *) red_arr_mem_42990)[sext_i32_i64(local_tid_42986) -
                                                                        sext_i32_i64(skip_threads_43005)];
                            }
                            // perform operation
                            {
                                bool inactive_43006 =
                                     slt64(srem64(sext_i32_i64(local_tid_42986),
                                                  i32_res_28884),
                                           sext_i32_i64(local_tid_42986) -
                                           sext_i32_i64(local_tid_42986 -
                                           skip_threads_43005));
                                
                                if (inactive_43006) {
                                    x_34044 = x_34045;
                                }
                                if (!inactive_43006) {
                                    float defunc_1_op_res_34046 = x_34044 +
                                          x_34045;
                                    
                                    x_34044 = defunc_1_op_res_34046;
                                }
                            }
                        }
                        if (sle32(wave_sizze_42988, skip_threads_43005)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_43005, local_tid_42986 -
                                  squot32(local_tid_42986, 32) * 32) &&
                            ltid_in_bounds_43004) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_42990)[sext_i32_i64(local_tid_42986)] =
                                    x_34044;
                                x_34045 = x_34044;
                            }
                        }
                        if (sle32(wave_sizze_42988, skip_threads_43005)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_43005 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_42986 - squot32(local_tid_42986, 32) * 32) ==
                        31 && ltid_in_bounds_43004) {
                        ((volatile __local
                          float *) red_arr_mem_42990)[sext_i32_i64(squot32(local_tid_42986,
                                                                           32))] =
                            x_34044;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_43007;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_42986, 32) == 0 &&
                            ltid_in_bounds_43004) {
                            x_43002 = ((volatile __local
                                        float *) red_arr_mem_42990)[sext_i32_i64(local_tid_42986)];
                            if ((local_tid_42986 - squot32(local_tid_42986,
                                                           32) * 32) == 0) {
                                x_43001 = x_43002;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_43007 = 1;
                        while (slt32(skip_threads_43007, 32)) {
                            if (sle32(skip_threads_43007, local_tid_42986 -
                                      squot32(local_tid_42986, 32) * 32) &&
                                (squot32(local_tid_42986, 32) == 0 &&
                                 ltid_in_bounds_43004)) {
                                // read operands
                                {
                                    x_43001 = ((volatile __local
                                                float *) red_arr_mem_42990)[sext_i32_i64(local_tid_42986) -
                                                                            sext_i32_i64(skip_threads_43007)];
                                }
                                // perform operation
                                {
                                    bool inactive_43008 =
                                         slt64(srem64(sext_i32_i64(local_tid_42986 *
                                                      32 + 32 - 1),
                                                      i32_res_28884),
                                               sext_i32_i64(local_tid_42986 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_42986 -
                                                             skip_threads_43007) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_43008) {
                                        x_43001 = x_43002;
                                    }
                                    if (!inactive_43008) {
                                        float defunc_1_op_res_43003 = x_43001 +
                                              x_43002;
                                        
                                        x_43001 = defunc_1_op_res_43003;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_42988, skip_threads_43007)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_43007, local_tid_42986 -
                                      squot32(local_tid_42986, 32) * 32) &&
                                (squot32(local_tid_42986, 32) == 0 &&
                                 ltid_in_bounds_43004)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_42990)[sext_i32_i64(local_tid_42986)] =
                                        x_43001;
                                    x_43002 = x_43001;
                                }
                            }
                            if (sle32(wave_sizze_42988, skip_threads_43007)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_43007 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_42986, 32) == 0 ||
                          !ltid_in_bounds_43004)) {
                        // read operands
                        {
                            x_34045 = x_34044;
                            x_34044 = ((__local
                                        float *) red_arr_mem_42990)[sext_i32_i64(squot32(local_tid_42986,
                                                                                         32)) -
                                                                    (int64_t) 1];
                        }
                        // perform operation
                        {
                            bool inactive_43009 =
                                 slt64(srem64(sext_i32_i64(local_tid_42986),
                                              i32_res_28884),
                                       sext_i32_i64(local_tid_42986) -
                                       sext_i32_i64(squot32(local_tid_42986,
                                                            32) * 32 - 1));
                            
                            if (inactive_43009) {
                                x_34044 = x_34045;
                            }
                            if (!inactive_43009) {
                                float defunc_1_op_res_34046 = x_34044 + x_34045;
                                
                                x_34044 = defunc_1_op_res_34046;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_42990)[sext_i32_i64(local_tid_42986)] =
                                x_34044;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_42986, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_42990)[sext_i32_i64(local_tid_42986)] =
                            x_34045;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_42994) *
                      squot64(segred_group_sizze_34040,
                              segment_sizze_nonzzero_42983) +
                      sext_i32_i64(local_tid_42986), m_28875 * i32_res_28890 *
                      i32_res_28890) && slt64(sext_i32_i64(local_tid_42986),
                                              squot64(segred_group_sizze_34040,
                                                      segment_sizze_nonzzero_42983))) {
                ((__global
                  float *) mem_41585)[squot64(sext_i32_i64(virt_group_id_42994) *
                                              squot64(segred_group_sizze_34040,
                                                      segment_sizze_nonzzero_42983) +
                                              sext_i32_i64(local_tid_42986),
                                              i32_res_28890 * i32_res_28890) *
                                      (i32_res_28890 * i32_res_28890) +
                                      squot64(sext_i32_i64(virt_group_id_42994) *
                                              squot64(segred_group_sizze_34040,
                                                      segment_sizze_nonzzero_42983) +
                                              sext_i32_i64(local_tid_42986) -
                                              squot64(sext_i32_i64(virt_group_id_42994) *
                                                      squot64(segred_group_sizze_34040,
                                                              segment_sizze_nonzzero_42983) +
                                                      sext_i32_i64(local_tid_42986),
                                                      i32_res_28890 *
                                                      i32_res_28890) *
                                              (i32_res_28890 * i32_res_28890),
                                              i32_res_28890) * i32_res_28890 +
                                      (sext_i32_i64(virt_group_id_42994) *
                                       squot64(segred_group_sizze_34040,
                                               segment_sizze_nonzzero_42983) +
                                       sext_i32_i64(local_tid_42986) -
                                       squot64(sext_i32_i64(virt_group_id_42994) *
                                               squot64(segred_group_sizze_34040,
                                                       segment_sizze_nonzzero_42983) +
                                               sext_i32_i64(local_tid_42986),
                                               i32_res_28890 * i32_res_28890) *
                                       (i32_res_28890 * i32_res_28890) -
                                       squot64(sext_i32_i64(virt_group_id_42994) *
                                               squot64(segred_group_sizze_34040,
                                                       segment_sizze_nonzzero_42983) +
                                               sext_i32_i64(local_tid_42986) -
                                               squot64(sext_i32_i64(virt_group_id_42994) *
                                                       squot64(segred_group_sizze_34040,
                                                               segment_sizze_nonzzero_42983) +
                                                       sext_i32_i64(local_tid_42986),
                                                       i32_res_28890 *
                                                       i32_res_28890) *
                                               (i32_res_28890 * i32_res_28890),
                                               i32_res_28890) *
                                       i32_res_28890)] = ((__local
                                                           float *) red_arr_mem_42990)[(sext_i32_i64(local_tid_42986) +
                                                                                        (int64_t) 1) *
                                                                                       segment_sizze_nonzzero_42983 -
                                                                                       (int64_t) 1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_34040
}
__kernel void mainMagnitudezisegred_small_34866(__global int *global_failure,
                                                __local volatile
                                                int64_t *red_arr_mem_43228_backing_aligned_0,
                                                int64_t N_28874,
                                                int64_t m_28875,
                                                int64_t i32_res_28884,
                                                int64_t i32_res_28890,
                                                int64_t num_groups_34919,
                                                int64_t segment_sizze_nonzzero_43221,
                                                __global
                                                unsigned char *images_mem_41421,
                                                __global
                                                unsigned char *binop_p_mem_41432,
                                                __global
                                                unsigned char *mem_41907)
{
    #define segred_group_sizze_34918 (mainMagnitudezisegred_group_sizze_34860)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_43228_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43228_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43223;
    int32_t local_tid_43224;
    int64_t group_sizze_43227;
    int32_t wave_sizze_43226;
    int32_t group_tid_43225;
    
    global_tid_43223 = get_global_id(0);
    local_tid_43224 = get_local_id(0);
    group_sizze_43227 = get_local_size(0);
    wave_sizze_43226 = LOCKSTEP_WIDTH;
    group_tid_43225 = get_group_id(0);
    
    int32_t phys_tid_34866 = global_tid_43223;
    __local char *red_arr_mem_43228;
    
    red_arr_mem_43228 = (__local char *) red_arr_mem_43228_backing_0;
    
    int32_t phys_group_id_43230;
    
    phys_group_id_43230 = get_group_id(0);
    for (int32_t i_43231 = 0; i_43231 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_28875 * i32_res_28890,
                                          squot64(segred_group_sizze_34918,
                                                  segment_sizze_nonzzero_43221))) -
                   phys_group_id_43230, sext_i64_i32(num_groups_34919));
         i_43231++) {
        int32_t virt_group_id_43232 = phys_group_id_43230 + i_43231 *
                sext_i64_i32(num_groups_34919);
        int64_t slice_43233 = i32_res_28890;
        int64_t slice_43234 = m_28875 * slice_43233;
        int64_t gtid_34855 = squot64(squot64(sext_i32_i64(local_tid_43224),
                                             segment_sizze_nonzzero_43221) +
                                     sext_i32_i64(virt_group_id_43232) *
                                     squot64(segred_group_sizze_34918,
                                             segment_sizze_nonzzero_43221),
                                     slice_43233);
        int64_t remnant_43235 = squot64(sext_i32_i64(local_tid_43224),
                                        segment_sizze_nonzzero_43221) +
                sext_i32_i64(virt_group_id_43232) *
                squot64(segred_group_sizze_34918,
                        segment_sizze_nonzzero_43221) - gtid_34855 *
                slice_43233;
        int64_t gtid_34856 = remnant_43235;
        int64_t remnant_43236 = remnant_43235 - gtid_34856;
        int64_t gtid_34865 = srem64(sext_i32_i64(local_tid_43224),
                                    i32_res_28884);
        
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, i32_res_28884) && ((slt64(gtid_34855,
                                                             m_28875) &&
                                                       slt64(gtid_34856,
                                                             i32_res_28890)) &&
                                                      slt64(sext_i32_i64(local_tid_43224),
                                                            i32_res_28884 *
                                                            squot64(segred_group_sizze_34918,
                                                                    segment_sizze_nonzzero_43221)))) {
                float x_34928 = ((__global
                                  float *) images_mem_41421)[gtid_34855 *
                                                             N_28874 +
                                                             gtid_34865];
                bool isnan_res_34929;
                
                isnan_res_34929 = futrts_isnan32(x_34928);
                
                float defunc_1_f_res_34930;
                
                if (isnan_res_34929) {
                    defunc_1_f_res_34930 = 0.0F;
                } else {
                    float x_34927 = ((__global
                                      float *) binop_p_mem_41432)[gtid_34856 *
                                                                  N_28874 +
                                                                  gtid_34865];
                    float defunc_1_f_res_f_res_34931 = x_34927 * x_34928;
                    
                    defunc_1_f_res_34930 = defunc_1_f_res_f_res_34931;
                }
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_43228)[sext_i32_i64(local_tid_43224)] =
                        defunc_1_f_res_34930;
                }
            } else {
                ((__local
                  float *) red_arr_mem_43228)[sext_i32_i64(local_tid_43224)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, i32_res_28884)) {
            // perform segmented scan to imitate reduction
            {
                float x_34922;
                float x_34923;
                float x_43237;
                float x_43238;
                bool ltid_in_bounds_43240 = slt64(sext_i32_i64(local_tid_43224),
                                                  i32_res_28884 *
                                                  squot64(segred_group_sizze_34918,
                                                          segment_sizze_nonzzero_43221));
                int32_t skip_threads_43241;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_43240) {
                        x_34923 = ((volatile __local
                                    float *) red_arr_mem_43228)[sext_i32_i64(local_tid_43224)];
                        if ((local_tid_43224 - squot32(local_tid_43224, 32) *
                             32) == 0) {
                            x_34922 = x_34923;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_43241 = 1;
                    while (slt32(skip_threads_43241, 32)) {
                        if (sle32(skip_threads_43241, local_tid_43224 -
                                  squot32(local_tid_43224, 32) * 32) &&
                            ltid_in_bounds_43240) {
                            // read operands
                            {
                                x_34922 = ((volatile __local
                                            float *) red_arr_mem_43228)[sext_i32_i64(local_tid_43224) -
                                                                        sext_i32_i64(skip_threads_43241)];
                            }
                            // perform operation
                            {
                                bool inactive_43242 =
                                     slt64(srem64(sext_i32_i64(local_tid_43224),
                                                  i32_res_28884),
                                           sext_i32_i64(local_tid_43224) -
                                           sext_i32_i64(local_tid_43224 -
                                           skip_threads_43241));
                                
                                if (inactive_43242) {
                                    x_34922 = x_34923;
                                }
                                if (!inactive_43242) {
                                    float defunc_1_op_res_34924 = x_34922 +
                                          x_34923;
                                    
                                    x_34922 = defunc_1_op_res_34924;
                                }
                            }
                        }
                        if (sle32(wave_sizze_43226, skip_threads_43241)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_43241, local_tid_43224 -
                                  squot32(local_tid_43224, 32) * 32) &&
                            ltid_in_bounds_43240) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43228)[sext_i32_i64(local_tid_43224)] =
                                    x_34922;
                                x_34923 = x_34922;
                            }
                        }
                        if (sle32(wave_sizze_43226, skip_threads_43241)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_43241 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_43224 - squot32(local_tid_43224, 32) * 32) ==
                        31 && ltid_in_bounds_43240) {
                        ((volatile __local
                          float *) red_arr_mem_43228)[sext_i32_i64(squot32(local_tid_43224,
                                                                           32))] =
                            x_34922;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_43243;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_43224, 32) == 0 &&
                            ltid_in_bounds_43240) {
                            x_43238 = ((volatile __local
                                        float *) red_arr_mem_43228)[sext_i32_i64(local_tid_43224)];
                            if ((local_tid_43224 - squot32(local_tid_43224,
                                                           32) * 32) == 0) {
                                x_43237 = x_43238;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_43243 = 1;
                        while (slt32(skip_threads_43243, 32)) {
                            if (sle32(skip_threads_43243, local_tid_43224 -
                                      squot32(local_tid_43224, 32) * 32) &&
                                (squot32(local_tid_43224, 32) == 0 &&
                                 ltid_in_bounds_43240)) {
                                // read operands
                                {
                                    x_43237 = ((volatile __local
                                                float *) red_arr_mem_43228)[sext_i32_i64(local_tid_43224) -
                                                                            sext_i32_i64(skip_threads_43243)];
                                }
                                // perform operation
                                {
                                    bool inactive_43244 =
                                         slt64(srem64(sext_i32_i64(local_tid_43224 *
                                                      32 + 32 - 1),
                                                      i32_res_28884),
                                               sext_i32_i64(local_tid_43224 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_43224 -
                                                             skip_threads_43243) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_43244) {
                                        x_43237 = x_43238;
                                    }
                                    if (!inactive_43244) {
                                        float defunc_1_op_res_43239 = x_43237 +
                                              x_43238;
                                        
                                        x_43237 = defunc_1_op_res_43239;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_43226, skip_threads_43243)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_43243, local_tid_43224 -
                                      squot32(local_tid_43224, 32) * 32) &&
                                (squot32(local_tid_43224, 32) == 0 &&
                                 ltid_in_bounds_43240)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_43228)[sext_i32_i64(local_tid_43224)] =
                                        x_43237;
                                    x_43238 = x_43237;
                                }
                            }
                            if (sle32(wave_sizze_43226, skip_threads_43243)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_43243 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_43224, 32) == 0 ||
                          !ltid_in_bounds_43240)) {
                        // read operands
                        {
                            x_34923 = x_34922;
                            x_34922 = ((__local
                                        float *) red_arr_mem_43228)[sext_i32_i64(squot32(local_tid_43224,
                                                                                         32)) -
                                                                    (int64_t) 1];
                        }
                        // perform operation
                        {
                            bool inactive_43245 =
                                 slt64(srem64(sext_i32_i64(local_tid_43224),
                                              i32_res_28884),
                                       sext_i32_i64(local_tid_43224) -
                                       sext_i32_i64(squot32(local_tid_43224,
                                                            32) * 32 - 1));
                            
                            if (inactive_43245) {
                                x_34922 = x_34923;
                            }
                            if (!inactive_43245) {
                                float defunc_1_op_res_34924 = x_34922 + x_34923;
                                
                                x_34922 = defunc_1_op_res_34924;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_43228)[sext_i32_i64(local_tid_43224)] =
                                x_34922;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_43224, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_43228)[sext_i32_i64(local_tid_43224)] =
                            x_34923;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_43232) *
                      squot64(segred_group_sizze_34918,
                              segment_sizze_nonzzero_43221) +
                      sext_i32_i64(local_tid_43224), m_28875 * i32_res_28890) &&
                slt64(sext_i32_i64(local_tid_43224),
                      squot64(segred_group_sizze_34918,
                              segment_sizze_nonzzero_43221))) {
                ((__global
                  float *) mem_41907)[squot64(sext_i32_i64(virt_group_id_43232) *
                                              squot64(segred_group_sizze_34918,
                                                      segment_sizze_nonzzero_43221) +
                                              sext_i32_i64(local_tid_43224),
                                              i32_res_28890) * i32_res_28890 +
                                      (sext_i32_i64(virt_group_id_43232) *
                                       squot64(segred_group_sizze_34918,
                                               segment_sizze_nonzzero_43221) +
                                       sext_i32_i64(local_tid_43224) -
                                       squot64(sext_i32_i64(virt_group_id_43232) *
                                               squot64(segred_group_sizze_34918,
                                                       segment_sizze_nonzzero_43221) +
                                               sext_i32_i64(local_tid_43224),
                                               i32_res_28890) *
                                       i32_res_28890)] = ((__local
                                                           float *) red_arr_mem_43228)[(sext_i32_i64(local_tid_43224) +
                                                                                        (int64_t) 1) *
                                                                                       segment_sizze_nonzzero_43221 -
                                                                                       (int64_t) 1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_34918
}
__kernel void mainMagnitudezisegred_small_35003(__global int *global_failure,
                                                __local volatile
                                                int64_t *red_arr_mem_43331_backing_aligned_0,
                                                int64_t m_28875,
                                                int64_t i32_res_28890,
                                                int64_t num_groups_35052,
                                                int64_t segment_sizze_nonzzero_43324,
                                                __global
                                                unsigned char *defunc_3_map_res_mem_41687,
                                                __global
                                                unsigned char *defunc_3_map_res_mem_41914,
                                                __global
                                                unsigned char *mem_41979)
{
    #define segred_group_sizze_35051 (mainMagnitudezisegred_group_sizze_34997)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_43331_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43331_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43326;
    int32_t local_tid_43327;
    int64_t group_sizze_43330;
    int32_t wave_sizze_43329;
    int32_t group_tid_43328;
    
    global_tid_43326 = get_global_id(0);
    local_tid_43327 = get_local_id(0);
    group_sizze_43330 = get_local_size(0);
    wave_sizze_43329 = LOCKSTEP_WIDTH;
    group_tid_43328 = get_group_id(0);
    
    int32_t phys_tid_35003 = global_tid_43326;
    __local char *red_arr_mem_43331;
    
    red_arr_mem_43331 = (__local char *) red_arr_mem_43331_backing_0;
    
    int32_t phys_group_id_43333;
    
    phys_group_id_43333 = get_group_id(0);
    for (int32_t i_43334 = 0; i_43334 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_28875 * i32_res_28890,
                                          squot64(segred_group_sizze_35051,
                                                  segment_sizze_nonzzero_43324))) -
                   phys_group_id_43333, sext_i64_i32(num_groups_35052));
         i_43334++) {
        int32_t virt_group_id_43335 = phys_group_id_43333 + i_43334 *
                sext_i64_i32(num_groups_35052);
        int64_t slice_43336 = i32_res_28890;
        int64_t slice_43337 = m_28875 * slice_43336;
        int64_t gtid_34992 = squot64(squot64(sext_i32_i64(local_tid_43327),
                                             segment_sizze_nonzzero_43324) +
                                     sext_i32_i64(virt_group_id_43335) *
                                     squot64(segred_group_sizze_35051,
                                             segment_sizze_nonzzero_43324),
                                     slice_43336);
        int64_t remnant_43338 = squot64(sext_i32_i64(local_tid_43327),
                                        segment_sizze_nonzzero_43324) +
                sext_i32_i64(virt_group_id_43335) *
                squot64(segred_group_sizze_35051,
                        segment_sizze_nonzzero_43324) - gtid_34992 *
                slice_43336;
        int64_t gtid_34993 = remnant_43338;
        int64_t remnant_43339 = remnant_43338 - gtid_34993;
        int64_t gtid_35002 = srem64(sext_i32_i64(local_tid_43327),
                                    i32_res_28890);
        
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, i32_res_28890) && ((slt64(gtid_34992,
                                                             m_28875) &&
                                                       slt64(gtid_34993,
                                                             i32_res_28890)) &&
                                                      slt64(sext_i32_i64(local_tid_43327),
                                                            i32_res_28890 *
                                                            squot64(segred_group_sizze_35051,
                                                                    segment_sizze_nonzzero_43324)))) {
                float x_35061 = ((__global
                                  float *) defunc_3_map_res_mem_41914)[gtid_34992 *
                                                                       i32_res_28890 +
                                                                       gtid_35002];
                float x_35062 = ((__global
                                  float *) defunc_3_map_res_mem_41687)[gtid_34992 *
                                                                       (i32_res_28890 *
                                                                        i32_res_28890) +
                                                                       gtid_34993 *
                                                                       i32_res_28890 +
                                                                       gtid_35002];
                float defunc_1_f_res_35063 = x_35061 * x_35062;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_43331)[sext_i32_i64(local_tid_43327)] =
                        defunc_1_f_res_35063;
                }
            } else {
                ((__local
                  float *) red_arr_mem_43331)[sext_i32_i64(local_tid_43327)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, i32_res_28890)) {
            // perform segmented scan to imitate reduction
            {
                float x_35055;
                float x_35056;
                float x_43340;
                float x_43341;
                bool ltid_in_bounds_43343 = slt64(sext_i32_i64(local_tid_43327),
                                                  i32_res_28890 *
                                                  squot64(segred_group_sizze_35051,
                                                          segment_sizze_nonzzero_43324));
                int32_t skip_threads_43344;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_43343) {
                        x_35056 = ((volatile __local
                                    float *) red_arr_mem_43331)[sext_i32_i64(local_tid_43327)];
                        if ((local_tid_43327 - squot32(local_tid_43327, 32) *
                             32) == 0) {
                            x_35055 = x_35056;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_43344 = 1;
                    while (slt32(skip_threads_43344, 32)) {
                        if (sle32(skip_threads_43344, local_tid_43327 -
                                  squot32(local_tid_43327, 32) * 32) &&
                            ltid_in_bounds_43343) {
                            // read operands
                            {
                                x_35055 = ((volatile __local
                                            float *) red_arr_mem_43331)[sext_i32_i64(local_tid_43327) -
                                                                        sext_i32_i64(skip_threads_43344)];
                            }
                            // perform operation
                            {
                                bool inactive_43345 =
                                     slt64(srem64(sext_i32_i64(local_tid_43327),
                                                  i32_res_28890),
                                           sext_i32_i64(local_tid_43327) -
                                           sext_i32_i64(local_tid_43327 -
                                           skip_threads_43344));
                                
                                if (inactive_43345) {
                                    x_35055 = x_35056;
                                }
                                if (!inactive_43345) {
                                    float defunc_1_op_res_35057 = x_35055 +
                                          x_35056;
                                    
                                    x_35055 = defunc_1_op_res_35057;
                                }
                            }
                        }
                        if (sle32(wave_sizze_43329, skip_threads_43344)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_43344, local_tid_43327 -
                                  squot32(local_tid_43327, 32) * 32) &&
                            ltid_in_bounds_43343) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43331)[sext_i32_i64(local_tid_43327)] =
                                    x_35055;
                                x_35056 = x_35055;
                            }
                        }
                        if (sle32(wave_sizze_43329, skip_threads_43344)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_43344 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_43327 - squot32(local_tid_43327, 32) * 32) ==
                        31 && ltid_in_bounds_43343) {
                        ((volatile __local
                          float *) red_arr_mem_43331)[sext_i32_i64(squot32(local_tid_43327,
                                                                           32))] =
                            x_35055;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_43346;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_43327, 32) == 0 &&
                            ltid_in_bounds_43343) {
                            x_43341 = ((volatile __local
                                        float *) red_arr_mem_43331)[sext_i32_i64(local_tid_43327)];
                            if ((local_tid_43327 - squot32(local_tid_43327,
                                                           32) * 32) == 0) {
                                x_43340 = x_43341;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_43346 = 1;
                        while (slt32(skip_threads_43346, 32)) {
                            if (sle32(skip_threads_43346, local_tid_43327 -
                                      squot32(local_tid_43327, 32) * 32) &&
                                (squot32(local_tid_43327, 32) == 0 &&
                                 ltid_in_bounds_43343)) {
                                // read operands
                                {
                                    x_43340 = ((volatile __local
                                                float *) red_arr_mem_43331)[sext_i32_i64(local_tid_43327) -
                                                                            sext_i32_i64(skip_threads_43346)];
                                }
                                // perform operation
                                {
                                    bool inactive_43347 =
                                         slt64(srem64(sext_i32_i64(local_tid_43327 *
                                                      32 + 32 - 1),
                                                      i32_res_28890),
                                               sext_i32_i64(local_tid_43327 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_43327 -
                                                             skip_threads_43346) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_43347) {
                                        x_43340 = x_43341;
                                    }
                                    if (!inactive_43347) {
                                        float defunc_1_op_res_43342 = x_43340 +
                                              x_43341;
                                        
                                        x_43340 = defunc_1_op_res_43342;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_43329, skip_threads_43346)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_43346, local_tid_43327 -
                                      squot32(local_tid_43327, 32) * 32) &&
                                (squot32(local_tid_43327, 32) == 0 &&
                                 ltid_in_bounds_43343)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_43331)[sext_i32_i64(local_tid_43327)] =
                                        x_43340;
                                    x_43341 = x_43340;
                                }
                            }
                            if (sle32(wave_sizze_43329, skip_threads_43346)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_43346 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_43327, 32) == 0 ||
                          !ltid_in_bounds_43343)) {
                        // read operands
                        {
                            x_35056 = x_35055;
                            x_35055 = ((__local
                                        float *) red_arr_mem_43331)[sext_i32_i64(squot32(local_tid_43327,
                                                                                         32)) -
                                                                    (int64_t) 1];
                        }
                        // perform operation
                        {
                            bool inactive_43348 =
                                 slt64(srem64(sext_i32_i64(local_tid_43327),
                                              i32_res_28890),
                                       sext_i32_i64(local_tid_43327) -
                                       sext_i32_i64(squot32(local_tid_43327,
                                                            32) * 32 - 1));
                            
                            if (inactive_43348) {
                                x_35055 = x_35056;
                            }
                            if (!inactive_43348) {
                                float defunc_1_op_res_35057 = x_35055 + x_35056;
                                
                                x_35055 = defunc_1_op_res_35057;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_43331)[sext_i32_i64(local_tid_43327)] =
                                x_35055;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_43327, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_43331)[sext_i32_i64(local_tid_43327)] =
                            x_35056;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_43335) *
                      squot64(segred_group_sizze_35051,
                              segment_sizze_nonzzero_43324) +
                      sext_i32_i64(local_tid_43327), m_28875 * i32_res_28890) &&
                slt64(sext_i32_i64(local_tid_43327),
                      squot64(segred_group_sizze_35051,
                              segment_sizze_nonzzero_43324))) {
                ((__global
                  float *) mem_41979)[squot64(sext_i32_i64(virt_group_id_43335) *
                                              squot64(segred_group_sizze_35051,
                                                      segment_sizze_nonzzero_43324) +
                                              sext_i32_i64(local_tid_43327),
                                              i32_res_28890) * i32_res_28890 +
                                      (sext_i32_i64(virt_group_id_43335) *
                                       squot64(segred_group_sizze_35051,
                                               segment_sizze_nonzzero_43324) +
                                       sext_i32_i64(local_tid_43327) -
                                       squot64(sext_i32_i64(virt_group_id_43335) *
                                               squot64(segred_group_sizze_35051,
                                                       segment_sizze_nonzzero_43324) +
                                               sext_i32_i64(local_tid_43327),
                                               i32_res_28890) *
                                       i32_res_28890)] = ((__local
                                                           float *) red_arr_mem_43331)[(sext_i32_i64(local_tid_43327) +
                                                                                        (int64_t) 1) *
                                                                                       segment_sizze_nonzzero_43324 -
                                                                                       (int64_t) 1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_35051
}
__kernel void mainMagnitudezisegred_small_35133(__global int *global_failure,
                                                __local volatile
                                                int64_t *red_arr_mem_43478_backing_aligned_0,
                                                int64_t N_28874,
                                                int64_t m_28875,
                                                int64_t i32_res_28890,
                                                int64_t num_groups_35180,
                                                int64_t segment_sizze_nonzzero_43471,
                                                __global
                                                unsigned char *mem_41440,
                                                __global
                                                unsigned char *defunc_4_map_res_mem_41986,
                                                __global
                                                unsigned char *mem_42209)
{
    #define segred_group_sizze_35179 (mainMagnitudezisegred_group_sizze_35127)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_43478_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43478_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43473;
    int32_t local_tid_43474;
    int64_t group_sizze_43477;
    int32_t wave_sizze_43476;
    int32_t group_tid_43475;
    
    global_tid_43473 = get_global_id(0);
    local_tid_43474 = get_local_id(0);
    group_sizze_43477 = get_local_size(0);
    wave_sizze_43476 = LOCKSTEP_WIDTH;
    group_tid_43475 = get_group_id(0);
    
    int32_t phys_tid_35133 = global_tid_43473;
    __local char *red_arr_mem_43478;
    
    red_arr_mem_43478 = (__local char *) red_arr_mem_43478_backing_0;
    
    int32_t phys_group_id_43480;
    
    phys_group_id_43480 = get_group_id(0);
    for (int32_t i_43481 = 0; i_43481 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_28875 * N_28874,
                                          squot64(segred_group_sizze_35179,
                                                  segment_sizze_nonzzero_43471))) -
                   phys_group_id_43480, sext_i64_i32(num_groups_35180));
         i_43481++) {
        int32_t virt_group_id_43482 = phys_group_id_43480 + i_43481 *
                sext_i64_i32(num_groups_35180);
        int64_t slice_43483 = N_28874;
        int64_t slice_43484 = m_28875 * slice_43483;
        int64_t gtid_35122 = squot64(squot64(sext_i32_i64(local_tid_43474),
                                             segment_sizze_nonzzero_43471) +
                                     sext_i32_i64(virt_group_id_43482) *
                                     squot64(segred_group_sizze_35179,
                                             segment_sizze_nonzzero_43471),
                                     slice_43483);
        int64_t remnant_43485 = squot64(sext_i32_i64(local_tid_43474),
                                        segment_sizze_nonzzero_43471) +
                sext_i32_i64(virt_group_id_43482) *
                squot64(segred_group_sizze_35179,
                        segment_sizze_nonzzero_43471) - gtid_35122 *
                slice_43483;
        int64_t gtid_35123 = remnant_43485;
        int64_t remnant_43486 = remnant_43485 - gtid_35123;
        int64_t gtid_35132 = srem64(sext_i32_i64(local_tid_43474),
                                    i32_res_28890);
        
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, i32_res_28890) && ((slt64(gtid_35122,
                                                             m_28875) &&
                                                       slt64(gtid_35123,
                                                             N_28874)) &&
                                                      slt64(sext_i32_i64(local_tid_43474),
                                                            i32_res_28890 *
                                                            squot64(segred_group_sizze_35179,
                                                                    segment_sizze_nonzzero_43471)))) {
                float x_35188 = ((__global
                                  float *) defunc_4_map_res_mem_41986)[gtid_35122 *
                                                                       i32_res_28890 +
                                                                       gtid_35132];
                float x_35189 = ((__global float *) mem_41440)[gtid_35123 *
                                                               i32_res_28890 +
                                                               gtid_35132];
                float defunc_1_f_res_35190 = x_35188 * x_35189;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_43478)[sext_i32_i64(local_tid_43474)] =
                        defunc_1_f_res_35190;
                }
            } else {
                ((__local
                  float *) red_arr_mem_43478)[sext_i32_i64(local_tid_43474)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, i32_res_28890)) {
            // perform segmented scan to imitate reduction
            {
                float x_35183;
                float x_35184;
                float x_43487;
                float x_43488;
                bool ltid_in_bounds_43490 = slt64(sext_i32_i64(local_tid_43474),
                                                  i32_res_28890 *
                                                  squot64(segred_group_sizze_35179,
                                                          segment_sizze_nonzzero_43471));
                int32_t skip_threads_43491;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_43490) {
                        x_35184 = ((volatile __local
                                    float *) red_arr_mem_43478)[sext_i32_i64(local_tid_43474)];
                        if ((local_tid_43474 - squot32(local_tid_43474, 32) *
                             32) == 0) {
                            x_35183 = x_35184;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_43491 = 1;
                    while (slt32(skip_threads_43491, 32)) {
                        if (sle32(skip_threads_43491, local_tid_43474 -
                                  squot32(local_tid_43474, 32) * 32) &&
                            ltid_in_bounds_43490) {
                            // read operands
                            {
                                x_35183 = ((volatile __local
                                            float *) red_arr_mem_43478)[sext_i32_i64(local_tid_43474) -
                                                                        sext_i32_i64(skip_threads_43491)];
                            }
                            // perform operation
                            {
                                bool inactive_43492 =
                                     slt64(srem64(sext_i32_i64(local_tid_43474),
                                                  i32_res_28890),
                                           sext_i32_i64(local_tid_43474) -
                                           sext_i32_i64(local_tid_43474 -
                                           skip_threads_43491));
                                
                                if (inactive_43492) {
                                    x_35183 = x_35184;
                                }
                                if (!inactive_43492) {
                                    float defunc_1_op_res_35185 = x_35183 +
                                          x_35184;
                                    
                                    x_35183 = defunc_1_op_res_35185;
                                }
                            }
                        }
                        if (sle32(wave_sizze_43476, skip_threads_43491)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_43491, local_tid_43474 -
                                  squot32(local_tid_43474, 32) * 32) &&
                            ltid_in_bounds_43490) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43478)[sext_i32_i64(local_tid_43474)] =
                                    x_35183;
                                x_35184 = x_35183;
                            }
                        }
                        if (sle32(wave_sizze_43476, skip_threads_43491)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_43491 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_43474 - squot32(local_tid_43474, 32) * 32) ==
                        31 && ltid_in_bounds_43490) {
                        ((volatile __local
                          float *) red_arr_mem_43478)[sext_i32_i64(squot32(local_tid_43474,
                                                                           32))] =
                            x_35183;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_43493;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_43474, 32) == 0 &&
                            ltid_in_bounds_43490) {
                            x_43488 = ((volatile __local
                                        float *) red_arr_mem_43478)[sext_i32_i64(local_tid_43474)];
                            if ((local_tid_43474 - squot32(local_tid_43474,
                                                           32) * 32) == 0) {
                                x_43487 = x_43488;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_43493 = 1;
                        while (slt32(skip_threads_43493, 32)) {
                            if (sle32(skip_threads_43493, local_tid_43474 -
                                      squot32(local_tid_43474, 32) * 32) &&
                                (squot32(local_tid_43474, 32) == 0 &&
                                 ltid_in_bounds_43490)) {
                                // read operands
                                {
                                    x_43487 = ((volatile __local
                                                float *) red_arr_mem_43478)[sext_i32_i64(local_tid_43474) -
                                                                            sext_i32_i64(skip_threads_43493)];
                                }
                                // perform operation
                                {
                                    bool inactive_43494 =
                                         slt64(srem64(sext_i32_i64(local_tid_43474 *
                                                      32 + 32 - 1),
                                                      i32_res_28890),
                                               sext_i32_i64(local_tid_43474 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_43474 -
                                                             skip_threads_43493) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_43494) {
                                        x_43487 = x_43488;
                                    }
                                    if (!inactive_43494) {
                                        float defunc_1_op_res_43489 = x_43487 +
                                              x_43488;
                                        
                                        x_43487 = defunc_1_op_res_43489;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_43476, skip_threads_43493)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_43493, local_tid_43474 -
                                      squot32(local_tid_43474, 32) * 32) &&
                                (squot32(local_tid_43474, 32) == 0 &&
                                 ltid_in_bounds_43490)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_43478)[sext_i32_i64(local_tid_43474)] =
                                        x_43487;
                                    x_43488 = x_43487;
                                }
                            }
                            if (sle32(wave_sizze_43476, skip_threads_43493)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_43493 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_43474, 32) == 0 ||
                          !ltid_in_bounds_43490)) {
                        // read operands
                        {
                            x_35184 = x_35183;
                            x_35183 = ((__local
                                        float *) red_arr_mem_43478)[sext_i32_i64(squot32(local_tid_43474,
                                                                                         32)) -
                                                                    (int64_t) 1];
                        }
                        // perform operation
                        {
                            bool inactive_43495 =
                                 slt64(srem64(sext_i32_i64(local_tid_43474),
                                              i32_res_28890),
                                       sext_i32_i64(local_tid_43474) -
                                       sext_i32_i64(squot32(local_tid_43474,
                                                            32) * 32 - 1));
                            
                            if (inactive_43495) {
                                x_35183 = x_35184;
                            }
                            if (!inactive_43495) {
                                float defunc_1_op_res_35185 = x_35183 + x_35184;
                                
                                x_35183 = defunc_1_op_res_35185;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_43478)[sext_i32_i64(local_tid_43474)] =
                                x_35183;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_43474, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_43478)[sext_i32_i64(local_tid_43474)] =
                            x_35184;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_43482) *
                      squot64(segred_group_sizze_35179,
                              segment_sizze_nonzzero_43471) +
                      sext_i32_i64(local_tid_43474), m_28875 * N_28874) &&
                slt64(sext_i32_i64(local_tid_43474),
                      squot64(segred_group_sizze_35179,
                              segment_sizze_nonzzero_43471))) {
                ((__global
                  float *) mem_42209)[squot64(sext_i32_i64(virt_group_id_43482) *
                                              squot64(segred_group_sizze_35179,
                                                      segment_sizze_nonzzero_43471) +
                                              sext_i32_i64(local_tid_43474),
                                              N_28874) * N_28874 +
                                      (sext_i32_i64(virt_group_id_43482) *
                                       squot64(segred_group_sizze_35179,
                                               segment_sizze_nonzzero_43471) +
                                       sext_i32_i64(local_tid_43474) -
                                       squot64(sext_i32_i64(virt_group_id_43482) *
                                               squot64(segred_group_sizze_35179,
                                                       segment_sizze_nonzzero_43471) +
                                               sext_i32_i64(local_tid_43474),
                                               N_28874) * N_28874)] = ((__local
                                                                        float *) red_arr_mem_43478)[(sext_i32_i64(local_tid_43474) +
                                                                                                     (int64_t) 1) *
                                                                                                    segment_sizze_nonzzero_43471 -
                                                                                                    (int64_t) 1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_35179
}
__kernel void mainMagnitudezisegred_small_35588(__global int *global_failure,
                                                int failure_is_an_option,
                                                __global
                                                int64_t *global_failure_args,
                                                __local volatile
                                                int64_t *red_arr_mem_43756_backing_aligned_0,
                                                int64_t N_28874,
                                                int64_t m_28875,
                                                int64_t i32_res_28884,
                                                int64_t num_groups_35639,
                                                int64_t segment_sizze_nonzzero_43749,
                                                __global
                                                unsigned char *defunc_4_map_res_mem_42266,
                                                __global
                                                unsigned char *mem_42329,
                                                __global
                                                unsigned char *mem_42333)
{
    #define segred_group_sizze_35638 (mainMagnitudezisegred_group_sizze_35582)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_43756_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43756_backing_aligned_0;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43751;
    int32_t local_tid_43752;
    int64_t group_sizze_43755;
    int32_t wave_sizze_43754;
    int32_t group_tid_43753;
    
    global_tid_43751 = get_global_id(0);
    local_tid_43752 = get_local_id(0);
    group_sizze_43755 = get_local_size(0);
    wave_sizze_43754 = LOCKSTEP_WIDTH;
    group_tid_43753 = get_group_id(0);
    
    int32_t phys_tid_35588 = global_tid_43751;
    __local char *red_arr_mem_43756;
    
    red_arr_mem_43756 = (__local char *) red_arr_mem_43756_backing_0;
    
    int32_t phys_group_id_43758;
    
    phys_group_id_43758 = get_group_id(0);
    for (int32_t i_43759 = 0; i_43759 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_28875,
                                          squot64(segred_group_sizze_35638,
                                                  segment_sizze_nonzzero_43749))) -
                   phys_group_id_43758, sext_i64_i32(num_groups_35639));
         i_43759++) {
        int32_t virt_group_id_43760 = phys_group_id_43758 + i_43759 *
                sext_i64_i32(num_groups_35639);
        int64_t slice_43761 = m_28875;
        int64_t gtid_35579 = squot64(sext_i32_i64(local_tid_43752),
                                     segment_sizze_nonzzero_43749) +
                sext_i32_i64(virt_group_id_43760) *
                squot64(segred_group_sizze_35638, segment_sizze_nonzzero_43749);
        int64_t remnant_43762 = squot64(sext_i32_i64(local_tid_43752),
                                        segment_sizze_nonzzero_43749) +
                sext_i32_i64(virt_group_id_43760) *
                squot64(segred_group_sizze_35638,
                        segment_sizze_nonzzero_43749) - gtid_35579;
        int64_t gtid_35587 = srem64(sext_i32_i64(local_tid_43752),
                                    i32_res_28884);
        
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, i32_res_28884) && (slt64(gtid_35579,
                                                            m_28875) &&
                                                      slt64(sext_i32_i64(local_tid_43752),
                                                            i32_res_28884 *
                                                            squot64(segred_group_sizze_35638,
                                                                    segment_sizze_nonzzero_43749)))) {
                int32_t defunc_0_f_res_35646 = ((__global
                                                 int32_t *) mem_42329)[gtid_35579];
                int32_t index_primexp_39436 = sext_i64_i32(gtid_35587);
                bool cond_35648 = slt32(index_primexp_39436,
                                        defunc_0_f_res_35646);
                float defunc_0_f_res_35649;
                
                if (cond_35648) {
                    int64_t i_35650 = sext_i32_i64(index_primexp_39436);
                    bool x_35651 = sle64((int64_t) 0, i_35650);
                    bool y_35652 = slt64(i_35650, N_28874);
                    bool bounds_check_35653 = x_35651 && y_35652;
                    bool index_certs_35654;
                    
                    if (!bounds_check_35653) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          97) == -1) {
                                global_failure_args[0] = i_35650;
                                global_failure_args[1] = N_28874;
                                ;
                            }
                            local_failure = true;
                            goto error_0;
                        }
                    }
                    
                    float defunc_0_f_res_t_res_35655 = ((__global
                                                         float *) defunc_4_map_res_mem_42266)[gtid_35579 *
                                                                                              N_28874 +
                                                                                              i_35650];
                    
                    defunc_0_f_res_35649 = defunc_0_f_res_t_res_35655;
                } else {
                    defunc_0_f_res_35649 = 0.0F;
                }
                
                float defunc_0_f_res_35656 = defunc_0_f_res_35649 *
                      defunc_0_f_res_35649;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_43756)[sext_i32_i64(local_tid_43752)] =
                        defunc_0_f_res_35656;
                }
            } else {
                ((__local
                  float *) red_arr_mem_43756)[sext_i32_i64(local_tid_43752)] =
                    0.0F;
            }
        }
        
      error_0:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, i32_res_28884)) {
            // perform segmented scan to imitate reduction
            {
                float x_35642;
                float x_35643;
                float x_43763;
                float x_43764;
                bool ltid_in_bounds_43766 = slt64(sext_i32_i64(local_tid_43752),
                                                  i32_res_28884 *
                                                  squot64(segred_group_sizze_35638,
                                                          segment_sizze_nonzzero_43749));
                int32_t skip_threads_43767;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_43766) {
                        x_35643 = ((volatile __local
                                    float *) red_arr_mem_43756)[sext_i32_i64(local_tid_43752)];
                        if ((local_tid_43752 - squot32(local_tid_43752, 32) *
                             32) == 0) {
                            x_35642 = x_35643;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_43767 = 1;
                    while (slt32(skip_threads_43767, 32)) {
                        if (sle32(skip_threads_43767, local_tid_43752 -
                                  squot32(local_tid_43752, 32) * 32) &&
                            ltid_in_bounds_43766) {
                            // read operands
                            {
                                x_35642 = ((volatile __local
                                            float *) red_arr_mem_43756)[sext_i32_i64(local_tid_43752) -
                                                                        sext_i32_i64(skip_threads_43767)];
                            }
                            // perform operation
                            {
                                bool inactive_43768 =
                                     slt64(srem64(sext_i32_i64(local_tid_43752),
                                                  i32_res_28884),
                                           sext_i32_i64(local_tid_43752) -
                                           sext_i32_i64(local_tid_43752 -
                                           skip_threads_43767));
                                
                                if (inactive_43768) {
                                    x_35642 = x_35643;
                                }
                                if (!inactive_43768) {
                                    float defunc_1_op_res_35644 = x_35642 +
                                          x_35643;
                                    
                                    x_35642 = defunc_1_op_res_35644;
                                }
                            }
                        }
                        if (sle32(wave_sizze_43754, skip_threads_43767)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_43767, local_tid_43752 -
                                  squot32(local_tid_43752, 32) * 32) &&
                            ltid_in_bounds_43766) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43756)[sext_i32_i64(local_tid_43752)] =
                                    x_35642;
                                x_35643 = x_35642;
                            }
                        }
                        if (sle32(wave_sizze_43754, skip_threads_43767)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_43767 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_43752 - squot32(local_tid_43752, 32) * 32) ==
                        31 && ltid_in_bounds_43766) {
                        ((volatile __local
                          float *) red_arr_mem_43756)[sext_i32_i64(squot32(local_tid_43752,
                                                                           32))] =
                            x_35642;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_43769;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_43752, 32) == 0 &&
                            ltid_in_bounds_43766) {
                            x_43764 = ((volatile __local
                                        float *) red_arr_mem_43756)[sext_i32_i64(local_tid_43752)];
                            if ((local_tid_43752 - squot32(local_tid_43752,
                                                           32) * 32) == 0) {
                                x_43763 = x_43764;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_43769 = 1;
                        while (slt32(skip_threads_43769, 32)) {
                            if (sle32(skip_threads_43769, local_tid_43752 -
                                      squot32(local_tid_43752, 32) * 32) &&
                                (squot32(local_tid_43752, 32) == 0 &&
                                 ltid_in_bounds_43766)) {
                                // read operands
                                {
                                    x_43763 = ((volatile __local
                                                float *) red_arr_mem_43756)[sext_i32_i64(local_tid_43752) -
                                                                            sext_i32_i64(skip_threads_43769)];
                                }
                                // perform operation
                                {
                                    bool inactive_43770 =
                                         slt64(srem64(sext_i32_i64(local_tid_43752 *
                                                      32 + 32 - 1),
                                                      i32_res_28884),
                                               sext_i32_i64(local_tid_43752 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_43752 -
                                                             skip_threads_43769) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_43770) {
                                        x_43763 = x_43764;
                                    }
                                    if (!inactive_43770) {
                                        float defunc_1_op_res_43765 = x_43763 +
                                              x_43764;
                                        
                                        x_43763 = defunc_1_op_res_43765;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_43754, skip_threads_43769)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_43769, local_tid_43752 -
                                      squot32(local_tid_43752, 32) * 32) &&
                                (squot32(local_tid_43752, 32) == 0 &&
                                 ltid_in_bounds_43766)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_43756)[sext_i32_i64(local_tid_43752)] =
                                        x_43763;
                                    x_43764 = x_43763;
                                }
                            }
                            if (sle32(wave_sizze_43754, skip_threads_43769)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_43769 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_43752, 32) == 0 ||
                          !ltid_in_bounds_43766)) {
                        // read operands
                        {
                            x_35643 = x_35642;
                            x_35642 = ((__local
                                        float *) red_arr_mem_43756)[sext_i32_i64(squot32(local_tid_43752,
                                                                                         32)) -
                                                                    (int64_t) 1];
                        }
                        // perform operation
                        {
                            bool inactive_43771 =
                                 slt64(srem64(sext_i32_i64(local_tid_43752),
                                              i32_res_28884),
                                       sext_i32_i64(local_tid_43752) -
                                       sext_i32_i64(squot32(local_tid_43752,
                                                            32) * 32 - 1));
                            
                            if (inactive_43771) {
                                x_35642 = x_35643;
                            }
                            if (!inactive_43771) {
                                float defunc_1_op_res_35644 = x_35642 + x_35643;
                                
                                x_35642 = defunc_1_op_res_35644;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_43756)[sext_i32_i64(local_tid_43752)] =
                                x_35642;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_43752, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_43756)[sext_i32_i64(local_tid_43752)] =
                            x_35643;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_43760) *
                      squot64(segred_group_sizze_35638,
                              segment_sizze_nonzzero_43749) +
                      sext_i32_i64(local_tid_43752), m_28875) &&
                slt64(sext_i32_i64(local_tid_43752),
                      squot64(segred_group_sizze_35638,
                              segment_sizze_nonzzero_43749))) {
                ((__global
                  float *) mem_42333)[sext_i32_i64(virt_group_id_43760) *
                                      squot64(segred_group_sizze_35638,
                                              segment_sizze_nonzzero_43749) +
                                      sext_i32_i64(local_tid_43752)] = ((__local
                                                                         float *) red_arr_mem_43756)[(sext_i32_i64(local_tid_43752) +
                                                                                                      (int64_t) 1) *
                                                                                                     segment_sizze_nonzzero_43749 -
                                                                                                     (int64_t) 1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_35638
}
__kernel void mainMagnitudezisegred_small_35613(__global int *global_failure,
                                                __local volatile
                                                int64_t *red_arr_mem_43692_backing_aligned_0,
                                                int64_t N_28874,
                                                int64_t m_28875,
                                                int64_t i32_res_28884,
                                                int64_t num_groups_35625,
                                                int64_t segment_sizze_nonzzero_43685,
                                                __global
                                                unsigned char *images_mem_41421,
                                                __global
                                                unsigned char *mem_42329)
{
    #define segred_group_sizze_35624 (mainMagnitudezisegred_group_sizze_35607)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_43692_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43692_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_43687;
    int32_t local_tid_43688;
    int64_t group_sizze_43691;
    int32_t wave_sizze_43690;
    int32_t group_tid_43689;
    
    global_tid_43687 = get_global_id(0);
    local_tid_43688 = get_local_id(0);
    group_sizze_43691 = get_local_size(0);
    wave_sizze_43690 = LOCKSTEP_WIDTH;
    group_tid_43689 = get_group_id(0);
    
    int32_t phys_tid_35613 = global_tid_43687;
    __local char *red_arr_mem_43692;
    
    red_arr_mem_43692 = (__local char *) red_arr_mem_43692_backing_0;
    
    int32_t phys_group_id_43694;
    
    phys_group_id_43694 = get_group_id(0);
    for (int32_t i_43695 = 0; i_43695 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_28875,
                                          squot64(segred_group_sizze_35624,
                                                  segment_sizze_nonzzero_43685))) -
                   phys_group_id_43694, sext_i64_i32(num_groups_35625));
         i_43695++) {
        int32_t virt_group_id_43696 = phys_group_id_43694 + i_43695 *
                sext_i64_i32(num_groups_35625);
        int64_t slice_43697 = m_28875;
        int64_t gtid_35604 = squot64(sext_i32_i64(local_tid_43688),
                                     segment_sizze_nonzzero_43685) +
                sext_i32_i64(virt_group_id_43696) *
                squot64(segred_group_sizze_35624, segment_sizze_nonzzero_43685);
        int64_t remnant_43698 = squot64(sext_i32_i64(local_tid_43688),
                                        segment_sizze_nonzzero_43685) +
                sext_i32_i64(virt_group_id_43696) *
                squot64(segred_group_sizze_35624,
                        segment_sizze_nonzzero_43685) - gtid_35604;
        int64_t gtid_35612 = srem64(sext_i32_i64(local_tid_43688),
                                    i32_res_28884);
        
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, i32_res_28884) && (slt64(gtid_35604,
                                                            m_28875) &&
                                                      slt64(sext_i32_i64(local_tid_43688),
                                                            i32_res_28884 *
                                                            squot64(segred_group_sizze_35624,
                                                                    segment_sizze_nonzzero_43685)))) {
                float x_35632 = ((__global
                                  float *) images_mem_41421)[gtid_35604 *
                                                             N_28874 +
                                                             gtid_35612];
                bool isnan_res_35633;
                
                isnan_res_35633 = futrts_isnan32(x_35632);
                
                bool cond_35634 = !isnan_res_35633;
                int32_t defunc_0_f_res_35635 = btoi_bool_i32(cond_35634);
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      int32_t *) red_arr_mem_43692)[sext_i32_i64(local_tid_43688)] =
                        defunc_0_f_res_35635;
                }
            } else {
                ((__local
                  int32_t *) red_arr_mem_43692)[sext_i32_i64(local_tid_43688)] =
                    0;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, i32_res_28884)) {
            // perform segmented scan to imitate reduction
            {
                int32_t x_35628;
                int32_t x_35629;
                int32_t x_43699;
                int32_t x_43700;
                bool ltid_in_bounds_43702 = slt64(sext_i32_i64(local_tid_43688),
                                                  i32_res_28884 *
                                                  squot64(segred_group_sizze_35624,
                                                          segment_sizze_nonzzero_43685));
                int32_t skip_threads_43703;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_43702) {
                        x_35629 = ((volatile __local
                                    int32_t *) red_arr_mem_43692)[sext_i32_i64(local_tid_43688)];
                        if ((local_tid_43688 - squot32(local_tid_43688, 32) *
                             32) == 0) {
                            x_35628 = x_35629;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_43703 = 1;
                    while (slt32(skip_threads_43703, 32)) {
                        if (sle32(skip_threads_43703, local_tid_43688 -
                                  squot32(local_tid_43688, 32) * 32) &&
                            ltid_in_bounds_43702) {
                            // read operands
                            {
                                x_35628 = ((volatile __local
                                            int32_t *) red_arr_mem_43692)[sext_i32_i64(local_tid_43688) -
                                                                          sext_i32_i64(skip_threads_43703)];
                            }
                            // perform operation
                            {
                                bool inactive_43704 =
                                     slt64(srem64(sext_i32_i64(local_tid_43688),
                                                  i32_res_28884),
                                           sext_i32_i64(local_tid_43688) -
                                           sext_i32_i64(local_tid_43688 -
                                           skip_threads_43703));
                                
                                if (inactive_43704) {
                                    x_35628 = x_35629;
                                }
                                if (!inactive_43704) {
                                    int32_t defunc_1_op_res_35630 =
                                            add32(x_35628, x_35629);
                                    
                                    x_35628 = defunc_1_op_res_35630;
                                }
                            }
                        }
                        if (sle32(wave_sizze_43690, skip_threads_43703)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_43703, local_tid_43688 -
                                  squot32(local_tid_43688, 32) * 32) &&
                            ltid_in_bounds_43702) {
                            // write result
                            {
                                ((volatile __local
                                  int32_t *) red_arr_mem_43692)[sext_i32_i64(local_tid_43688)] =
                                    x_35628;
                                x_35629 = x_35628;
                            }
                        }
                        if (sle32(wave_sizze_43690, skip_threads_43703)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_43703 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_43688 - squot32(local_tid_43688, 32) * 32) ==
                        31 && ltid_in_bounds_43702) {
                        ((volatile __local
                          int32_t *) red_arr_mem_43692)[sext_i32_i64(squot32(local_tid_43688,
                                                                             32))] =
                            x_35628;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_43705;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_43688, 32) == 0 &&
                            ltid_in_bounds_43702) {
                            x_43700 = ((volatile __local
                                        int32_t *) red_arr_mem_43692)[sext_i32_i64(local_tid_43688)];
                            if ((local_tid_43688 - squot32(local_tid_43688,
                                                           32) * 32) == 0) {
                                x_43699 = x_43700;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_43705 = 1;
                        while (slt32(skip_threads_43705, 32)) {
                            if (sle32(skip_threads_43705, local_tid_43688 -
                                      squot32(local_tid_43688, 32) * 32) &&
                                (squot32(local_tid_43688, 32) == 0 &&
                                 ltid_in_bounds_43702)) {
                                // read operands
                                {
                                    x_43699 = ((volatile __local
                                                int32_t *) red_arr_mem_43692)[sext_i32_i64(local_tid_43688) -
                                                                              sext_i32_i64(skip_threads_43705)];
                                }
                                // perform operation
                                {
                                    bool inactive_43706 =
                                         slt64(srem64(sext_i32_i64(local_tid_43688 *
                                                      32 + 32 - 1),
                                                      i32_res_28884),
                                               sext_i32_i64(local_tid_43688 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_43688 -
                                                             skip_threads_43705) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_43706) {
                                        x_43699 = x_43700;
                                    }
                                    if (!inactive_43706) {
                                        int32_t defunc_1_op_res_43701 =
                                                add32(x_43699, x_43700);
                                        
                                        x_43699 = defunc_1_op_res_43701;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_43690, skip_threads_43705)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_43705, local_tid_43688 -
                                      squot32(local_tid_43688, 32) * 32) &&
                                (squot32(local_tid_43688, 32) == 0 &&
                                 ltid_in_bounds_43702)) {
                                // write result
                                {
                                    ((volatile __local
                                      int32_t *) red_arr_mem_43692)[sext_i32_i64(local_tid_43688)] =
                                        x_43699;
                                    x_43700 = x_43699;
                                }
                            }
                            if (sle32(wave_sizze_43690, skip_threads_43705)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_43705 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_43688, 32) == 0 ||
                          !ltid_in_bounds_43702)) {
                        // read operands
                        {
                            x_35629 = x_35628;
                            x_35628 = ((__local
                                        int32_t *) red_arr_mem_43692)[sext_i32_i64(squot32(local_tid_43688,
                                                                                           32)) -
                                                                      (int64_t) 1];
                        }
                        // perform operation
                        {
                            bool inactive_43707 =
                                 slt64(srem64(sext_i32_i64(local_tid_43688),
                                              i32_res_28884),
                                       sext_i32_i64(local_tid_43688) -
                                       sext_i32_i64(squot32(local_tid_43688,
                                                            32) * 32 - 1));
                            
                            if (inactive_43707) {
                                x_35628 = x_35629;
                            }
                            if (!inactive_43707) {
                                int32_t defunc_1_op_res_35630 = add32(x_35628,
                                                                      x_35629);
                                
                                x_35628 = defunc_1_op_res_35630;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              int32_t *) red_arr_mem_43692)[sext_i32_i64(local_tid_43688)] =
                                x_35628;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_43688, 32) == 0) {
                        ((__local
                          int32_t *) red_arr_mem_43692)[sext_i32_i64(local_tid_43688)] =
                            x_35629;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_43696) *
                      squot64(segred_group_sizze_35624,
                              segment_sizze_nonzzero_43685) +
                      sext_i32_i64(local_tid_43688), m_28875) &&
                slt64(sext_i32_i64(local_tid_43688),
                      squot64(segred_group_sizze_35624,
                              segment_sizze_nonzzero_43685))) {
                ((__global
                  int32_t *) mem_42329)[sext_i32_i64(virt_group_id_43696) *
                                        squot64(segred_group_sizze_35624,
                                                segment_sizze_nonzzero_43685) +
                                        sext_i32_i64(local_tid_43688)] =
                    ((__local
                      int32_t *) red_arr_mem_43692)[(sext_i32_i64(local_tid_43688) +
                                                     (int64_t) 1) *
                                                    segment_sizze_nonzzero_43685 -
                                                    (int64_t) 1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_35624
}
__kernel void mainMagnitudezisegred_small_35760(__global int *global_failure,
                                                int failure_is_an_option,
                                                __global
                                                int64_t *global_failure_args,
                                                __local volatile
                                                int64_t *red_arr_mem_43874_backing_aligned_0,
                                                int64_t N_28874,
                                                int64_t m_28875,
                                                int64_t i32_res_29275,
                                                int64_t num_groups_35782,
                                                int64_t segment_sizze_nonzzero_43867,
                                                __global
                                                unsigned char *defunc_4_map_res_mem_42266,
                                                __global
                                                unsigned char *defunc_3_map_res_mem_42344,
                                                __global
                                                unsigned char *defunc_3_map_res_mem_42345,
                                                __global
                                                unsigned char *mem_42382)
{
    #define segred_group_sizze_35781 (mainMagnitudezisegred_group_sizze_35754)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_43874_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_43874_backing_aligned_0;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_43869;
    int32_t local_tid_43870;
    int64_t group_sizze_43873;
    int32_t wave_sizze_43872;
    int32_t group_tid_43871;
    
    global_tid_43869 = get_global_id(0);
    local_tid_43870 = get_local_id(0);
    group_sizze_43873 = get_local_size(0);
    wave_sizze_43872 = LOCKSTEP_WIDTH;
    group_tid_43871 = get_group_id(0);
    
    int32_t phys_tid_35760 = global_tid_43869;
    __local char *red_arr_mem_43874;
    
    red_arr_mem_43874 = (__local char *) red_arr_mem_43874_backing_0;
    
    int32_t phys_group_id_43876;
    
    phys_group_id_43876 = get_group_id(0);
    for (int32_t i_43877 = 0; i_43877 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_28875,
                                          squot64(segred_group_sizze_35781,
                                                  segment_sizze_nonzzero_43867))) -
                   phys_group_id_43876, sext_i64_i32(num_groups_35782));
         i_43877++) {
        int32_t virt_group_id_43878 = phys_group_id_43876 + i_43877 *
                sext_i64_i32(num_groups_35782);
        int64_t slice_43879 = m_28875;
        int64_t gtid_35751 = squot64(sext_i32_i64(local_tid_43870),
                                     segment_sizze_nonzzero_43867) +
                sext_i32_i64(virt_group_id_43878) *
                squot64(segred_group_sizze_35781, segment_sizze_nonzzero_43867);
        int64_t remnant_43880 = squot64(sext_i32_i64(local_tid_43870),
                                        segment_sizze_nonzzero_43867) +
                sext_i32_i64(virt_group_id_43878) *
                squot64(segred_group_sizze_35781,
                        segment_sizze_nonzzero_43867) - gtid_35751;
        int64_t gtid_35759 = srem64(sext_i32_i64(local_tid_43870),
                                    i32_res_29275);
        
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, i32_res_29275) && (slt64(gtid_35751,
                                                            m_28875) &&
                                                      slt64(sext_i32_i64(local_tid_43870),
                                                            i32_res_29275 *
                                                            squot64(segred_group_sizze_35781,
                                                                    segment_sizze_nonzzero_43867)))) {
                int32_t x_35790 = ((__global
                                    int32_t *) defunc_3_map_res_mem_42344)[gtid_35751];
                int32_t index_primexp_39441 = sext_i64_i32(gtid_35759);
                bool cond_35792 = slt32(index_primexp_39441, x_35790);
                float defunc_0_f_res_35793;
                
                if (cond_35792) {
                    int32_t x_35789 = ((__global
                                        int32_t *) defunc_3_map_res_mem_42345)[gtid_35751];
                    int32_t x_35794 = add32(x_35789, index_primexp_39441);
                    int32_t x_35795 = sub32(x_35794, x_35790);
                    int32_t i_35796 = add32(1, x_35795);
                    int64_t i_35797 = sext_i32_i64(i_35796);
                    bool x_35798 = sle64((int64_t) 0, i_35797);
                    bool y_35799 = slt64(i_35797, N_28874);
                    bool bounds_check_35800 = x_35798 && y_35799;
                    bool index_certs_35801;
                    
                    if (!bounds_check_35800) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1,
                                                          101) == -1) {
                                global_failure_args[0] = i_35797;
                                global_failure_args[1] = N_28874;
                                ;
                            }
                            local_failure = true;
                            goto error_0;
                        }
                    }
                    
                    float defunc_0_f_res_t_res_35802 = ((__global
                                                         float *) defunc_4_map_res_mem_42266)[gtid_35751 *
                                                                                              N_28874 +
                                                                                              i_35797];
                    
                    defunc_0_f_res_35793 = defunc_0_f_res_t_res_35802;
                } else {
                    defunc_0_f_res_35793 = 0.0F;
                }
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_43874)[sext_i32_i64(local_tid_43870)] =
                        defunc_0_f_res_35793;
                }
            } else {
                ((__local
                  float *) red_arr_mem_43874)[sext_i32_i64(local_tid_43870)] =
                    0.0F;
            }
        }
        
      error_0:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, i32_res_29275)) {
            // perform segmented scan to imitate reduction
            {
                float x_35785;
                float x_35786;
                float x_43881;
                float x_43882;
                bool ltid_in_bounds_43884 = slt64(sext_i32_i64(local_tid_43870),
                                                  i32_res_29275 *
                                                  squot64(segred_group_sizze_35781,
                                                          segment_sizze_nonzzero_43867));
                int32_t skip_threads_43885;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_43884) {
                        x_35786 = ((volatile __local
                                    float *) red_arr_mem_43874)[sext_i32_i64(local_tid_43870)];
                        if ((local_tid_43870 - squot32(local_tid_43870, 32) *
                             32) == 0) {
                            x_35785 = x_35786;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_43885 = 1;
                    while (slt32(skip_threads_43885, 32)) {
                        if (sle32(skip_threads_43885, local_tid_43870 -
                                  squot32(local_tid_43870, 32) * 32) &&
                            ltid_in_bounds_43884) {
                            // read operands
                            {
                                x_35785 = ((volatile __local
                                            float *) red_arr_mem_43874)[sext_i32_i64(local_tid_43870) -
                                                                        sext_i32_i64(skip_threads_43885)];
                            }
                            // perform operation
                            {
                                bool inactive_43886 =
                                     slt64(srem64(sext_i32_i64(local_tid_43870),
                                                  i32_res_29275),
                                           sext_i32_i64(local_tid_43870) -
                                           sext_i32_i64(local_tid_43870 -
                                           skip_threads_43885));
                                
                                if (inactive_43886) {
                                    x_35785 = x_35786;
                                }
                                if (!inactive_43886) {
                                    float defunc_1_op_res_35787 = x_35785 +
                                          x_35786;
                                    
                                    x_35785 = defunc_1_op_res_35787;
                                }
                            }
                        }
                        if (sle32(wave_sizze_43872, skip_threads_43885)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_43885, local_tid_43870 -
                                  squot32(local_tid_43870, 32) * 32) &&
                            ltid_in_bounds_43884) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_43874)[sext_i32_i64(local_tid_43870)] =
                                    x_35785;
                                x_35786 = x_35785;
                            }
                        }
                        if (sle32(wave_sizze_43872, skip_threads_43885)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_43885 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_43870 - squot32(local_tid_43870, 32) * 32) ==
                        31 && ltid_in_bounds_43884) {
                        ((volatile __local
                          float *) red_arr_mem_43874)[sext_i32_i64(squot32(local_tid_43870,
                                                                           32))] =
                            x_35785;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_43887;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_43870, 32) == 0 &&
                            ltid_in_bounds_43884) {
                            x_43882 = ((volatile __local
                                        float *) red_arr_mem_43874)[sext_i32_i64(local_tid_43870)];
                            if ((local_tid_43870 - squot32(local_tid_43870,
                                                           32) * 32) == 0) {
                                x_43881 = x_43882;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_43887 = 1;
                        while (slt32(skip_threads_43887, 32)) {
                            if (sle32(skip_threads_43887, local_tid_43870 -
                                      squot32(local_tid_43870, 32) * 32) &&
                                (squot32(local_tid_43870, 32) == 0 &&
                                 ltid_in_bounds_43884)) {
                                // read operands
                                {
                                    x_43881 = ((volatile __local
                                                float *) red_arr_mem_43874)[sext_i32_i64(local_tid_43870) -
                                                                            sext_i32_i64(skip_threads_43887)];
                                }
                                // perform operation
                                {
                                    bool inactive_43888 =
                                         slt64(srem64(sext_i32_i64(local_tid_43870 *
                                                      32 + 32 - 1),
                                                      i32_res_29275),
                                               sext_i32_i64(local_tid_43870 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_43870 -
                                                             skip_threads_43887) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_43888) {
                                        x_43881 = x_43882;
                                    }
                                    if (!inactive_43888) {
                                        float defunc_1_op_res_43883 = x_43881 +
                                              x_43882;
                                        
                                        x_43881 = defunc_1_op_res_43883;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_43872, skip_threads_43887)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_43887, local_tid_43870 -
                                      squot32(local_tid_43870, 32) * 32) &&
                                (squot32(local_tid_43870, 32) == 0 &&
                                 ltid_in_bounds_43884)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_43874)[sext_i32_i64(local_tid_43870)] =
                                        x_43881;
                                    x_43882 = x_43881;
                                }
                            }
                            if (sle32(wave_sizze_43872, skip_threads_43887)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_43887 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_43870, 32) == 0 ||
                          !ltid_in_bounds_43884)) {
                        // read operands
                        {
                            x_35786 = x_35785;
                            x_35785 = ((__local
                                        float *) red_arr_mem_43874)[sext_i32_i64(squot32(local_tid_43870,
                                                                                         32)) -
                                                                    (int64_t) 1];
                        }
                        // perform operation
                        {
                            bool inactive_43889 =
                                 slt64(srem64(sext_i32_i64(local_tid_43870),
                                              i32_res_29275),
                                       sext_i32_i64(local_tid_43870) -
                                       sext_i32_i64(squot32(local_tid_43870,
                                                            32) * 32 - 1));
                            
                            if (inactive_43889) {
                                x_35785 = x_35786;
                            }
                            if (!inactive_43889) {
                                float defunc_1_op_res_35787 = x_35785 + x_35786;
                                
                                x_35785 = defunc_1_op_res_35787;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_43874)[sext_i32_i64(local_tid_43870)] =
                                x_35785;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_43870, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_43874)[sext_i32_i64(local_tid_43870)] =
                            x_35786;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_43878) *
                      squot64(segred_group_sizze_35781,
                              segment_sizze_nonzzero_43867) +
                      sext_i32_i64(local_tid_43870), m_28875) &&
                slt64(sext_i32_i64(local_tid_43870),
                      squot64(segred_group_sizze_35781,
                              segment_sizze_nonzzero_43867))) {
                ((__global
                  float *) mem_42382)[sext_i32_i64(virt_group_id_43878) *
                                      squot64(segred_group_sizze_35781,
                                              segment_sizze_nonzzero_43867) +
                                      sext_i32_i64(local_tid_43870)] = ((__local
                                                                         float *) red_arr_mem_43874)[(sext_i32_i64(local_tid_43870) +
                                                                                                      (int64_t) 1) *
                                                                                                     segment_sizze_nonzzero_43867 -
                                                                                                     (int64_t) 1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_35781
}
__kernel void mainMagnitudezisegred_small_36341(__global int *global_failure,
                                                __local volatile
                                                int64_t *red_arr_mem_44079_backing_aligned_0,
                                                __local volatile
                                                int64_t *red_arr_mem_44077_backing_aligned_1,
                                                __local volatile
                                                int64_t *red_arr_mem_44075_backing_aligned_2,
                                                int64_t m_28875,
                                                int64_t iota32_arg_29304,
                                                int64_t num_groups_36528,
                                                int64_t segment_sizze_nonzzero_44068,
                                                __global
                                                unsigned char *mem_42390,
                                                __global
                                                unsigned char *mem_42452,
                                                __global
                                                unsigned char *mem_42455,
                                                __global
                                                unsigned char *mem_42460,
                                                __global
                                                unsigned char *mem_42463,
                                                __global
                                                unsigned char *mem_42466,
                                                __global
                                                unsigned char *mem_42469)
{
    #define segred_group_sizze_36527 (mainMagnitudezisegred_group_sizze_36335)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_44079_backing_2 =
                          (__local volatile
                           char *) red_arr_mem_44079_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_44077_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_44077_backing_aligned_1;
    __local volatile char *restrict red_arr_mem_44075_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_44075_backing_aligned_2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_44070;
    int32_t local_tid_44071;
    int64_t group_sizze_44074;
    int32_t wave_sizze_44073;
    int32_t group_tid_44072;
    
    global_tid_44070 = get_global_id(0);
    local_tid_44071 = get_local_id(0);
    group_sizze_44074 = get_local_size(0);
    wave_sizze_44073 = LOCKSTEP_WIDTH;
    group_tid_44072 = get_group_id(0);
    
    int32_t phys_tid_36341 = global_tid_44070;
    __local char *red_arr_mem_44075;
    
    red_arr_mem_44075 = (__local char *) red_arr_mem_44075_backing_0;
    
    __local char *red_arr_mem_44077;
    
    red_arr_mem_44077 = (__local char *) red_arr_mem_44077_backing_1;
    
    __local char *red_arr_mem_44079;
    
    red_arr_mem_44079 = (__local char *) red_arr_mem_44079_backing_2;
    
    int32_t phys_group_id_44081;
    
    phys_group_id_44081 = get_group_id(0);
    for (int32_t i_44082 = 0; i_44082 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_28875,
                                          squot64(segred_group_sizze_36527,
                                                  segment_sizze_nonzzero_44068))) -
                   phys_group_id_44081, sext_i64_i32(num_groups_36528));
         i_44082++) {
        int32_t virt_group_id_44083 = phys_group_id_44081 + i_44082 *
                sext_i64_i32(num_groups_36528);
        int64_t slice_44084 = m_28875;
        int64_t gtid_36332 = squot64(sext_i32_i64(local_tid_44071),
                                     segment_sizze_nonzzero_44068) +
                sext_i32_i64(virt_group_id_44083) *
                squot64(segred_group_sizze_36527, segment_sizze_nonzzero_44068);
        int64_t remnant_44085 = squot64(sext_i32_i64(local_tid_44071),
                                        segment_sizze_nonzzero_44068) +
                sext_i32_i64(virt_group_id_44083) *
                squot64(segred_group_sizze_36527,
                        segment_sizze_nonzzero_44068) - gtid_36332;
        int64_t gtid_36340 = srem64(sext_i32_i64(local_tid_44071),
                                    iota32_arg_29304);
        
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, iota32_arg_29304) && (slt64(gtid_36332,
                                                               m_28875) &&
                                                         slt64(sext_i32_i64(local_tid_44071),
                                                               iota32_arg_29304 *
                                                               squot64(segred_group_sizze_36527,
                                                                       segment_sizze_nonzzero_44068)))) {
                int32_t y_36547 = ((__global int32_t *) mem_42455)[gtid_36332];
                float y_36548 = ((__global float *) mem_42452)[gtid_36332];
                float x_36552 = ((__global float *) mem_42460)[gtid_36332 *
                                                               iota32_arg_29304 +
                                                               gtid_36340];
                float x_36553 = ((__global float *) mem_42390)[gtid_36340];
                int32_t index_primexp_39460 = sext_i64_i32(gtid_36340);
                float defunc_0_f_res_36556 = x_36552 / y_36548;
                bool cond_36557 = slt32(index_primexp_39460, y_36547);
                bool isnan_res_36558;
                
                isnan_res_36558 = futrts_isnan32(defunc_0_f_res_36556);
                
                bool cond_t_res_36559 = !isnan_res_36558;
                bool x_36560 = cond_36557 && cond_t_res_36559;
                float abs_res_36561 = (float) fabs(defunc_0_f_res_36556);
                bool defunc_2_f_res_t_res_36562 = x_36553 < abs_res_36561;
                bool x_36563 = x_36560 && defunc_2_f_res_t_res_36562;
                float defunc_1_f_res_36564;
                
                if (cond_36557) {
                    defunc_1_f_res_36564 = defunc_0_f_res_36556;
                } else {
                    defunc_1_f_res_36564 = 0.0F;
                }
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      bool *) red_arr_mem_44075)[sext_i32_i64(local_tid_44071)] =
                        x_36563;
                    ((__local
                      int32_t *) red_arr_mem_44077)[sext_i32_i64(local_tid_44071)] =
                        index_primexp_39460;
                    ((__local
                      float *) red_arr_mem_44079)[sext_i32_i64(local_tid_44071)] =
                        defunc_1_f_res_36564;
                }
            } else {
                ((__local
                  bool *) red_arr_mem_44075)[sext_i32_i64(local_tid_44071)] = 0;
                ((__local
                  int32_t *) red_arr_mem_44077)[sext_i32_i64(local_tid_44071)] =
                    -1;
                ((__local
                  float *) red_arr_mem_44079)[sext_i32_i64(local_tid_44071)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, iota32_arg_29304)) {
            // perform segmented scan to imitate reduction
            {
                bool x_36533;
                int32_t x_36534;
                float x_36535;
                bool x_36536;
                int32_t x_36537;
                float x_36538;
                bool x_44086;
                int32_t x_44087;
                float x_44088;
                bool x_44089;
                int32_t x_44090;
                float x_44091;
                bool ltid_in_bounds_44100 = slt64(sext_i32_i64(local_tid_44071),
                                                  iota32_arg_29304 *
                                                  squot64(segred_group_sizze_36527,
                                                          segment_sizze_nonzzero_44068));
                int32_t skip_threads_44101;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_44100) {
                        x_36536 = ((volatile __local
                                    bool *) red_arr_mem_44075)[sext_i32_i64(local_tid_44071)];
                        x_36537 = ((volatile __local
                                    int32_t *) red_arr_mem_44077)[sext_i32_i64(local_tid_44071)];
                        x_36538 = ((volatile __local
                                    float *) red_arr_mem_44079)[sext_i32_i64(local_tid_44071)];
                        if ((local_tid_44071 - squot32(local_tid_44071, 32) *
                             32) == 0) {
                            x_36533 = x_36536;
                            x_36534 = x_36537;
                            x_36535 = x_36538;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_44101 = 1;
                    while (slt32(skip_threads_44101, 32)) {
                        if (sle32(skip_threads_44101, local_tid_44071 -
                                  squot32(local_tid_44071, 32) * 32) &&
                            ltid_in_bounds_44100) {
                            // read operands
                            {
                                x_36533 = ((volatile __local
                                            bool *) red_arr_mem_44075)[sext_i32_i64(local_tid_44071) -
                                                                       sext_i32_i64(skip_threads_44101)];
                                x_36534 = ((volatile __local
                                            int32_t *) red_arr_mem_44077)[sext_i32_i64(local_tid_44071) -
                                                                          sext_i32_i64(skip_threads_44101)];
                                x_36535 = ((volatile __local
                                            float *) red_arr_mem_44079)[sext_i32_i64(local_tid_44071) -
                                                                        sext_i32_i64(skip_threads_44101)];
                            }
                            // perform operation
                            {
                                bool inactive_44102 =
                                     slt64(srem64(sext_i32_i64(local_tid_44071),
                                                  iota32_arg_29304),
                                           sext_i32_i64(local_tid_44071) -
                                           sext_i32_i64(local_tid_44071 -
                                           skip_threads_44101));
                                
                                if (inactive_44102) {
                                    x_36533 = x_36536;
                                    x_36534 = x_36537;
                                    x_36535 = x_36538;
                                }
                                if (!inactive_44102) {
                                    bool defunc_1_op_res_36539;
                                    int32_t defunc_1_op_res_36540;
                                    
                                    if (x_36533) {
                                        defunc_1_op_res_36539 = x_36533;
                                        defunc_1_op_res_36540 = x_36534;
                                    } else {
                                        bool x_36541 = x_36536 && x_36536;
                                        bool x_36542 = !x_36536;
                                        bool y_36543 = x_36533 && x_36542;
                                        bool defunc_1_op_res_f_res_36544 =
                                             x_36541 || y_36543;
                                        int32_t defunc_1_op_res_f_res_36545;
                                        
                                        if (x_36536) {
                                            defunc_1_op_res_f_res_36545 =
                                                x_36537;
                                        } else {
                                            defunc_1_op_res_f_res_36545 =
                                                x_36534;
                                        }
                                        defunc_1_op_res_36539 =
                                            defunc_1_op_res_f_res_36544;
                                        defunc_1_op_res_36540 =
                                            defunc_1_op_res_f_res_36545;
                                    }
                                    
                                    float defunc_1_op_res_36546 = x_36535 +
                                          x_36538;
                                    
                                    x_36533 = defunc_1_op_res_36539;
                                    x_36534 = defunc_1_op_res_36540;
                                    x_36535 = defunc_1_op_res_36546;
                                }
                            }
                        }
                        if (sle32(wave_sizze_44073, skip_threads_44101)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_44101, local_tid_44071 -
                                  squot32(local_tid_44071, 32) * 32) &&
                            ltid_in_bounds_44100) {
                            // write result
                            {
                                ((volatile __local
                                  bool *) red_arr_mem_44075)[sext_i32_i64(local_tid_44071)] =
                                    x_36533;
                                x_36536 = x_36533;
                                ((volatile __local
                                  int32_t *) red_arr_mem_44077)[sext_i32_i64(local_tid_44071)] =
                                    x_36534;
                                x_36537 = x_36534;
                                ((volatile __local
                                  float *) red_arr_mem_44079)[sext_i32_i64(local_tid_44071)] =
                                    x_36535;
                                x_36538 = x_36535;
                            }
                        }
                        if (sle32(wave_sizze_44073, skip_threads_44101)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_44101 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_44071 - squot32(local_tid_44071, 32) * 32) ==
                        31 && ltid_in_bounds_44100) {
                        ((volatile __local
                          bool *) red_arr_mem_44075)[sext_i32_i64(squot32(local_tid_44071,
                                                                          32))] =
                            x_36533;
                        ((volatile __local
                          int32_t *) red_arr_mem_44077)[sext_i32_i64(squot32(local_tid_44071,
                                                                             32))] =
                            x_36534;
                        ((volatile __local
                          float *) red_arr_mem_44079)[sext_i32_i64(squot32(local_tid_44071,
                                                                           32))] =
                            x_36535;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_44103;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_44071, 32) == 0 &&
                            ltid_in_bounds_44100) {
                            x_44089 = ((volatile __local
                                        bool *) red_arr_mem_44075)[sext_i32_i64(local_tid_44071)];
                            x_44090 = ((volatile __local
                                        int32_t *) red_arr_mem_44077)[sext_i32_i64(local_tid_44071)];
                            x_44091 = ((volatile __local
                                        float *) red_arr_mem_44079)[sext_i32_i64(local_tid_44071)];
                            if ((local_tid_44071 - squot32(local_tid_44071,
                                                           32) * 32) == 0) {
                                x_44086 = x_44089;
                                x_44087 = x_44090;
                                x_44088 = x_44091;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_44103 = 1;
                        while (slt32(skip_threads_44103, 32)) {
                            if (sle32(skip_threads_44103, local_tid_44071 -
                                      squot32(local_tid_44071, 32) * 32) &&
                                (squot32(local_tid_44071, 32) == 0 &&
                                 ltid_in_bounds_44100)) {
                                // read operands
                                {
                                    x_44086 = ((volatile __local
                                                bool *) red_arr_mem_44075)[sext_i32_i64(local_tid_44071) -
                                                                           sext_i32_i64(skip_threads_44103)];
                                    x_44087 = ((volatile __local
                                                int32_t *) red_arr_mem_44077)[sext_i32_i64(local_tid_44071) -
                                                                              sext_i32_i64(skip_threads_44103)];
                                    x_44088 = ((volatile __local
                                                float *) red_arr_mem_44079)[sext_i32_i64(local_tid_44071) -
                                                                            sext_i32_i64(skip_threads_44103)];
                                }
                                // perform operation
                                {
                                    bool inactive_44104 =
                                         slt64(srem64(sext_i32_i64(local_tid_44071 *
                                                      32 + 32 - 1),
                                                      iota32_arg_29304),
                                               sext_i32_i64(local_tid_44071 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_44071 -
                                                             skip_threads_44103) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_44104) {
                                        x_44086 = x_44089;
                                        x_44087 = x_44090;
                                        x_44088 = x_44091;
                                    }
                                    if (!inactive_44104) {
                                        bool defunc_1_op_res_44092;
                                        int32_t defunc_1_op_res_44093;
                                        
                                        if (x_44086) {
                                            defunc_1_op_res_44092 = x_44086;
                                            defunc_1_op_res_44093 = x_44087;
                                        } else {
                                            bool x_44094 = x_44089 && x_44089;
                                            bool x_44095 = !x_44089;
                                            bool y_44096 = x_44086 && x_44095;
                                            bool defunc_1_op_res_f_res_44097 =
                                                 x_44094 || y_44096;
                                            int32_t defunc_1_op_res_f_res_44098;
                                            
                                            if (x_44089) {
                                                defunc_1_op_res_f_res_44098 =
                                                    x_44090;
                                            } else {
                                                defunc_1_op_res_f_res_44098 =
                                                    x_44087;
                                            }
                                            defunc_1_op_res_44092 =
                                                defunc_1_op_res_f_res_44097;
                                            defunc_1_op_res_44093 =
                                                defunc_1_op_res_f_res_44098;
                                        }
                                        
                                        float defunc_1_op_res_44099 = x_44088 +
                                              x_44091;
                                        
                                        x_44086 = defunc_1_op_res_44092;
                                        x_44087 = defunc_1_op_res_44093;
                                        x_44088 = defunc_1_op_res_44099;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_44073, skip_threads_44103)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_44103, local_tid_44071 -
                                      squot32(local_tid_44071, 32) * 32) &&
                                (squot32(local_tid_44071, 32) == 0 &&
                                 ltid_in_bounds_44100)) {
                                // write result
                                {
                                    ((volatile __local
                                      bool *) red_arr_mem_44075)[sext_i32_i64(local_tid_44071)] =
                                        x_44086;
                                    x_44089 = x_44086;
                                    ((volatile __local
                                      int32_t *) red_arr_mem_44077)[sext_i32_i64(local_tid_44071)] =
                                        x_44087;
                                    x_44090 = x_44087;
                                    ((volatile __local
                                      float *) red_arr_mem_44079)[sext_i32_i64(local_tid_44071)] =
                                        x_44088;
                                    x_44091 = x_44088;
                                }
                            }
                            if (sle32(wave_sizze_44073, skip_threads_44103)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_44103 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_44071, 32) == 0 ||
                          !ltid_in_bounds_44100)) {
                        // read operands
                        {
                            x_36536 = x_36533;
                            x_36537 = x_36534;
                            x_36538 = x_36535;
                            x_36533 = ((__local
                                        bool *) red_arr_mem_44075)[sext_i32_i64(squot32(local_tid_44071,
                                                                                        32)) -
                                                                   (int64_t) 1];
                            x_36534 = ((__local
                                        int32_t *) red_arr_mem_44077)[sext_i32_i64(squot32(local_tid_44071,
                                                                                           32)) -
                                                                      (int64_t) 1];
                            x_36535 = ((__local
                                        float *) red_arr_mem_44079)[sext_i32_i64(squot32(local_tid_44071,
                                                                                         32)) -
                                                                    (int64_t) 1];
                        }
                        // perform operation
                        {
                            bool inactive_44105 =
                                 slt64(srem64(sext_i32_i64(local_tid_44071),
                                              iota32_arg_29304),
                                       sext_i32_i64(local_tid_44071) -
                                       sext_i32_i64(squot32(local_tid_44071,
                                                            32) * 32 - 1));
                            
                            if (inactive_44105) {
                                x_36533 = x_36536;
                                x_36534 = x_36537;
                                x_36535 = x_36538;
                            }
                            if (!inactive_44105) {
                                bool defunc_1_op_res_36539;
                                int32_t defunc_1_op_res_36540;
                                
                                if (x_36533) {
                                    defunc_1_op_res_36539 = x_36533;
                                    defunc_1_op_res_36540 = x_36534;
                                } else {
                                    bool x_36541 = x_36536 && x_36536;
                                    bool x_36542 = !x_36536;
                                    bool y_36543 = x_36533 && x_36542;
                                    bool defunc_1_op_res_f_res_36544 =
                                         x_36541 || y_36543;
                                    int32_t defunc_1_op_res_f_res_36545;
                                    
                                    if (x_36536) {
                                        defunc_1_op_res_f_res_36545 = x_36537;
                                    } else {
                                        defunc_1_op_res_f_res_36545 = x_36534;
                                    }
                                    defunc_1_op_res_36539 =
                                        defunc_1_op_res_f_res_36544;
                                    defunc_1_op_res_36540 =
                                        defunc_1_op_res_f_res_36545;
                                }
                                
                                float defunc_1_op_res_36546 = x_36535 + x_36538;
                                
                                x_36533 = defunc_1_op_res_36539;
                                x_36534 = defunc_1_op_res_36540;
                                x_36535 = defunc_1_op_res_36546;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              bool *) red_arr_mem_44075)[sext_i32_i64(local_tid_44071)] =
                                x_36533;
                            ((__local
                              int32_t *) red_arr_mem_44077)[sext_i32_i64(local_tid_44071)] =
                                x_36534;
                            ((__local
                              float *) red_arr_mem_44079)[sext_i32_i64(local_tid_44071)] =
                                x_36535;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_44071, 32) == 0) {
                        ((__local
                          bool *) red_arr_mem_44075)[sext_i32_i64(local_tid_44071)] =
                            x_36536;
                        ((__local
                          int32_t *) red_arr_mem_44077)[sext_i32_i64(local_tid_44071)] =
                            x_36537;
                        ((__local
                          float *) red_arr_mem_44079)[sext_i32_i64(local_tid_44071)] =
                            x_36538;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_44083) *
                      squot64(segred_group_sizze_36527,
                              segment_sizze_nonzzero_44068) +
                      sext_i32_i64(local_tid_44071), m_28875) &&
                slt64(sext_i32_i64(local_tid_44071),
                      squot64(segred_group_sizze_36527,
                              segment_sizze_nonzzero_44068))) {
                ((__global
                  bool *) mem_42463)[sext_i32_i64(virt_group_id_44083) *
                                     squot64(segred_group_sizze_36527,
                                             segment_sizze_nonzzero_44068) +
                                     sext_i32_i64(local_tid_44071)] = ((__local
                                                                        bool *) red_arr_mem_44075)[(sext_i32_i64(local_tid_44071) +
                                                                                                    (int64_t) 1) *
                                                                                                   segment_sizze_nonzzero_44068 -
                                                                                                   (int64_t) 1];
                ((__global
                  int32_t *) mem_42466)[sext_i32_i64(virt_group_id_44083) *
                                        squot64(segred_group_sizze_36527,
                                                segment_sizze_nonzzero_44068) +
                                        sext_i32_i64(local_tid_44071)] =
                    ((__local
                      int32_t *) red_arr_mem_44077)[(sext_i32_i64(local_tid_44071) +
                                                     (int64_t) 1) *
                                                    segment_sizze_nonzzero_44068 -
                                                    (int64_t) 1];
                ((__global
                  float *) mem_42469)[sext_i32_i64(virt_group_id_44083) *
                                      squot64(segred_group_sizze_36527,
                                              segment_sizze_nonzzero_44068) +
                                      sext_i32_i64(local_tid_44071)] = ((__local
                                                                         float *) red_arr_mem_44079)[(sext_i32_i64(local_tid_44071) +
                                                                                                      (int64_t) 1) *
                                                                                                     segment_sizze_nonzzero_44068 -
                                                                                                     (int64_t) 1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_36527
}
"""
# Start of values.py.

# Hacky parser/reader/writer for values written in Futhark syntax.
# Used for reading stdin when compiling standalone programs with the
# Python code generator.

import numpy as np
import string
import struct
import sys

class ReaderInput:
    def __init__(self, f):
        self.f = f
        self.lookahead_buffer = []

    def get_char(self):
        if len(self.lookahead_buffer) == 0:
            return self.f.read(1)
        else:
            c = self.lookahead_buffer[0]
            self.lookahead_buffer = self.lookahead_buffer[1:]
            return c

    def unget_char(self, c):
        self.lookahead_buffer = [c] + self.lookahead_buffer

    def get_chars(self, n):
        n1 = min(n, len(self.lookahead_buffer))
        s = b''.join(self.lookahead_buffer[:n1])
        self.lookahead_buffer = self.lookahead_buffer[n1:]
        n2 = n - n1
        if n2 > 0:
            s += self.f.read(n2)
        return s

    def peek_char(self):
        c = self.get_char()
        if c:
            self.unget_char(c)
        return c

def skip_spaces(f):
    c = f.get_char()
    while c != None:
        if c.isspace():
            c = f.get_char()
        elif c == b'-':
          # May be line comment.
          if f.peek_char() == b'-':
            # Yes, line comment. Skip to end of line.
            while (c != b'\n' and c != None):
              c = f.get_char()
          else:
            break
        else:
          break
    if c:
        f.unget_char(c)

def parse_specific_char(f, expected):
    got = f.get_char()
    if got != expected:
        f.unget_char(got)
        raise ValueError
    return True

def parse_specific_string(f, s):
    # This funky mess is intended, and is caused by the fact that if `type(b) ==
    # bytes` then `type(b[0]) == int`, but we need to match each element with a
    # `bytes`, so therefore we make each character an array element
    b = s.encode('utf8')
    bs = [b[i:i+1] for i in range(len(b))]
    read = []
    try:
        for c in bs:
            parse_specific_char(f, c)
            read.append(c)
        return True
    except ValueError:
        for c in read[::-1]:
            f.unget_char(c)
        raise

def optional(p, *args):
    try:
        return p(*args)
    except ValueError:
        return None

def optional_specific_string(f, s):
    c = f.peek_char()
    # This funky mess is intended, and is caused by the fact that if `type(b) ==
    # bytes` then `type(b[0]) == int`, but we need to match each element with a
    # `bytes`, so therefore we make each character an array element
    b = s.encode('utf8')
    bs = [b[i:i+1] for i in range(len(b))]
    if c == bs[0]:
        return parse_specific_string(f, s)
    else:
        return False

def sepBy(p, sep, *args):
    elems = []
    x = optional(p, *args)
    if x != None:
        elems += [x]
        while optional(sep, *args) != None:
            x = p(*args)
            elems += [x]
    return elems

# Assumes '0x' has already been read
def parse_hex_int(f):
    s = b''
    c = f.get_char()
    while c != None:
        if c in b'01234556789ABCDEFabcdef':
            s += c
            c = f.get_char()
        elif c == b'_':
            c = f.get_char() # skip _
        else:
            f.unget_char(c)
            break
    return str(int(s, 16)).encode('utf8') # ugh

def parse_int(f):
    s = b''
    c = f.get_char()
    if c == b'0' and f.peek_char() in b'xX':
        c = f.get_char() # skip X
        return parse_hex_int(f)
    else:
        while c != None:
            if c.isdigit():
                s += c
                c = f.get_char()
            elif c == b'_':
                c = f.get_char() # skip _
            else:
                f.unget_char(c)
                break
        if len(s) == 0:
            raise ValueError
        return s

def parse_int_signed(f):
    s = b''
    c = f.get_char()

    if c == b'-' and f.peek_char().isdigit():
      return c + parse_int(f)
    else:
      if c != b'+':
          f.unget_char(c)
      return parse_int(f)

def read_str_comma(f):
    skip_spaces(f)
    parse_specific_char(f, b',')
    return b','

def read_str_int(f, s):
    skip_spaces(f)
    x = int(parse_int_signed(f))
    optional_specific_string(f, s)
    return x

def read_str_uint(f, s):
    skip_spaces(f)
    x = int(parse_int(f))
    optional_specific_string(f, s)
    return x

def read_str_i8(f):
    return np.int8(read_str_int(f, 'i8'))
def read_str_i16(f):
    return np.int16(read_str_int(f, 'i16'))
def read_str_i32(f):
    return np.int32(read_str_int(f, 'i32'))
def read_str_i64(f):
    return np.int64(read_str_int(f, 'i64'))

def read_str_u8(f):
    return np.uint8(read_str_int(f, 'u8'))
def read_str_u16(f):
    return np.uint16(read_str_int(f, 'u16'))
def read_str_u32(f):
    return np.uint32(read_str_int(f, 'u32'))
def read_str_u64(f):
    return np.uint64(read_str_int(f, 'u64'))

def read_char(f):
    skip_spaces(f)
    parse_specific_char(f, b'\'')
    c = f.get_char()
    parse_specific_char(f, b'\'')
    return c

def read_str_hex_float(f, sign):
    int_part = parse_hex_int(f)
    parse_specific_char(f, b'.')
    frac_part = parse_hex_int(f)
    parse_specific_char(f, b'p')
    exponent = parse_int(f)

    int_val = int(int_part, 16)
    frac_val = float(int(frac_part, 16)) / (16 ** len(frac_part))
    exp_val = int(exponent)

    total_val = (int_val + frac_val) * (2.0 ** exp_val)
    if sign == b'-':
        total_val = -1 * total_val

    return float(total_val)


def read_str_decimal(f):
    skip_spaces(f)
    c = f.get_char()
    if (c == b'-'):
      sign = b'-'
    else:
      f.unget_char(c)
      sign = b''

    # Check for hexadecimal float
    c = f.get_char()
    if (c == '0' and (f.peek_char() in ['x', 'X'])):
        f.get_char()
        return read_str_hex_float(f, sign)
    else:
        f.unget_char(c)

    bef = optional(parse_int, f)
    if bef == None:
        bef = b'0'
        parse_specific_char(f, b'.')
        aft = parse_int(f)
    elif optional(parse_specific_char, f, b'.'):
        aft = parse_int(f)
    else:
        aft = b'0'
    if (optional(parse_specific_char, f, b'E') or
        optional(parse_specific_char, f, b'e')):
        expt = parse_int_signed(f)
    else:
        expt = b'0'
    return float(sign + bef + b'.' + aft + b'E' + expt)

def read_str_f32(f):
    skip_spaces(f)
    try:
        parse_specific_string(f, 'f32.nan')
        return np.float32(np.nan)
    except ValueError:
        try:
            parse_specific_string(f, 'f32.inf')
            return np.float32(np.inf)
        except ValueError:
            try:
               parse_specific_string(f, '-f32.inf')
               return np.float32(-np.inf)
            except ValueError:
               x = read_str_decimal(f)
               optional_specific_string(f, 'f32')
               return x

def read_str_f64(f):
    skip_spaces(f)
    try:
        parse_specific_string(f, 'f64.nan')
        return np.float64(np.nan)
    except ValueError:
        try:
            parse_specific_string(f, 'f64.inf')
            return np.float64(np.inf)
        except ValueError:
            try:
               parse_specific_string(f, '-f64.inf')
               return np.float64(-np.inf)
            except ValueError:
               x = read_str_decimal(f)
               optional_specific_string(f, 'f64')
               return x

def read_str_bool(f):
    skip_spaces(f)
    if f.peek_char() == b't':
        parse_specific_string(f, 'true')
        return True
    elif f.peek_char() == b'f':
        parse_specific_string(f, 'false')
        return False
    else:
        raise ValueError

def read_str_empty_array(f, type_name, rank):
    parse_specific_string(f, 'empty')
    parse_specific_char(f, b'(')
    dims = []
    for i in range(rank):
        parse_specific_string(f, '[')
        dims += [int(parse_int(f))]
        parse_specific_string(f, ']')
    if np.product(dims) != 0:
        raise ValueError
    parse_specific_string(f, type_name)
    parse_specific_char(f, b')')

    return tuple(dims)

def read_str_array_elems(f, elem_reader, type_name, rank):
    skip_spaces(f)
    try:
        parse_specific_char(f, b'[')
    except ValueError:
        return read_str_empty_array(f, type_name, rank)
    else:
        xs = sepBy(elem_reader, read_str_comma, f)
        skip_spaces(f)
        parse_specific_char(f, b']')
        return xs

def read_str_array_helper(f, elem_reader, type_name, rank):
    def nested_row_reader(_):
        return read_str_array_helper(f, elem_reader, type_name, rank-1)
    if rank == 1:
        row_reader = elem_reader
    else:
        row_reader = nested_row_reader
    return read_str_array_elems(f, row_reader, type_name, rank)

def expected_array_dims(l, rank):
  if rank > 1:
      n = len(l)
      if n == 0:
          elem = []
      else:
          elem = l[0]
      return [n] + expected_array_dims(elem, rank-1)
  else:
      return [len(l)]

def verify_array_dims(l, dims):
    if dims[0] != len(l):
        raise ValueError
    if len(dims) > 1:
        for x in l:
            verify_array_dims(x, dims[1:])

def read_str_array(f, elem_reader, type_name, rank, bt):
    elems = read_str_array_helper(f, elem_reader, type_name, rank)
    if type(elems) == tuple:
        # Empty array
        return np.empty(elems, dtype=bt)
    else:
        dims = expected_array_dims(elems, rank)
        verify_array_dims(elems, dims)
        return np.array(elems, dtype=bt)

################################################################################

READ_BINARY_VERSION = 2

# struct format specified at
# https://docs.python.org/2/library/struct.html#format-characters

def mk_bin_scalar_reader(t):
    def bin_reader(f):
        fmt = FUTHARK_PRIMTYPES[t]['bin_format']
        size = FUTHARK_PRIMTYPES[t]['size']
        tf = FUTHARK_PRIMTYPES[t]['numpy_type']
        return tf(struct.unpack('<' + fmt, f.get_chars(size))[0])
    return bin_reader

read_bin_i8 = mk_bin_scalar_reader('i8')
read_bin_i16 = mk_bin_scalar_reader('i16')
read_bin_i32 = mk_bin_scalar_reader('i32')
read_bin_i64 = mk_bin_scalar_reader('i64')

read_bin_u8 = mk_bin_scalar_reader('u8')
read_bin_u16 = mk_bin_scalar_reader('u16')
read_bin_u32 = mk_bin_scalar_reader('u32')
read_bin_u64 = mk_bin_scalar_reader('u64')

read_bin_f32 = mk_bin_scalar_reader('f32')
read_bin_f64 = mk_bin_scalar_reader('f64')

read_bin_bool = mk_bin_scalar_reader('bool')

def read_is_binary(f):
    skip_spaces(f)
    c = f.get_char()
    if c == b'b':
        bin_version = read_bin_u8(f)
        if bin_version != READ_BINARY_VERSION:
            panic(1, "binary-input: File uses version %i, but I only understand version %i.\n",
                  bin_version, READ_BINARY_VERSION)
        return True
    else:
        f.unget_char(c)
        return False

FUTHARK_PRIMTYPES = {
    'i8':  {'binname' : b"  i8",
            'size' : 1,
            'bin_reader': read_bin_i8,
            'str_reader': read_str_i8,
            'bin_format': 'b',
            'numpy_type': np.int8 },

    'i16': {'binname' : b" i16",
            'size' : 2,
            'bin_reader': read_bin_i16,
            'str_reader': read_str_i16,
            'bin_format': 'h',
            'numpy_type': np.int16 },

    'i32': {'binname' : b" i32",
            'size' : 4,
            'bin_reader': read_bin_i32,
            'str_reader': read_str_i32,
            'bin_format': 'i',
            'numpy_type': np.int32 },

    'i64': {'binname' : b" i64",
            'size' : 8,
            'bin_reader': read_bin_i64,
            'str_reader': read_str_i64,
            'bin_format': 'q',
            'numpy_type': np.int64},

    'u8':  {'binname' : b"  u8",
            'size' : 1,
            'bin_reader': read_bin_u8,
            'str_reader': read_str_u8,
            'bin_format': 'B',
            'numpy_type': np.uint8 },

    'u16': {'binname' : b" u16",
            'size' : 2,
            'bin_reader': read_bin_u16,
            'str_reader': read_str_u16,
            'bin_format': 'H',
            'numpy_type': np.uint16 },

    'u32': {'binname' : b" u32",
            'size' : 4,
            'bin_reader': read_bin_u32,
            'str_reader': read_str_u32,
            'bin_format': 'I',
            'numpy_type': np.uint32 },

    'u64': {'binname' : b" u64",
            'size' : 8,
            'bin_reader': read_bin_u64,
            'str_reader': read_str_u64,
            'bin_format': 'Q',
            'numpy_type': np.uint64 },

    'f32': {'binname' : b" f32",
            'size' : 4,
            'bin_reader': read_bin_f32,
            'str_reader': read_str_f32,
            'bin_format': 'f',
            'numpy_type': np.float32 },

    'f64': {'binname' : b" f64",
            'size' : 8,
            'bin_reader': read_bin_f64,
            'str_reader': read_str_f64,
            'bin_format': 'd',
            'numpy_type': np.float64 },

    'bool': {'binname' : b"bool",
             'size' : 1,
             'bin_reader': read_bin_bool,
             'str_reader': read_str_bool,
             'bin_format': 'b',
             'numpy_type': bool }
}

def read_bin_read_type(f):
    read_binname = f.get_chars(4)

    for (k,v) in FUTHARK_PRIMTYPES.items():
        if v['binname'] == read_binname:
            return k
    panic(1, "binary-input: Did not recognize the type '%s'.\n", read_binname)

def numpy_type_to_type_name(t):
    for (k,v) in FUTHARK_PRIMTYPES.items():
        if v['numpy_type'] == t:
            return k
    raise Exception('Unknown Numpy type: {}'.format(t))

def read_bin_ensure_scalar(f, expected_type):
  dims = read_bin_i8(f)

  if dims != 0:
      panic(1, "binary-input: Expected scalar (0 dimensions), but got array with %i dimensions.\n", dims)

  bin_type = read_bin_read_type(f)
  if bin_type != expected_type:
      panic(1, "binary-input: Expected scalar of type %s but got scalar of type %s.\n",
            expected_type, bin_type)

# ------------------------------------------------------------------------------
# General interface for reading Primitive Futhark Values
# ------------------------------------------------------------------------------

def read_scalar(f, ty):
    if read_is_binary(f):
        read_bin_ensure_scalar(f, ty)
        return FUTHARK_PRIMTYPES[ty]['bin_reader'](f)
    return FUTHARK_PRIMTYPES[ty]['str_reader'](f)

def read_array(f, expected_type, rank):
    if not read_is_binary(f):
        str_reader = FUTHARK_PRIMTYPES[expected_type]['str_reader']
        return read_str_array(f, str_reader, expected_type, rank,
                              FUTHARK_PRIMTYPES[expected_type]['numpy_type'])

    bin_rank = read_bin_u8(f)

    if bin_rank != rank:
        panic(1, "binary-input: Expected %i dimensions, but got array with %i dimensions.\n",
              rank, bin_rank)

    bin_type_enum = read_bin_read_type(f)
    if expected_type != bin_type_enum:
        panic(1, "binary-input: Expected %iD-array with element type '%s' but got %iD-array with element type '%s'.\n",
              rank, expected_type, bin_rank, bin_type_enum)

    shape = []
    elem_count = 1
    for i in range(rank):
        bin_size = read_bin_i64(f)
        elem_count *= bin_size
        shape.append(bin_size)

    bin_fmt = FUTHARK_PRIMTYPES[bin_type_enum]['bin_format']

    # We first read the expected number of types into a bytestring,
    # then use np.frombuffer.  This is because np.fromfile does not
    # work on things that are insufficiently file-like, like a network
    # stream.
    bytes = f.get_chars(elem_count * FUTHARK_PRIMTYPES[expected_type]['size'])
    arr = np.frombuffer(bytes, dtype=FUTHARK_PRIMTYPES[bin_type_enum]['numpy_type'])
    arr.shape = shape

    return arr

if sys.version_info >= (3,0):
    input_reader = ReaderInput(sys.stdin.buffer)
else:
    input_reader = ReaderInput(sys.stdin)

import re

def read_value(type_desc, reader=input_reader):
    """Read a value of the given type.  The type is a string
representation of the Futhark type."""
    m = re.match(r'((?:\[\])*)([a-z0-9]+)$', type_desc)
    if m:
        dims = int(len(m.group(1))/2)
        basetype = m.group(2)
    assert m and basetype in FUTHARK_PRIMTYPES, "Unknown type: {}".format(type_desc)
    if dims > 0:
        return read_array(reader, basetype, dims)
    else:
        return read_scalar(reader, basetype)

def end_of_input(entry, f=input_reader):
    skip_spaces(f)
    if f.get_char() != b'':
        panic(1, "Expected EOF on stdin after reading input for \"%s\".", entry)

def write_value_text(v, out=sys.stdout):
    if type(v) == np.uint8:
        out.write("%uu8" % v)
    elif type(v) == np.uint16:
        out.write("%uu16" % v)
    elif type(v) == np.uint32:
        out.write("%uu32" % v)
    elif type(v) == np.uint64:
        out.write("%uu64" % v)
    elif type(v) == np.int8:
        out.write("%di8" % v)
    elif type(v) == np.int16:
        out.write("%di16" % v)
    elif type(v) == np.int32:
        out.write("%di32" % v)
    elif type(v) == np.int64:
        out.write("%di64" % v)
    elif type(v) in [np.bool, np.bool_]:
        if v:
            out.write("true")
        else:
            out.write("false")
    elif type(v) == np.float32:
        if np.isnan(v):
            out.write('f32.nan')
        elif np.isinf(v):
            if v >= 0:
                out.write('f32.inf')
            else:
                out.write('-f32.inf')
        else:
            out.write("%.6ff32" % v)
    elif type(v) == np.float64:
        if np.isnan(v):
            out.write('f64.nan')
        elif np.isinf(v):
            if v >= 0:
                out.write('f64.inf')
            else:
                out.write('-f64.inf')
        else:
            out.write("%.6ff64" % v)
    elif type(v) == np.ndarray:
        if np.product(v.shape) == 0:
            tname = numpy_type_to_type_name(v.dtype)
            out.write('empty({}{})'.format(''.join(['[{}]'.format(d)
                                                    for d in v.shape]), tname))
        else:
            first = True
            out.write('[')
            for x in v:
                if not first: out.write(', ')
                first = False
                write_value(x, out=out)
            out.write(']')
    else:
        raise Exception("Cannot print value of type {}: {}".format(type(v), v))

type_strs = { np.dtype('int8'): b'  i8',
              np.dtype('int16'): b' i16',
              np.dtype('int32'): b' i32',
              np.dtype('int64'): b' i64',
              np.dtype('uint8'): b'  u8',
              np.dtype('uint16'): b' u16',
              np.dtype('uint32'): b' u32',
              np.dtype('uint64'): b' u64',
              np.dtype('float32'): b' f32',
              np.dtype('float64'): b' f64',
              np.dtype('bool'): b'bool'}

def construct_binary_value(v):
    t = v.dtype
    shape = v.shape

    elems = 1
    for d in shape:
        elems *= d

    num_bytes = 1 + 1 + 1 + 4 + len(shape) * 8 + elems * t.itemsize
    bytes = bytearray(num_bytes)
    bytes[0] = np.int8(ord('b'))
    bytes[1] = 2
    bytes[2] = np.int8(len(shape))
    bytes[3:7] = type_strs[t]

    for i in range(len(shape)):
        bytes[7+i*8:7+(i+1)*8] = np.int64(shape[i]).tobytes()

    bytes[7+len(shape)*8:] = np.ascontiguousarray(v).tobytes()

    return bytes

def write_value_binary(v, out=sys.stdout):
    if sys.version_info >= (3,0):
        out = out.buffer
    out.write(construct_binary_value(v))

def write_value(v, out=sys.stdout, binary=False):
    if binary:
        return write_value_binary(v, out=out)
    else:
        return write_value_text(v, out=out)

# End of values.py.
# Start of memory.py.

import ctypes as ct

def addressOffset(x, offset, bt):
  return ct.cast(ct.addressof(x.contents)+int(offset), ct.POINTER(bt))

def allocateMem(size):
  return ct.cast((ct.c_byte * max(0,size))(), ct.POINTER(ct.c_byte))

# Copy an array if its is not-None.  This is important for treating
# Numpy arrays as flat memory, but has some overhead.
def normaliseArray(x):
  if (x.base is x) or (x.base is None):
    return x
  else:
    return x.copy()

def unwrapArray(x):
  return normaliseArray(x).ctypes.data_as(ct.POINTER(ct.c_byte))

def createArray(x, shape):
  # HACK: np.ctypeslib.as_array may fail if the shape contains zeroes,
  # for some reason.
  if any(map(lambda x: x == 0, shape)):
      return np.ndarray(shape, dtype=x._type_)
  else:
      return np.ctypeslib.as_array(x, shape=shape)

def indexArray(x, offset, bt, nptype):
  return nptype(addressOffset(x, offset*ct.sizeof(bt), bt)[0])

def writeScalarArray(x, offset, v):
  ct.memmove(ct.addressof(x.contents)+int(offset)*ct.sizeof(v), ct.addressof(v), ct.sizeof(v))

# An opaque Futhark value.
class opaque(object):
  def __init__(self, desc, *payload):
    self.data = payload
    self.desc = desc

  def __repr__(self):
    return "<opaque Futhark value of type {}>".format(self.desc)

# End of memory.py.
# Start of panic.py.

def panic(exitcode, fmt, *args):
    sys.stderr.write('%s: ' % sys.argv[0])
    sys.stderr.write(fmt % args)
    sys.stderr.write('\n')
    sys.exit(exitcode)

# End of panic.py.
# Start of tuning.py

def read_tuning_file(kvs, f):
    for line in f.read().splitlines():
        size, value = line.split('=')
        kvs[size] = int(value)
    return kvs

# End of tuning.py.
# Start of scalar.py.

import numpy as np
import math
import struct

def intlit(t, x):
  if t == np.int8:
    return np.int8(x)
  elif t == np.int16:
    return np.int16(x)
  elif t == np.int32:
    return np.int32(x)
  else:
    return np.int64(x)

def signed(x):
  if type(x) == np.uint8:
    return np.int8(x)
  elif type(x) == np.uint16:
    return np.int16(x)
  elif type(x) == np.uint32:
    return np.int32(x)
  else:
    return np.int64(x)

def unsigned(x):
  if type(x) == np.int8:
    return np.uint8(x)
  elif type(x) == np.int16:
    return np.uint16(x)
  elif type(x) == np.int32:
    return np.uint32(x)
  else:
    return np.uint64(x)

def shlN(x,y):
  return x << y

def ashrN(x,y):
  return x >> y

# Python is so slow that we just make all the unsafe operations safe,
# always.

def sdivN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return x // y

def sdiv_upN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return (x+y-intlit(type(x), 1)) // y

def smodN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return x % y

def udivN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return signed(unsigned(x) // unsigned(y))

def udiv_upN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return signed((unsigned(x)+unsigned(y)-unsigned(intlit(type(x),1))) // unsigned(y))

def umodN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return signed(unsigned(x) % unsigned(y))

def squotN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return np.floor_divide(np.abs(x), np.abs(y)) * np.sign(x) * np.sign(y)

def sremN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return np.remainder(np.abs(x), np.abs(y)) * np.sign(x)

def sminN(x,y):
  return min(x,y)

def smaxN(x,y):
  return max(x,y)

def uminN(x,y):
  return signed(min(unsigned(x),unsigned(y)))

def umaxN(x,y):
  return signed(max(unsigned(x),unsigned(y)))

def fminN(x,y):
  return min(x,y)

def fmaxN(x,y):
  return max(x,y)

def powN(x,y):
  return x ** y

def fpowN(x,y):
  return x ** y

def sleN(x,y):
  return x <= y

def sltN(x,y):
  return x < y

def uleN(x,y):
  return unsigned(x) <= unsigned(y)

def ultN(x,y):
  return unsigned(x) < unsigned(y)

def lshr8(x,y):
  return np.int8(np.uint8(x) >> np.uint8(y))

def lshr16(x,y):
  return np.int16(np.uint16(x) >> np.uint16(y))

def lshr32(x,y):
  return np.int32(np.uint32(x) >> np.uint32(y))

def lshr64(x,y):
  return np.int64(np.uint64(x) >> np.uint64(y))

def sext_T_i8(x):
  return np.int8(x)

def sext_T_i16(x):
  return np.int16(x)

def sext_T_i32(x):
  return np.int32(x)

def sext_T_i64(x):
  return np.int64(x)

def itob_T_bool(x):
  return bool(x)

def btoi_bool_i8(x):
  return np.int8(x)

def btoi_bool_i16(x):
  return np.int8(x)

def btoi_bool_i32(x):
  return np.int8(x)

def btoi_bool_i64(x):
  return np.int8(x)

def zext_i8_i8(x):
  return np.int8(np.uint8(x))

def zext_i8_i16(x):
  return np.int16(np.uint8(x))

def zext_i8_i32(x):
  return np.int32(np.uint8(x))

def zext_i8_i64(x):
  return np.int64(np.uint8(x))

def zext_i16_i8(x):
  return np.int8(np.uint16(x))

def zext_i16_i16(x):
  return np.int16(np.uint16(x))

def zext_i16_i32(x):
  return np.int32(np.uint16(x))

def zext_i16_i64(x):
  return np.int64(np.uint16(x))

def zext_i32_i8(x):
  return np.int8(np.uint32(x))

def zext_i32_i16(x):
  return np.int16(np.uint32(x))

def zext_i32_i32(x):
  return np.int32(np.uint32(x))

def zext_i32_i64(x):
  return np.int64(np.uint32(x))

def zext_i64_i8(x):
  return np.int8(np.uint64(x))

def zext_i64_i16(x):
  return np.int16(np.uint64(x))

def zext_i64_i32(x):
  return np.int32(np.uint64(x))

def zext_i64_i64(x):
  return np.int64(np.uint64(x))

sdiv8 = sdiv16 = sdiv32 = sdiv64 = sdivN
sdiv_up8 = sdiv1_up6 = sdiv_up32 = sdiv_up64 = sdiv_upN
sdiv_safe8 = sdiv1_safe6 = sdiv_safe32 = sdiv_safe64 = sdivN
sdiv_up_safe8 = sdiv_up1_safe6 = sdiv_up_safe32 = sdiv_up_safe64 = sdiv_upN
smod8 = smod16 = smod32 = smod64 = smodN
smod_safe8 = smod_safe16 = smod_safe32 = smod_safe64 = smodN
udiv8 = udiv16 = udiv32 = udiv64 = udivN
udiv_up8 = udiv_up16 = udiv_up32 = udiv_up64 = udivN
udiv_safe8 = udiv_safe16 = udiv_safe32 = udiv_safe64 = udiv_upN
udiv_up_safe8 = udiv_up_safe16 = udiv_up_safe32 = udiv_up_safe64 = udiv_upN
umod8 = umod16 = umod32 = umod64 = umodN
umod_safe8 = umod_safe16 = umod_safe32 = umod_safe64 = umodN
squot8 = squot16 = squot32 = squot64 = squotN
squot_safe8 = squot_safe16 = squot_safe32 = squot_safe64 = squotN
srem8 = srem16 = srem32 = srem64 = sremN
srem_safe8 = srem_safe16 = srem_safe32 = srem_safe64 = sremN

shl8 = shl16 = shl32 = shl64 = shlN
ashr8 = ashr16 = ashr32 = ashr64 = ashrN
smax8 = smax16 = smax32 = smax64 = smaxN
smin8 = smin16 = smin32 = smin64 = sminN
umax8 = umax16 = umax32 = umax64 = umaxN
umin8 = umin16 = umin32 = umin64 = uminN
pow8 = pow16 = pow32 = pow64 = powN
fpow32 = fpow64 = fpowN
fmax32 = fmax64 = fmaxN
fmin32 = fmin64 = fminN
sle8 = sle16 = sle32 = sle64 = sleN
slt8 = slt16 = slt32 = slt64 = sltN
ule8 = ule16 = ule32 = ule64 = uleN
ult8 = ult16 = ult32 = ult64 = ultN
sext_i8_i8 = sext_i16_i8 = sext_i32_i8 = sext_i64_i8 = sext_T_i8
sext_i8_i16 = sext_i16_i16 = sext_i32_i16 = sext_i64_i16 = sext_T_i16
sext_i8_i32 = sext_i16_i32 = sext_i32_i32 = sext_i64_i32 = sext_T_i32
sext_i8_i64 = sext_i16_i64 = sext_i32_i64 = sext_i64_i64 = sext_T_i64
itob_i8_bool = itob_i16_bool = itob_i32_bool = itob_i64_bool = itob_T_bool

def clz_T(x):
  n = np.int32(0)
  bits = x.itemsize * 8
  for i in range(bits):
    if x < 0:
      break
    n += 1
    x <<= np.int8(1)
  return n

def ctz_T(x):
  n = np.int32(0)
  bits = x.itemsize * 8
  for i in range(bits):
    if (x & 1) == 1:
      break
    n += 1
    x >>= np.int8(1)
  return n

def popc_T(x):
  c = np.int32(0)
  while x != 0:
    x &= x - np.int8(1)
    c += np.int8(1)
  return c

futhark_popc8 = futhark_popc16 = futhark_popc32 = futhark_popc64 = popc_T
futhark_clzz8 = futhark_clzz16 = futhark_clzz32 = futhark_clzz64 = clz_T
futhark_ctzz8 = futhark_ctzz16 = futhark_ctzz32 = futhark_ctzz64 = ctz_T

def ssignum(x):
  return np.sign(x)

def usignum(x):
  if x < 0:
    return ssignum(-x)
  else:
    return ssignum(x)

def sitofp_T_f32(x):
  return np.float32(x)
sitofp_i8_f32 = sitofp_i16_f32 = sitofp_i32_f32 = sitofp_i64_f32 = sitofp_T_f32

def sitofp_T_f64(x):
  return np.float64(x)
sitofp_i8_f64 = sitofp_i16_f64 = sitofp_i32_f64 = sitofp_i64_f64 = sitofp_T_f64

def uitofp_T_f32(x):
  return np.float32(unsigned(x))
uitofp_i8_f32 = uitofp_i16_f32 = uitofp_i32_f32 = uitofp_i64_f32 = uitofp_T_f32

def uitofp_T_f64(x):
  return np.float64(unsigned(x))
uitofp_i8_f64 = uitofp_i16_f64 = uitofp_i32_f64 = uitofp_i64_f64 = uitofp_T_f64

def fptosi_T_i8(x):
  return np.int8(np.trunc(x))
fptosi_f32_i8 = fptosi_f64_i8 = fptosi_T_i8

def fptosi_T_i16(x):
  return np.int16(np.trunc(x))
fptosi_f32_i16 = fptosi_f64_i16 = fptosi_T_i16

def fptosi_T_i32(x):
  return np.int32(np.trunc(x))
fptosi_f32_i32 = fptosi_f64_i32 = fptosi_T_i32

def fptosi_T_i64(x):
  return np.int64(np.trunc(x))
fptosi_f32_i64 = fptosi_f64_i64 = fptosi_T_i64

def fptoui_T_i8(x):
  return np.uint8(np.trunc(x))
fptoui_f32_i8 = fptoui_f64_i8 = fptoui_T_i8

def fptoui_T_i16(x):
  return np.uint16(np.trunc(x))
fptoui_f32_i16 = fptoui_f64_i16 = fptoui_T_i16

def fptoui_T_i32(x):
  return np.uint32(np.trunc(x))
fptoui_f32_i32 = fptoui_f64_i32 = fptoui_T_i32

def fptoui_T_i64(x):
  return np.uint64(np.trunc(x))
fptoui_f32_i64 = fptoui_f64_i64 = fptoui_T_i64

def fpconv_f32_f64(x):
  return np.float64(x)

def fpconv_f64_f32(x):
  return np.float32(x)

def futhark_mul_hi8(a, b):
  a = np.uint64(np.uint8(a))
  b = np.uint64(np.uint8(b))
  return np.int8((a*b) >> np.uint64(8))

def futhark_mul_hi16(a, b):
  a = np.uint64(np.uint16(a))
  b = np.uint64(np.uint16(b))
  return np.int16((a*b) >> np.uint64(16))

def futhark_mul_hi32(a, b):
  a = np.uint64(np.uint32(a))
  b = np.uint64(np.uint32(b))
  return np.int32((a*b) >> np.uint64(32))

# This one is done with arbitrary-precision integers.
def futhark_mul_hi64(a, b):
  a = int(np.uint64(a))
  b = int(np.uint64(b))
  return np.int64(np.uint64(a*b >> 64))

def futhark_mad_hi8(a, b, c):
  return futhark_mul_hi8(a,b) + c

def futhark_mad_hi16(a, b, c):
  return futhark_mul_hi16(a,b) + c

def futhark_mad_hi32(a, b, c):
  return futhark_mul_hi32(a,b) + c

def futhark_mad_hi64(a, b, c):
  return futhark_mul_hi64(a,b) + c

def futhark_log64(x):
  return np.float64(np.log(x))

def futhark_log2_64(x):
  return np.float64(np.log2(x))

def futhark_log10_64(x):
  return np.float64(np.log10(x))

def futhark_sqrt64(x):
  return np.sqrt(x)

def futhark_exp64(x):
  return np.exp(x)

def futhark_cos64(x):
  return np.cos(x)

def futhark_sin64(x):
  return np.sin(x)

def futhark_tan64(x):
  return np.tan(x)

def futhark_acos64(x):
  return np.arccos(x)

def futhark_asin64(x):
  return np.arcsin(x)

def futhark_atan64(x):
  return np.arctan(x)

def futhark_cosh64(x):
  return np.cosh(x)

def futhark_sinh64(x):
  return np.sinh(x)

def futhark_tanh64(x):
  return np.tanh(x)

def futhark_acosh64(x):
  return np.arccosh(x)

def futhark_asinh64(x):
  return np.arcsinh(x)

def futhark_atanh64(x):
  return np.arctanh(x)

def futhark_atan2_64(x, y):
  return np.arctan2(x, y)

def futhark_hypot64(x, y):
  return np.hypot(x, y)

def futhark_gamma64(x):
  return np.float64(math.gamma(x))

def futhark_lgamma64(x):
  return np.float64(math.lgamma(x))

def futhark_round64(x):
  return np.round(x)

def futhark_ceil64(x):
  return np.ceil(x)

def futhark_floor64(x):
  return np.floor(x)

def futhark_isnan64(x):
  return np.isnan(x)

def futhark_isinf64(x):
  return np.isinf(x)

def futhark_to_bits64(x):
  s = struct.pack('>d', x)
  return np.int64(struct.unpack('>q', s)[0])

def futhark_from_bits64(x):
  s = struct.pack('>q', x)
  return np.float64(struct.unpack('>d', s)[0])

def futhark_log32(x):
  return np.float32(np.log(x))

def futhark_log2_32(x):
  return np.float32(np.log2(x))

def futhark_log10_32(x):
  return np.float32(np.log10(x))

def futhark_sqrt32(x):
  return np.float32(np.sqrt(x))

def futhark_exp32(x):
  return np.exp(x)

def futhark_cos32(x):
  return np.cos(x)

def futhark_sin32(x):
  return np.sin(x)

def futhark_tan32(x):
  return np.tan(x)

def futhark_acos32(x):
  return np.arccos(x)

def futhark_asin32(x):
  return np.arcsin(x)

def futhark_atan32(x):
  return np.arctan(x)

def futhark_cosh32(x):
  return np.cosh(x)

def futhark_sinh32(x):
  return np.sinh(x)

def futhark_tanh32(x):
  return np.tanh(x)

def futhark_acosh32(x):
  return np.arccosh(x)

def futhark_asinh32(x):
  return np.arcsinh(x)

def futhark_atanh32(x):
  return np.arctanh(x)

def futhark_atan2_32(x, y):
  return np.arctan2(x, y)

def futhark_hypot32(x, y):
  return np.hypot(x, y)

def futhark_gamma32(x):
  return np.float32(math.gamma(x))

def futhark_lgamma32(x):
  return np.float32(math.lgamma(x))

def futhark_round32(x):
  return np.round(x)

def futhark_ceil32(x):
  return np.ceil(x)

def futhark_floor32(x):
  return np.floor(x)

def futhark_isnan32(x):
  return np.isnan(x)

def futhark_isinf32(x):
  return np.isinf(x)

def futhark_to_bits32(x):
  s = struct.pack('>f', x)
  return np.int32(struct.unpack('>l', s)[0])

def futhark_from_bits32(x):
  s = struct.pack('>l', x)
  return np.float32(struct.unpack('>f', s)[0])

def futhark_lerp32(v0, v1, t):
  return v0 + (v1-v0)*t

def futhark_lerp64(v0, v1, t):
  return v0 + (v1-v0)*t

def futhark_mad32(a, b, c):
  return a * b + c

def futhark_mad64(a, b, c):
  return a * b + c

def futhark_fma32(a, b, c):
  return a * b + c

def futhark_fma64(a, b, c):
  return a * b + c

# End of scalar.py.
# Start of server.py

import sys
import time
import shlex # For string splitting

class Server:
    def __init__(self, ctx):
        self._ctx = ctx
        self._vars = {}

    class Failure(BaseException):
        def __init__(self, msg):
            self.msg = msg

    def _get_arg(self, args, i):
        if i < len(args):
            return args[i]
        else:
            raise self.Failure('Insufficient command args')

    def _get_entry_point(self, entry):
        if entry in self._ctx.entry_points:
            return self._ctx.entry_points[entry]
        else:
            raise self.Failure('Unknown entry point: %s' % entry)

    def _check_var(self, vname):
        if not vname in self._vars:
            raise self.Failure('Unknown variable: %s' % vname)

    def _check_new_var(self, vname):
        if vname in self._vars:
            raise self.Failure('Variable already exists: %s' % vname)

    def _get_var(self, vname):
        self._check_var(vname)
        return self._vars[vname]

    def _cmd_inputs(self, args):
        entry = self._get_arg(args, 0)
        for t in self._get_entry_point(entry)[0]:
            print(t)

    def _cmd_outputs(self, args):
        entry = self._get_arg(args, 0)
        for t in self._get_entry_point(entry)[1]:
            print(t)

    def _cmd_dummy(self, args):
        pass

    def _cmd_free(self, args):
        for vname in args:
            self._check_var(vname)
            del self._vars[vname]

    def _cmd_rename(self, args):
        oldname = self._get_arg(args, 0)
        newname = self._get_arg(args, 1)
        self._check_var(oldname)
        self._check_new_var(newname)
        self._vars[newname] = self._vars[oldname]
        del self._vars[oldname]

    def _cmd_call(self, args):
        entry = self._get_entry_point(self._get_arg(args, 0))
        num_ins = len(entry[0])
        num_outs = len(entry[1])
        exp_len = 1 + num_outs + num_ins

        if len(args) != exp_len:
            raise self.Failure('Invalid argument count, expected %d' % exp_len)

        out_vnames = args[1:num_outs+1]

        for out_vname in out_vnames:
            self._check_new_var(out_vname)

        in_vnames = args[1+num_outs:]
        ins = [ self._get_var(in_vname) for in_vname in in_vnames ]

        try:
            (runtime, vals) = getattr(self._ctx, args[0])(*ins)
        except Exception as e:
            raise self.Failure(str(e))

        print('runtime: %d' % runtime)

        if num_outs == 1:
            self._vars[out_vnames[0]] = vals
        else:
            for (out_vname, val) in zip(out_vnames, vals):
                self._vars[out_vname] = val

    def _store_val(self, f, value):
        # In case we are using the PyOpenCL backend, we first
        # need to convert OpenCL arrays to ordinary NumPy
        # arrays.  We do this in a nasty way.
        if isinstance(value, opaque):
            for component in value.data:
                self._store_val(f, component)
        elif isinstance(value, np.number) or isinstance(value, bool) or isinstance(value, np.bool_) or isinstance(value, np.ndarray):
            # Ordinary NumPy value.
            f.write(construct_binary_value(value))
        else:
            # Assuming PyOpenCL array.
            f.write(construct_binary_value(value.get()))

    def _cmd_store(self, args):
        fname = self._get_arg(args, 0)

        with open(fname, 'wb') as f:
            for i in range(1, len(args)):
                self._store_val(f, self._get_var(args[i]))

    def _restore_val(self, reader, typename):
        if typename in self._ctx.opaques:
            vs = []
            for t in self._ctx.opaques[typename]:
                vs += [read_value(t, reader)]
            return opaque(typename, *vs)
        else:
            return read_value(typename, reader)

    def _cmd_restore(self, args):
        if len(args) % 2 == 0:
            raise self.Failure('Invalid argument count')

        fname = args[0]
        args = args[1:]

        with open(fname, 'rb') as f:
            reader = ReaderInput(f)
            while args != []:
                vname = args[0]
                typename = args[1]
                args = args[2:]

                if vname in self._vars:
                    raise self.Failure('Variable already exists: %s' % vname)

                try:
                    self._vars[vname] = self._restore_val(reader, typename)
                except ValueError:
                    raise self.Failure('Failed to restore variable %s.\n'
                                       'Possibly malformed data in %s.\n'
                                       % (vname, fname))

            skip_spaces(reader)
            if reader.get_char() != b'':
                raise self.Failure('Expected EOF after reading values')

    _commands = { 'inputs': _cmd_inputs,
                  'outputs': _cmd_outputs,
                  'call': _cmd_call,
                  'restore': _cmd_restore,
                  'store': _cmd_store,
                  'free': _cmd_free,
                  'rename': _cmd_rename,
                  'clear': _cmd_dummy,
                  'pause_profiling': _cmd_dummy,
                  'unpause_profiling': _cmd_dummy,
                  'report': _cmd_dummy
                 }

    def _process_line(self, line):
        words = shlex.split(line)
        if words == []:
            raise self.Failure('Empty line')
        else:
            cmd = words[0]
            args = words[1:]
            if cmd in self._commands:
                self._commands[cmd](self, args)
            else:
                raise self.Failure('Unknown command: %s' % cmd)

    def run(self):
        while True:
            print('%%% OK', flush=True)
            line = sys.stdin.readline()
            if line == '':
                return
            try:
                self._process_line(line)
            except self.Failure as e:
                print('%%% FAILURE')
                print(e.msg)

# End of server.py
class bfastfinal:
  entry_points = {"convertToFloat": (["i16", "[][][]i16"], ["*[][][]f32"]),
                  "main": (["i32", "i32", "i32", "f32", "f32", "f32", "[]i32",
                            "[][]f32"], ["[]i32", "[]i32", "[]f32"]),
                  "mainDetailed": (["i32", "i32", "i32", "f32", "f32", "f32",
                                    "[]i32", "[][]f32"], ["*[]f32", "[]i32",
                                                          "[]i32", "[]f32",
                                                          "[][]f32", "[][]f32",
                                                          "[]f32", "[]i32",
                                                          "[]f32", "[]f32",
                                                          "[][]f32",
                                                          "*[][]f32"]),
                  "mainMagnitude": (["i32", "i32", "i32", "f32", "f32", "f32",
                                     "[]i32", "[][]f32"], ["[]i32", "[]i32",
                                                           "[]f32", "[]f32"]),
                  "reshapeTransp": (["[][][]f32"], ["[][]f32"])}
  opaques = {}
  def __init__(self, command_queue=None, interactive=False,
               platform_pref=preferred_platform, device_pref=preferred_device,
               default_group_size=default_group_size,
               default_num_groups=default_num_groups,
               default_tile_size=default_tile_size,
               default_reg_tile_size=default_reg_tile_size,
               default_threshold=default_threshold, sizes=sizes):
    size_heuristics=[("NVIDIA CUDA", cl.device_type.GPU, "lockstep_width",
      lambda device: np.int32(32)), ("AMD Accelerated Parallel Processing",
                                     cl.device_type.GPU, "lockstep_width",
                                     lambda device: np.int32(32)), ("",
                                                                    cl.device_type.GPU,
                                                                    "lockstep_width",
                                                                    lambda device: np.int32(1)),
     ("", cl.device_type.GPU, "num_groups",
      lambda device: (np.int32(4) * device.get_info(getattr(cl.device_info,
                                                            "MAX_COMPUTE_UNITS")))),
     ("", cl.device_type.GPU, "group_size", lambda device: np.int32(256)), ("",
                                                                            cl.device_type.GPU,
                                                                            "tile_size",
                                                                            lambda device: np.int32(32)),
     ("", cl.device_type.GPU, "reg_tile_size", lambda device: np.int32(2)), ("",
                                                                             cl.device_type.GPU,
                                                                             "threshold",
                                                                             lambda device: np.int32(32768)),
     ("", cl.device_type.CPU, "lockstep_width", lambda device: np.int32(1)), ("",
                                                                              cl.device_type.CPU,
                                                                              "num_groups",
                                                                              lambda device: device.get_info(getattr(cl.device_info,
                                                                                                                     "MAX_COMPUTE_UNITS"))),
     ("", cl.device_type.CPU, "group_size", lambda device: np.int32(32)), ("",
                                                                           cl.device_type.CPU,
                                                                           "tile_size",
                                                                           lambda device: np.int32(4)),
     ("", cl.device_type.CPU, "reg_tile_size", lambda device: np.int32(1)), ("",
                                                                             cl.device_type.CPU,
                                                                             "threshold",
                                                                             lambda device: device.get_info(getattr(cl.device_info,
                                                                                                                    "MAX_COMPUTE_UNITS")))]
    self.global_failure_args_max = 4
    self.failure_msgs=["Index [{}, {}] out of bounds for array of shape [{}][{}].\n-> #0  helpers.fut:75:45-50\n   #1  helpers.fut:74:14-79:30\n   #2  bfastfinal.fut:50:35-50\n   #3  bfastfinal.fut:189:5-58\n   #4  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:59:16-27\n   #1  helpers.fut:80:16-34\n   #2  bfastfinal.fut:50:35-50\n   #3  bfastfinal.fut:189:5-58\n   #4  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:61:50-71\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:189:5-58\n   #5  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:62:37-48\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:189:5-58\n   #5  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:64:38-65\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:189:5-58\n   #5  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:64:69-95\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:189:5-58\n   #5  bfastfinal.fut:184:1-190:25\n",
     "Index [{}, {}] out of bounds for array of shape [{}][{}].\n-> #0  helpers.fut:75:45-50\n   #1  helpers.fut:74:14-79:30\n   #2  bfastfinal.fut:50:35-50\n   #3  bfastfinal.fut:189:5-58\n   #4  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:61:50-71\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:189:5-58\n   #5  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:62:37-48\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:189:5-58\n   #5  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:64:38-65\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:189:5-58\n   #5  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:64:69-95\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:189:5-58\n   #5  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:61:50-71\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:189:5-58\n   #5  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:62:37-48\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:189:5-58\n   #5  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:64:38-65\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:189:5-58\n   #5  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:64:69-95\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:189:5-58\n   #5  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:86:51-60\n   #1  bfastfinal.fut:86:25-83\n   #2  /prelude/soacs.fut:67:19-23\n   #3  /prelude/soacs.fut:67:3-37\n   #4  bfastfinal.fut:83:5-91:22\n   #5  bfastfinal.fut:189:5-58\n   #6  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:86:51-60\n   #1  bfastfinal.fut:86:25-83\n   #2  /prelude/soacs.fut:67:19-23\n   #3  /prelude/soacs.fut:67:3-37\n   #4  bfastfinal.fut:83:5-91:22\n   #5  bfastfinal.fut:189:5-58\n   #6  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:86:51-60\n   #1  bfastfinal.fut:86:25-83\n   #2  /prelude/soacs.fut:67:19-23\n   #3  /prelude/soacs.fut:67:3-37\n   #4  bfastfinal.fut:83:5-91:22\n   #5  bfastfinal.fut:189:5-58\n   #6  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:86:51-60\n   #1  bfastfinal.fut:86:25-83\n   #2  /prelude/soacs.fut:67:19-23\n   #3  /prelude/soacs.fut:67:3-37\n   #4  bfastfinal.fut:83:5-91:22\n   #5  bfastfinal.fut:189:5-58\n   #6  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:86:51-60\n   #1  bfastfinal.fut:86:25-83\n   #2  /prelude/soacs.fut:67:19-23\n   #3  /prelude/soacs.fut:67:3-37\n   #4  bfastfinal.fut:83:5-91:22\n   #5  bfastfinal.fut:189:5-58\n   #6  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:100:43-65\n   #1  bfastfinal.fut:99:27-102:47\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:97:17-104:24\n   #4  bfastfinal.fut:189:5-58\n   #5  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:100:43-65\n   #1  bfastfinal.fut:99:27-102:47\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:97:17-104:24\n   #4  bfastfinal.fut:189:5-58\n   #5  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:100:43-65\n   #1  bfastfinal.fut:99:27-102:47\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:97:17-104:24\n   #4  bfastfinal.fut:189:5-58\n   #5  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:100:43-65\n   #1  bfastfinal.fut:99:27-102:47\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:97:17-104:24\n   #4  bfastfinal.fut:189:5-58\n   #5  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:106:37-57\n   #1  bfastfinal.fut:106:15-109:36\n   #2  bfastfinal.fut:189:5-58\n   #3  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:141:38-52\n   #1  bfastfinal.fut:139:22-142:45\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:136:38-164:9\n   #4  bfastfinal.fut:189:5-58\n   #5  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:141:56-74\n   #1  bfastfinal.fut:139:22-142:45\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:136:38-164:9\n   #4  bfastfinal.fut:189:5-58\n   #5  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:12:27-44\n   #1  bfastfinal.fut:158:35-74\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:136:38-164:9\n   #4  bfastfinal.fut:189:5-58\n   #5  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:141:38-52\n   #1  bfastfinal.fut:139:22-142:45\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:136:38-164:9\n   #4  bfastfinal.fut:189:5-58\n   #5  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:141:56-74\n   #1  bfastfinal.fut:139:22-142:45\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:136:38-164:9\n   #4  bfastfinal.fut:189:5-58\n   #5  bfastfinal.fut:184:1-190:25\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:12:27-44\n   #1  bfastfinal.fut:158:35-74\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:136:38-164:9\n   #4  bfastfinal.fut:189:5-58\n   #5  bfastfinal.fut:184:1-190:25\n",
     "Index [{}, {}] out of bounds for array of shape [{}][{}].\n-> #0  helpers.fut:75:45-50\n   #1  helpers.fut:74:14-79:30\n   #2  bfastfinal.fut:50:35-50\n   #3  bfastfinal.fut:174:3-56\n   #4  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:59:16-27\n   #1  helpers.fut:80:16-34\n   #2  bfastfinal.fut:50:35-50\n   #3  bfastfinal.fut:174:3-56\n   #4  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:61:50-71\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:62:37-48\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:64:38-65\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:64:69-95\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}, {}] out of bounds for array of shape [{}][{}].\n-> #0  helpers.fut:75:45-50\n   #1  helpers.fut:74:14-79:30\n   #2  bfastfinal.fut:50:35-50\n   #3  bfastfinal.fut:174:3-56\n   #4  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:61:50-71\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:62:37-48\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:64:38-65\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:64:69-95\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:61:50-71\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:62:37-48\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:64:38-65\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:64:69-95\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:86:51-60\n   #1  bfastfinal.fut:86:25-83\n   #2  /prelude/soacs.fut:67:19-23\n   #3  /prelude/soacs.fut:67:3-37\n   #4  bfastfinal.fut:83:5-91:22\n   #5  bfastfinal.fut:174:3-56\n   #6  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:86:51-60\n   #1  bfastfinal.fut:86:25-83\n   #2  /prelude/soacs.fut:67:19-23\n   #3  /prelude/soacs.fut:67:3-37\n   #4  bfastfinal.fut:83:5-91:22\n   #5  bfastfinal.fut:174:3-56\n   #6  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:86:51-60\n   #1  bfastfinal.fut:86:25-83\n   #2  /prelude/soacs.fut:67:19-23\n   #3  /prelude/soacs.fut:67:3-37\n   #4  bfastfinal.fut:83:5-91:22\n   #5  bfastfinal.fut:174:3-56\n   #6  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:86:51-60\n   #1  bfastfinal.fut:86:25-83\n   #2  /prelude/soacs.fut:67:19-23\n   #3  /prelude/soacs.fut:67:3-37\n   #4  bfastfinal.fut:83:5-91:22\n   #5  bfastfinal.fut:174:3-56\n   #6  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:86:51-60\n   #1  bfastfinal.fut:86:25-83\n   #2  /prelude/soacs.fut:67:19-23\n   #3  /prelude/soacs.fut:67:3-37\n   #4  bfastfinal.fut:83:5-91:22\n   #5  bfastfinal.fut:174:3-56\n   #6  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:100:43-65\n   #1  bfastfinal.fut:99:27-102:47\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:97:17-104:24\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:100:43-65\n   #1  bfastfinal.fut:99:27-102:47\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:97:17-104:24\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:100:43-65\n   #1  bfastfinal.fut:99:27-102:47\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:97:17-104:24\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:100:43-65\n   #1  bfastfinal.fut:99:27-102:47\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:97:17-104:24\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:106:37-57\n   #1  bfastfinal.fut:106:15-109:36\n   #2  bfastfinal.fut:174:3-56\n   #3  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:116:54-68\n   #1  bfastfinal.fut:116:13-119:36\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:114:20-131:9\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:117:29-43\n   #1  bfastfinal.fut:116:13-119:36\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:114:20-131:9\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  lib/github.com/diku-dk/sorts/insertion_sort.fut:19:72-76\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:116:13-121:42\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:114:20-131:9\n   #5  bfastfinal.fut:174:3-56\n   #6  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  lib/github.com/diku-dk/sorts/insertion_sort.fut:19:59-65\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:116:13-121:42\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:114:20-131:9\n   #5  bfastfinal.fut:174:3-56\n   #6  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  lib/github.com/diku-dk/sorts/insertion_sort.fut:8:17-21\n   #1  lib/github.com/diku-dk/sorts/insertion_sort.fut:20:28-42\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:116:13-121:42\n   #4  /prelude/functional.fut:9:42-44\n   #5  bfastfinal.fut:114:20-131:9\n   #6  bfastfinal.fut:174:3-56\n   #7  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  lib/github.com/diku-dk/sorts/insertion_sort.fut:9:20-24\n   #1  lib/github.com/diku-dk/sorts/insertion_sort.fut:20:28-42\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:116:13-121:42\n   #4  /prelude/functional.fut:9:42-44\n   #5  bfastfinal.fut:114:20-131:9\n   #6  bfastfinal.fut:174:3-56\n   #7  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  lib/github.com/diku-dk/sorts/insertion_sort.fut:19:72-76\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:116:13-121:42\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:114:20-131:9\n   #5  bfastfinal.fut:174:3-56\n   #6  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  lib/github.com/diku-dk/sorts/insertion_sort.fut:19:59-65\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:116:13-121:42\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:114:20-131:9\n   #5  bfastfinal.fut:174:3-56\n   #6  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:129:39-43\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:116:13-130:43\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:114:20-131:9\n   #5  bfastfinal.fut:174:3-56\n   #6  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:129:47-51\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:116:13-130:43\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:114:20-131:9\n   #5  bfastfinal.fut:174:3-56\n   #6  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:130:38-42\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:116:13-130:43\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:114:20-131:9\n   #5  bfastfinal.fut:174:3-56\n   #6  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:141:38-52\n   #1  bfastfinal.fut:139:22-142:45\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:136:38-164:9\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:141:56-74\n   #1  bfastfinal.fut:139:22-142:45\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:136:38-164:9\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:12:27-44\n   #1  bfastfinal.fut:158:35-74\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:136:38-164:9\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:12:27-44\n   #1  bfastfinal.fut:161:29-83\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:136:38-164:9\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:141:38-52\n   #1  bfastfinal.fut:139:22-142:45\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:136:38-164:9\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:141:56-74\n   #1  bfastfinal.fut:139:22-142:45\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:136:38-164:9\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:12:27-44\n   #1  bfastfinal.fut:158:35-74\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:136:38-164:9\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:12:27-44\n   #1  bfastfinal.fut:161:29-83\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:136:38-164:9\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:141:38-52\n   #1  bfastfinal.fut:139:22-142:45\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:136:38-164:9\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:141:56-74\n   #1  bfastfinal.fut:139:22-142:45\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:136:38-164:9\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:12:27-44\n   #1  bfastfinal.fut:158:35-74\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:136:38-164:9\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:12:27-44\n   #1  bfastfinal.fut:161:29-83\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:136:38-164:9\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n",
     "Index [{}, {}] out of bounds for array of shape [{}][{}].\n-> #0  helpers.fut:75:45-50\n   #1  helpers.fut:74:14-79:30\n   #2  bfastfinal.fut:50:35-50\n   #3  bfastfinal.fut:181:5-58\n   #4  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:59:16-27\n   #1  helpers.fut:80:16-34\n   #2  bfastfinal.fut:50:35-50\n   #3  bfastfinal.fut:181:5-58\n   #4  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:61:50-71\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:181:5-58\n   #5  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:62:37-48\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:181:5-58\n   #5  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:64:38-65\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:181:5-58\n   #5  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:64:69-95\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:181:5-58\n   #5  bfastfinal.fut:176:1-182:37\n",
     "Index [{}, {}] out of bounds for array of shape [{}][{}].\n-> #0  helpers.fut:75:45-50\n   #1  helpers.fut:74:14-79:30\n   #2  bfastfinal.fut:50:35-50\n   #3  bfastfinal.fut:181:5-58\n   #4  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:61:50-71\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:181:5-58\n   #5  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:62:37-48\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:181:5-58\n   #5  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:64:38-65\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:181:5-58\n   #5  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:64:69-95\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:181:5-58\n   #5  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:61:50-71\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:181:5-58\n   #5  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:62:37-48\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:181:5-58\n   #5  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:64:38-65\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:181:5-58\n   #5  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:64:69-95\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:181:5-58\n   #5  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:86:51-60\n   #1  bfastfinal.fut:86:25-83\n   #2  /prelude/soacs.fut:67:19-23\n   #3  /prelude/soacs.fut:67:3-37\n   #4  bfastfinal.fut:83:5-91:22\n   #5  bfastfinal.fut:181:5-58\n   #6  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:86:51-60\n   #1  bfastfinal.fut:86:25-83\n   #2  /prelude/soacs.fut:67:19-23\n   #3  /prelude/soacs.fut:67:3-37\n   #4  bfastfinal.fut:83:5-91:22\n   #5  bfastfinal.fut:181:5-58\n   #6  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:86:51-60\n   #1  bfastfinal.fut:86:25-83\n   #2  /prelude/soacs.fut:67:19-23\n   #3  /prelude/soacs.fut:67:3-37\n   #4  bfastfinal.fut:83:5-91:22\n   #5  bfastfinal.fut:181:5-58\n   #6  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:86:51-60\n   #1  bfastfinal.fut:86:25-83\n   #2  /prelude/soacs.fut:67:19-23\n   #3  /prelude/soacs.fut:67:3-37\n   #4  bfastfinal.fut:83:5-91:22\n   #5  bfastfinal.fut:181:5-58\n   #6  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:86:51-60\n   #1  bfastfinal.fut:86:25-83\n   #2  /prelude/soacs.fut:67:19-23\n   #3  /prelude/soacs.fut:67:3-37\n   #4  bfastfinal.fut:83:5-91:22\n   #5  bfastfinal.fut:181:5-58\n   #6  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:100:43-65\n   #1  bfastfinal.fut:99:27-102:47\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:97:17-104:24\n   #4  bfastfinal.fut:181:5-58\n   #5  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:100:43-65\n   #1  bfastfinal.fut:99:27-102:47\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:97:17-104:24\n   #4  bfastfinal.fut:181:5-58\n   #5  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:100:43-65\n   #1  bfastfinal.fut:99:27-102:47\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:97:17-104:24\n   #4  bfastfinal.fut:181:5-58\n   #5  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:100:43-65\n   #1  bfastfinal.fut:99:27-102:47\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:97:17-104:24\n   #4  bfastfinal.fut:181:5-58\n   #5  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:106:37-57\n   #1  bfastfinal.fut:106:15-109:36\n   #2  bfastfinal.fut:181:5-58\n   #3  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:116:54-68\n   #1  bfastfinal.fut:116:13-119:36\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:114:20-131:9\n   #4  bfastfinal.fut:181:5-58\n   #5  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:117:29-43\n   #1  bfastfinal.fut:116:13-119:36\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:114:20-131:9\n   #4  bfastfinal.fut:181:5-58\n   #5  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  lib/github.com/diku-dk/sorts/insertion_sort.fut:19:72-76\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:116:13-121:42\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:114:20-131:9\n   #5  bfastfinal.fut:181:5-58\n   #6  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  lib/github.com/diku-dk/sorts/insertion_sort.fut:19:59-65\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:116:13-121:42\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:114:20-131:9\n   #5  bfastfinal.fut:181:5-58\n   #6  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  lib/github.com/diku-dk/sorts/insertion_sort.fut:8:17-21\n   #1  lib/github.com/diku-dk/sorts/insertion_sort.fut:20:28-42\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:116:13-121:42\n   #4  /prelude/functional.fut:9:42-44\n   #5  bfastfinal.fut:114:20-131:9\n   #6  bfastfinal.fut:181:5-58\n   #7  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  lib/github.com/diku-dk/sorts/insertion_sort.fut:9:20-24\n   #1  lib/github.com/diku-dk/sorts/insertion_sort.fut:20:28-42\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:116:13-121:42\n   #4  /prelude/functional.fut:9:42-44\n   #5  bfastfinal.fut:114:20-131:9\n   #6  bfastfinal.fut:181:5-58\n   #7  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  lib/github.com/diku-dk/sorts/insertion_sort.fut:19:72-76\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:116:13-121:42\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:114:20-131:9\n   #5  bfastfinal.fut:181:5-58\n   #6  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  lib/github.com/diku-dk/sorts/insertion_sort.fut:19:59-65\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:116:13-121:42\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:114:20-131:9\n   #5  bfastfinal.fut:181:5-58\n   #6  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:129:39-43\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:116:13-130:43\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:114:20-131:9\n   #5  bfastfinal.fut:181:5-58\n   #6  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:129:47-51\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:116:13-130:43\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:114:20-131:9\n   #5  bfastfinal.fut:181:5-58\n   #6  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:130:38-42\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:116:13-130:43\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:114:20-131:9\n   #5  bfastfinal.fut:181:5-58\n   #6  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:141:38-52\n   #1  bfastfinal.fut:139:22-142:45\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:136:38-164:9\n   #4  bfastfinal.fut:181:5-58\n   #5  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:141:56-74\n   #1  bfastfinal.fut:139:22-142:45\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:136:38-164:9\n   #4  bfastfinal.fut:181:5-58\n   #5  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:12:27-44\n   #1  bfastfinal.fut:158:35-74\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:136:38-164:9\n   #4  bfastfinal.fut:181:5-58\n   #5  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:141:38-52\n   #1  bfastfinal.fut:139:22-142:45\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:136:38-164:9\n   #4  bfastfinal.fut:181:5-58\n   #5  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  bfastfinal.fut:141:56-74\n   #1  bfastfinal.fut:139:22-142:45\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:136:38-164:9\n   #4  bfastfinal.fut:181:5-58\n   #5  bfastfinal.fut:176:1-182:37\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:12:27-44\n   #1  bfastfinal.fut:158:35-74\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:136:38-164:9\n   #4  bfastfinal.fut:181:5-58\n   #5  bfastfinal.fut:176:1-182:37\n"]
    program = initialise_opencl_object(self,
                                       program_src=fut_opencl_src,
                                       command_queue=command_queue,
                                       interactive=interactive,
                                       platform_pref=platform_pref,
                                       device_pref=device_pref,
                                       default_group_size=default_group_size,
                                       default_num_groups=default_num_groups,
                                       default_tile_size=default_tile_size,
                                       default_reg_tile_size=default_reg_tile_size,
                                       default_threshold=default_threshold,
                                       size_heuristics=size_heuristics,
                                       required_types=["i16", "i32", "i64", "f32", "bool", "unit"],
                                       user_sizes=sizes,
                                       all_sizes={"builtin#replicate_f32.group_size_43631": {"class": "group_size",
                                                                                   "value": None},
                                        "builtin#replicate_i32.group_size_43640": {"class": "group_size",
                                                                                   "value": None},
                                        "convertToFloat.segmap_group_size_30162": {"class": "group_size",
                                                                                   "value": None},
                                        "main.Rx_39718": {"class": "reg_tile_size", "value": None},
                                        "main.Rx_40459": {"class": "reg_tile_size", "value": None},
                                        "main.Ry_39719": {"class": "reg_tile_size", "value": None},
                                        "main.Ry_40460": {"class": "reg_tile_size", "value": None},
                                        "main.Tk_39715": {"class": "tile_size", "value": None},
                                        "main.Tk_40456": {"class": "tile_size", "value": None},
                                        "main.Tx_39570": {"class": "tile_size", "value": None},
                                        "main.Tx_39716": {"class": "tile_size", "value": None},
                                        "main.Tx_40457": {"class": "tile_size", "value": None},
                                        "main.Ty_39571": {"class": "tile_size", "value": None},
                                        "main.Ty_39717": {"class": "tile_size", "value": None},
                                        "main.Ty_40458": {"class": "tile_size", "value": None},
                                        "main.segmap_group_size_36628": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_36732": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_36828": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_36857": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_36904": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_37308": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_37428": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_37448": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_37547": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_37636": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_37866": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_38007": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_38139": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_38333": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_38394": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_38519": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_38635": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_38774": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_38875": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_39054": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_39208": {"class": "group_size", "value": None},
                                        "main.segmap_num_groups_36859": {"class": "num_groups", "value": None},
                                        "main.segmap_num_groups_36906": {"class": "num_groups", "value": None},
                                        "main.segmap_num_groups_37868": {"class": "num_groups", "value": None},
                                        "main.segmap_num_groups_38009": {"class": "num_groups", "value": None},
                                        "main.segmap_num_groups_38141": {"class": "num_groups", "value": None},
                                        "main.segmap_num_groups_39210": {"class": "num_groups", "value": None},
                                        "main.segred_group_size_36964": {"class": "group_size", "value": None},
                                        "main.segred_group_size_37928": {"class": "group_size", "value": None},
                                        "main.segred_group_size_38065": {"class": "group_size", "value": None},
                                        "main.segred_group_size_38195": {"class": "group_size", "value": None},
                                        "main.segred_group_size_38650": {"class": "group_size", "value": None},
                                        "main.segred_group_size_38675": {"class": "group_size", "value": None},
                                        "main.segred_group_size_38746": {"class": "group_size", "value": None},
                                        "main.segred_group_size_38822": {"class": "group_size", "value": None},
                                        "main.segred_group_size_39105": {"class": "group_size", "value": None},
                                        "main.segred_num_groups_36966": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_37930": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_38067": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_38197": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_38652": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_38677": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_38748": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_38824": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_39107": {"class": "num_groups", "value": None},
                                        "main.segscan_group_size_38403": {"class": "group_size", "value": None},
                                        "main.segscan_group_size_39159": {"class": "group_size", "value": None},
                                        "main.segscan_num_groups_38405": {"class": "num_groups", "value": None},
                                        "main.segscan_num_groups_39161": {"class": "num_groups", "value": None},
                                        "main.suff_intra_par_11": {"class": "threshold(32,)", "value": 32},
                                        "main.suff_intra_par_13": {"class": "threshold(32, !main.suff_outer_par_12)",
                                                                   "value": 32},
                                        "main.suff_intra_par_15": {"class": "threshold(32,)", "value": 32},
                                        "main.suff_intra_par_3": {"class": "threshold(32,)", "value": 32},
                                        "main.suff_intra_par_4": {"class": "threshold(32, !main.suff_intra_par_3)",
                                                                  "value": 32},
                                        "main.suff_outer_par_0": {"class": "threshold(def,)", "value": None},
                                        "main.suff_outer_par_1": {"class": "threshold(def, !main.suff_outer_par_0)",
                                                                  "value": None},
                                        "main.suff_outer_par_10": {"class": "threshold(def, !main.suff_outer_par_9)",
                                                                   "value": None},
                                        "main.suff_outer_par_12": {"class": "threshold(def,)", "value": None},
                                        "main.suff_outer_par_14": {"class": "threshold(def,)", "value": None},
                                        "main.suff_outer_par_2": {"class": "threshold(def, !main.suff_outer_par_1 !main.suff_outer_par_0)",
                                                                  "value": None},
                                        "main.suff_outer_par_5": {"class": "threshold(def,)", "value": None},
                                        "main.suff_outer_par_6": {"class": "threshold(def, !main.suff_outer_par_5)",
                                                                  "value": None},
                                        "main.suff_outer_par_7": {"class": "threshold(def,)", "value": None},
                                        "main.suff_outer_par_8": {"class": "threshold(def, !main.suff_outer_par_7)",
                                                                  "value": None},
                                        "main.suff_outer_par_9": {"class": "threshold(def,)", "value": None},
                                        "main.tile_size_40182": {"class": "tile_size", "value": None},
                                        "mainDetailed.Rx_39718": {"class": "reg_tile_size", "value": None},
                                        "mainDetailed.Rx_40459": {"class": "reg_tile_size", "value": None},
                                        "mainDetailed.Ry_39719": {"class": "reg_tile_size", "value": None},
                                        "mainDetailed.Ry_40460": {"class": "reg_tile_size", "value": None},
                                        "mainDetailed.Tk_39715": {"class": "tile_size", "value": None},
                                        "mainDetailed.Tk_40456": {"class": "tile_size", "value": None},
                                        "mainDetailed.Tx_39570": {"class": "tile_size", "value": None},
                                        "mainDetailed.Tx_39716": {"class": "tile_size", "value": None},
                                        "mainDetailed.Tx_40457": {"class": "tile_size", "value": None},
                                        "mainDetailed.Ty_39571": {"class": "tile_size", "value": None},
                                        "mainDetailed.Ty_39717": {"class": "tile_size", "value": None},
                                        "mainDetailed.Ty_40458": {"class": "tile_size", "value": None},
                                        "mainDetailed.segmap_group_size_30232": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_30336": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_30432": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_30461": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_30508": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_30912": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_31032": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_31052": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_31151": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_31240": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_31470": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_31611": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_31743": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_31937": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_31998": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_32123": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_32239": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_32378": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_32479": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_32537": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_32631": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_32688": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_32848": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_33199": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_33248": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_33324": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_33374": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_num_groups_30463": {"class": "num_groups", "value": None},
                                        "mainDetailed.segmap_num_groups_30510": {"class": "num_groups", "value": None},
                                        "mainDetailed.segmap_num_groups_31472": {"class": "num_groups", "value": None},
                                        "mainDetailed.segmap_num_groups_31613": {"class": "num_groups", "value": None},
                                        "mainDetailed.segmap_num_groups_31745": {"class": "num_groups", "value": None},
                                        "mainDetailed.segmap_num_groups_32850": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_group_size_30568": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_31532": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_31669": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_31799": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_32254": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_32279": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_32350": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_32426": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_33284": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_num_groups_30570": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_31534": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_31671": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_31801": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_32256": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_32281": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_32352": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_32428": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_33286": {"class": "num_groups", "value": None},
                                        "mainDetailed.segscan_group_size_32007": {"class": "group_size",
                                                                                  "value": None},
                                        "mainDetailed.segscan_group_size_33335": {"class": "group_size",
                                                                                  "value": None},
                                        "mainDetailed.segscan_num_groups_32009": {"class": "num_groups",
                                                                                  "value": None},
                                        "mainDetailed.segscan_num_groups_33337": {"class": "num_groups",
                                                                                  "value": None},
                                        "mainDetailed.suff_intra_par_11": {"class": "threshold(32,)", "value": 32},
                                        "mainDetailed.suff_intra_par_13": {"class": "threshold(32, !mainDetailed.suff_outer_par_12)",
                                                                           "value": 32},
                                        "mainDetailed.suff_intra_par_16": {"class": "threshold(32, !mainDetailed.suff_outer_par_15)",
                                                                           "value": 32},
                                        "mainDetailed.suff_intra_par_3": {"class": "threshold(32,)", "value": 32},
                                        "mainDetailed.suff_intra_par_4": {"class": "threshold(32, !mainDetailed.suff_intra_par_3)",
                                                                          "value": 32},
                                        "mainDetailed.suff_outer_par_0": {"class": "threshold(def,)", "value": None},
                                        "mainDetailed.suff_outer_par_1": {"class": "threshold(def, !mainDetailed.suff_outer_par_0)",
                                                                          "value": None},
                                        "mainDetailed.suff_outer_par_10": {"class": "threshold(def, !mainDetailed.suff_outer_par_9)",
                                                                           "value": None},
                                        "mainDetailed.suff_outer_par_12": {"class": "threshold(def,)", "value": None},
                                        "mainDetailed.suff_outer_par_14": {"class": "threshold(def,)", "value": None},
                                        "mainDetailed.suff_outer_par_15": {"class": "threshold(def,)", "value": None},
                                        "mainDetailed.suff_outer_par_2": {"class": "threshold(def, !mainDetailed.suff_outer_par_1 !mainDetailed.suff_outer_par_0)",
                                                                          "value": None},
                                        "mainDetailed.suff_outer_par_5": {"class": "threshold(def,)", "value": None},
                                        "mainDetailed.suff_outer_par_6": {"class": "threshold(def, !mainDetailed.suff_outer_par_5)",
                                                                          "value": None},
                                        "mainDetailed.suff_outer_par_7": {"class": "threshold(def,)", "value": None},
                                        "mainDetailed.suff_outer_par_8": {"class": "threshold(def, !mainDetailed.suff_outer_par_7)",
                                                                          "value": None},
                                        "mainDetailed.suff_outer_par_9": {"class": "threshold(def,)", "value": None},
                                        "mainDetailed.tile_size_40182": {"class": "tile_size", "value": None},
                                        "mainMagnitude.Rx_39718": {"class": "reg_tile_size", "value": None},
                                        "mainMagnitude.Rx_40459": {"class": "reg_tile_size", "value": None},
                                        "mainMagnitude.Ry_39719": {"class": "reg_tile_size", "value": None},
                                        "mainMagnitude.Ry_40460": {"class": "reg_tile_size", "value": None},
                                        "mainMagnitude.Tk_39715": {"class": "tile_size", "value": None},
                                        "mainMagnitude.Tk_40456": {"class": "tile_size", "value": None},
                                        "mainMagnitude.Tx_39570": {"class": "tile_size", "value": None},
                                        "mainMagnitude.Tx_39716": {"class": "tile_size", "value": None},
                                        "mainMagnitude.Tx_40457": {"class": "tile_size", "value": None},
                                        "mainMagnitude.Ty_39571": {"class": "tile_size", "value": None},
                                        "mainMagnitude.Ty_39717": {"class": "tile_size", "value": None},
                                        "mainMagnitude.Ty_40458": {"class": "tile_size", "value": None},
                                        "mainMagnitude.segmap_group_size_33560": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_group_size_33664": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_group_size_33760": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_group_size_33789": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_group_size_33836": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_group_size_34240": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_group_size_34360": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_group_size_34380": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_group_size_34479": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_group_size_34568": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_group_size_34798": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_group_size_34939": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_group_size_35071": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_group_size_35265": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_group_size_35326": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_group_size_35451": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_group_size_35567": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_group_size_35706": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_group_size_35807": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_group_size_35852": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_group_size_35946": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_group_size_36003": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_group_size_36284": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_group_size_36438": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_num_groups_33791": {"class": "num_groups",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_num_groups_33838": {"class": "num_groups",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_num_groups_34800": {"class": "num_groups",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_num_groups_34941": {"class": "num_groups",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_num_groups_35073": {"class": "num_groups",
                                                                                  "value": None},
                                        "mainMagnitude.segmap_num_groups_36440": {"class": "num_groups",
                                                                                  "value": None},
                                        "mainMagnitude.segred_group_size_33896": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segred_group_size_34860": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segred_group_size_34997": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segred_group_size_35127": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segred_group_size_35582": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segred_group_size_35607": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segred_group_size_35678": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segred_group_size_35754": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segred_group_size_36335": {"class": "group_size",
                                                                                  "value": None},
                                        "mainMagnitude.segred_num_groups_33898": {"class": "num_groups",
                                                                                  "value": None},
                                        "mainMagnitude.segred_num_groups_34862": {"class": "num_groups",
                                                                                  "value": None},
                                        "mainMagnitude.segred_num_groups_34999": {"class": "num_groups",
                                                                                  "value": None},
                                        "mainMagnitude.segred_num_groups_35129": {"class": "num_groups",
                                                                                  "value": None},
                                        "mainMagnitude.segred_num_groups_35584": {"class": "num_groups",
                                                                                  "value": None},
                                        "mainMagnitude.segred_num_groups_35609": {"class": "num_groups",
                                                                                  "value": None},
                                        "mainMagnitude.segred_num_groups_35680": {"class": "num_groups",
                                                                                  "value": None},
                                        "mainMagnitude.segred_num_groups_35756": {"class": "num_groups",
                                                                                  "value": None},
                                        "mainMagnitude.segred_num_groups_36337": {"class": "num_groups",
                                                                                  "value": None},
                                        "mainMagnitude.segscan_group_size_35335": {"class": "group_size",
                                                                                   "value": None},
                                        "mainMagnitude.segscan_group_size_36389": {"class": "group_size",
                                                                                   "value": None},
                                        "mainMagnitude.segscan_num_groups_35337": {"class": "num_groups",
                                                                                   "value": None},
                                        "mainMagnitude.segscan_num_groups_36391": {"class": "num_groups",
                                                                                   "value": None},
                                        "mainMagnitude.suff_intra_par_11": {"class": "threshold(32,)", "value": 32},
                                        "mainMagnitude.suff_intra_par_13": {"class": "threshold(32, !mainMagnitude.suff_outer_par_12)",
                                                                            "value": 32},
                                        "mainMagnitude.suff_intra_par_15": {"class": "threshold(32,)", "value": 32},
                                        "mainMagnitude.suff_intra_par_3": {"class": "threshold(32,)", "value": 32},
                                        "mainMagnitude.suff_intra_par_4": {"class": "threshold(32, !mainMagnitude.suff_intra_par_3)",
                                                                           "value": 32},
                                        "mainMagnitude.suff_outer_par_0": {"class": "threshold(def,)", "value": None},
                                        "mainMagnitude.suff_outer_par_1": {"class": "threshold(def, !mainMagnitude.suff_outer_par_0)",
                                                                           "value": None},
                                        "mainMagnitude.suff_outer_par_10": {"class": "threshold(def, !mainMagnitude.suff_outer_par_9)",
                                                                            "value": None},
                                        "mainMagnitude.suff_outer_par_12": {"class": "threshold(def,)", "value": None},
                                        "mainMagnitude.suff_outer_par_14": {"class": "threshold(def,)", "value": None},
                                        "mainMagnitude.suff_outer_par_2": {"class": "threshold(def, !mainMagnitude.suff_outer_par_1 !mainMagnitude.suff_outer_par_0)",
                                                                           "value": None},
                                        "mainMagnitude.suff_outer_par_5": {"class": "threshold(def,)", "value": None},
                                        "mainMagnitude.suff_outer_par_6": {"class": "threshold(def, !mainMagnitude.suff_outer_par_5)",
                                                                           "value": None},
                                        "mainMagnitude.suff_outer_par_7": {"class": "threshold(def,)", "value": None},
                                        "mainMagnitude.suff_outer_par_8": {"class": "threshold(def, !mainMagnitude.suff_outer_par_7)",
                                                                           "value": None},
                                        "mainMagnitude.suff_outer_par_9": {"class": "threshold(def,)", "value": None},
                                        "mainMagnitude.tile_size_40182": {"class": "tile_size", "value": None}})
    self.builtinzhreplicate_f32zireplicate_43628_var = program.builtinzhreplicate_f32zireplicate_43628
    self.builtinzhreplicate_i32zireplicate_43637_var = program.builtinzhreplicate_i32zireplicate_43637
    self.convertToFloatzisegmap_30158_var = program.convertToFloatzisegmap_30158
    self.gpu_map_transpose_f32_var = program.gpu_map_transpose_f32
    self.gpu_map_transpose_f32_low_height_var = program.gpu_map_transpose_f32_low_height
    self.gpu_map_transpose_f32_low_width_var = program.gpu_map_transpose_f32_low_width
    self.gpu_map_transpose_f32_small_var = program.gpu_map_transpose_f32_small
    self.mainziscan_stage1_38409_var = program.mainziscan_stage1_38409
    self.mainziscan_stage1_39165_var = program.mainziscan_stage1_39165
    self.mainziscan_stage2_38409_var = program.mainziscan_stage2_38409
    self.mainziscan_stage2_39165_var = program.mainziscan_stage2_39165
    self.mainziscan_stage3_38409_var = program.mainziscan_stage3_38409
    self.mainziscan_stage3_39165_var = program.mainziscan_stage3_39165
    self.mainzisegmap_36625_var = program.mainzisegmap_36625
    self.mainzisegmap_36729_var = program.mainzisegmap_36729
    self.mainzisegmap_36825_var = program.mainzisegmap_36825
    self.mainzisegmap_36855_var = program.mainzisegmap_36855
    self.mainzisegmap_36901_var = program.mainzisegmap_36901
    self.mainzisegmap_37304_var = program.mainzisegmap_37304
    self.mainzisegmap_37425_var = program.mainzisegmap_37425
    self.mainzisegmap_37445_var = program.mainzisegmap_37445
    self.mainzisegmap_37545_var = program.mainzisegmap_37545
    self.mainzisegmap_37633_var = program.mainzisegmap_37633
    self.mainzisegmap_37864_var = program.mainzisegmap_37864
    self.mainzisegmap_38005_var = program.mainzisegmap_38005
    self.mainzisegmap_38137_var = program.mainzisegmap_38137
    self.mainzisegmap_38330_var = program.mainzisegmap_38330
    self.mainzisegmap_38392_var = program.mainzisegmap_38392
    self.mainzisegmap_38633_var = program.mainzisegmap_38633
    self.mainzisegmap_38873_var = program.mainzisegmap_38873
    self.mainzisegmap_39052_var = program.mainzisegmap_39052
    self.mainzisegmap_39206_var = program.mainzisegmap_39206
    self.mainzisegmap_intragroup_37212_var = program.mainzisegmap_intragroup_37212
    self.mainzisegmap_intragroup_37366_var = program.mainzisegmap_intragroup_37366
    self.mainzisegmap_intragroup_38284_var = program.mainzisegmap_intragroup_38284
    self.mainzisegmap_intragroup_38513_var = program.mainzisegmap_intragroup_38513
    self.mainzisegmap_intragroup_38924_var = program.mainzisegmap_intragroup_38924
    self.mainzisegmap_intragroup_39586_var = program.mainzisegmap_intragroup_39586
    self.mainzisegmap_intragroup_39739_var = program.mainzisegmap_intragroup_39739
    self.mainzisegmap_intragroup_40188_var = program.mainzisegmap_intragroup_40188
    self.mainzisegmap_intragroup_40480_var = program.mainzisegmap_intragroup_40480
    self.mainzisegmap_intragroup_40914_var = program.mainzisegmap_intragroup_40914
    self.mainzisegmap_intragroup_41120_var = program.mainzisegmap_intragroup_41120
    self.mainzisegred_large_36970_var = program.mainzisegred_large_36970
    self.mainzisegred_large_37934_var = program.mainzisegred_large_37934
    self.mainzisegred_large_38071_var = program.mainzisegred_large_38071
    self.mainzisegred_large_38201_var = program.mainzisegred_large_38201
    self.mainzisegred_large_38656_var = program.mainzisegred_large_38656
    self.mainzisegred_large_38681_var = program.mainzisegred_large_38681
    self.mainzisegred_large_38828_var = program.mainzisegred_large_38828
    self.mainzisegred_large_39111_var = program.mainzisegred_large_39111
    self.mainzisegred_nonseg_38754_var = program.mainzisegred_nonseg_38754
    self.mainzisegred_small_36970_var = program.mainzisegred_small_36970
    self.mainzisegred_small_37934_var = program.mainzisegred_small_37934
    self.mainzisegred_small_38071_var = program.mainzisegred_small_38071
    self.mainzisegred_small_38201_var = program.mainzisegred_small_38201
    self.mainzisegred_small_38656_var = program.mainzisegred_small_38656
    self.mainzisegred_small_38681_var = program.mainzisegred_small_38681
    self.mainzisegred_small_38828_var = program.mainzisegred_small_38828
    self.mainzisegred_small_39111_var = program.mainzisegred_small_39111
    self.mainDetailedziscan_stage1_32013_var = program.mainDetailedziscan_stage1_32013
    self.mainDetailedziscan_stage1_33341_var = program.mainDetailedziscan_stage1_33341
    self.mainDetailedziscan_stage2_32013_var = program.mainDetailedziscan_stage2_32013
    self.mainDetailedziscan_stage2_33341_var = program.mainDetailedziscan_stage2_33341
    self.mainDetailedziscan_stage3_32013_var = program.mainDetailedziscan_stage3_32013
    self.mainDetailedziscan_stage3_33341_var = program.mainDetailedziscan_stage3_33341
    self.mainDetailedzisegmap_30229_var = program.mainDetailedzisegmap_30229
    self.mainDetailedzisegmap_30333_var = program.mainDetailedzisegmap_30333
    self.mainDetailedzisegmap_30429_var = program.mainDetailedzisegmap_30429
    self.mainDetailedzisegmap_30459_var = program.mainDetailedzisegmap_30459
    self.mainDetailedzisegmap_30505_var = program.mainDetailedzisegmap_30505
    self.mainDetailedzisegmap_30908_var = program.mainDetailedzisegmap_30908
    self.mainDetailedzisegmap_31029_var = program.mainDetailedzisegmap_31029
    self.mainDetailedzisegmap_31049_var = program.mainDetailedzisegmap_31049
    self.mainDetailedzisegmap_31149_var = program.mainDetailedzisegmap_31149
    self.mainDetailedzisegmap_31237_var = program.mainDetailedzisegmap_31237
    self.mainDetailedzisegmap_31468_var = program.mainDetailedzisegmap_31468
    self.mainDetailedzisegmap_31609_var = program.mainDetailedzisegmap_31609
    self.mainDetailedzisegmap_31741_var = program.mainDetailedzisegmap_31741
    self.mainDetailedzisegmap_31934_var = program.mainDetailedzisegmap_31934
    self.mainDetailedzisegmap_31996_var = program.mainDetailedzisegmap_31996
    self.mainDetailedzisegmap_32237_var = program.mainDetailedzisegmap_32237
    self.mainDetailedzisegmap_32477_var = program.mainDetailedzisegmap_32477
    self.mainDetailedzisegmap_32535_var = program.mainDetailedzisegmap_32535
    self.mainDetailedzisegmap_32628_var = program.mainDetailedzisegmap_32628
    self.mainDetailedzisegmap_32686_var = program.mainDetailedzisegmap_32686
    self.mainDetailedzisegmap_32846_var = program.mainDetailedzisegmap_32846
    self.mainDetailedzisegmap_33196_var = program.mainDetailedzisegmap_33196
    self.mainDetailedzisegmap_33246_var = program.mainDetailedzisegmap_33246
    self.mainDetailedzisegmap_33322_var = program.mainDetailedzisegmap_33322
    self.mainDetailedzisegmap_33372_var = program.mainDetailedzisegmap_33372
    self.mainDetailedzisegmap_intragroup_30816_var = program.mainDetailedzisegmap_intragroup_30816
    self.mainDetailedzisegmap_intragroup_30970_var = program.mainDetailedzisegmap_intragroup_30970
    self.mainDetailedzisegmap_intragroup_31888_var = program.mainDetailedzisegmap_intragroup_31888
    self.mainDetailedzisegmap_intragroup_32117_var = program.mainDetailedzisegmap_intragroup_32117
    self.mainDetailedzisegmap_intragroup_32842_var = program.mainDetailedzisegmap_intragroup_32842
    self.mainDetailedzisegmap_intragroup_39586_var = program.mainDetailedzisegmap_intragroup_39586
    self.mainDetailedzisegmap_intragroup_39739_var = program.mainDetailedzisegmap_intragroup_39739
    self.mainDetailedzisegmap_intragroup_40188_var = program.mainDetailedzisegmap_intragroup_40188
    self.mainDetailedzisegmap_intragroup_40480_var = program.mainDetailedzisegmap_intragroup_40480
    self.mainDetailedzisegmap_intragroup_40914_var = program.mainDetailedzisegmap_intragroup_40914
    self.mainDetailedzisegmap_intragroup_41120_var = program.mainDetailedzisegmap_intragroup_41120
    self.mainDetailedzisegred_large_30574_var = program.mainDetailedzisegred_large_30574
    self.mainDetailedzisegred_large_31538_var = program.mainDetailedzisegred_large_31538
    self.mainDetailedzisegred_large_31675_var = program.mainDetailedzisegred_large_31675
    self.mainDetailedzisegred_large_31805_var = program.mainDetailedzisegred_large_31805
    self.mainDetailedzisegred_large_32260_var = program.mainDetailedzisegred_large_32260
    self.mainDetailedzisegred_large_32285_var = program.mainDetailedzisegred_large_32285
    self.mainDetailedzisegred_large_32432_var = program.mainDetailedzisegred_large_32432
    self.mainDetailedzisegred_large_33290_var = program.mainDetailedzisegred_large_33290
    self.mainDetailedzisegred_nonseg_32358_var = program.mainDetailedzisegred_nonseg_32358
    self.mainDetailedzisegred_small_30574_var = program.mainDetailedzisegred_small_30574
    self.mainDetailedzisegred_small_31538_var = program.mainDetailedzisegred_small_31538
    self.mainDetailedzisegred_small_31675_var = program.mainDetailedzisegred_small_31675
    self.mainDetailedzisegred_small_31805_var = program.mainDetailedzisegred_small_31805
    self.mainDetailedzisegred_small_32260_var = program.mainDetailedzisegred_small_32260
    self.mainDetailedzisegred_small_32285_var = program.mainDetailedzisegred_small_32285
    self.mainDetailedzisegred_small_32432_var = program.mainDetailedzisegred_small_32432
    self.mainDetailedzisegred_small_33290_var = program.mainDetailedzisegred_small_33290
    self.mainMagnitudeziscan_stage1_35341_var = program.mainMagnitudeziscan_stage1_35341
    self.mainMagnitudeziscan_stage1_36395_var = program.mainMagnitudeziscan_stage1_36395
    self.mainMagnitudeziscan_stage2_35341_var = program.mainMagnitudeziscan_stage2_35341
    self.mainMagnitudeziscan_stage2_36395_var = program.mainMagnitudeziscan_stage2_36395
    self.mainMagnitudeziscan_stage3_35341_var = program.mainMagnitudeziscan_stage3_35341
    self.mainMagnitudeziscan_stage3_36395_var = program.mainMagnitudeziscan_stage3_36395
    self.mainMagnitudezisegmap_33557_var = program.mainMagnitudezisegmap_33557
    self.mainMagnitudezisegmap_33661_var = program.mainMagnitudezisegmap_33661
    self.mainMagnitudezisegmap_33757_var = program.mainMagnitudezisegmap_33757
    self.mainMagnitudezisegmap_33787_var = program.mainMagnitudezisegmap_33787
    self.mainMagnitudezisegmap_33833_var = program.mainMagnitudezisegmap_33833
    self.mainMagnitudezisegmap_34236_var = program.mainMagnitudezisegmap_34236
    self.mainMagnitudezisegmap_34357_var = program.mainMagnitudezisegmap_34357
    self.mainMagnitudezisegmap_34377_var = program.mainMagnitudezisegmap_34377
    self.mainMagnitudezisegmap_34477_var = program.mainMagnitudezisegmap_34477
    self.mainMagnitudezisegmap_34565_var = program.mainMagnitudezisegmap_34565
    self.mainMagnitudezisegmap_34796_var = program.mainMagnitudezisegmap_34796
    self.mainMagnitudezisegmap_34937_var = program.mainMagnitudezisegmap_34937
    self.mainMagnitudezisegmap_35069_var = program.mainMagnitudezisegmap_35069
    self.mainMagnitudezisegmap_35262_var = program.mainMagnitudezisegmap_35262
    self.mainMagnitudezisegmap_35324_var = program.mainMagnitudezisegmap_35324
    self.mainMagnitudezisegmap_35565_var = program.mainMagnitudezisegmap_35565
    self.mainMagnitudezisegmap_35805_var = program.mainMagnitudezisegmap_35805
    self.mainMagnitudezisegmap_35850_var = program.mainMagnitudezisegmap_35850
    self.mainMagnitudezisegmap_35943_var = program.mainMagnitudezisegmap_35943
    self.mainMagnitudezisegmap_36001_var = program.mainMagnitudezisegmap_36001
    self.mainMagnitudezisegmap_36282_var = program.mainMagnitudezisegmap_36282
    self.mainMagnitudezisegmap_36436_var = program.mainMagnitudezisegmap_36436
    self.mainMagnitudezisegmap_intragroup_34144_var = program.mainMagnitudezisegmap_intragroup_34144
    self.mainMagnitudezisegmap_intragroup_34298_var = program.mainMagnitudezisegmap_intragroup_34298
    self.mainMagnitudezisegmap_intragroup_35216_var = program.mainMagnitudezisegmap_intragroup_35216
    self.mainMagnitudezisegmap_intragroup_35445_var = program.mainMagnitudezisegmap_intragroup_35445
    self.mainMagnitudezisegmap_intragroup_36154_var = program.mainMagnitudezisegmap_intragroup_36154
    self.mainMagnitudezisegmap_intragroup_39586_var = program.mainMagnitudezisegmap_intragroup_39586
    self.mainMagnitudezisegmap_intragroup_39739_var = program.mainMagnitudezisegmap_intragroup_39739
    self.mainMagnitudezisegmap_intragroup_40188_var = program.mainMagnitudezisegmap_intragroup_40188
    self.mainMagnitudezisegmap_intragroup_40480_var = program.mainMagnitudezisegmap_intragroup_40480
    self.mainMagnitudezisegmap_intragroup_40914_var = program.mainMagnitudezisegmap_intragroup_40914
    self.mainMagnitudezisegmap_intragroup_41120_var = program.mainMagnitudezisegmap_intragroup_41120
    self.mainMagnitudezisegred_large_33902_var = program.mainMagnitudezisegred_large_33902
    self.mainMagnitudezisegred_large_34866_var = program.mainMagnitudezisegred_large_34866
    self.mainMagnitudezisegred_large_35003_var = program.mainMagnitudezisegred_large_35003
    self.mainMagnitudezisegred_large_35133_var = program.mainMagnitudezisegred_large_35133
    self.mainMagnitudezisegred_large_35588_var = program.mainMagnitudezisegred_large_35588
    self.mainMagnitudezisegred_large_35613_var = program.mainMagnitudezisegred_large_35613
    self.mainMagnitudezisegred_large_35760_var = program.mainMagnitudezisegred_large_35760
    self.mainMagnitudezisegred_large_36341_var = program.mainMagnitudezisegred_large_36341
    self.mainMagnitudezisegred_nonseg_35686_var = program.mainMagnitudezisegred_nonseg_35686
    self.mainMagnitudezisegred_small_33902_var = program.mainMagnitudezisegred_small_33902
    self.mainMagnitudezisegred_small_34866_var = program.mainMagnitudezisegred_small_34866
    self.mainMagnitudezisegred_small_35003_var = program.mainMagnitudezisegred_small_35003
    self.mainMagnitudezisegred_small_35133_var = program.mainMagnitudezisegred_small_35133
    self.mainMagnitudezisegred_small_35588_var = program.mainMagnitudezisegred_small_35588
    self.mainMagnitudezisegred_small_35613_var = program.mainMagnitudezisegred_small_35613
    self.mainMagnitudezisegred_small_35760_var = program.mainMagnitudezisegred_small_35760
    self.mainMagnitudezisegred_small_36341_var = program.mainMagnitudezisegred_small_36341
    self.constants = {}
    mainzicounter_mem_43016 = np.zeros(10240, dtype=np.int32)
    static_mem_44233 = opencl_alloc(self, 40960, "static_mem_44233")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_44233,
                      normaliseArray(mainzicounter_mem_43016),
                      is_blocking=synchronous)
    self.mainzicounter_mem_43016 = static_mem_44233
    mainzicounter_mem_43252 = np.zeros(10240, dtype=np.int32)
    static_mem_44236 = opencl_alloc(self, 40960, "static_mem_44236")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_44236,
                      normaliseArray(mainzicounter_mem_43252),
                      is_blocking=synchronous)
    self.mainzicounter_mem_43252 = static_mem_44236
    mainzicounter_mem_43355 = np.zeros(10240, dtype=np.int32)
    static_mem_44237 = opencl_alloc(self, 40960, "static_mem_44237")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_44237,
                      normaliseArray(mainzicounter_mem_43355),
                      is_blocking=synchronous)
    self.mainzicounter_mem_43355 = static_mem_44237
    mainzicounter_mem_43502 = np.zeros(10240, dtype=np.int32)
    static_mem_44238 = opencl_alloc(self, 40960, "static_mem_44238")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_44238,
                      normaliseArray(mainzicounter_mem_43502),
                      is_blocking=synchronous)
    self.mainzicounter_mem_43502 = static_mem_44238
    mainzicounter_mem_43714 = np.zeros(10240, dtype=np.int32)
    static_mem_44239 = opencl_alloc(self, 40960, "static_mem_44239")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_44239,
                      normaliseArray(mainzicounter_mem_43714),
                      is_blocking=synchronous)
    self.mainzicounter_mem_43714 = static_mem_44239
    mainzicounter_mem_43778 = np.zeros(10240, dtype=np.int32)
    static_mem_44240 = opencl_alloc(self, 40960, "static_mem_44240")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_44240,
                      normaliseArray(mainzicounter_mem_43778),
                      is_blocking=synchronous)
    self.mainzicounter_mem_43778 = static_mem_44240
    mainzicounter_mem_43823 = np.array([np.int32(0), np.int32(0), np.int32(0),
                                        np.int32(0), np.int32(0), np.int32(0),
                                        np.int32(0), np.int32(0), np.int32(0),
                                        np.int32(0)], dtype=np.int32)
    static_mem_44241 = opencl_alloc(self, 40, "static_mem_44241")
    if (40 != 0):
      cl.enqueue_copy(self.queue, static_mem_44241,
                      normaliseArray(mainzicounter_mem_43823),
                      is_blocking=synchronous)
    self.mainzicounter_mem_43823 = static_mem_44241
    mainzicounter_mem_43896 = np.zeros(10240, dtype=np.int32)
    static_mem_44243 = opencl_alloc(self, 40960, "static_mem_44243")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_44243,
                      normaliseArray(mainzicounter_mem_43896),
                      is_blocking=synchronous)
    self.mainzicounter_mem_43896 = static_mem_44243
    mainzicounter_mem_44085 = np.zeros(10240, dtype=np.int32)
    static_mem_44245 = opencl_alloc(self, 40960, "static_mem_44245")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_44245,
                      normaliseArray(mainzicounter_mem_44085),
                      is_blocking=synchronous)
    self.mainzicounter_mem_44085 = static_mem_44245
    mainDetailedzicounter_mem_43028 = np.zeros(10240, dtype=np.int32)
    static_mem_44246 = opencl_alloc(self, 40960, "static_mem_44246")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_44246,
                      normaliseArray(mainDetailedzicounter_mem_43028),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_43028 = static_mem_44246
    mainDetailedzicounter_mem_43264 = np.zeros(10240, dtype=np.int32)
    static_mem_44249 = opencl_alloc(self, 40960, "static_mem_44249")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_44249,
                      normaliseArray(mainDetailedzicounter_mem_43264),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_43264 = static_mem_44249
    mainDetailedzicounter_mem_43367 = np.zeros(10240, dtype=np.int32)
    static_mem_44250 = opencl_alloc(self, 40960, "static_mem_44250")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_44250,
                      normaliseArray(mainDetailedzicounter_mem_43367),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_43367 = static_mem_44250
    mainDetailedzicounter_mem_43514 = np.zeros(10240, dtype=np.int32)
    static_mem_44251 = opencl_alloc(self, 40960, "static_mem_44251")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_44251,
                      normaliseArray(mainDetailedzicounter_mem_43514),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_43514 = static_mem_44251
    mainDetailedzicounter_mem_43726 = np.zeros(10240, dtype=np.int32)
    static_mem_44252 = opencl_alloc(self, 40960, "static_mem_44252")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_44252,
                      normaliseArray(mainDetailedzicounter_mem_43726),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_43726 = static_mem_44252
    mainDetailedzicounter_mem_43790 = np.zeros(10240, dtype=np.int32)
    static_mem_44253 = opencl_alloc(self, 40960, "static_mem_44253")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_44253,
                      normaliseArray(mainDetailedzicounter_mem_43790),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_43790 = static_mem_44253
    mainDetailedzicounter_mem_43835 = np.array([np.int32(0), np.int32(0),
                                                np.int32(0), np.int32(0),
                                                np.int32(0), np.int32(0),
                                                np.int32(0), np.int32(0),
                                                np.int32(0), np.int32(0)],
                                               dtype=np.int32)
    static_mem_44254 = opencl_alloc(self, 40, "static_mem_44254")
    if (40 != 0):
      cl.enqueue_copy(self.queue, static_mem_44254,
                      normaliseArray(mainDetailedzicounter_mem_43835),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_43835 = static_mem_44254
    mainDetailedzicounter_mem_43908 = np.zeros(10240, dtype=np.int32)
    static_mem_44256 = opencl_alloc(self, 40960, "static_mem_44256")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_44256,
                      normaliseArray(mainDetailedzicounter_mem_43908),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_43908 = static_mem_44256
    mainDetailedzicounter_mem_44160 = np.zeros(10240, dtype=np.int32)
    static_mem_44258 = opencl_alloc(self, 40960, "static_mem_44258")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_44258,
                      normaliseArray(mainDetailedzicounter_mem_44160),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_44160 = static_mem_44258
    mainMagnitudezicounter_mem_43017 = np.zeros(10240, dtype=np.int32)
    static_mem_44259 = opencl_alloc(self, 40960, "static_mem_44259")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_44259,
                      normaliseArray(mainMagnitudezicounter_mem_43017),
                      is_blocking=synchronous)
    self.mainMagnitudezicounter_mem_43017 = static_mem_44259
    mainMagnitudezicounter_mem_43253 = np.zeros(10240, dtype=np.int32)
    static_mem_44262 = opencl_alloc(self, 40960, "static_mem_44262")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_44262,
                      normaliseArray(mainMagnitudezicounter_mem_43253),
                      is_blocking=synchronous)
    self.mainMagnitudezicounter_mem_43253 = static_mem_44262
    mainMagnitudezicounter_mem_43356 = np.zeros(10240, dtype=np.int32)
    static_mem_44263 = opencl_alloc(self, 40960, "static_mem_44263")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_44263,
                      normaliseArray(mainMagnitudezicounter_mem_43356),
                      is_blocking=synchronous)
    self.mainMagnitudezicounter_mem_43356 = static_mem_44263
    mainMagnitudezicounter_mem_43503 = np.zeros(10240, dtype=np.int32)
    static_mem_44264 = opencl_alloc(self, 40960, "static_mem_44264")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_44264,
                      normaliseArray(mainMagnitudezicounter_mem_43503),
                      is_blocking=synchronous)
    self.mainMagnitudezicounter_mem_43503 = static_mem_44264
    mainMagnitudezicounter_mem_43715 = np.zeros(10240, dtype=np.int32)
    static_mem_44265 = opencl_alloc(self, 40960, "static_mem_44265")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_44265,
                      normaliseArray(mainMagnitudezicounter_mem_43715),
                      is_blocking=synchronous)
    self.mainMagnitudezicounter_mem_43715 = static_mem_44265
    mainMagnitudezicounter_mem_43779 = np.zeros(10240, dtype=np.int32)
    static_mem_44266 = opencl_alloc(self, 40960, "static_mem_44266")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_44266,
                      normaliseArray(mainMagnitudezicounter_mem_43779),
                      is_blocking=synchronous)
    self.mainMagnitudezicounter_mem_43779 = static_mem_44266
    mainMagnitudezicounter_mem_43824 = np.array([np.int32(0), np.int32(0),
                                                 np.int32(0), np.int32(0),
                                                 np.int32(0), np.int32(0),
                                                 np.int32(0), np.int32(0),
                                                 np.int32(0), np.int32(0)],
                                                dtype=np.int32)
    static_mem_44267 = opencl_alloc(self, 40, "static_mem_44267")
    if (40 != 0):
      cl.enqueue_copy(self.queue, static_mem_44267,
                      normaliseArray(mainMagnitudezicounter_mem_43824),
                      is_blocking=synchronous)
    self.mainMagnitudezicounter_mem_43824 = static_mem_44267
    mainMagnitudezicounter_mem_43897 = np.zeros(10240, dtype=np.int32)
    static_mem_44269 = opencl_alloc(self, 40960, "static_mem_44269")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_44269,
                      normaliseArray(mainMagnitudezicounter_mem_43897),
                      is_blocking=synchronous)
    self.mainMagnitudezicounter_mem_43897 = static_mem_44269
    mainMagnitudezicounter_mem_44117 = np.zeros(10240, dtype=np.int32)
    static_mem_44271 = opencl_alloc(self, 40960, "static_mem_44271")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_44271,
                      normaliseArray(mainMagnitudezicounter_mem_44117),
                      is_blocking=synchronous)
    self.mainMagnitudezicounter_mem_44117 = static_mem_44271
  def futhark_builtinzhgpu_map_transpose_f32(self, destmem_0, destoffset_1,
                                             srcmem_2, srcoffset_3,
                                             num_arrays_4, x_elems_5,
                                             y_elems_6):
    if ((num_arrays_4 == np.int32(0)) or ((x_elems_5 == np.int32(0)) or (y_elems_6 == np.int32(0)))):
      pass
    else:
      muly_8 = squot32(np.int32(16), x_elems_5)
      mulx_7 = squot32(np.int32(16), y_elems_6)
      if ((num_arrays_4 == np.int32(1)) and ((x_elems_5 == np.int32(1)) or (y_elems_6 == np.int32(1)))):
        if (sext_i32_i64(((x_elems_5 * y_elems_6) * np.int32(4))) != 0):
          cl.enqueue_copy(self.queue, destmem_0, srcmem_2,
                          dest_offset=np.int64(sext_i32_i64(destoffset_1)),
                          src_offset=np.int64(sext_i32_i64(srcoffset_3)),
                          byte_count=np.int64(sext_i32_i64(((x_elems_5 * y_elems_6) * np.int32(4)))))
        if synchronous:
          sync(self)
      else:
        if (sle32(x_elems_5, np.int32(8)) and slt32(np.int32(16), y_elems_6)):
          if ((((1 * (np.int64(sdiv_up32(x_elems_5,
                                         np.int32(16))) * np.int64(np.int32(16)))) * (np.int64(sdiv_up32(sdiv_up32(y_elems_6,
                                                                                                                   muly_8),
                                                                                                         np.int32(16))) * np.int64(np.int32(16)))) * (np.int64(num_arrays_4) * np.int64(np.int32(1)))) != 0):
            self.gpu_map_transpose_f32_low_width_var.set_args(cl.LocalMemory(np.int64(np.int64(1088))),
                                                              np.int32(destoffset_1),
                                                              np.int32(srcoffset_3),
                                                              np.int32(num_arrays_4),
                                                              np.int32(x_elems_5),
                                                              np.int32(y_elems_6),
                                                              np.int32(mulx_7),
                                                              np.int32(muly_8),
                                                              destmem_0,
                                                              srcmem_2)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.gpu_map_transpose_f32_low_width_var,
                                       ((np.int64(sdiv_up32(x_elems_5,
                                                            np.int32(16))) * np.int64(np.int32(16))),
                                        (np.int64(sdiv_up32(sdiv_up32(y_elems_6,
                                                                      muly_8),
                                                            np.int32(16))) * np.int64(np.int32(16))),
                                        (np.int64(num_arrays_4) * np.int64(np.int32(1)))),
                                       (np.int64(np.int32(16)),
                                        np.int64(np.int32(16)),
                                        np.int64(np.int32(1))))
            if synchronous:
              sync(self)
        else:
          if (sle32(y_elems_6, np.int32(8)) and slt32(np.int32(16), x_elems_5)):
            if ((((1 * (np.int64(sdiv_up32(sdiv_up32(x_elems_5, mulx_7),
                                           np.int32(16))) * np.int64(np.int32(16)))) * (np.int64(sdiv_up32(y_elems_6,
                                                                                                           np.int32(16))) * np.int64(np.int32(16)))) * (np.int64(num_arrays_4) * np.int64(np.int32(1)))) != 0):
              self.gpu_map_transpose_f32_low_height_var.set_args(cl.LocalMemory(np.int64(np.int64(1088))),
                                                                 np.int32(destoffset_1),
                                                                 np.int32(srcoffset_3),
                                                                 np.int32(num_arrays_4),
                                                                 np.int32(x_elems_5),
                                                                 np.int32(y_elems_6),
                                                                 np.int32(mulx_7),
                                                                 np.int32(muly_8),
                                                                 destmem_0,
                                                                 srcmem_2)
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.gpu_map_transpose_f32_low_height_var,
                                         ((np.int64(sdiv_up32(sdiv_up32(x_elems_5,
                                                                        mulx_7),
                                                              np.int32(16))) * np.int64(np.int32(16))),
                                          (np.int64(sdiv_up32(y_elems_6,
                                                              np.int32(16))) * np.int64(np.int32(16))),
                                          (np.int64(num_arrays_4) * np.int64(np.int32(1)))),
                                         (np.int64(np.int32(16)),
                                          np.int64(np.int32(16)),
                                          np.int64(np.int32(1))))
              if synchronous:
                sync(self)
          else:
            if (sle32(x_elems_5, np.int32(8)) and sle32(y_elems_6,
                                                        np.int32(8))):
              if ((1 * (np.int64(sdiv_up32(((num_arrays_4 * x_elems_5) * y_elems_6),
                                           np.int32(256))) * np.int64(np.int32(256)))) != 0):
                self.gpu_map_transpose_f32_small_var.set_args(cl.LocalMemory(np.int64(np.int64(1))),
                                                              np.int32(destoffset_1),
                                                              np.int32(srcoffset_3),
                                                              np.int32(num_arrays_4),
                                                              np.int32(x_elems_5),
                                                              np.int32(y_elems_6),
                                                              np.int32(mulx_7),
                                                              np.int32(muly_8),
                                                              destmem_0,
                                                              srcmem_2)
                cl.enqueue_nd_range_kernel(self.queue,
                                           self.gpu_map_transpose_f32_small_var,
                                           ((np.int64(sdiv_up32(((num_arrays_4 * x_elems_5) * y_elems_6),
                                                                np.int32(256))) * np.int64(np.int32(256))),),
                                           (np.int64(np.int32(256)),))
                if synchronous:
                  sync(self)
            else:
              if ((((1 * (np.int64(sdiv_up32(x_elems_5,
                                             np.int32(32))) * np.int64(np.int32(32)))) * (np.int64(sdiv_up32(y_elems_6,
                                                                                                             np.int32(32))) * np.int64(np.int32(8)))) * (np.int64(num_arrays_4) * np.int64(np.int32(1)))) != 0):
                self.gpu_map_transpose_f32_var.set_args(cl.LocalMemory(np.int64(np.int64(4224))),
                                                        np.int32(destoffset_1),
                                                        np.int32(srcoffset_3),
                                                        np.int32(num_arrays_4),
                                                        np.int32(x_elems_5),
                                                        np.int32(y_elems_6),
                                                        np.int32(mulx_7),
                                                        np.int32(muly_8),
                                                        destmem_0, srcmem_2)
                cl.enqueue_nd_range_kernel(self.queue,
                                           self.gpu_map_transpose_f32_var,
                                           ((np.int64(sdiv_up32(x_elems_5,
                                                                np.int32(32))) * np.int64(np.int32(32))),
                                            (np.int64(sdiv_up32(y_elems_6,
                                                                np.int32(32))) * np.int64(np.int32(8))),
                                            (np.int64(num_arrays_4) * np.int64(np.int32(1)))),
                                           (np.int64(np.int32(32)),
                                            np.int64(np.int32(8)),
                                            np.int64(np.int32(1))))
                if synchronous:
                  sync(self)
    return ()
  def futhark_builtinzhreplicate_f32(self, mem_43624, num_elems_43625,
                                     val_43626):
    group_sizze_43631 = self.sizes["builtin#replicate_f32.group_size_43631"]
    num_groups_43632 = sdiv_up64(num_elems_43625, group_sizze_43631)
    if ((1 * (np.int64(num_groups_43632) * np.int64(group_sizze_43631))) != 0):
      self.builtinzhreplicate_f32zireplicate_43628_var.set_args(np.int32(num_elems_43625),
                                                                np.float32(val_43626),
                                                                mem_43624)
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.builtinzhreplicate_f32zireplicate_43628_var,
                                 ((np.int64(num_groups_43632) * np.int64(group_sizze_43631)),),
                                 (np.int64(group_sizze_43631),))
      if synchronous:
        sync(self)
    return ()
  def futhark_builtinzhreplicate_i32(self, mem_43633, num_elems_43634,
                                     val_43635):
    group_sizze_43640 = self.sizes["builtin#replicate_i32.group_size_43640"]
    num_groups_43641 = sdiv_up64(num_elems_43634, group_sizze_43640)
    if ((1 * (np.int64(num_groups_43641) * np.int64(group_sizze_43640))) != 0):
      self.builtinzhreplicate_i32zireplicate_43637_var.set_args(np.int32(num_elems_43634),
                                                                np.int32(val_43635),
                                                                mem_43633)
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.builtinzhreplicate_i32zireplicate_43637_var,
                                 ((np.int64(num_groups_43641) * np.int64(group_sizze_43640)),),
                                 (np.int64(group_sizze_43640),))
      if synchronous:
        sync(self)
    return ()
  def futhark_entry_convertToFloat(self, images_mem_41420, m_28155, n_28156,
                                   p_28157, nan_value_28158):
    y_30206 = (n_28156 * p_28157)
    nest_sizze_30207 = (m_28155 * y_30206)
    segmap_group_sizze_30208 = self.sizes["convertToFloat.segmap_group_size_30162"]
    segmap_usable_groups_30209 = sdiv_up64(nest_sizze_30207,
                                           segmap_group_sizze_30208)
    binop_x_41423 = (m_28155 * n_28156)
    binop_x_41424 = (p_28157 * binop_x_41423)
    binop_y_41425 = (np.int64(4) * binop_x_41424)
    bytes_41422 = smax64(np.int64(0), binop_y_41425)
    mem_41426 = opencl_alloc(self, bytes_41422, "mem_41426")
    if ((1 * (np.int64(segmap_usable_groups_30209) * np.int64(segmap_group_sizze_30208))) != 0):
      self.convertToFloatzisegmap_30158_var.set_args(self.global_failure,
                                                     np.int64(m_28155),
                                                     np.int64(n_28156),
                                                     np.int64(p_28157),
                                                     np.int16(nan_value_28158),
                                                     images_mem_41420,
                                                     mem_41426)
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.convertToFloatzisegmap_30158_var,
                                 ((np.int64(segmap_usable_groups_30209) * np.int64(segmap_group_sizze_30208)),),
                                 (np.int64(segmap_group_sizze_30208),))
      if synchronous:
        sync(self)
    out_mem_42873 = mem_41426
    return out_mem_42873
  def futhark_entry_main(self, mappingindices_mem_41420, images_mem_41421,
                         N_29559, m_29560, trend_29561, k_29562, n_29563,
                         freq_29564, hfrac_29565, lam_29566):
    i32_res_29569 = sext_i32_i64(n_29563)
    x_29570 = (np.int32(2) * k_29562)
    k2p2_29571 = (np.int32(2) + x_29570)
    cond_29572 = slt32(np.int32(0), trend_29561)
    if cond_29572:
      k2p2zq_29573 = k2p2_29571
    else:
      k2p2zq_f_res_29574 = (k2p2_29571 - np.int32(1))
      k2p2zq_29573 = k2p2zq_f_res_29574
    i32_res_29575 = sext_i32_i64(k2p2zq_29573)
    binop_x_41424 = (N_29559 * i32_res_29575)
    binop_y_41425 = (np.int64(4) * binop_x_41424)
    bytes_41423 = smax64(np.int64(0), binop_y_41425)
    if cond_29572:
      bounds_invalid_upwards_29577 = slt64(i32_res_29575, np.int64(0))
      valid_29578 = not(bounds_invalid_upwards_29577)
      range_valid_c_29579 = True
      assert valid_29578, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:90:3-10\n   #1  helpers.fut:2:3-8\n   #2  helpers.fut:37:10-20\n   #3  bfastfinal.fut:29:17-66\n   #4  bfastfinal.fut:189:5-58\n   #5  bfastfinal.fut:184:1-190:25\n" % ("Range ",
                                                                                                                                                                                                                                                                    np.int64(0),
                                                                                                                                                                                                                                                                    "..",
                                                                                                                                                                                                                                                                    np.int64(1),
                                                                                                                                                                                                                                                                    "..<",
                                                                                                                                                                                                                                                                    i32_res_29575,
                                                                                                                                                                                                                                                                    " is invalid."))
      segmap_group_sizze_36695 = self.sizes["main.segmap_group_size_36628"]
      segmap_usable_groups_36696 = sdiv_up64(binop_x_41424,
                                             segmap_group_sizze_36695)
      mem_41426 = opencl_alloc(self, bytes_41423, "mem_41426")
      if ((1 * (np.int64(segmap_usable_groups_36696) * np.int64(segmap_group_sizze_36695))) != 0):
        self.mainzisegmap_36625_var.set_args(self.global_failure,
                                             np.int64(N_29559),
                                             np.float32(freq_29564),
                                             np.int64(i32_res_29575),
                                             mappingindices_mem_41420,
                                             mem_41426)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_36625_var,
                                   ((np.int64(segmap_usable_groups_36696) * np.int64(segmap_group_sizze_36695)),),
                                   (np.int64(segmap_group_sizze_36695),))
        if synchronous:
          sync(self)
      binop_p_mem_41432 = mem_41426
    else:
      bounds_invalid_upwards_29603 = slt64(i32_res_29575, np.int64(0))
      valid_29604 = not(bounds_invalid_upwards_29603)
      range_valid_c_29605 = True
      assert valid_29604, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:90:3-10\n   #1  helpers.fut:2:3-8\n   #2  helpers.fut:50:10-22\n   #3  bfastfinal.fut:30:17-64\n   #4  bfastfinal.fut:189:5-58\n   #5  bfastfinal.fut:184:1-190:25\n" % ("Range ",
                                                                                                                                                                                                                                                                    np.int64(0),
                                                                                                                                                                                                                                                                    "..",
                                                                                                                                                                                                                                                                    np.int64(1),
                                                                                                                                                                                                                                                                    "..<",
                                                                                                                                                                                                                                                                    i32_res_29575,
                                                                                                                                                                                                                                                                    " is invalid."))
      segmap_group_sizze_36795 = self.sizes["main.segmap_group_size_36732"]
      segmap_usable_groups_36796 = sdiv_up64(binop_x_41424,
                                             segmap_group_sizze_36795)
      mem_41431 = opencl_alloc(self, bytes_41423, "mem_41431")
      if ((1 * (np.int64(segmap_usable_groups_36796) * np.int64(segmap_group_sizze_36795))) != 0):
        self.mainzisegmap_36729_var.set_args(self.global_failure,
                                             np.int64(N_29559),
                                             np.float32(freq_29564),
                                             np.int64(i32_res_29575),
                                             mappingindices_mem_41420,
                                             mem_41431)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_36729_var,
                                   ((np.int64(segmap_usable_groups_36796) * np.int64(segmap_group_sizze_36795)),),
                                   (np.int64(segmap_group_sizze_36795),))
        if synchronous:
          sync(self)
      binop_p_mem_41432 = mem_41431
    x_29628 = (N_29559 * N_29559)
    y_29629 = (np.int64(2) * N_29559)
    x_29630 = (x_29628 + y_29629)
    x_29631 = (np.int64(1) + x_29630)
    y_29632 = (np.int64(1) + N_29559)
    zzero_29633 = (y_29632 == np.int64(0))
    nonzzero_29634 = not(zzero_29633)
    nonzzero_cert_29635 = True
    assert nonzzero_29634, ("Error: %s\n\nBacktrace:\n-> #0  bfastfinal.fut:35:32-60\n   #1  bfastfinal.fut:189:5-58\n   #2  bfastfinal.fut:184:1-190:25\n" % ("division by zero",))
    x_29636 = sdiv64(x_29631, y_29632)
    x_29637 = (x_29636 - N_29559)
    binop_p_29638 = (x_29637 - np.int64(1))
    defunc_0_f_res_29639 = sext_i64_i32(binop_p_29638)
    i32_res_29640 = sitofp_i32_f32(defunc_0_f_res_29639)
    segmap_group_sizze_36846 = self.sizes["main.segmap_group_size_36828"]
    segmap_usable_groups_36847 = sdiv_up64(binop_x_41424,
                                           segmap_group_sizze_36846)
    mem_41435 = opencl_alloc(self, binop_y_41425, "mem_41435")
    self.futhark_builtinzhgpu_map_transpose_f32(mem_41435, np.int64(0),
                                                binop_p_mem_41432, np.int64(0),
                                                np.int64(1), N_29559,
                                                i32_res_29575)
    mem_41440 = opencl_alloc(self, bytes_41423, "mem_41440")
    if ((1 * (np.int64(segmap_usable_groups_36847) * np.int64(segmap_group_sizze_36846))) != 0):
      self.mainzisegmap_36825_var.set_args(self.global_failure,
                                           np.int64(N_29559),
                                           np.int64(i32_res_29575),
                                           np.float32(i32_res_29640), mem_41435,
                                           mem_41440)
      cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_36825_var,
                                 ((np.int64(segmap_usable_groups_36847) * np.int64(segmap_group_sizze_36846)),),
                                 (np.int64(segmap_group_sizze_36846),))
      if synchronous:
        sync(self)
    eq_x_y_29648 = (np.int64(0) == i32_res_29575)
    p_and_eq_x_y_29649 = (cond_29572 and eq_x_y_29648)
    not_p_29650 = not(cond_29572)
    p_and_eq_x_y_29651 = (eq_x_y_29648 and not_p_29650)
    empty_slice_29652 = (p_and_eq_x_y_29649 or p_and_eq_x_y_29651)
    m_29653 = (i32_res_29575 - np.int64(1))
    zzero_leq_i_p_m_t_s_29654 = sle64(np.int64(0), m_29653)
    i_p_m_t_s_leq_w_29655 = slt64(m_29653, i32_res_29575)
    i_lte_j_29656 = sle64(np.int64(0), i32_res_29575)
    y_29657 = (zzero_leq_i_p_m_t_s_29654 and i_p_m_t_s_leq_w_29655)
    y_29658 = (i_lte_j_29656 and y_29657)
    ok_or_empty_29659 = (empty_slice_29652 or y_29658)
    empty_slice_29660 = (i32_res_29569 == np.int64(0))
    m_29661 = (i32_res_29569 - np.int64(1))
    zzero_leq_i_p_m_t_s_29662 = sle64(np.int64(0), m_29661)
    i_p_m_t_s_leq_w_29663 = slt64(m_29661, N_29559)
    i_lte_j_29664 = sle64(np.int64(0), i32_res_29569)
    y_29665 = (zzero_leq_i_p_m_t_s_29662 and i_p_m_t_s_leq_w_29663)
    y_29666 = (i_lte_j_29664 and y_29665)
    ok_or_empty_29667 = (empty_slice_29660 or y_29666)
    index_ok_29668 = (ok_or_empty_29659 and ok_or_empty_29667)
    index_certs_29669 = True
    assert index_ok_29668, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:38:13-21\n   #1  bfastfinal.fut:189:5-58\n   #2  bfastfinal.fut:184:1-190:25\n" % ("Index [",
                                                                                                                                                                               np.int64(0),
                                                                                                                                                                               ":, :",
                                                                                                                                                                               i32_res_29569,
                                                                                                                                                                               "] out of bounds for array of shape [",
                                                                                                                                                                               i32_res_29575,
                                                                                                                                                                               "][",
                                                                                                                                                                               N_29559,
                                                                                                                                                                               "]."))
    index_certs_29671 = True
    assert index_ok_29668, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:39:13-22\n   #1  bfastfinal.fut:189:5-58\n   #2  bfastfinal.fut:184:1-190:25\n" % ("Index [:",
                                                                                                                                                                               i32_res_29569,
                                                                                                                                                                               ", ",
                                                                                                                                                                               np.int64(0),
                                                                                                                                                                               ":] out of bounds for array of shape [",
                                                                                                                                                                               N_29559,
                                                                                                                                                                               "][",
                                                                                                                                                                               i32_res_29575,
                                                                                                                                                                               "]."))
    empty_slice_29672 = (m_29560 == np.int64(0))
    m_29673 = (m_29560 - np.int64(1))
    zzero_leq_i_p_m_t_s_29674 = sle64(np.int64(0), m_29673)
    i_p_m_t_s_leq_w_29675 = slt64(m_29673, m_29560)
    i_lte_j_29676 = sle64(np.int64(0), m_29560)
    y_29677 = (zzero_leq_i_p_m_t_s_29674 and i_p_m_t_s_leq_w_29675)
    y_29678 = (i_lte_j_29676 and y_29677)
    ok_or_empty_29679 = (empty_slice_29672 or y_29678)
    index_ok_29680 = (ok_or_empty_29667 and ok_or_empty_29679)
    index_certs_29681 = True
    assert index_ok_29680, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:40:13-26\n   #1  bfastfinal.fut:189:5-58\n   #2  bfastfinal.fut:184:1-190:25\n" % ("Index [",
                                                                                                                                                                               np.int64(0),
                                                                                                                                                                               ":, :",
                                                                                                                                                                               i32_res_29569,
                                                                                                                                                                               "] out of bounds for array of shape [",
                                                                                                                                                                               m_29560,
                                                                                                                                                                               "][",
                                                                                                                                                                               N_29559,
                                                                                                                                                                               "]."))
    suff_outer_par_36853 = (self.sizes["main.suff_outer_par_0"] <= m_29560)
    segmap_group_sizze_36879 = self.sizes["main.segmap_group_size_36857"]
    max_num_groups_42906 = self.sizes["main.segmap_num_groups_36859"]
    num_groups_36880 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_29560,
                                                            segmap_group_sizze_36879),
                                                  sext_i32_i64(max_num_groups_42906))))
    nest_sizze_37055 = (m_29560 * i32_res_29575)
    segmap_group_sizze_37056 = self.sizes["main.segmap_group_size_36904"]
    max_num_groups_42907 = self.sizes["main.segmap_num_groups_36906"]
    num_groups_37057 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_37055,
                                                            segmap_group_sizze_37056),
                                                  sext_i32_i64(max_num_groups_42907))))
    suff_outer_par_37061 = (self.sizes["main.suff_outer_par_1"] <= nest_sizze_37055)
    y_37085 = (i32_res_29575 * i32_res_29575)
    comparatee_37086 = (m_29560 * y_37085)
    suff_outer_par_37087 = (self.sizes["main.suff_outer_par_2"] <= comparatee_37086)
    nest_sizze_37107 = (i32_res_29569 * comparatee_37086)
    segred_group_sizze_37108 = self.sizes["main.segred_group_size_36964"]
    max_num_groups_42908 = self.sizes["main.segred_num_groups_36966"]
    num_groups_37109 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_37107,
                                                            segred_group_sizze_37108),
                                                  sext_i32_i64(max_num_groups_42908))))
    Tx_39572 = self.sizes["main.Tx_39570"]
    Ty_39573 = self.sizes["main.Ty_39571"]
    Ty_39574 = smin64(i32_res_29575, Ty_39573)
    Tx_39575 = smin64(i32_res_29575, Tx_39572)
    gridDim_zz_39578 = sdiv_up64(m_29560, np.int64(30))
    group_sizze_tile3d_39581 = (Ty_39574 * Tx_39575)
    binop_x_41442 = (N_29559 * m_29560)
    bytes_41441 = (np.int64(4) * binop_x_41442)
    bytes_41489 = (np.int64(4) * comparatee_37086)
    binop_y_41447 = (np.int64(4) * y_37085)
    bytes_41445 = smax64(np.int64(0), binop_y_41447)
    binop_x_41596 = (i32_res_29575 * nest_sizze_37055)
    binop_y_41597 = (np.int64(4) * binop_x_41596)
    bytes_41594 = smax64(np.int64(0), binop_y_41597)
    binop_y_41495 = (np.int64(4) * i32_res_29575)
    bytes_41494 = smax64(np.int64(0), binop_y_41495)
    binop_x_41524 = (np.int64(30) * group_sizze_tile3d_39581)
    bytes_41522 = (np.int64(4) * binop_x_41524)
    binop_x_42581 = (np.int64(4) * Ty_39574)
    binop_x_42582 = (Tx_39575 * binop_x_42581)
    sizze_42583 = (np.int64(30) * binop_x_42582)
    num_threads_42830 = (segmap_group_sizze_36879 * num_groups_36880)
    total_sizze_42831 = (bytes_41445 * num_threads_42830)
    num_threads_42832 = (segmap_group_sizze_37056 * num_groups_37057)
    total_sizze_42833 = (bytes_41494 * num_threads_42832)
    local_memory_capacity_43056 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_43056)) and suff_outer_par_36853):
      mem_41443 = opencl_alloc(self, bytes_41441, "mem_41443")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_41443, np.int64(0),
                                                  images_mem_41421, np.int64(0),
                                                  np.int64(1), N_29559, m_29560)
      mem_41492 = opencl_alloc(self, bytes_41489, "mem_41492")
      color_42657 = opencl_alloc(self, total_sizze_42831, "color_42657")
      if ((1 * (np.int64(num_groups_36880) * np.int64(segmap_group_sizze_36879))) != 0):
        self.mainzisegmap_36855_var.set_args(self.global_failure,
                                             np.int64(N_29559),
                                             np.int64(m_29560),
                                             np.int32(n_29563),
                                             np.int32(k2p2zq_29573),
                                             np.int64(i32_res_29575),
                                             np.int64(num_groups_36880),
                                             np.int64(num_threads_42830),
                                             binop_p_mem_41432, mem_41440,
                                             mem_41443, mem_41492, color_42657)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_36855_var,
                                   ((np.int64(num_groups_36880) * np.int64(segmap_group_sizze_36879)),),
                                   (np.int64(segmap_group_sizze_36879),))
        if synchronous:
          sync(self)
      mem_41443 = None
      color_42657 = None
      mem_41598 = opencl_alloc(self, bytes_41594, "mem_41598")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_41598, np.int64(0),
                                                  mem_41492, np.int64(0),
                                                  np.int64(1), m_29560,
                                                  (i32_res_29575 * i32_res_29575))
      mem_41492 = None
      defunc_3_map_res_mem_41600 = mem_41598
    else:
      local_memory_capacity_43055 = self.max_local_memory
      if (sle64(np.int64(0),
                sext_i32_i64(local_memory_capacity_43055)) and suff_outer_par_37061):
        mem_41512 = opencl_alloc(self, binop_y_41597, "mem_41512")
        color_42658 = opencl_alloc(self, total_sizze_42833, "color_42658")
        if ((1 * (np.int64(num_groups_37057) * np.int64(segmap_group_sizze_37056))) != 0):
          self.mainzisegmap_36901_var.set_args(self.global_failure,
                                               np.int64(N_29559),
                                               np.int64(m_29560),
                                               np.int32(n_29563),
                                               np.int32(k2p2zq_29573),
                                               np.int64(i32_res_29575),
                                               np.int64(num_groups_37057),
                                               np.int64(num_threads_42832),
                                               images_mem_41421, mem_41435,
                                               mem_41440, mem_41512,
                                               color_42658)
          cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_36901_var,
                                     ((np.int64(num_groups_37057) * np.int64(segmap_group_sizze_37056)),),
                                     (np.int64(segmap_group_sizze_37056),))
          if synchronous:
            sync(self)
        color_42658 = None
        mem_41591 = opencl_alloc(self, bytes_41594, "mem_41591")
        self.futhark_builtinzhgpu_map_transpose_f32(mem_41591, np.int64(0),
                                                    mem_41512, np.int64(0),
                                                    np.int64(1),
                                                    (m_29560 * i32_res_29575),
                                                    i32_res_29575)
        mem_41512 = None
        defunc_3_map_res_mem_41593 = mem_41591
      else:
        local_memory_capacity_43054 = self.max_local_memory
        if (sle64(np.int64(120),
                  sext_i32_i64(local_memory_capacity_43054)) and suff_outer_par_37087):
          mem_41515 = opencl_alloc(self, bytes_41441, "mem_41515")
          self.futhark_builtinzhgpu_map_transpose_f32(mem_41515, np.int64(0),
                                                      images_mem_41421,
                                                      np.int64(0), np.int64(1),
                                                      N_29559, m_29560)
          gridDim_x_39576 = sdiv_up64(i32_res_29575, Tx_39575)
          gridDim_y_39577 = sdiv_up64(i32_res_29575, Ty_39574)
          binop_x_39579 = (gridDim_y_39577 * gridDim_zz_39578)
          grid_sizze_tile3d_39580 = (gridDim_x_39576 * binop_x_39579)
          count_shmem_39582 = sdiv_up64(np.int64(30), group_sizze_tile3d_39581)
          mem_41576 = opencl_alloc(self, bytes_41594, "mem_41576")
          if ((1 * (np.int64(grid_sizze_tile3d_39580) * np.int64(group_sizze_tile3d_39581))) != 0):
            self.mainzisegmap_intragroup_39586_var.set_args(self.global_failure,
                                                            cl.LocalMemory(np.int64(np.int64(120))),
                                                            np.int64(m_29560),
                                                            np.int32(n_29563),
                                                            np.int64(i32_res_29575),
                                                            np.int64(Ty_39574),
                                                            np.int64(Tx_39575),
                                                            np.int64(gridDim_x_39576),
                                                            np.int64(gridDim_y_39577),
                                                            np.int64(gridDim_zz_39578),
                                                            np.int64(group_sizze_tile3d_39581),
                                                            np.int64(count_shmem_39582),
                                                            mem_41435,
                                                            mem_41440,
                                                            mem_41515,
                                                            mem_41576)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegmap_intragroup_39586_var,
                                       ((np.int64(grid_sizze_tile3d_39580) * np.int64(group_sizze_tile3d_39581)),),
                                       (np.int64(group_sizze_tile3d_39581),))
            if synchronous:
              sync(self)
          mem_41515 = None
          defunc_3_map_res_mem_41586 = mem_41576
        else:
          mem_41579 = opencl_alloc(self, binop_y_41425, "mem_41579")
          self.futhark_builtinzhgpu_map_transpose_f32(mem_41579, np.int64(0),
                                                      mem_41440, np.int64(0),
                                                      np.int64(1),
                                                      i32_res_29575, N_29559)
          mem_41585 = opencl_alloc(self, bytes_41594, "mem_41585")
          if slt64((i32_res_29569 * np.int64(2)), segred_group_sizze_37108):
            segment_sizze_nonzzero_42982 = smax64(np.int64(1), i32_res_29569)
            num_threads_42983 = (num_groups_37109 * segred_group_sizze_37108)
            if ((1 * (np.int64(num_groups_37109) * np.int64(segred_group_sizze_37108))) != 0):
              self.mainzisegred_small_36970_var.set_args(self.global_failure,
                                                         cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_37108))),
                                                         np.int64(N_29559),
                                                         np.int64(m_29560),
                                                         np.int64(i32_res_29569),
                                                         np.int64(i32_res_29575),
                                                         np.int64(num_groups_37109),
                                                         np.int64(segment_sizze_nonzzero_42982),
                                                         images_mem_41421,
                                                         binop_p_mem_41432,
                                                         mem_41579, mem_41585)
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.mainzisegred_small_36970_var,
                                         ((np.int64(num_groups_37109) * np.int64(segred_group_sizze_37108)),),
                                         (np.int64(segred_group_sizze_37108),))
              if synchronous:
                sync(self)
          else:
            groups_per_segment_43009 = sdiv_up64(num_groups_37109,
                                                 smax64(np.int64(1),
                                                        ((m_29560 * i32_res_29575) * i32_res_29575)))
            elements_per_thread_43010 = sdiv_up64(i32_res_29569,
                                                  (segred_group_sizze_37108 * groups_per_segment_43009))
            virt_num_groups_43011 = (groups_per_segment_43009 * ((m_29560 * i32_res_29575) * i32_res_29575))
            num_threads_43012 = (num_groups_37109 * segred_group_sizze_37108)
            threads_per_segment_43013 = (groups_per_segment_43009 * segred_group_sizze_37108)
            segred_tmp_mem_43014 = opencl_alloc(self,
                                                (np.int64(4) * virt_num_groups_43011),
                                                "segred_tmp_mem_43014")
            mainzicounter_mem_43016 = self.mainzicounter_mem_43016
            if ((1 * (np.int64(num_groups_37109) * np.int64(segred_group_sizze_37108))) != 0):
              self.mainzisegred_large_36970_var.set_args(self.global_failure,
                                                         cl.LocalMemory(np.int64(np.int32(1))),
                                                         cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_37108))),
                                                         np.int64(N_29559),
                                                         np.int64(m_29560),
                                                         np.int64(i32_res_29569),
                                                         np.int64(i32_res_29575),
                                                         np.int64(num_groups_37109),
                                                         np.int64(groups_per_segment_43009),
                                                         np.int64(elements_per_thread_43010),
                                                         np.int64(virt_num_groups_43011),
                                                         np.int64(threads_per_segment_43013),
                                                         images_mem_41421,
                                                         binop_p_mem_41432,
                                                         mem_41579, mem_41585,
                                                         segred_tmp_mem_43014,
                                                         mainzicounter_mem_43016)
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.mainzisegred_large_36970_var,
                                         ((np.int64(num_groups_37109) * np.int64(segred_group_sizze_37108)),),
                                         (np.int64(segred_group_sizze_37108),))
              if synchronous:
                sync(self)
          mem_41579 = None
          defunc_3_map_res_mem_41586 = mem_41585
        defunc_3_map_res_mem_41593 = defunc_3_map_res_mem_41586
      defunc_3_map_res_mem_41600 = defunc_3_map_res_mem_41593
    m_29703 = (np.int32(2) * k2p2zq_29573)
    x_29704 = (np.int64(2) * i32_res_29575)
    nm_29705 = (i32_res_29575 * x_29704)
    bounds_invalid_upwards_29706 = slt64(nm_29705, np.int64(0))
    valid_29707 = not(bounds_invalid_upwards_29706)
    range_valid_c_29708 = True
    assert valid_29707, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:90:3-10\n   #1  helpers.fut:2:3-8\n   #2  helpers.fut:79:21-29\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:189:5-58\n   #5  bfastfinal.fut:184:1-190:25\n" % ("Range ",
                                                                                                                                                                                                                                                                  np.int64(0),
                                                                                                                                                                                                                                                                  "..",
                                                                                                                                                                                                                                                                  np.int64(1),
                                                                                                                                                                                                                                                                  "..<",
                                                                                                                                                                                                                                                                  nm_29705,
                                                                                                                                                                                                                                                                  " is invalid."))
    zzero_29713 = (m_29703 == np.int32(0))
    nonzzero_29714 = not(zzero_29713)
    nonzzero_cert_29715 = True
    assert nonzzero_29714, ("Error: %s\n\nBacktrace:\n-> #0  helpers.fut:74:41-47\n   #1  helpers.fut:74:14-79:30\n   #2  bfastfinal.fut:50:35-50\n   #3  bfastfinal.fut:189:5-58\n   #4  bfastfinal.fut:184:1-190:25\n" % ("division by zero",))
    loop_nonempty_29716 = slt32(np.int32(0), k2p2zq_29573)
    loop_not_taken_29717 = not(loop_nonempty_29716)
    protect_assert_disj_29718 = (nonzzero_29714 or loop_not_taken_29717)
    nonzzero_cert_29719 = True
    assert protect_assert_disj_29718, ("Error: %s\n\nBacktrace:\n-> #0  helpers.fut:60:43-49\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:189:5-58\n   #5  bfastfinal.fut:184:1-190:25\n" % ("division by zero",))
    i32_res_29720 = sext_i32_i64(m_29703)
    x_29721 = (i32_res_29575 * i32_res_29720)
    dim_ok_29722 = (x_29721 == nm_29705)
    dim_ok_cert_29723 = True
    assert dim_ok_29722, ("Error: %s\n\nBacktrace:\n-> #0  /prelude/array.fut:141:3-33\n   #1  helpers.fut:81:16-43\n   #2  bfastfinal.fut:50:35-50\n   #3  bfastfinal.fut:189:5-58\n   #4  bfastfinal.fut:184:1-190:25\n" % ("new shape has different number of elements than old shape",))
    empty_slice_29724 = (i32_res_29575 == np.int64(0))
    ok_or_empty_29725 = (y_29658 or empty_slice_29724)
    j_m_i_29726 = (x_29704 - i32_res_29575)
    empty_slice_29727 = (j_m_i_29726 == np.int64(0))
    m_29728 = (j_m_i_29726 - np.int64(1))
    i_p_m_t_s_29729 = (i32_res_29575 + m_29728)
    zzero_leq_i_p_m_t_s_29730 = sle64(np.int64(0), i_p_m_t_s_29729)
    i_p_m_t_s_leq_w_29731 = slt64(i_p_m_t_s_29729, i32_res_29720)
    i_lte_j_29732 = sle64(i32_res_29575, x_29704)
    y_29733 = (i_lte_j_29656 and i_p_m_t_s_leq_w_29731)
    y_29734 = (zzero_leq_i_p_m_t_s_29730 and y_29733)
    y_29735 = (i_lte_j_29732 and y_29734)
    forwards_ok_29736 = (i_lte_j_29656 and y_29735)
    ok_or_empty_29737 = (empty_slice_29727 or forwards_ok_29736)
    index_ok_29738 = (ok_or_empty_29725 and ok_or_empty_29737)
    index_certs_29739 = True
    assert index_ok_29738, ("Error: %s%d%s%d%s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  helpers.fut:83:8-30\n   #1  bfastfinal.fut:50:35-50\n   #2  bfastfinal.fut:189:5-58\n   #3  bfastfinal.fut:184:1-190:25\n" % ("Index [",
                                                                                                                                                                                                                   np.int64(0),
                                                                                                                                                                                                                   ":",
                                                                                                                                                                                                                   i32_res_29575,
                                                                                                                                                                                                                   ", ",
                                                                                                                                                                                                                   i32_res_29575,
                                                                                                                                                                                                                   ":",
                                                                                                                                                                                                                   x_29704,
                                                                                                                                                                                                                   "] out of bounds for array of shape [",
                                                                                                                                                                                                                   i32_res_29575,
                                                                                                                                                                                                                   "][",
                                                                                                                                                                                                                   i32_res_29720,
                                                                                                                                                                                                                   "]."))
    dim_match_29740 = (i32_res_29575 == j_m_i_29726)
    empty_or_match_cert_29741 = True
    assert dim_match_29740, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  helpers.fut:83:8-45\n   #1  bfastfinal.fut:50:35-50\n   #2  bfastfinal.fut:189:5-58\n   #3  bfastfinal.fut:184:1-190:25\n" % ("Value of (core language) shape (",
                                                                                                                                                                                                            i32_res_29575,
                                                                                                                                                                                                            ", ",
                                                                                                                                                                                                            j_m_i_29726,
                                                                                                                                                                                                            ") cannot match shape of type `[",
                                                                                                                                                                                                            i32_res_29575,
                                                                                                                                                                                                            "][",
                                                                                                                                                                                                            i32_res_29575,
                                                                                                                                                                                                            "]f32`."))
    max_group_sizze_37215 = self.max_group_size
    fits_37216 = sle64(nm_29705, max_group_sizze_37215)
    suff_intra_par_37214 = (self.sizes["main.suff_intra_par_3"] <= nm_29705)
    intra_suff_and_fits_37217 = (suff_intra_par_37214 and fits_37216)
    nest_sizze_37689 = (m_29560 * nm_29705)
    segmap_group_sizze_37690 = self.sizes["main.segmap_group_size_37636"]
    suff_intra_par_37727 = (self.sizes["main.suff_intra_par_4"] <= nm_29705)
    intra_suff_and_fits_37728 = (fits_37216 and suff_intra_par_37727)
    segmap_group_sizze_37781 = self.sizes["main.segmap_group_size_37547"]
    segmap_group_sizze_37794 = self.sizes["main.segmap_group_size_37448"]
    segmap_group_sizze_37844 = self.sizes["main.segmap_group_size_37428"]
    segmap_group_sizze_37854 = self.sizes["main.segmap_group_size_37308"]
    segmap_usable_groups_37782 = sdiv_up_safe64(m_29560,
                                                segmap_group_sizze_37781)
    segmap_usable_groups_37795 = sdiv_up_safe64(nest_sizze_37689,
                                                segmap_group_sizze_37794)
    segmap_usable_groups_37845 = sdiv_up_safe64(nest_sizze_37689,
                                                segmap_group_sizze_37844)
    binop_y_41604 = (np.int64(4) * nm_29705)
    bytes_41603 = smax64(np.int64(0), binop_y_41604)
    binop_y_41631 = (np.int64(4) * nest_sizze_37689)
    bytes_41629 = smax64(np.int64(0), binop_y_41631)
    bytes_41657 = smax64(np.int64(0), m_29560)
    local_memory_capacity_43142 = self.max_local_memory
    if (sle64(((bytes_41603 + srem64((np.int64(8) - srem64(bytes_41603,
                                                           np.int64(8))),
                                     np.int64(8))) + (bytes_41603 + srem64((np.int64(8) - srem64(bytes_41603,
                                                                                                 np.int64(8))),
                                                                           np.int64(8)))),
              sext_i32_i64(local_memory_capacity_43142)) and intra_suff_and_fits_37217):
      mem_41627 = opencl_alloc(self, bytes_41594, "mem_41627")
      if ((1 * (np.int64(m_29560) * np.int64(nm_29705))) != 0):
        self.mainzisegmap_intragroup_37212_var.set_args(self.global_failure,
                                                        self.failure_is_an_option,
                                                        self.global_failure_args,
                                                        cl.LocalMemory(np.int64(bytes_41603)),
                                                        cl.LocalMemory(np.int64(bytes_41603)),
                                                        np.int64(m_29560),
                                                        np.int32(k2p2zq_29573),
                                                        np.int64(i32_res_29575),
                                                        np.int32(m_29703),
                                                        np.int64(nm_29705),
                                                        np.int64(i32_res_29720),
                                                        defunc_3_map_res_mem_41600,
                                                        mem_41627)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainzisegmap_intragroup_37212_var,
                                   ((np.int64(m_29560) * np.int64(nm_29705)),),
                                   (np.int64(nm_29705),))
        if synchronous:
          sync(self)
      self.failure_is_an_option = np.int32(1)
      defunc_3_map_res_mem_41687 = mem_41627
    else:
      segmap_usable_groups_37691 = sdiv_up64(nest_sizze_37689,
                                             segmap_group_sizze_37690)
      mem_41632 = opencl_alloc(self, bytes_41629, "mem_41632")
      if ((1 * (np.int64(segmap_usable_groups_37691) * np.int64(segmap_group_sizze_37690))) != 0):
        self.mainzisegmap_37633_var.set_args(self.global_failure,
                                             self.failure_is_an_option,
                                             self.global_failure_args,
                                             np.int64(m_29560),
                                             np.int32(k2p2zq_29573),
                                             np.int64(i32_res_29575),
                                             np.int32(m_29703),
                                             np.int64(nm_29705),
                                             defunc_3_map_res_mem_41600,
                                             mem_41632)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_37633_var,
                                   ((np.int64(segmap_usable_groups_37691) * np.int64(segmap_group_sizze_37690)),),
                                   (np.int64(segmap_group_sizze_37690),))
        if synchronous:
          sync(self)
      self.failure_is_an_option = np.int32(1)
      ctx_param_ext_41633 = m_29560
      ctx_param_ext_41634 = nm_29705
      ctx_param_ext_41635 = np.int64(0)
      ctx_param_ext_41636 = nm_29705
      ctx_param_ext_41637 = m_29560
      ctx_param_ext_41638 = np.int64(1)
      ctx_param_ext_41639 = nm_29705
      mem_param_41640 = mem_41632
      i_37715 = np.int32(0)
      one_44235 = np.int32(1)
      for counter_44234 in range(k2p2zq_29573):
        i32_res_37717 = sext_i32_i64(i_37715)
        x_37718 = sle64(np.int64(0), i32_res_37717)
        y_37719 = slt64(i32_res_37717, nm_29705)
        bounds_check_37720 = (x_37718 and y_37719)
        index_certs_37721 = True
        assert bounds_check_37720, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  helpers.fut:59:16-27\n   #1  helpers.fut:80:16-34\n   #2  bfastfinal.fut:50:35-50\n   #3  bfastfinal.fut:189:5-58\n   #4  bfastfinal.fut:184:1-190:25\n" % ("Index [",
                                                                                                                                                                                                                                         i32_res_37717,
                                                                                                                                                                                                                                         "] out of bounds for array of shape [",
                                                                                                                                                                                                                                         nm_29705,
                                                                                                                                                                                                                                         "]."))
        local_memory_capacity_43086 = self.max_local_memory
        if intra_suff_and_fits_37728:
          gauss_jordan_res_ixfn_41665 = m_29560
        else:
          gauss_jordan_res_ixfn_41665 = ctx_param_ext_41637
        local_memory_capacity_43087 = self.max_local_memory
        if intra_suff_and_fits_37728:
          gauss_jordan_res_ixfn_41666 = nm_29705
        else:
          gauss_jordan_res_ixfn_41666 = ctx_param_ext_41639
        local_memory_capacity_43088 = self.max_local_memory
        if intra_suff_and_fits_37728:
          gauss_jordan_res_ixfn_41667 = m_29560
        else:
          gauss_jordan_res_ixfn_41667 = ctx_param_ext_41633
        local_memory_capacity_43089 = self.max_local_memory
        if intra_suff_and_fits_37728:
          gauss_jordan_res_ixfn_41668 = nm_29705
        else:
          gauss_jordan_res_ixfn_41668 = ctx_param_ext_41634
        local_memory_capacity_43090 = self.max_local_memory
        if intra_suff_and_fits_37728:
          gauss_jordan_res_ixfn_41669 = nm_29705
        else:
          gauss_jordan_res_ixfn_41669 = ctx_param_ext_41636
        local_memory_capacity_43091 = self.max_local_memory
        if intra_suff_and_fits_37728:
          gauss_jordan_res_ixfn_41670 = np.int64(1)
        else:
          gauss_jordan_res_ixfn_41670 = ctx_param_ext_41638
        local_memory_capacity_43092 = self.max_local_memory
        if intra_suff_and_fits_37728:
          gauss_jordan_res_ixfn_41671 = np.int64(0)
        else:
          gauss_jordan_res_ixfn_41671 = ctx_param_ext_41635
        local_memory_capacity_43129 = self.max_local_memory
        if (sle64(((bytes_41603 + srem64((np.int64(8) - srem64(bytes_41603,
                                                               np.int64(8))),
                                         np.int64(8))) + (bytes_41603 + srem64((np.int64(8) - srem64(bytes_41603,
                                                                                                     np.int64(8))),
                                                                               np.int64(8)))),
                  sext_i32_i64(local_memory_capacity_43129)) and intra_suff_and_fits_37728):
          mem_41655 = opencl_alloc(self, bytes_41629, "mem_41655")
          if ((1 * (np.int64(m_29560) * np.int64(nm_29705))) != 0):
            self.mainzisegmap_intragroup_37366_var.set_args(self.global_failure,
                                                            self.failure_is_an_option,
                                                            self.global_failure_args,
                                                            cl.LocalMemory(np.int64(bytes_41603)),
                                                            cl.LocalMemory(np.int64(bytes_41603)),
                                                            np.int64(m_29560),
                                                            np.int32(k2p2zq_29573),
                                                            np.int32(m_29703),
                                                            np.int64(nm_29705),
                                                            np.int32(i_37715),
                                                            np.int64(i32_res_37717),
                                                            np.int64(ctx_param_ext_41635),
                                                            np.int64(ctx_param_ext_41636),
                                                            np.int64(ctx_param_ext_41638),
                                                            mem_param_41640,
                                                            mem_41655)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegmap_intragroup_37366_var,
                                       ((np.int64(m_29560) * np.int64(nm_29705)),),
                                       (np.int64(nm_29705),))
            if synchronous:
              sync(self)
          self.failure_is_an_option = np.int32(1)
          gauss_jordan_res_mem_41672 = mem_41655
        else:
          mem_41658 = opencl_alloc(self, bytes_41657, "mem_41658")
          if ((1 * (np.int64(segmap_usable_groups_37782) * np.int64(segmap_group_sizze_37781))) != 0):
            self.mainzisegmap_37545_var.set_args(self.global_failure,
                                                 np.int64(m_29560),
                                                 np.int64(i32_res_37717),
                                                 np.int64(ctx_param_ext_41635),
                                                 np.int64(ctx_param_ext_41636),
                                                 np.int64(ctx_param_ext_41638),
                                                 mem_param_41640, mem_41658)
            cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_37545_var,
                                       ((np.int64(segmap_usable_groups_37782) * np.int64(segmap_group_sizze_37781)),),
                                       (np.int64(segmap_group_sizze_37781),))
            if synchronous:
              sync(self)
          mem_41663 = opencl_alloc(self, bytes_41629, "mem_41663")
          if ((1 * (np.int64(segmap_usable_groups_37795) * np.int64(segmap_group_sizze_37794))) != 0):
            self.mainzisegmap_37445_var.set_args(self.global_failure,
                                                 self.failure_is_an_option,
                                                 self.global_failure_args,
                                                 np.int64(m_29560),
                                                 np.int32(k2p2zq_29573),
                                                 np.int32(m_29703),
                                                 np.int64(nm_29705),
                                                 np.int32(i_37715),
                                                 np.int64(i32_res_37717),
                                                 np.int64(ctx_param_ext_41635),
                                                 np.int64(ctx_param_ext_41636),
                                                 np.int64(ctx_param_ext_41638),
                                                 mem_param_41640, mem_41658,
                                                 mem_41663)
            cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_37445_var,
                                       ((np.int64(segmap_usable_groups_37795) * np.int64(segmap_group_sizze_37794)),),
                                       (np.int64(segmap_group_sizze_37794),))
            if synchronous:
              sync(self)
          self.failure_is_an_option = np.int32(1)
          mem_41658 = None
          if ((1 * (np.int64(segmap_usable_groups_37845) * np.int64(segmap_group_sizze_37844))) != 0):
            self.mainzisegmap_37425_var.set_args(self.global_failure,
                                                 np.int64(m_29560),
                                                 np.int64(nm_29705),
                                                 np.int64(ctx_param_ext_41635),
                                                 np.int64(ctx_param_ext_41636),
                                                 np.int64(ctx_param_ext_41638),
                                                 mem_param_41640, mem_41663)
            cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_37425_var,
                                       ((np.int64(segmap_usable_groups_37845) * np.int64(segmap_group_sizze_37844)),),
                                       (np.int64(segmap_group_sizze_37844),))
            if synchronous:
              sync(self)
          mem_41663 = None
          gauss_jordan_res_mem_41672 = mem_param_41640
        ctx_param_ext_tmp_43077 = gauss_jordan_res_ixfn_41667
        ctx_param_ext_tmp_43078 = gauss_jordan_res_ixfn_41668
        ctx_param_ext_tmp_43079 = gauss_jordan_res_ixfn_41671
        ctx_param_ext_tmp_43080 = gauss_jordan_res_ixfn_41669
        ctx_param_ext_tmp_43081 = gauss_jordan_res_ixfn_41665
        ctx_param_ext_tmp_43082 = gauss_jordan_res_ixfn_41670
        ctx_param_ext_tmp_43083 = gauss_jordan_res_ixfn_41666
        mem_param_tmp_43084 = gauss_jordan_res_mem_41672
        ctx_param_ext_41633 = ctx_param_ext_tmp_43077
        ctx_param_ext_41634 = ctx_param_ext_tmp_43078
        ctx_param_ext_41635 = ctx_param_ext_tmp_43079
        ctx_param_ext_41636 = ctx_param_ext_tmp_43080
        ctx_param_ext_41637 = ctx_param_ext_tmp_43081
        ctx_param_ext_41638 = ctx_param_ext_tmp_43082
        ctx_param_ext_41639 = ctx_param_ext_tmp_43083
        mem_param_41640 = mem_param_tmp_43084
        i_37715 += one_44235
      gauss_jordan_res_r_ixfn_41673 = ctx_param_ext_41633
      gauss_jordan_res_r_ixfn_41674 = ctx_param_ext_41634
      gauss_jordan_res_r_ixfn_41675 = ctx_param_ext_41635
      gauss_jordan_res_r_ixfn_41676 = ctx_param_ext_41636
      gauss_jordan_res_r_ixfn_41677 = ctx_param_ext_41637
      gauss_jordan_res_r_ixfn_41678 = ctx_param_ext_41638
      gauss_jordan_res_r_ixfn_41679 = ctx_param_ext_41639
      gauss_jordan_res_r_mem_41680 = mem_param_41640
      mem_41632 = None
      segmap_usable_groups_37855 = sdiv_up64(comparatee_37086,
                                             segmap_group_sizze_37854)
      mem_41686 = opencl_alloc(self, bytes_41594, "mem_41686")
      if ((1 * (np.int64(segmap_usable_groups_37855) * np.int64(segmap_group_sizze_37854))) != 0):
        self.mainzisegmap_37304_var.set_args(self.global_failure,
                                             np.int64(m_29560),
                                             np.int64(i32_res_29575),
                                             np.int64(nm_29705),
                                             np.int64(i32_res_29720),
                                             np.int64(x_29721),
                                             np.int64(gauss_jordan_res_r_ixfn_41675),
                                             np.int64(gauss_jordan_res_r_ixfn_41676),
                                             np.int64(gauss_jordan_res_r_ixfn_41678),
                                             gauss_jordan_res_r_mem_41680,
                                             mem_41686)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_37304_var,
                                   ((np.int64(segmap_usable_groups_37855) * np.int64(segmap_group_sizze_37854)),),
                                   (np.int64(segmap_group_sizze_37854),))
        if synchronous:
          sync(self)
      gauss_jordan_res_r_mem_41680 = None
      defunc_3_map_res_mem_41687 = mem_41686
    defunc_3_map_res_mem_41600 = None
    suff_outer_par_37862 = (self.sizes["main.suff_outer_par_5"] <= m_29560)
    segmap_group_sizze_37884 = self.sizes["main.segmap_group_size_37866"]
    max_num_groups_43143 = self.sizes["main.segmap_num_groups_37868"]
    num_groups_37885 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_29560,
                                                            segmap_group_sizze_37884),
                                                  sext_i32_i64(max_num_groups_43143))))
    suff_outer_par_37969 = (self.sizes["main.suff_outer_par_6"] <= nest_sizze_37055)
    nest_sizze_37985 = (i32_res_29569 * nest_sizze_37055)
    segred_group_sizze_37986 = self.sizes["main.segred_group_size_37928"]
    max_num_groups_43144 = self.sizes["main.segred_num_groups_37930"]
    num_groups_37987 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_37985,
                                                            segred_group_sizze_37986),
                                                  sext_i32_i64(max_num_groups_43144))))
    Ty_39720 = self.sizes["main.Ty_39717"]
    Ry_39721 = self.sizes["main.Ry_39719"]
    Tx_39722 = self.sizes["main.Tx_39716"]
    Rx_39723 = self.sizes["main.Rx_39718"]
    Tk_39724 = self.sizes["main.Tk_39715"]
    TxRx_39727 = (Tx_39722 * Rx_39723)
    TyRy_39728 = (Ty_39720 * Ry_39721)
    a_loc_szz_39730 = (Tk_39724 * TyRy_39728)
    binop_x_39731 = (Tx_39722 * Tk_39724)
    b_loc_szz_39732 = (Rx_39723 * binop_x_39731)
    group_sizze_39736 = (Ty_39720 * Tx_39722)
    bytes_41707 = (np.int64(4) * nest_sizze_37055)
    bytes_41909 = smax64(np.int64(0), bytes_41707)
    binop_x_41721 = (Ry_39721 * group_sizze_39736)
    binop_x_41722 = (Rx_39723 * binop_x_41721)
    bytes_41719 = (np.int64(4) * binop_x_41722)
    binop_x_41713 = (Ry_39721 * Rx_39723)
    bytes_41712 = (np.int64(4) * binop_x_41713)
    binop_y_41725 = (np.int64(4) * a_loc_szz_39730)
    bytes_41724 = smax64(np.int64(0), binop_y_41725)
    binop_y_41728 = (np.int64(4) * b_loc_szz_39732)
    bytes_41727 = smax64(np.int64(0), binop_y_41728)
    bytes_41797 = (np.int64(4) * binop_x_41721)
    binop_x_41803 = (Rx_39723 * group_sizze_39736)
    bytes_41801 = (np.int64(4) * binop_x_41803)
    bytes_41789 = (np.int64(4) * Ry_39721)
    bytes_41791 = (np.int64(4) * Rx_39723)
    binop_x_42598 = (np.int64(4) * Ty_39720)
    binop_x_42599 = (Tx_39722 * binop_x_42598)
    binop_x_42600 = (Ry_39721 * binop_x_42599)
    sizze_42601 = (Rx_39723 * binop_x_42600)
    maxSubHelper_42676 = umax64(bytes_41719, sizze_42601)
    num_threads_42843 = (segmap_group_sizze_37884 * num_groups_37885)
    total_sizze_42844 = (bytes_41494 * num_threads_42843)
    local_memory_capacity_43289 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_43289)) and suff_outer_par_37862):
      mem_41690 = opencl_alloc(self, bytes_41441, "mem_41690")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_41690, np.int64(0),
                                                  images_mem_41421, np.int64(0),
                                                  np.int64(1), N_29559, m_29560)
      mem_41709 = opencl_alloc(self, bytes_41707, "mem_41709")
      color_42670 = opencl_alloc(self, total_sizze_42844, "color_42670")
      if ((1 * (np.int64(num_groups_37885) * np.int64(segmap_group_sizze_37884))) != 0):
        self.mainzisegmap_37864_var.set_args(self.global_failure,
                                             np.int64(N_29559),
                                             np.int64(m_29560),
                                             np.int32(n_29563),
                                             np.int32(k2p2zq_29573),
                                             np.int64(i32_res_29575),
                                             np.int64(num_groups_37885),
                                             np.int64(num_threads_42843),
                                             binop_p_mem_41432, mem_41690,
                                             mem_41709, color_42670)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_37864_var,
                                   ((np.int64(num_groups_37885) * np.int64(segmap_group_sizze_37884)),),
                                   (np.int64(segmap_group_sizze_37884),))
        if synchronous:
          sync(self)
      mem_41690 = None
      color_42670 = None
      mem_41912 = opencl_alloc(self, bytes_41909, "mem_41912")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_41912, np.int64(0),
                                                  mem_41709, np.int64(0),
                                                  np.int64(1), m_29560,
                                                  i32_res_29575)
      mem_41709 = None
      defunc_3_map_res_mem_41914 = mem_41912
    else:
      local_memory_capacity_43288 = self.max_local_memory
      if (sle64(((bytes_41727 + srem64((np.int64(8) - srem64(bytes_41727,
                                                             np.int64(8))),
                                       np.int64(8))) + (bytes_41724 + srem64((np.int64(8) - srem64(bytes_41724,
                                                                                                   np.int64(8))),
                                                                             np.int64(8)))),
                sext_i32_i64(local_memory_capacity_43288)) and suff_outer_par_37969):
        tk_div_tx_39725 = sdiv_up64(Tk_39724, Tx_39722)
        tk_div_ty_39726 = sdiv_up64(Tk_39724, Ty_39720)
        gridDim_x_39733 = sdiv_up64(i32_res_29575, TxRx_39727)
        gridDim_y_39734 = sdiv_up64(m_29560, TyRy_39728)
        grid_sizze_39735 = (gridDim_x_39733 * gridDim_y_39734)
        full_tiles_39764 = squot64(i32_res_29569, Tk_39724)
        kk_39971 = (Tk_39724 * full_tiles_39764)
        mem_41902 = opencl_alloc(self, bytes_41909, "mem_41902")
        if ((1 * (np.int64(grid_sizze_39735) * np.int64(group_sizze_39736))) != 0):
          self.mainzisegmap_intragroup_39739_var.set_args(self.global_failure,
                                                          cl.LocalMemory(np.int64(bytes_41724)),
                                                          cl.LocalMemory(np.int64(bytes_41727)),
                                                          np.int64(N_29559),
                                                          np.int64(m_29560),
                                                          np.int64(i32_res_29569),
                                                          np.int64(i32_res_29575),
                                                          np.int64(gridDim_x_39733),
                                                          np.int64(gridDim_y_39734),
                                                          np.int64(full_tiles_39764),
                                                          np.int64(kk_39971),
                                                          images_mem_41421,
                                                          mem_41435, mem_41902)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainzisegmap_intragroup_39739_var,
                                     ((np.int64(grid_sizze_39735) * np.int64(group_sizze_39736)),),
                                     (np.int64(group_sizze_39736),))
          if synchronous:
            sync(self)
        defunc_3_map_res_mem_41908 = mem_41902
      else:
        mem_41907 = opencl_alloc(self, bytes_41909, "mem_41907")
        if slt64((i32_res_29569 * np.int64(2)), segred_group_sizze_37986):
          segment_sizze_nonzzero_43220 = smax64(np.int64(1), i32_res_29569)
          num_threads_43221 = (num_groups_37987 * segred_group_sizze_37986)
          if ((1 * (np.int64(num_groups_37987) * np.int64(segred_group_sizze_37986))) != 0):
            self.mainzisegred_small_37934_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_37986))),
                                                       np.int64(N_29559),
                                                       np.int64(m_29560),
                                                       np.int64(i32_res_29569),
                                                       np.int64(i32_res_29575),
                                                       np.int64(num_groups_37987),
                                                       np.int64(segment_sizze_nonzzero_43220),
                                                       images_mem_41421,
                                                       binop_p_mem_41432,
                                                       mem_41907)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_small_37934_var,
                                       ((np.int64(num_groups_37987) * np.int64(segred_group_sizze_37986)),),
                                       (np.int64(segred_group_sizze_37986),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_43245 = sdiv_up64(num_groups_37987,
                                               smax64(np.int64(1),
                                                      (m_29560 * i32_res_29575)))
          elements_per_thread_43246 = sdiv_up64(i32_res_29569,
                                                (segred_group_sizze_37986 * groups_per_segment_43245))
          virt_num_groups_43247 = (groups_per_segment_43245 * (m_29560 * i32_res_29575))
          num_threads_43248 = (num_groups_37987 * segred_group_sizze_37986)
          threads_per_segment_43249 = (groups_per_segment_43245 * segred_group_sizze_37986)
          segred_tmp_mem_43250 = opencl_alloc(self,
                                              (np.int64(4) * virt_num_groups_43247),
                                              "segred_tmp_mem_43250")
          mainzicounter_mem_43252 = self.mainzicounter_mem_43252
          if ((1 * (np.int64(num_groups_37987) * np.int64(segred_group_sizze_37986))) != 0):
            self.mainzisegred_large_37934_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.int64(np.int32(1))),
                                                       cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_37986))),
                                                       np.int64(N_29559),
                                                       np.int64(m_29560),
                                                       np.int64(i32_res_29569),
                                                       np.int64(i32_res_29575),
                                                       np.int64(num_groups_37987),
                                                       np.int64(groups_per_segment_43245),
                                                       np.int64(elements_per_thread_43246),
                                                       np.int64(virt_num_groups_43247),
                                                       np.int64(threads_per_segment_43249),
                                                       images_mem_41421,
                                                       binop_p_mem_41432,
                                                       mem_41907,
                                                       segred_tmp_mem_43250,
                                                       mainzicounter_mem_43252)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_large_37934_var,
                                       ((np.int64(num_groups_37987) * np.int64(segred_group_sizze_37986)),),
                                       (np.int64(segred_group_sizze_37986),))
            if synchronous:
              sync(self)
        defunc_3_map_res_mem_41908 = mem_41907
      defunc_3_map_res_mem_41914 = defunc_3_map_res_mem_41908
    binop_p_mem_41432 = None
    mem_41435 = None
    suff_outer_par_38003 = (self.sizes["main.suff_outer_par_7"] <= m_29560)
    segmap_group_sizze_38024 = self.sizes["main.segmap_group_size_38007"]
    max_num_groups_43290 = self.sizes["main.segmap_num_groups_38009"]
    num_groups_38025 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_29560,
                                                            segmap_group_sizze_38024),
                                                  sext_i32_i64(max_num_groups_43290))))
    suff_outer_par_38104 = (self.sizes["main.suff_outer_par_8"] <= nest_sizze_37055)
    segred_group_sizze_38119 = self.sizes["main.segred_group_size_38065"]
    max_num_groups_43291 = self.sizes["main.segred_num_groups_38067"]
    num_groups_38120 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(binop_x_41596,
                                                            segred_group_sizze_38119),
                                                  sext_i32_i64(max_num_groups_43291))))
    tile_sizze_40183 = self.sizes["main.tile_size_40182"]
    group_sizze_40184 = (tile_sizze_40183 * tile_sizze_40183)
    bytes_41947 = (np.int64(4) * group_sizze_40184)
    bytes_41952 = smax64(np.int64(0), bytes_41947)
    binop_x_42614 = (np.int64(4) * tile_sizze_40183)
    sizze_42615 = (tile_sizze_40183 * binop_x_42614)
    maxSubHelper_42684 = umax64(bytes_41947, sizze_42615)
    num_threads_42847 = (segmap_group_sizze_38024 * num_groups_38025)
    total_sizze_42848 = (bytes_41494 * num_threads_42847)
    local_memory_capacity_43392 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_43392)) and suff_outer_par_38003):
      mem_41918 = opencl_alloc(self, bytes_41489, "mem_41918")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_41918, np.int64(0),
                                                  defunc_3_map_res_mem_41687,
                                                  np.int64(0), np.int64(1),
                                                  (i32_res_29575 * i32_res_29575),
                                                  m_29560)
      mem_41921 = opencl_alloc(self, bytes_41707, "mem_41921")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_41921, np.int64(0),
                                                  defunc_3_map_res_mem_41914,
                                                  np.int64(0), np.int64(1),
                                                  i32_res_29575, m_29560)
      mem_41940 = opencl_alloc(self, bytes_41707, "mem_41940")
      color_42683 = opencl_alloc(self, total_sizze_42848, "color_42683")
      if ((1 * (np.int64(num_groups_38025) * np.int64(segmap_group_sizze_38024))) != 0):
        self.mainzisegmap_38005_var.set_args(self.global_failure,
                                             np.int64(m_29560),
                                             np.int32(k2p2zq_29573),
                                             np.int64(i32_res_29575),
                                             np.int64(num_groups_38025),
                                             np.int64(num_threads_42847),
                                             mem_41918, mem_41921, mem_41940,
                                             color_42683)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_38005_var,
                                   ((np.int64(num_groups_38025) * np.int64(segmap_group_sizze_38024)),),
                                   (np.int64(segmap_group_sizze_38024),))
        if synchronous:
          sync(self)
      mem_41918 = None
      mem_41921 = None
      color_42683 = None
      mem_41984 = opencl_alloc(self, bytes_41909, "mem_41984")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_41984, np.int64(0),
                                                  mem_41940, np.int64(0),
                                                  np.int64(1), m_29560,
                                                  i32_res_29575)
      mem_41940 = None
      defunc_4_map_res_mem_41986 = mem_41984
    else:
      local_memory_capacity_43391 = self.max_local_memory
      if (sle64((bytes_41952 + srem64((np.int64(8) - srem64(bytes_41952,
                                                            np.int64(8))),
                                      np.int64(8))),
                sext_i32_i64(local_memory_capacity_43391)) and suff_outer_par_38104):
        mem_41944 = opencl_alloc(self, binop_y_41597, "mem_41944")
        self.futhark_builtinzhgpu_map_transpose_f32(mem_41944, np.int64(0),
                                                    defunc_3_map_res_mem_41687,
                                                    np.int64(0), np.int64(1),
                                                    i32_res_29575,
                                                    (m_29560 * i32_res_29575))
        num_groups_x_40185 = sdiv_up64(m_29560, tile_sizze_40183)
        num_groups_y_40186 = sdiv_up64(i32_res_29575, tile_sizze_40183)
        num_groups_top_40187 = (num_groups_x_40185 * num_groups_y_40186)
        num_whole_tiles_40204 = squot64(i32_res_29575, tile_sizze_40183)
        residual_input_40331 = srem64(i32_res_29575, tile_sizze_40183)
        cond_40332 = (residual_input_40331 == np.int64(0))
        mem_41974 = opencl_alloc(self, bytes_41909, "mem_41974")
        if ((1 * (np.int64(num_groups_top_40187) * np.int64(group_sizze_40184))) != 0):
          self.mainzisegmap_intragroup_40188_var.set_args(self.global_failure,
                                                          cl.LocalMemory(np.int64(bytes_41952)),
                                                          np.int64(m_29560),
                                                          np.int64(i32_res_29575),
                                                          np.int64(num_groups_x_40185),
                                                          np.int64(num_groups_y_40186),
                                                          np.int64(num_whole_tiles_40204),
                                                          np.int64(residual_input_40331),
                                                          np.byte(cond_40332),
                                                          defunc_3_map_res_mem_41914,
                                                          mem_41944, mem_41974)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainzisegmap_intragroup_40188_var,
                                     ((np.int64(num_groups_top_40187) * np.int64(group_sizze_40184)),),
                                     (np.int64(group_sizze_40184),))
          if synchronous:
            sync(self)
        mem_41944 = None
        defunc_4_map_res_mem_41980 = mem_41974
      else:
        mem_41979 = opencl_alloc(self, bytes_41909, "mem_41979")
        if slt64((i32_res_29575 * np.int64(2)), segred_group_sizze_38119):
          segment_sizze_nonzzero_43323 = smax64(np.int64(1), i32_res_29575)
          num_threads_43324 = (num_groups_38120 * segred_group_sizze_38119)
          if ((1 * (np.int64(num_groups_38120) * np.int64(segred_group_sizze_38119))) != 0):
            self.mainzisegred_small_38071_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_38119))),
                                                       np.int64(m_29560),
                                                       np.int64(i32_res_29575),
                                                       np.int64(num_groups_38120),
                                                       np.int64(segment_sizze_nonzzero_43323),
                                                       defunc_3_map_res_mem_41687,
                                                       defunc_3_map_res_mem_41914,
                                                       mem_41979)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_small_38071_var,
                                       ((np.int64(num_groups_38120) * np.int64(segred_group_sizze_38119)),),
                                       (np.int64(segred_group_sizze_38119),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_43348 = sdiv_up64(num_groups_38120,
                                               smax64(np.int64(1),
                                                      (m_29560 * i32_res_29575)))
          elements_per_thread_43349 = sdiv_up64(i32_res_29575,
                                                (segred_group_sizze_38119 * groups_per_segment_43348))
          virt_num_groups_43350 = (groups_per_segment_43348 * (m_29560 * i32_res_29575))
          num_threads_43351 = (num_groups_38120 * segred_group_sizze_38119)
          threads_per_segment_43352 = (groups_per_segment_43348 * segred_group_sizze_38119)
          segred_tmp_mem_43353 = opencl_alloc(self,
                                              (np.int64(4) * virt_num_groups_43350),
                                              "segred_tmp_mem_43353")
          mainzicounter_mem_43355 = self.mainzicounter_mem_43355
          if ((1 * (np.int64(num_groups_38120) * np.int64(segred_group_sizze_38119))) != 0):
            self.mainzisegred_large_38071_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.int64(np.int32(1))),
                                                       cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_38119))),
                                                       np.int64(m_29560),
                                                       np.int64(i32_res_29575),
                                                       np.int64(num_groups_38120),
                                                       np.int64(groups_per_segment_43348),
                                                       np.int64(elements_per_thread_43349),
                                                       np.int64(virt_num_groups_43350),
                                                       np.int64(threads_per_segment_43352),
                                                       defunc_3_map_res_mem_41687,
                                                       defunc_3_map_res_mem_41914,
                                                       mem_41979,
                                                       segred_tmp_mem_43353,
                                                       mainzicounter_mem_43355)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_large_38071_var,
                                       ((np.int64(num_groups_38120) * np.int64(segred_group_sizze_38119)),),
                                       (np.int64(segred_group_sizze_38119),))
            if synchronous:
              sync(self)
        defunc_4_map_res_mem_41980 = mem_41979
      defunc_4_map_res_mem_41986 = defunc_4_map_res_mem_41980
    defunc_3_map_res_mem_41687 = None
    defunc_3_map_res_mem_41914 = None
    suff_outer_par_38135 = (self.sizes["main.suff_outer_par_9"] <= m_29560)
    segmap_group_sizze_38155 = self.sizes["main.segmap_group_size_38139"]
    max_num_groups_43393 = self.sizes["main.segmap_num_groups_38141"]
    num_groups_38156 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_29560,
                                                            segmap_group_sizze_38155),
                                                  sext_i32_i64(max_num_groups_43393))))
    suff_outer_par_38232 = (self.sizes["main.suff_outer_par_10"] <= binop_x_41442)
    nest_sizze_38246 = (i32_res_29575 * binop_x_41442)
    segred_group_sizze_38247 = self.sizes["main.segred_group_size_38195"]
    max_num_groups_43394 = self.sizes["main.segred_num_groups_38197"]
    num_groups_38248 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_38246,
                                                            segred_group_sizze_38247),
                                                  sext_i32_i64(max_num_groups_43394))))
    Ty_40461 = self.sizes["main.Ty_40458"]
    Ry_40462 = self.sizes["main.Ry_40460"]
    Tx_40463 = self.sizes["main.Tx_40457"]
    Rx_40464 = self.sizes["main.Rx_40459"]
    Tk_40465 = self.sizes["main.Tk_40456"]
    TxRx_40468 = (Tx_40463 * Rx_40464)
    TyRy_40469 = (Ty_40461 * Ry_40462)
    a_loc_szz_40471 = (Tk_40465 * TyRy_40469)
    binop_x_40472 = (Tx_40463 * Tk_40465)
    b_loc_szz_40473 = (Rx_40464 * binop_x_40472)
    group_sizze_40477 = (Ty_40461 * Tx_40463)
    binop_y_41992 = (np.int64(4) * N_29559)
    bytes_41991 = smax64(np.int64(0), binop_y_41992)
    bytes_42211 = smax64(np.int64(0), bytes_41441)
    binop_x_42023 = (Ry_40462 * group_sizze_40477)
    binop_x_42024 = (Rx_40464 * binop_x_42023)
    bytes_42021 = (np.int64(4) * binop_x_42024)
    binop_x_42015 = (Ry_40462 * Rx_40464)
    bytes_42014 = (np.int64(4) * binop_x_42015)
    binop_y_42027 = (np.int64(4) * a_loc_szz_40471)
    bytes_42026 = smax64(np.int64(0), binop_y_42027)
    binop_y_42030 = (np.int64(4) * b_loc_szz_40473)
    bytes_42029 = smax64(np.int64(0), binop_y_42030)
    bytes_42099 = (np.int64(4) * binop_x_42023)
    binop_x_42105 = (Rx_40464 * group_sizze_40477)
    bytes_42103 = (np.int64(4) * binop_x_42105)
    bytes_42091 = (np.int64(4) * Ry_40462)
    bytes_42093 = (np.int64(4) * Rx_40464)
    binop_x_42628 = (np.int64(4) * Ty_40461)
    binop_x_42629 = (Tx_40463 * binop_x_42628)
    binop_x_42630 = (Ry_40462 * binop_x_42629)
    sizze_42631 = (Rx_40464 * binop_x_42630)
    maxSubHelper_42694 = umax64(bytes_42021, sizze_42631)
    num_threads_42851 = (segmap_group_sizze_38155 * num_groups_38156)
    total_sizze_42852 = (bytes_41991 * num_threads_42851)
    local_memory_capacity_43539 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_43539)) and suff_outer_par_38135):
      mem_41989 = opencl_alloc(self, bytes_41707, "mem_41989")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_41989, np.int64(0),
                                                  defunc_4_map_res_mem_41986,
                                                  np.int64(0), np.int64(1),
                                                  i32_res_29575, m_29560)
      mem_42008 = opencl_alloc(self, bytes_41441, "mem_42008")
      color_42688 = opencl_alloc(self, total_sizze_42852, "color_42688")
      if ((1 * (np.int64(num_groups_38156) * np.int64(segmap_group_sizze_38155))) != 0):
        self.mainzisegmap_38137_var.set_args(self.global_failure,
                                             np.int64(N_29559),
                                             np.int64(m_29560),
                                             np.int32(k2p2zq_29573),
                                             np.int64(i32_res_29575),
                                             np.int64(num_groups_38156),
                                             np.int64(num_threads_42851),
                                             mem_41440, mem_41989, mem_42008,
                                             color_42688)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_38137_var,
                                   ((np.int64(num_groups_38156) * np.int64(segmap_group_sizze_38155)),),
                                   (np.int64(segmap_group_sizze_38155),))
        if synchronous:
          sync(self)
      mem_41989 = None
      color_42688 = None
      mem_42214 = opencl_alloc(self, bytes_42211, "mem_42214")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_42214, np.int64(0),
                                                  mem_42008, np.int64(0),
                                                  np.int64(1), m_29560, N_29559)
      mem_42008 = None
      defunc_3_map_res_mem_42216 = mem_42214
    else:
      local_memory_capacity_43538 = self.max_local_memory
      if (sle64(((bytes_42029 + srem64((np.int64(8) - srem64(bytes_42029,
                                                             np.int64(8))),
                                       np.int64(8))) + (bytes_42026 + srem64((np.int64(8) - srem64(bytes_42026,
                                                                                                   np.int64(8))),
                                                                             np.int64(8)))),
                sext_i32_i64(local_memory_capacity_43538)) and suff_outer_par_38232):
        mem_42011 = opencl_alloc(self, binop_y_41425, "mem_42011")
        self.futhark_builtinzhgpu_map_transpose_f32(mem_42011, np.int64(0),
                                                    mem_41440, np.int64(0),
                                                    np.int64(1), i32_res_29575,
                                                    N_29559)
        tk_div_tx_40466 = sdiv_up64(Tk_40465, Tx_40463)
        tk_div_ty_40467 = sdiv_up64(Tk_40465, Ty_40461)
        gridDim_x_40474 = sdiv_up64(N_29559, TxRx_40468)
        gridDim_y_40475 = sdiv_up64(m_29560, TyRy_40469)
        grid_sizze_40476 = (gridDim_x_40474 * gridDim_y_40475)
        full_tiles_40505 = squot64(i32_res_29575, Tk_40465)
        kk_40708 = (Tk_40465 * full_tiles_40505)
        mem_42204 = opencl_alloc(self, bytes_42211, "mem_42204")
        if ((1 * (np.int64(grid_sizze_40476) * np.int64(group_sizze_40477))) != 0):
          self.mainzisegmap_intragroup_40480_var.set_args(self.global_failure,
                                                          cl.LocalMemory(np.int64(bytes_42026)),
                                                          cl.LocalMemory(np.int64(bytes_42029)),
                                                          np.int64(N_29559),
                                                          np.int64(m_29560),
                                                          np.int64(i32_res_29575),
                                                          np.int64(gridDim_x_40474),
                                                          np.int64(gridDim_y_40475),
                                                          np.int64(full_tiles_40505),
                                                          np.int64(kk_40708),
                                                          defunc_4_map_res_mem_41986,
                                                          mem_42011, mem_42204)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainzisegmap_intragroup_40480_var,
                                     ((np.int64(grid_sizze_40476) * np.int64(group_sizze_40477)),),
                                     (np.int64(group_sizze_40477),))
          if synchronous:
            sync(self)
        mem_42011 = None
        defunc_3_map_res_mem_42210 = mem_42204
      else:
        mem_42209 = opencl_alloc(self, bytes_42211, "mem_42209")
        if slt64((i32_res_29575 * np.int64(2)), segred_group_sizze_38247):
          segment_sizze_nonzzero_43470 = smax64(np.int64(1), i32_res_29575)
          num_threads_43471 = (num_groups_38248 * segred_group_sizze_38247)
          if ((1 * (np.int64(num_groups_38248) * np.int64(segred_group_sizze_38247))) != 0):
            self.mainzisegred_small_38201_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_38247))),
                                                       np.int64(N_29559),
                                                       np.int64(m_29560),
                                                       np.int64(i32_res_29575),
                                                       np.int64(num_groups_38248),
                                                       np.int64(segment_sizze_nonzzero_43470),
                                                       mem_41440,
                                                       defunc_4_map_res_mem_41986,
                                                       mem_42209)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_small_38201_var,
                                       ((np.int64(num_groups_38248) * np.int64(segred_group_sizze_38247)),),
                                       (np.int64(segred_group_sizze_38247),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_43495 = sdiv_up64(num_groups_38248,
                                               smax64(np.int64(1),
                                                      (m_29560 * N_29559)))
          elements_per_thread_43496 = sdiv_up64(i32_res_29575,
                                                (segred_group_sizze_38247 * groups_per_segment_43495))
          virt_num_groups_43497 = (groups_per_segment_43495 * (m_29560 * N_29559))
          num_threads_43498 = (num_groups_38248 * segred_group_sizze_38247)
          threads_per_segment_43499 = (groups_per_segment_43495 * segred_group_sizze_38247)
          segred_tmp_mem_43500 = opencl_alloc(self,
                                              (np.int64(4) * virt_num_groups_43497),
                                              "segred_tmp_mem_43500")
          mainzicounter_mem_43502 = self.mainzicounter_mem_43502
          if ((1 * (np.int64(num_groups_38248) * np.int64(segred_group_sizze_38247))) != 0):
            self.mainzisegred_large_38201_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.int64(np.int32(1))),
                                                       cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_38247))),
                                                       np.int64(N_29559),
                                                       np.int64(m_29560),
                                                       np.int64(i32_res_29575),
                                                       np.int64(num_groups_38248),
                                                       np.int64(groups_per_segment_43495),
                                                       np.int64(elements_per_thread_43496),
                                                       np.int64(virt_num_groups_43497),
                                                       np.int64(threads_per_segment_43499),
                                                       mem_41440,
                                                       defunc_4_map_res_mem_41986,
                                                       mem_42209,
                                                       segred_tmp_mem_43500,
                                                       mainzicounter_mem_43502)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_large_38201_var,
                                       ((np.int64(num_groups_38248) * np.int64(segred_group_sizze_38247)),),
                                       (np.int64(segred_group_sizze_38247),))
            if synchronous:
              sync(self)
        defunc_3_map_res_mem_42210 = mem_42209
      defunc_3_map_res_mem_42216 = defunc_3_map_res_mem_42210
    mem_41440 = None
    defunc_4_map_res_mem_41986 = None
    i_29861 = (N_29559 - np.int64(1))
    x_29862 = sle64(np.int64(0), i_29861)
    y_29863 = slt64(i_29861, N_29559)
    bounds_check_29864 = (x_29862 and y_29863)
    index_certs_29865 = True
    assert bounds_check_29864, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:26:29-34\n   #1  helpers.fut:20:13-20\n   #2  bfastfinal.fut:76:16-75\n   #3  /prelude/soacs.fut:67:19-23\n   #4  /prelude/soacs.fut:67:3-37\n   #5  bfastfinal.fut:71:5-77:25\n   #6  bfastfinal.fut:189:5-58\n   #7  bfastfinal.fut:184:1-190:25\n" % ("Index [",
                                                                                                                                                                                                                                                                                                                                                     i_29861,
                                                                                                                                                                                                                                                                                                                                                     "] out of bounds for array of shape [",
                                                                                                                                                                                                                                                                                                                                                     N_29559,
                                                                                                                                                                                                                                                                                                                                                     "]."))
    fits_38288 = sle64(N_29559, max_group_sizze_37215)
    suff_intra_par_38286 = (self.sizes["main.suff_intra_par_11"] <= N_29559)
    intra_suff_and_fits_38289 = (suff_intra_par_38286 and fits_38288)
    segscan_group_sizze_38426 = self.sizes["main.segscan_group_size_38403"]
    max_num_groups_43540 = self.sizes["main.segscan_num_groups_38405"]
    num_groups_38427 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(binop_x_41442,
                                                            segscan_group_sizze_38426),
                                                  sext_i32_i64(max_num_groups_43540))))
    segmap_group_sizze_38446 = self.sizes["main.segmap_group_size_38394"]
    segmap_group_sizze_38476 = self.sizes["main.segmap_group_size_38333"]
    binop_y_42233 = (np.int64(4) * m_29560)
    bytes_42232 = smax64(np.int64(0), binop_y_42233)
    binop_y_42220 = (np.int64(8) * N_29559)
    bytes_42219 = smax64(np.int64(0), binop_y_42220)
    binop_y_42246 = (np.int64(8) * binop_x_41442)
    bytes_42244 = smax64(np.int64(0), binop_y_42246)
    local_memory_capacity_43652 = self.max_local_memory
    if (sle64(((((bytes_41991 + srem64((np.int64(8) - srem64(bytes_41991,
                                                             np.int64(8))),
                                       np.int64(8))) + (bytes_41991 + srem64((np.int64(8) - srem64(bytes_41991,
                                                                                                   np.int64(8))),
                                                                             np.int64(8)))) + (bytes_41991 + srem64((np.int64(8) - srem64(bytes_41991,
                                                                                                                                          np.int64(8))),
                                                                                                                    np.int64(8)))) + (bytes_42219 + srem64((np.int64(8) - srem64(bytes_42219,
                                                                                                                                                                                 np.int64(8))),
                                                                                                                                                           np.int64(8)))),
              sext_i32_i64(local_memory_capacity_43652)) and intra_suff_and_fits_38289):
      mem_42234 = opencl_alloc(self, bytes_42232, "mem_42234")
      mem_42238 = opencl_alloc(self, bytes_42211, "mem_42238")
      mem_42242 = opencl_alloc(self, bytes_42211, "mem_42242")
      if ((1 * (np.int64(m_29560) * np.int64(N_29559))) != 0):
        self.mainzisegmap_intragroup_38284_var.set_args(self.global_failure,
                                                        cl.LocalMemory(np.int64(bytes_42219)),
                                                        cl.LocalMemory(np.int64(bytes_41991)),
                                                        cl.LocalMemory(np.int64(bytes_41991)),
                                                        cl.LocalMemory(np.int64(bytes_41991)),
                                                        np.int64(N_29559),
                                                        np.int64(m_29560),
                                                        np.int64(i_29861),
                                                        images_mem_41421,
                                                        defunc_3_map_res_mem_42216,
                                                        mem_42234, mem_42238,
                                                        mem_42242)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainzisegmap_intragroup_38284_var,
                                   ((np.int64(m_29560) * np.int64(N_29559)),),
                                   (np.int64(N_29559),))
        if synchronous:
          sync(self)
      defunc_4_map_res_mem_42265 = mem_42234
      defunc_4_map_res_mem_42266 = mem_42238
      defunc_4_map_res_mem_42267 = mem_42242
    else:
      mem_42247 = opencl_alloc(self, bytes_42244, "mem_42247")
      mem_42251 = opencl_alloc(self, bytes_42211, "mem_42251")
      if slt64(np.int64(0), (m_29560 * N_29559)):
        stage1_max_num_groups_43560 = self.max_group_size
        stage1_num_groups_43561 = smin64(stage1_max_num_groups_43560,
                                         num_groups_38427)
        num_threads_43562 = sext_i64_i32((stage1_num_groups_43561 * segscan_group_sizze_38426))
        if ((1 * (np.int64(stage1_num_groups_43561) * np.int64(segscan_group_sizze_38426))) != 0):
          self.mainziscan_stage1_38409_var.set_args(self.global_failure,
                                                    cl.LocalMemory(np.int64(smax64(np.int64(1),
                                                                                   (np.int64(8) * segscan_group_sizze_38426)))),
                                                    np.int64(N_29559),
                                                    np.int64(m_29560),
                                                    np.int32(num_threads_43562),
                                                    images_mem_41421,
                                                    defunc_3_map_res_mem_42216,
                                                    mem_42247, mem_42251)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainziscan_stage1_38409_var,
                                     ((np.int64(stage1_num_groups_43561) * np.int64(segscan_group_sizze_38426)),),
                                     (np.int64(segscan_group_sizze_38426),))
          if synchronous:
            sync(self)
        if ((1 * (np.int64(np.int64(1)) * np.int64(stage1_num_groups_43561))) != 0):
          self.mainziscan_stage2_38409_var.set_args(self.global_failure,
                                                    cl.LocalMemory(np.int64(smax64(np.int64(1),
                                                                                   (np.int64(8) * stage1_num_groups_43561)))),
                                                    np.int64(N_29559),
                                                    np.int64(m_29560),
                                                    np.int64(stage1_num_groups_43561),
                                                    np.int32(num_threads_43562),
                                                    mem_42247)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainziscan_stage2_38409_var,
                                     ((np.int64(np.int64(1)) * np.int64(stage1_num_groups_43561)),),
                                     (np.int64(stage1_num_groups_43561),))
          if synchronous:
            sync(self)
        required_groups_43604 = sext_i64_i32(sdiv_up64((m_29560 * N_29559),
                                                       segscan_group_sizze_38426))
        if ((1 * (np.int64(num_groups_38427) * np.int64(segscan_group_sizze_38426))) != 0):
          self.mainziscan_stage3_38409_var.set_args(self.global_failure,
                                                    np.int64(N_29559),
                                                    np.int64(m_29560),
                                                    np.int64(num_groups_38427),
                                                    np.int32(num_threads_43562),
                                                    np.int32(required_groups_43604),
                                                    mem_42247)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainziscan_stage3_38409_var,
                                     ((np.int64(num_groups_38427) * np.int64(segscan_group_sizze_38426)),),
                                     (np.int64(segscan_group_sizze_38426),))
          if synchronous:
            sync(self)
      segmap_usable_groups_38447 = sdiv_up64(m_29560, segmap_group_sizze_38446)
      mem_42255 = opencl_alloc(self, bytes_42232, "mem_42255")
      if ((1 * (np.int64(segmap_usable_groups_38447) * np.int64(segmap_group_sizze_38446))) != 0):
        self.mainzisegmap_38392_var.set_args(self.global_failure,
                                             np.int64(N_29559),
                                             np.int64(m_29560),
                                             np.int64(i_29861), mem_42247,
                                             mem_42255)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_38392_var,
                                   ((np.int64(segmap_usable_groups_38447) * np.int64(segmap_group_sizze_38446)),),
                                   (np.int64(segmap_group_sizze_38446),))
        if synchronous:
          sync(self)
      mem_42259 = opencl_alloc(self, bytes_42211, "mem_42259")
      self.futhark_builtinzhreplicate_f32(mem_42259, (m_29560 * N_29559),
                                          np.nan)
      mem_42263 = opencl_alloc(self, bytes_42211, "mem_42263")
      self.futhark_builtinzhreplicate_i32(mem_42263, (m_29560 * N_29559),
                                          np.int32(0))
      segmap_usable_groups_38477 = sdiv_up64(binop_x_41442,
                                             segmap_group_sizze_38476)
      if ((1 * (np.int64(segmap_usable_groups_38477) * np.int64(segmap_group_sizze_38476))) != 0):
        self.mainzisegmap_38330_var.set_args(self.global_failure,
                                             np.int64(N_29559),
                                             np.int64(m_29560), mem_42247,
                                             mem_42251, mem_42259, mem_42263)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_38330_var,
                                   ((np.int64(segmap_usable_groups_38477) * np.int64(segmap_group_sizze_38476)),),
                                   (np.int64(segmap_group_sizze_38476),))
        if synchronous:
          sync(self)
      mem_42247 = None
      mem_42251 = None
      defunc_4_map_res_mem_42265 = mem_42255
      defunc_4_map_res_mem_42266 = mem_42259
      defunc_4_map_res_mem_42267 = mem_42263
    defunc_3_map_res_mem_42216 = None
    suff_outer_par_38515 = (self.sizes["main.suff_outer_par_12"] <= m_29560)
    fits_38593 = sle64(i32_res_29569, max_group_sizze_37215)
    suff_intra_par_38591 = (self.sizes["main.suff_intra_par_13"] <= i32_res_29569)
    intra_suff_and_fits_38594 = (suff_intra_par_38591 and fits_38593)
    segmap_group_sizze_38554 = self.sizes["main.segmap_group_size_38519"]
    nest_sizze_38691 = (m_29560 * i32_res_29569)
    segred_group_sizze_38692 = self.sizes["main.segred_group_size_38675"]
    max_num_groups_43653 = self.sizes["main.segred_num_groups_38677"]
    num_groups_38693 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_38691,
                                                            segred_group_sizze_38692),
                                                  sext_i32_i64(max_num_groups_43653))))
    segred_group_sizze_38706 = self.sizes["main.segred_group_size_38650"]
    max_num_groups_43654 = self.sizes["main.segred_num_groups_38652"]
    num_groups_38707 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_38691,
                                                            segred_group_sizze_38706),
                                                  sext_i32_i64(max_num_groups_43654))))
    segmap_group_sizze_38726 = self.sizes["main.segmap_group_size_38635"]
    bytes_42276 = (np.int64(4) * segmap_group_sizze_38554)
    bytes_42283 = smax64(np.int64(0), bytes_42276)
    local_memory_capacity_43821 = self.max_local_memory
    if (sle64((bytes_42283 + srem64((np.int64(8) - srem64(bytes_42283,
                                                          np.int64(8))),
                                    np.int64(8))),
              sext_i32_i64(local_memory_capacity_43821)) and suff_outer_par_38515):
      segmap_usable_groups_38555 = sdiv_up64(m_29560, segmap_group_sizze_38554)
      mem_42270 = opencl_alloc(self, bytes_41441, "mem_42270")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_42270, np.int64(0),
                                                  images_mem_41421, np.int64(0),
                                                  np.int64(1), N_29559, m_29560)
      mem_42273 = opencl_alloc(self, bytes_41441, "mem_42273")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_42273, np.int64(0),
                                                  defunc_4_map_res_mem_42266,
                                                  np.int64(0), np.int64(1),
                                                  N_29559, m_29560)
      num_whole_tiles_40936 = squot64(i32_res_29569, segmap_group_sizze_38554)
      residual_input_41037 = srem64(i32_res_29569, segmap_group_sizze_38554)
      cond_41038 = (residual_input_41037 == np.int64(0))
      mem_42307 = opencl_alloc(self, bytes_42232, "mem_42307")
      mem_42310 = opencl_alloc(self, bytes_42232, "mem_42310")
      mem_42313 = opencl_alloc(self, bytes_42232, "mem_42313")
      if ((1 * (np.int64(segmap_usable_groups_38555) * np.int64(segmap_group_sizze_38554))) != 0):
        self.mainzisegmap_intragroup_40914_var.set_args(self.global_failure,
                                                        self.failure_is_an_option,
                                                        self.global_failure_args,
                                                        cl.LocalMemory(np.int64(bytes_42283)),
                                                        np.int64(N_29559),
                                                        np.int64(m_29560),
                                                        np.int32(n_29563),
                                                        np.float32(hfrac_29565),
                                                        np.int64(i32_res_29569),
                                                        np.int32(k2p2_29571),
                                                        np.int64(segmap_usable_groups_38555),
                                                        np.int64(num_whole_tiles_40936),
                                                        np.int64(residual_input_41037),
                                                        np.byte(cond_41038),
                                                        mem_42270, mem_42273,
                                                        mem_42307, mem_42310,
                                                        mem_42313)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainzisegmap_intragroup_40914_var,
                                   ((np.int64(segmap_usable_groups_38555) * np.int64(segmap_group_sizze_38554)),),
                                   (np.int64(segmap_group_sizze_38554),))
        if synchronous:
          sync(self)
      self.failure_is_an_option = np.int32(1)
      mem_42270 = None
      mem_42273 = None
      defunc_3_map_res_mem_42344 = mem_42307
      defunc_3_map_res_mem_42345 = mem_42310
      defunc_3_map_res_mem_42346 = mem_42313
    else:
      local_memory_capacity_43820 = self.max_local_memory
      if (sle64((((np.int64(4) * i32_res_29569) + srem64((np.int64(8) - srem64((np.int64(4) * i32_res_29569),
                                                                               np.int64(8))),
                                                         np.int64(8))) + ((np.int64(4) * i32_res_29569) + srem64((np.int64(8) - srem64((np.int64(4) * i32_res_29569),
                                                                                                                                       np.int64(8))),
                                                                                                                 np.int64(8)))),
                sext_i32_i64(local_memory_capacity_43820)) and intra_suff_and_fits_38594):
        mem_42319 = opencl_alloc(self, bytes_42232, "mem_42319")
        mem_42322 = opencl_alloc(self, bytes_42232, "mem_42322")
        mem_42325 = opencl_alloc(self, bytes_42232, "mem_42325")
        if ((1 * (np.int64(m_29560) * np.int64(i32_res_29569))) != 0):
          self.mainzisegmap_intragroup_38513_var.set_args(self.global_failure,
                                                          self.failure_is_an_option,
                                                          self.global_failure_args,
                                                          cl.LocalMemory(np.int64((np.int64(4) * i32_res_29569))),
                                                          cl.LocalMemory(np.int64((np.int64(4) * i32_res_29569))),
                                                          np.int64(N_29559),
                                                          np.int64(m_29560),
                                                          np.float32(hfrac_29565),
                                                          np.int64(i32_res_29569),
                                                          np.int32(k2p2_29571),
                                                          images_mem_41421,
                                                          defunc_4_map_res_mem_42266,
                                                          mem_42319, mem_42322,
                                                          mem_42325)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainzisegmap_intragroup_38513_var,
                                     ((np.int64(m_29560) * np.int64(i32_res_29569)),),
                                     (np.int64(i32_res_29569),))
          if synchronous:
            sync(self)
        self.failure_is_an_option = np.int32(1)
        defunc_3_map_res_mem_42341 = mem_42319
        defunc_3_map_res_mem_42342 = mem_42322
        defunc_3_map_res_mem_42343 = mem_42325
      else:
        mem_42329 = opencl_alloc(self, bytes_42232, "mem_42329")
        if slt64((i32_res_29569 * np.int64(2)), segred_group_sizze_38692):
          segment_sizze_nonzzero_43684 = smax64(np.int64(1), i32_res_29569)
          num_threads_43685 = (num_groups_38693 * segred_group_sizze_38692)
          if ((1 * (np.int64(num_groups_38693) * np.int64(segred_group_sizze_38692))) != 0):
            self.mainzisegred_small_38681_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_38692))),
                                                       np.int64(N_29559),
                                                       np.int64(m_29560),
                                                       np.int64(i32_res_29569),
                                                       np.int64(num_groups_38693),
                                                       np.int64(segment_sizze_nonzzero_43684),
                                                       images_mem_41421,
                                                       mem_42329)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_small_38681_var,
                                       ((np.int64(num_groups_38693) * np.int64(segred_group_sizze_38692)),),
                                       (np.int64(segred_group_sizze_38692),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_43707 = sdiv_up64(num_groups_38693,
                                               smax64(np.int64(1), m_29560))
          elements_per_thread_43708 = sdiv_up64(i32_res_29569,
                                                (segred_group_sizze_38692 * groups_per_segment_43707))
          virt_num_groups_43709 = (groups_per_segment_43707 * m_29560)
          num_threads_43710 = (num_groups_38693 * segred_group_sizze_38692)
          threads_per_segment_43711 = (groups_per_segment_43707 * segred_group_sizze_38692)
          segred_tmp_mem_43712 = opencl_alloc(self,
                                              (np.int64(4) * virt_num_groups_43709),
                                              "segred_tmp_mem_43712")
          mainzicounter_mem_43714 = self.mainzicounter_mem_43714
          if ((1 * (np.int64(num_groups_38693) * np.int64(segred_group_sizze_38692))) != 0):
            self.mainzisegred_large_38681_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.int64(np.int32(1))),
                                                       cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_38692))),
                                                       np.int64(N_29559),
                                                       np.int64(m_29560),
                                                       np.int64(i32_res_29569),
                                                       np.int64(num_groups_38693),
                                                       np.int64(groups_per_segment_43707),
                                                       np.int64(elements_per_thread_43708),
                                                       np.int64(virt_num_groups_43709),
                                                       np.int64(threads_per_segment_43711),
                                                       images_mem_41421,
                                                       mem_42329,
                                                       segred_tmp_mem_43712,
                                                       mainzicounter_mem_43714)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_large_38681_var,
                                       ((np.int64(num_groups_38693) * np.int64(segred_group_sizze_38692)),),
                                       (np.int64(segred_group_sizze_38692),))
            if synchronous:
              sync(self)
        mem_42333 = opencl_alloc(self, bytes_42232, "mem_42333")
        if slt64((i32_res_29569 * np.int64(2)), segred_group_sizze_38706):
          segment_sizze_nonzzero_43748 = smax64(np.int64(1), i32_res_29569)
          num_threads_43749 = (num_groups_38707 * segred_group_sizze_38706)
          if ((1 * (np.int64(num_groups_38707) * np.int64(segred_group_sizze_38706))) != 0):
            self.mainzisegred_small_38656_var.set_args(self.global_failure,
                                                       self.failure_is_an_option,
                                                       self.global_failure_args,
                                                       cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_38706))),
                                                       np.int64(N_29559),
                                                       np.int64(m_29560),
                                                       np.int64(i32_res_29569),
                                                       np.int64(num_groups_38707),
                                                       np.int64(segment_sizze_nonzzero_43748),
                                                       defunc_4_map_res_mem_42266,
                                                       mem_42329, mem_42333)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_small_38656_var,
                                       ((np.int64(num_groups_38707) * np.int64(segred_group_sizze_38706)),),
                                       (np.int64(segred_group_sizze_38706),))
            if synchronous:
              sync(self)
          self.failure_is_an_option = np.int32(1)
        else:
          groups_per_segment_43771 = sdiv_up64(num_groups_38707,
                                               smax64(np.int64(1), m_29560))
          elements_per_thread_43772 = sdiv_up64(i32_res_29569,
                                                (segred_group_sizze_38706 * groups_per_segment_43771))
          virt_num_groups_43773 = (groups_per_segment_43771 * m_29560)
          num_threads_43774 = (num_groups_38707 * segred_group_sizze_38706)
          threads_per_segment_43775 = (groups_per_segment_43771 * segred_group_sizze_38706)
          segred_tmp_mem_43776 = opencl_alloc(self,
                                              (np.int64(4) * virt_num_groups_43773),
                                              "segred_tmp_mem_43776")
          mainzicounter_mem_43778 = self.mainzicounter_mem_43778
          if ((1 * (np.int64(num_groups_38707) * np.int64(segred_group_sizze_38706))) != 0):
            self.mainzisegred_large_38656_var.set_args(self.global_failure,
                                                       self.failure_is_an_option,
                                                       self.global_failure_args,
                                                       cl.LocalMemory(np.int64(np.int32(1))),
                                                       cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_38706))),
                                                       np.int64(N_29559),
                                                       np.int64(m_29560),
                                                       np.int64(i32_res_29569),
                                                       np.int64(num_groups_38707),
                                                       np.int64(groups_per_segment_43771),
                                                       np.int64(elements_per_thread_43772),
                                                       np.int64(virt_num_groups_43773),
                                                       np.int64(threads_per_segment_43775),
                                                       defunc_4_map_res_mem_42266,
                                                       mem_42329, mem_42333,
                                                       segred_tmp_mem_43776,
                                                       mainzicounter_mem_43778)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_large_38656_var,
                                       ((np.int64(num_groups_38707) * np.int64(segred_group_sizze_38706)),),
                                       (np.int64(segred_group_sizze_38706),))
            if synchronous:
              sync(self)
          self.failure_is_an_option = np.int32(1)
        segmap_usable_groups_38727 = sdiv_up64(m_29560,
                                               segmap_group_sizze_38726)
        mem_42337 = opencl_alloc(self, bytes_42232, "mem_42337")
        mem_42340 = opencl_alloc(self, bytes_42232, "mem_42340")
        if ((1 * (np.int64(segmap_usable_groups_38727) * np.int64(segmap_group_sizze_38726))) != 0):
          self.mainzisegmap_38633_var.set_args(self.global_failure,
                                               np.int64(m_29560),
                                               np.float32(hfrac_29565),
                                               np.int32(k2p2_29571), mem_42329,
                                               mem_42333, mem_42337, mem_42340)
          cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_38633_var,
                                     ((np.int64(segmap_usable_groups_38727) * np.int64(segmap_group_sizze_38726)),),
                                     (np.int64(segmap_group_sizze_38726),))
          if synchronous:
            sync(self)
        mem_42333 = None
        defunc_3_map_res_mem_42341 = mem_42337
        defunc_3_map_res_mem_42342 = mem_42329
        defunc_3_map_res_mem_42343 = mem_42340
      defunc_3_map_res_mem_42344 = defunc_3_map_res_mem_42341
      defunc_3_map_res_mem_42345 = defunc_3_map_res_mem_42342
      defunc_3_map_res_mem_42346 = defunc_3_map_res_mem_42343
    segred_group_sizze_38747 = self.sizes["main.segred_group_size_38746"]
    max_num_groups_43822 = self.sizes["main.segred_num_groups_38748"]
    num_groups_38749 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_29560,
                                                            segred_group_sizze_38747),
                                                  sext_i32_i64(max_num_groups_43822))))
    mem_42349 = opencl_alloc(self, np.int64(4), "mem_42349")
    mainzicounter_mem_43823 = self.mainzicounter_mem_43823
    segred_tmp_mem_43825 = opencl_alloc(self, (np.int64(4) * num_groups_38749),
                                        "segred_tmp_mem_43825")
    num_threads_43827 = (num_groups_38749 * segred_group_sizze_38747)
    if ((1 * (np.int64(num_groups_38749) * np.int64(segred_group_sizze_38747))) != 0):
      self.mainzisegred_nonseg_38754_var.set_args(self.global_failure,
                                                  cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_38747))),
                                                  cl.LocalMemory(np.int64(np.int32(1))),
                                                  np.int64(m_29560),
                                                  np.int64(num_groups_38749),
                                                  np.int64(num_threads_43827),
                                                  defunc_3_map_res_mem_42344,
                                                  mem_42349,
                                                  mainzicounter_mem_43823,
                                                  segred_tmp_mem_43825)
      cl.enqueue_nd_range_kernel(self.queue, self.mainzisegred_nonseg_38754_var,
                                 ((np.int64(num_groups_38749) * np.int64(segred_group_sizze_38747)),),
                                 (np.int64(segred_group_sizze_38747),))
      if synchronous:
        sync(self)
    read_res_44242 = np.empty(1, dtype=ct.c_int32)
    cl.enqueue_copy(self.queue, read_res_44242, mem_42349,
                    device_offset=(np.int64(np.int64(0)) * 4),
                    is_blocking=synchronous)
    sync(self)
    defunc_2_reduce_comm_res_29955 = read_res_44242[0]
    mem_42349 = None
    i32_res_29960 = sext_i32_i64(defunc_2_reduce_comm_res_29955)
    bounds_invalid_upwards_29961 = slt64(i32_res_29960, np.int64(0))
    valid_29962 = not(bounds_invalid_upwards_29961)
    range_valid_c_29963 = True
    assert valid_29962, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:90:3-10\n   #1  helpers.fut:5:3-18\n   #2  bfastfinal.fut:102:34-46\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:97:17-104:24\n   #5  bfastfinal.fut:189:5-58\n   #6  bfastfinal.fut:184:1-190:25\n" % ("Range ",
                                                                                                                                                                                                                                                                                                                   np.int64(0),
                                                                                                                                                                                                                                                                                                                   "..",
                                                                                                                                                                                                                                                                                                                   np.int64(1),
                                                                                                                                                                                                                                                                                                                   "..<",
                                                                                                                                                                                                                                                                                                                   i32_res_29960,
                                                                                                                                                                                                                                                                                                                   " is invalid."))
    suff_outer_par_38770 = (self.sizes["main.suff_outer_par_14"] <= m_29560)
    segmap_group_sizze_38797 = self.sizes["main.segmap_group_size_38774"]
    nest_sizze_38848 = (m_29560 * i32_res_29960)
    segred_group_sizze_38849 = self.sizes["main.segred_group_size_38822"]
    max_num_groups_43853 = self.sizes["main.segred_num_groups_38824"]
    num_groups_38850 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_38848,
                                                            segred_group_sizze_38849),
                                                  sext_i32_i64(max_num_groups_43853))))
    bytes_42352 = (np.int64(4) * segmap_group_sizze_38797)
    bytes_42361 = smax64(np.int64(0), bytes_42352)
    local_memory_capacity_43930 = self.max_local_memory
    if (sle64((bytes_42361 + srem64((np.int64(8) - srem64(bytes_42361,
                                                          np.int64(8))),
                                    np.int64(8))),
              sext_i32_i64(local_memory_capacity_43930)) and suff_outer_par_38770):
      segmap_usable_groups_38798 = sdiv_up64(m_29560, segmap_group_sizze_38797)
      num_whole_tiles_41140 = squot64(i32_res_29960, segmap_group_sizze_38797)
      residual_input_41251 = srem64(i32_res_29960, segmap_group_sizze_38797)
      cond_41252 = (residual_input_41251 == np.int64(0))
      mem_42378 = opencl_alloc(self, bytes_42232, "mem_42378")
      if ((1 * (np.int64(segmap_usable_groups_38798) * np.int64(segmap_group_sizze_38797))) != 0):
        self.mainzisegmap_intragroup_41120_var.set_args(self.global_failure,
                                                        self.failure_is_an_option,
                                                        self.global_failure_args,
                                                        cl.LocalMemory(np.int64(bytes_42361)),
                                                        np.int64(N_29559),
                                                        np.int64(m_29560),
                                                        np.int64(i32_res_29960),
                                                        np.int64(segmap_usable_groups_38798),
                                                        np.int64(num_whole_tiles_41140),
                                                        np.int64(residual_input_41251),
                                                        np.byte(cond_41252),
                                                        defunc_4_map_res_mem_42266,
                                                        defunc_3_map_res_mem_42344,
                                                        defunc_3_map_res_mem_42345,
                                                        mem_42378)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainzisegmap_intragroup_41120_var,
                                   ((np.int64(segmap_usable_groups_38798) * np.int64(segmap_group_sizze_38797)),),
                                   (np.int64(segmap_group_sizze_38797),))
        if synchronous:
          sync(self)
      self.failure_is_an_option = np.int32(1)
      defunc_0_f_res_mem_42383 = mem_42378
    else:
      mem_42382 = opencl_alloc(self, bytes_42232, "mem_42382")
      if slt64((i32_res_29960 * np.int64(2)), segred_group_sizze_38849):
        segment_sizze_nonzzero_43866 = smax64(np.int64(1), i32_res_29960)
        num_threads_43867 = (num_groups_38850 * segred_group_sizze_38849)
        if ((1 * (np.int64(num_groups_38850) * np.int64(segred_group_sizze_38849))) != 0):
          self.mainzisegred_small_38828_var.set_args(self.global_failure,
                                                     self.failure_is_an_option,
                                                     self.global_failure_args,
                                                     cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_38849))),
                                                     np.int64(N_29559),
                                                     np.int64(m_29560),
                                                     np.int64(i32_res_29960),
                                                     np.int64(num_groups_38850),
                                                     np.int64(segment_sizze_nonzzero_43866),
                                                     defunc_4_map_res_mem_42266,
                                                     defunc_3_map_res_mem_42344,
                                                     defunc_3_map_res_mem_42345,
                                                     mem_42382)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainzisegred_small_38828_var,
                                     ((np.int64(num_groups_38850) * np.int64(segred_group_sizze_38849)),),
                                     (np.int64(segred_group_sizze_38849),))
          if synchronous:
            sync(self)
        self.failure_is_an_option = np.int32(1)
      else:
        groups_per_segment_43889 = sdiv_up64(num_groups_38850,
                                             smax64(np.int64(1), m_29560))
        elements_per_thread_43890 = sdiv_up64(i32_res_29960,
                                              (segred_group_sizze_38849 * groups_per_segment_43889))
        virt_num_groups_43891 = (groups_per_segment_43889 * m_29560)
        num_threads_43892 = (num_groups_38850 * segred_group_sizze_38849)
        threads_per_segment_43893 = (groups_per_segment_43889 * segred_group_sizze_38849)
        segred_tmp_mem_43894 = opencl_alloc(self,
                                            (np.int64(4) * virt_num_groups_43891),
                                            "segred_tmp_mem_43894")
        mainzicounter_mem_43896 = self.mainzicounter_mem_43896
        if ((1 * (np.int64(num_groups_38850) * np.int64(segred_group_sizze_38849))) != 0):
          self.mainzisegred_large_38828_var.set_args(self.global_failure,
                                                     self.failure_is_an_option,
                                                     self.global_failure_args,
                                                     cl.LocalMemory(np.int64(np.int32(1))),
                                                     cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_38849))),
                                                     np.int64(N_29559),
                                                     np.int64(m_29560),
                                                     np.int64(i32_res_29960),
                                                     np.int64(num_groups_38850),
                                                     np.int64(groups_per_segment_43889),
                                                     np.int64(elements_per_thread_43890),
                                                     np.int64(virt_num_groups_43891),
                                                     np.int64(threads_per_segment_43893),
                                                     defunc_4_map_res_mem_42266,
                                                     defunc_3_map_res_mem_42344,
                                                     defunc_3_map_res_mem_42345,
                                                     mem_42382,
                                                     segred_tmp_mem_43894,
                                                     mainzicounter_mem_43896)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainzisegred_large_38828_var,
                                     ((np.int64(num_groups_38850) * np.int64(segred_group_sizze_38849)),),
                                     (np.int64(segred_group_sizze_38849),))
          if synchronous:
            sync(self)
        self.failure_is_an_option = np.int32(1)
      defunc_0_f_res_mem_42383 = mem_42382
    iota32_arg_29989 = (N_29559 - i32_res_29569)
    bounds_invalid_upwards_29990 = slt64(iota32_arg_29989, np.int64(0))
    valid_29991 = not(bounds_invalid_upwards_29990)
    range_valid_c_29992 = True
    assert valid_29991, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:90:3-10\n   #1  helpers.fut:2:3-8\n   #2  bfastfinal.fut:109:22-35\n   #3  bfastfinal.fut:189:5-58\n   #4  bfastfinal.fut:184:1-190:25\n" % ("Range ",
                                                                                                                                                                                                                                      np.int64(0),
                                                                                                                                                                                                                                      "..",
                                                                                                                                                                                                                                      np.int64(1),
                                                                                                                                                                                                                                      "..<",
                                                                                                                                                                                                                                      iota32_arg_29989,
                                                                                                                                                                                                                                      " is invalid."))
    i_29994 = (n_29563 - np.int32(1))
    i_29995 = sext_i32_i64(i_29994)
    x_29996 = sle64(np.int64(0), i_29995)
    y_29997 = slt64(i_29995, N_29559)
    bounds_check_29998 = (x_29996 and y_29997)
    index_certs_29999 = True
    assert bounds_check_29998, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:107:64-84\n   #1  bfastfinal.fut:106:15-109:36\n   #2  bfastfinal.fut:189:5-58\n   #3  bfastfinal.fut:184:1-190:25\n" % ("Index [",
                                                                                                                                                                                                                 i_29995,
                                                                                                                                                                                                                 "] out of bounds for array of shape [",
                                                                                                                                                                                                                 N_29559,
                                                                                                                                                                                                                 "]."))
    read_res_44244 = np.empty(1, dtype=ct.c_int32)
    cl.enqueue_copy(self.queue, read_res_44244, mappingindices_mem_41420,
                    device_offset=(np.int64(i_29995) * 4),
                    is_blocking=synchronous)
    sync(self)
    r32_arg_30000 = read_res_44244[0]
    i32_res_30001 = sitofp_i32_f32(r32_arg_30000)
    range_valid_c_30002 = True
    assert valid_29991, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:90:3-10\n   #1  helpers.fut:2:3-8\n   #2  bfastfinal.fut:119:20-35\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:114:20-131:9\n   #5  bfastfinal.fut:189:5-58\n   #6  bfastfinal.fut:184:1-190:25\n" % ("Range ",
                                                                                                                                                                                                                                                                                                                  np.int64(0),
                                                                                                                                                                                                                                                                                                                  "..",
                                                                                                                                                                                                                                                                                                                  np.int64(1),
                                                                                                                                                                                                                                                                                                                  "..<",
                                                                                                                                                                                                                                                                                                                  iota32_arg_29989,
                                                                                                                                                                                                                                                                                                                  " is invalid."))
    segmap_group_sizze_38895 = self.sizes["main.segmap_group_size_38875"]
    segmap_usable_groups_38896 = sdiv_up64(iota32_arg_29989,
                                           segmap_group_sizze_38895)
    binop_y_42386 = (np.int64(4) * iota32_arg_29989)
    bytes_42385 = smax64(np.int64(0), binop_y_42386)
    mem_42387 = opencl_alloc(self, bytes_42385, "mem_42387")
    mem_42390 = opencl_alloc(self, bytes_42385, "mem_42390")
    if ((1 * (np.int64(segmap_usable_groups_38896) * np.int64(segmap_group_sizze_38895))) != 0):
      self.mainzisegmap_38873_var.set_args(self.global_failure,
                                           self.failure_is_an_option,
                                           self.global_failure_args,
                                           np.int64(N_29559), np.int32(n_29563),
                                           np.float32(lam_29566),
                                           np.int64(iota32_arg_29989),
                                           np.float32(i32_res_30001),
                                           mappingindices_mem_41420, mem_42387,
                                           mem_42390)
      cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_38873_var,
                                 ((np.int64(segmap_usable_groups_38896) * np.int64(segmap_group_sizze_38895)),),
                                 (np.int64(segmap_group_sizze_38895),))
      if synchronous:
        sync(self)
    self.failure_is_an_option = np.int32(1)
    mem_42387 = None
    fits_38928 = sle64(iota32_arg_29989, max_group_sizze_37215)
    suff_intra_par_38926 = (self.sizes["main.suff_intra_par_15"] <= iota32_arg_29989)
    intra_suff_and_fits_38929 = (suff_intra_par_38926 and fits_38928)
    segmap_group_sizze_39228 = self.sizes["main.segmap_group_size_39208"]
    max_num_groups_43939 = self.sizes["main.segmap_num_groups_39210"]
    num_groups_39229 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_29560,
                                                            segmap_group_sizze_39228),
                                                  sext_i32_i64(max_num_groups_43939))))
    nest_sizze_39250 = (m_29560 * iota32_arg_29989)
    segscan_group_sizze_39251 = self.sizes["main.segscan_group_size_39159"]
    max_num_groups_43940 = self.sizes["main.segscan_num_groups_39161"]
    num_groups_39252 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_39250,
                                                            segscan_group_sizze_39251),
                                                  sext_i32_i64(max_num_groups_43940))))
    segred_group_sizze_39297 = self.sizes["main.segred_group_size_39105"]
    max_num_groups_43941 = self.sizes["main.segred_num_groups_39107"]
    num_groups_39298 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_39250,
                                                            segred_group_sizze_39297),
                                                  sext_i32_i64(max_num_groups_43941))))
    segmap_group_sizze_39336 = self.sizes["main.segmap_group_size_39054"]
    binop_y_42413 = (np.int64(4) * nest_sizze_39250)
    bytes_42411 = smax64(np.int64(0), binop_y_42413)
    local_memory_capacity_44146 = self.max_local_memory
    if (sle64(((((bytes_42385 + srem64((np.int64(8) - srem64(bytes_42385,
                                                             np.int64(8))),
                                       np.int64(8))) + (iota32_arg_29989 + srem64((np.int64(8) - srem64(iota32_arg_29989,
                                                                                                        np.int64(8))),
                                                                                  np.int64(8)))) + ((np.int64(4) * iota32_arg_29989) + srem64((np.int64(8) - srem64((np.int64(4) * iota32_arg_29989),
                                                                                                                                                                    np.int64(8))),
                                                                                                                                              np.int64(8)))) + ((np.int64(4) * iota32_arg_29989) + srem64((np.int64(8) - srem64((np.int64(4) * iota32_arg_29989),
                                                                                                                                                                                                                                np.int64(8))),
                                                                                                                                                                                                          np.int64(8)))),
              sext_i32_i64(local_memory_capacity_44146)) and intra_suff_and_fits_38929):
      mem_42399 = opencl_alloc(self, bytes_42232, "mem_42399")
      mem_42402 = opencl_alloc(self, bytes_42232, "mem_42402")
      if ((1 * (np.int64(m_29560) * np.int64(iota32_arg_29989))) != 0):
        self.mainzisegmap_intragroup_38924_var.set_args(self.global_failure,
                                                        self.failure_is_an_option,
                                                        self.global_failure_args,
                                                        cl.LocalMemory(np.int64((np.int64(4) * iota32_arg_29989))),
                                                        cl.LocalMemory(np.int64((np.int64(4) * iota32_arg_29989))),
                                                        cl.LocalMemory(np.int64(iota32_arg_29989)),
                                                        cl.LocalMemory(np.int64(bytes_42385)),
                                                        np.int64(N_29559),
                                                        np.int64(m_29560),
                                                        np.int32(n_29563),
                                                        np.int64(iota32_arg_29989),
                                                        defunc_4_map_res_mem_42265,
                                                        defunc_4_map_res_mem_42266,
                                                        defunc_4_map_res_mem_42267,
                                                        defunc_3_map_res_mem_42344,
                                                        defunc_3_map_res_mem_42345,
                                                        defunc_3_map_res_mem_42346,
                                                        defunc_0_f_res_mem_42383,
                                                        mem_42390, mem_42399,
                                                        mem_42402)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainzisegmap_intragroup_38924_var,
                                   ((np.int64(m_29560) * np.int64(iota32_arg_29989)),),
                                   (np.int64(iota32_arg_29989),))
        if synchronous:
          sync(self)
      self.failure_is_an_option = np.int32(1)
      defunc_0_f_res_mem_42431 = mem_42399
      defunc_0_f_res_mem_42432 = mem_42402
    else:
      mem_42406 = opencl_alloc(self, bytes_42232, "mem_42406")
      mem_42409 = opencl_alloc(self, bytes_42232, "mem_42409")
      if ((1 * (np.int64(num_groups_39229) * np.int64(segmap_group_sizze_39228))) != 0):
        self.mainzisegmap_39206_var.set_args(self.global_failure,
                                             np.int64(m_29560),
                                             np.int64(num_groups_39229),
                                             defunc_4_map_res_mem_42265,
                                             defunc_3_map_res_mem_42345,
                                             defunc_3_map_res_mem_42346,
                                             mem_42406, mem_42409)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_39206_var,
                                   ((np.int64(num_groups_39229) * np.int64(segmap_group_sizze_39228)),),
                                   (np.int64(segmap_group_sizze_39228),))
        if synchronous:
          sync(self)
      mem_42414 = opencl_alloc(self, bytes_42411, "mem_42414")
      if slt64(np.int64(0), (m_29560 * iota32_arg_29989)):
        stage1_max_num_groups_43980 = self.max_group_size
        stage1_num_groups_43981 = smin64(stage1_max_num_groups_43980,
                                         num_groups_39252)
        num_threads_43982 = sext_i64_i32((stage1_num_groups_43981 * segscan_group_sizze_39251))
        if ((1 * (np.int64(stage1_num_groups_43981) * np.int64(segscan_group_sizze_39251))) != 0):
          self.mainziscan_stage1_39165_var.set_args(self.global_failure,
                                                    self.failure_is_an_option,
                                                    self.global_failure_args,
                                                    cl.LocalMemory(np.int64(smax64(np.int64(1),
                                                                                   (np.int64(4) * segscan_group_sizze_39251)))),
                                                    np.int64(N_29559),
                                                    np.int64(m_29560),
                                                    np.int64(iota32_arg_29989),
                                                    np.int32(num_threads_43982),
                                                    defunc_4_map_res_mem_42266,
                                                    defunc_3_map_res_mem_42344,
                                                    defunc_3_map_res_mem_42345,
                                                    defunc_0_f_res_mem_42383,
                                                    mem_42409, mem_42414)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainziscan_stage1_39165_var,
                                     ((np.int64(stage1_num_groups_43981) * np.int64(segscan_group_sizze_39251)),),
                                     (np.int64(segscan_group_sizze_39251),))
          if synchronous:
            sync(self)
        self.failure_is_an_option = np.int32(1)
        if ((1 * (np.int64(np.int64(1)) * np.int64(stage1_num_groups_43981))) != 0):
          self.mainziscan_stage2_39165_var.set_args(self.global_failure,
                                                    cl.LocalMemory(np.int64(smax64(np.int64(1),
                                                                                   (np.int64(4) * stage1_num_groups_43981)))),
                                                    np.int64(m_29560),
                                                    np.int64(iota32_arg_29989),
                                                    np.int64(stage1_num_groups_43981),
                                                    np.int32(num_threads_43982),
                                                    mem_42414)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainziscan_stage2_39165_var,
                                     ((np.int64(np.int64(1)) * np.int64(stage1_num_groups_43981)),),
                                     (np.int64(stage1_num_groups_43981),))
          if synchronous:
            sync(self)
        required_groups_44024 = sext_i64_i32(sdiv_up64((m_29560 * iota32_arg_29989),
                                                       segscan_group_sizze_39251))
        if ((1 * (np.int64(num_groups_39252) * np.int64(segscan_group_sizze_39251))) != 0):
          self.mainziscan_stage3_39165_var.set_args(self.global_failure,
                                                    np.int64(m_29560),
                                                    np.int64(iota32_arg_29989),
                                                    np.int64(num_groups_39252),
                                                    np.int32(num_threads_43982),
                                                    np.int32(required_groups_44024),
                                                    mem_42414)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainziscan_stage3_39165_var,
                                     ((np.int64(num_groups_39252) * np.int64(segscan_group_sizze_39251)),),
                                     (np.int64(segscan_group_sizze_39251),))
          if synchronous:
            sync(self)
      mem_42417 = opencl_alloc(self, bytes_41657, "mem_42417")
      mem_42420 = opencl_alloc(self, bytes_42232, "mem_42420")
      mem_42423 = opencl_alloc(self, bytes_42232, "mem_42423")
      if slt64((iota32_arg_29989 * np.int64(2)), segred_group_sizze_39297):
        segment_sizze_nonzzero_44036 = smax64(np.int64(1), iota32_arg_29989)
        num_threads_44037 = (num_groups_39298 * segred_group_sizze_39297)
        if ((1 * (np.int64(num_groups_39298) * np.int64(segred_group_sizze_39297))) != 0):
          self.mainzisegred_small_39111_var.set_args(self.global_failure,
                                                     cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_39297))),
                                                     cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_39297))),
                                                     cl.LocalMemory(np.int64(segred_group_sizze_39297)),
                                                     np.int64(m_29560),
                                                     np.int64(iota32_arg_29989),
                                                     np.int64(num_groups_39298),
                                                     np.int64(segment_sizze_nonzzero_44036),
                                                     mem_42390, mem_42406,
                                                     mem_42409, mem_42414,
                                                     mem_42417, mem_42420,
                                                     mem_42423)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainzisegred_small_39111_var,
                                     ((np.int64(num_groups_39298) * np.int64(segred_group_sizze_39297)),),
                                     (np.int64(segred_group_sizze_39297),))
          if synchronous:
            sync(self)
      else:
        groups_per_segment_44074 = sdiv_up64(num_groups_39298,
                                             smax64(np.int64(1), m_29560))
        elements_per_thread_44075 = sdiv_up64(iota32_arg_29989,
                                              (segred_group_sizze_39297 * groups_per_segment_44074))
        virt_num_groups_44076 = (groups_per_segment_44074 * m_29560)
        num_threads_44077 = (num_groups_39298 * segred_group_sizze_39297)
        threads_per_segment_44078 = (groups_per_segment_44074 * segred_group_sizze_39297)
        segred_tmp_mem_44079 = opencl_alloc(self, virt_num_groups_44076,
                                            "segred_tmp_mem_44079")
        segred_tmp_mem_44081 = opencl_alloc(self,
                                            (np.int64(4) * virt_num_groups_44076),
                                            "segred_tmp_mem_44081")
        segred_tmp_mem_44083 = opencl_alloc(self,
                                            (np.int64(4) * virt_num_groups_44076),
                                            "segred_tmp_mem_44083")
        mainzicounter_mem_44085 = self.mainzicounter_mem_44085
        if ((1 * (np.int64(num_groups_39298) * np.int64(segred_group_sizze_39297))) != 0):
          self.mainzisegred_large_39111_var.set_args(self.global_failure,
                                                     cl.LocalMemory(np.int64(np.int32(1))),
                                                     cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_39297))),
                                                     cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_39297))),
                                                     cl.LocalMemory(np.int64(segred_group_sizze_39297)),
                                                     np.int64(m_29560),
                                                     np.int64(iota32_arg_29989),
                                                     np.int64(num_groups_39298),
                                                     np.int64(groups_per_segment_44074),
                                                     np.int64(elements_per_thread_44075),
                                                     np.int64(virt_num_groups_44076),
                                                     mem_42390, mem_42406,
                                                     mem_42409, mem_42414,
                                                     mem_42417, mem_42420,
                                                     mem_42423,
                                                     segred_tmp_mem_44079,
                                                     segred_tmp_mem_44081,
                                                     segred_tmp_mem_44083,
                                                     mainzicounter_mem_44085)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainzisegred_large_39111_var,
                                     ((np.int64(num_groups_39298) * np.int64(segred_group_sizze_39297)),),
                                     (np.int64(segred_group_sizze_39297),))
          if synchronous:
            sync(self)
      mem_42406 = None
      mem_42414 = None
      segmap_usable_groups_39337 = sdiv_up64(m_29560, segmap_group_sizze_39336)
      mem_42427 = opencl_alloc(self, bytes_42232, "mem_42427")
      mem_42430 = opencl_alloc(self, bytes_42232, "mem_42430")
      if ((1 * (np.int64(segmap_usable_groups_39337) * np.int64(segmap_group_sizze_39336))) != 0):
        self.mainzisegmap_39052_var.set_args(self.global_failure,
                                             self.failure_is_an_option,
                                             self.global_failure_args,
                                             np.int64(N_29559),
                                             np.int64(m_29560),
                                             np.int32(n_29563),
                                             defunc_4_map_res_mem_42267,
                                             defunc_3_map_res_mem_42345,
                                             mem_42409, mem_42417, mem_42420,
                                             mem_42423, mem_42427, mem_42430)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_39052_var,
                                   ((np.int64(segmap_usable_groups_39337) * np.int64(segmap_group_sizze_39336)),),
                                   (np.int64(segmap_group_sizze_39336),))
        if synchronous:
          sync(self)
      self.failure_is_an_option = np.int32(1)
      mem_42409 = None
      mem_42417 = None
      mem_42420 = None
      mem_42423 = None
      defunc_0_f_res_mem_42431 = mem_42427
      defunc_0_f_res_mem_42432 = mem_42430
    defunc_4_map_res_mem_42266 = None
    defunc_4_map_res_mem_42267 = None
    defunc_3_map_res_mem_42344 = None
    defunc_3_map_res_mem_42345 = None
    defunc_3_map_res_mem_42346 = None
    defunc_0_f_res_mem_42383 = None
    mem_42390 = None
    out_mem_42873 = defunc_4_map_res_mem_42265
    out_mem_42874 = defunc_0_f_res_mem_42431
    out_mem_42875 = defunc_0_f_res_mem_42432
    return (out_mem_42873, out_mem_42874, out_mem_42875)
  def futhark_entry_mainDetailed(self, mappingindices_mem_41420,
                                 images_mem_41421, N_28169, m_28170,
                                 trend_28171, k_28172, n_28173, freq_28174,
                                 hfrac_28175, lam_28176):
    i32_res_28179 = sext_i32_i64(n_28173)
    x_28180 = (np.int32(2) * k_28172)
    k2p2_28181 = (np.int32(2) + x_28180)
    cond_28182 = slt32(np.int32(0), trend_28171)
    if cond_28182:
      k2p2zq_28183 = k2p2_28181
    else:
      k2p2zq_f_res_28184 = (k2p2_28181 - np.int32(1))
      k2p2zq_28183 = k2p2zq_f_res_28184
    i32_res_28185 = sext_i32_i64(k2p2zq_28183)
    binop_x_41424 = (N_28169 * i32_res_28185)
    binop_y_41425 = (np.int64(4) * binop_x_41424)
    bytes_41423 = smax64(np.int64(0), binop_y_41425)
    if cond_28182:
      bounds_invalid_upwards_28187 = slt64(i32_res_28185, np.int64(0))
      valid_28188 = not(bounds_invalid_upwards_28187)
      range_valid_c_28189 = True
      assert valid_28188, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:90:3-10\n   #1  helpers.fut:2:3-8\n   #2  helpers.fut:37:10-20\n   #3  bfastfinal.fut:29:17-66\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n" % ("Range ",
                                                                                                                                                                                                                                                                    np.int64(0),
                                                                                                                                                                                                                                                                    "..",
                                                                                                                                                                                                                                                                    np.int64(1),
                                                                                                                                                                                                                                                                    "..<",
                                                                                                                                                                                                                                                                    i32_res_28185,
                                                                                                                                                                                                                                                                    " is invalid."))
      segmap_group_sizze_30299 = self.sizes["mainDetailed.segmap_group_size_30232"]
      segmap_usable_groups_30300 = sdiv_up64(binop_x_41424,
                                             segmap_group_sizze_30299)
      mem_41426 = opencl_alloc(self, bytes_41423, "mem_41426")
      if ((1 * (np.int64(segmap_usable_groups_30300) * np.int64(segmap_group_sizze_30299))) != 0):
        self.mainDetailedzisegmap_30229_var.set_args(self.global_failure,
                                                     np.int64(N_28169),
                                                     np.float32(freq_28174),
                                                     np.int64(i32_res_28185),
                                                     mappingindices_mem_41420,
                                                     mem_41426)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_30229_var,
                                   ((np.int64(segmap_usable_groups_30300) * np.int64(segmap_group_sizze_30299)),),
                                   (np.int64(segmap_group_sizze_30299),))
        if synchronous:
          sync(self)
      binop_p_mem_41432 = mem_41426
    else:
      bounds_invalid_upwards_28213 = slt64(i32_res_28185, np.int64(0))
      valid_28214 = not(bounds_invalid_upwards_28213)
      range_valid_c_28215 = True
      assert valid_28214, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:90:3-10\n   #1  helpers.fut:2:3-8\n   #2  helpers.fut:50:10-22\n   #3  bfastfinal.fut:30:17-64\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n" % ("Range ",
                                                                                                                                                                                                                                                                    np.int64(0),
                                                                                                                                                                                                                                                                    "..",
                                                                                                                                                                                                                                                                    np.int64(1),
                                                                                                                                                                                                                                                                    "..<",
                                                                                                                                                                                                                                                                    i32_res_28185,
                                                                                                                                                                                                                                                                    " is invalid."))
      segmap_group_sizze_30399 = self.sizes["mainDetailed.segmap_group_size_30336"]
      segmap_usable_groups_30400 = sdiv_up64(binop_x_41424,
                                             segmap_group_sizze_30399)
      mem_41431 = opencl_alloc(self, bytes_41423, "mem_41431")
      if ((1 * (np.int64(segmap_usable_groups_30400) * np.int64(segmap_group_sizze_30399))) != 0):
        self.mainDetailedzisegmap_30333_var.set_args(self.global_failure,
                                                     np.int64(N_28169),
                                                     np.float32(freq_28174),
                                                     np.int64(i32_res_28185),
                                                     mappingindices_mem_41420,
                                                     mem_41431)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_30333_var,
                                   ((np.int64(segmap_usable_groups_30400) * np.int64(segmap_group_sizze_30399)),),
                                   (np.int64(segmap_group_sizze_30399),))
        if synchronous:
          sync(self)
      binop_p_mem_41432 = mem_41431
    x_28238 = (N_28169 * N_28169)
    y_28239 = (np.int64(2) * N_28169)
    x_28240 = (x_28238 + y_28239)
    x_28241 = (np.int64(1) + x_28240)
    y_28242 = (np.int64(1) + N_28169)
    zzero_28243 = (y_28242 == np.int64(0))
    nonzzero_28244 = not(zzero_28243)
    nonzzero_cert_28245 = True
    assert nonzzero_28244, ("Error: %s\n\nBacktrace:\n-> #0  bfastfinal.fut:35:32-60\n   #1  bfastfinal.fut:174:3-56\n   #2  bfastfinal.fut:170:1-174:56\n" % ("division by zero",))
    x_28246 = sdiv64(x_28241, y_28242)
    x_28247 = (x_28246 - N_28169)
    binop_p_28248 = (x_28247 - np.int64(1))
    defunc_0_f_res_28249 = sext_i64_i32(binop_p_28248)
    i32_res_28250 = sitofp_i32_f32(defunc_0_f_res_28249)
    segmap_group_sizze_30450 = self.sizes["mainDetailed.segmap_group_size_30432"]
    segmap_usable_groups_30451 = sdiv_up64(binop_x_41424,
                                           segmap_group_sizze_30450)
    mem_41435 = opencl_alloc(self, binop_y_41425, "mem_41435")
    self.futhark_builtinzhgpu_map_transpose_f32(mem_41435, np.int64(0),
                                                binop_p_mem_41432, np.int64(0),
                                                np.int64(1), N_28169,
                                                i32_res_28185)
    mem_41440 = opencl_alloc(self, bytes_41423, "mem_41440")
    if ((1 * (np.int64(segmap_usable_groups_30451) * np.int64(segmap_group_sizze_30450))) != 0):
      self.mainDetailedzisegmap_30429_var.set_args(self.global_failure,
                                                   np.int64(N_28169),
                                                   np.int64(i32_res_28185),
                                                   np.float32(i32_res_28250),
                                                   mem_41435, mem_41440)
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.mainDetailedzisegmap_30429_var,
                                 ((np.int64(segmap_usable_groups_30451) * np.int64(segmap_group_sizze_30450)),),
                                 (np.int64(segmap_group_sizze_30450),))
      if synchronous:
        sync(self)
    eq_x_y_28258 = (np.int64(0) == i32_res_28185)
    p_and_eq_x_y_28259 = (cond_28182 and eq_x_y_28258)
    not_p_28260 = not(cond_28182)
    p_and_eq_x_y_28261 = (eq_x_y_28258 and not_p_28260)
    empty_slice_28262 = (p_and_eq_x_y_28259 or p_and_eq_x_y_28261)
    m_28263 = (i32_res_28185 - np.int64(1))
    zzero_leq_i_p_m_t_s_28264 = sle64(np.int64(0), m_28263)
    i_p_m_t_s_leq_w_28265 = slt64(m_28263, i32_res_28185)
    i_lte_j_28266 = sle64(np.int64(0), i32_res_28185)
    y_28267 = (zzero_leq_i_p_m_t_s_28264 and i_p_m_t_s_leq_w_28265)
    y_28268 = (i_lte_j_28266 and y_28267)
    ok_or_empty_28269 = (empty_slice_28262 or y_28268)
    empty_slice_28270 = (i32_res_28179 == np.int64(0))
    m_28271 = (i32_res_28179 - np.int64(1))
    zzero_leq_i_p_m_t_s_28272 = sle64(np.int64(0), m_28271)
    i_p_m_t_s_leq_w_28273 = slt64(m_28271, N_28169)
    i_lte_j_28274 = sle64(np.int64(0), i32_res_28179)
    y_28275 = (zzero_leq_i_p_m_t_s_28272 and i_p_m_t_s_leq_w_28273)
    y_28276 = (i_lte_j_28274 and y_28275)
    ok_or_empty_28277 = (empty_slice_28270 or y_28276)
    index_ok_28278 = (ok_or_empty_28269 and ok_or_empty_28277)
    index_certs_28279 = True
    assert index_ok_28278, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:38:13-21\n   #1  bfastfinal.fut:174:3-56\n   #2  bfastfinal.fut:170:1-174:56\n" % ("Index [",
                                                                                                                                                                               np.int64(0),
                                                                                                                                                                               ":, :",
                                                                                                                                                                               i32_res_28179,
                                                                                                                                                                               "] out of bounds for array of shape [",
                                                                                                                                                                               i32_res_28185,
                                                                                                                                                                               "][",
                                                                                                                                                                               N_28169,
                                                                                                                                                                               "]."))
    index_certs_28281 = True
    assert index_ok_28278, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:39:13-22\n   #1  bfastfinal.fut:174:3-56\n   #2  bfastfinal.fut:170:1-174:56\n" % ("Index [:",
                                                                                                                                                                               i32_res_28179,
                                                                                                                                                                               ", ",
                                                                                                                                                                               np.int64(0),
                                                                                                                                                                               ":] out of bounds for array of shape [",
                                                                                                                                                                               N_28169,
                                                                                                                                                                               "][",
                                                                                                                                                                               i32_res_28185,
                                                                                                                                                                               "]."))
    empty_slice_28282 = (m_28170 == np.int64(0))
    m_28283 = (m_28170 - np.int64(1))
    zzero_leq_i_p_m_t_s_28284 = sle64(np.int64(0), m_28283)
    i_p_m_t_s_leq_w_28285 = slt64(m_28283, m_28170)
    i_lte_j_28286 = sle64(np.int64(0), m_28170)
    y_28287 = (zzero_leq_i_p_m_t_s_28284 and i_p_m_t_s_leq_w_28285)
    y_28288 = (i_lte_j_28286 and y_28287)
    ok_or_empty_28289 = (empty_slice_28282 or y_28288)
    index_ok_28290 = (ok_or_empty_28277 and ok_or_empty_28289)
    index_certs_28291 = True
    assert index_ok_28290, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:40:13-26\n   #1  bfastfinal.fut:174:3-56\n   #2  bfastfinal.fut:170:1-174:56\n" % ("Index [",
                                                                                                                                                                               np.int64(0),
                                                                                                                                                                               ":, :",
                                                                                                                                                                               i32_res_28179,
                                                                                                                                                                               "] out of bounds for array of shape [",
                                                                                                                                                                               m_28170,
                                                                                                                                                                               "][",
                                                                                                                                                                               N_28169,
                                                                                                                                                                               "]."))
    suff_outer_par_30457 = (self.sizes["mainDetailed.suff_outer_par_0"] <= m_28170)
    segmap_group_sizze_30483 = self.sizes["mainDetailed.segmap_group_size_30461"]
    max_num_groups_42918 = self.sizes["mainDetailed.segmap_num_groups_30463"]
    num_groups_30484 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_28170,
                                                            segmap_group_sizze_30483),
                                                  sext_i32_i64(max_num_groups_42918))))
    nest_sizze_30659 = (m_28170 * i32_res_28185)
    segmap_group_sizze_30660 = self.sizes["mainDetailed.segmap_group_size_30508"]
    max_num_groups_42919 = self.sizes["mainDetailed.segmap_num_groups_30510"]
    num_groups_30661 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_30659,
                                                            segmap_group_sizze_30660),
                                                  sext_i32_i64(max_num_groups_42919))))
    suff_outer_par_30665 = (self.sizes["mainDetailed.suff_outer_par_1"] <= nest_sizze_30659)
    y_30689 = (i32_res_28185 * i32_res_28185)
    comparatee_30690 = (m_28170 * y_30689)
    suff_outer_par_30691 = (self.sizes["mainDetailed.suff_outer_par_2"] <= comparatee_30690)
    nest_sizze_30711 = (i32_res_28179 * comparatee_30690)
    segred_group_sizze_30712 = self.sizes["mainDetailed.segred_group_size_30568"]
    max_num_groups_42920 = self.sizes["mainDetailed.segred_num_groups_30570"]
    num_groups_30713 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_30711,
                                                            segred_group_sizze_30712),
                                                  sext_i32_i64(max_num_groups_42920))))
    Tx_39572 = self.sizes["mainDetailed.Tx_39570"]
    Ty_39573 = self.sizes["mainDetailed.Ty_39571"]
    Ty_39574 = smin64(i32_res_28185, Ty_39573)
    Tx_39575 = smin64(i32_res_28185, Tx_39572)
    gridDim_zz_39578 = sdiv_up64(m_28170, np.int64(30))
    group_sizze_tile3d_39581 = (Ty_39574 * Tx_39575)
    binop_x_41442 = (N_28169 * m_28170)
    bytes_41441 = (np.int64(4) * binop_x_41442)
    bytes_41489 = (np.int64(4) * comparatee_30690)
    binop_y_41447 = (np.int64(4) * y_30689)
    bytes_41445 = smax64(np.int64(0), binop_y_41447)
    binop_x_41596 = (i32_res_28185 * nest_sizze_30659)
    binop_y_41597 = (np.int64(4) * binop_x_41596)
    bytes_41594 = smax64(np.int64(0), binop_y_41597)
    binop_y_41495 = (np.int64(4) * i32_res_28185)
    bytes_41494 = smax64(np.int64(0), binop_y_41495)
    binop_x_41524 = (np.int64(30) * group_sizze_tile3d_39581)
    bytes_41522 = (np.int64(4) * binop_x_41524)
    binop_x_42581 = (np.int64(4) * Ty_39574)
    binop_x_42582 = (Tx_39575 * binop_x_42581)
    sizze_42583 = (np.int64(30) * binop_x_42582)
    num_threads_42725 = (segmap_group_sizze_30483 * num_groups_30484)
    total_sizze_42726 = (bytes_41445 * num_threads_42725)
    num_threads_42727 = (segmap_group_sizze_30660 * num_groups_30661)
    total_sizze_42728 = (bytes_41494 * num_threads_42727)
    local_memory_capacity_43068 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_43068)) and suff_outer_par_30457):
      mem_41443 = opencl_alloc(self, bytes_41441, "mem_41443")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_41443, np.int64(0),
                                                  images_mem_41421, np.int64(0),
                                                  np.int64(1), N_28169, m_28170)
      mem_41492 = opencl_alloc(self, bytes_41489, "mem_41492")
      color_42657 = opencl_alloc(self, total_sizze_42726, "color_42657")
      if ((1 * (np.int64(num_groups_30484) * np.int64(segmap_group_sizze_30483))) != 0):
        self.mainDetailedzisegmap_30459_var.set_args(self.global_failure,
                                                     np.int64(N_28169),
                                                     np.int64(m_28170),
                                                     np.int32(n_28173),
                                                     np.int32(k2p2zq_28183),
                                                     np.int64(i32_res_28185),
                                                     np.int64(num_groups_30484),
                                                     np.int64(num_threads_42725),
                                                     binop_p_mem_41432,
                                                     mem_41440, mem_41443,
                                                     mem_41492, color_42657)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_30459_var,
                                   ((np.int64(num_groups_30484) * np.int64(segmap_group_sizze_30483)),),
                                   (np.int64(segmap_group_sizze_30483),))
        if synchronous:
          sync(self)
      mem_41443 = None
      color_42657 = None
      mem_41598 = opencl_alloc(self, bytes_41594, "mem_41598")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_41598, np.int64(0),
                                                  mem_41492, np.int64(0),
                                                  np.int64(1), m_28170,
                                                  (i32_res_28185 * i32_res_28185))
      mem_41492 = None
      defunc_3_map_res_mem_41600 = mem_41598
    else:
      local_memory_capacity_43067 = self.max_local_memory
      if (sle64(np.int64(0),
                sext_i32_i64(local_memory_capacity_43067)) and suff_outer_par_30665):
        mem_41512 = opencl_alloc(self, binop_y_41597, "mem_41512")
        color_42658 = opencl_alloc(self, total_sizze_42728, "color_42658")
        if ((1 * (np.int64(num_groups_30661) * np.int64(segmap_group_sizze_30660))) != 0):
          self.mainDetailedzisegmap_30505_var.set_args(self.global_failure,
                                                       np.int64(N_28169),
                                                       np.int64(m_28170),
                                                       np.int32(n_28173),
                                                       np.int32(k2p2zq_28183),
                                                       np.int64(i32_res_28185),
                                                       np.int64(num_groups_30661),
                                                       np.int64(num_threads_42727),
                                                       images_mem_41421,
                                                       mem_41435, mem_41440,
                                                       mem_41512, color_42658)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_30505_var,
                                     ((np.int64(num_groups_30661) * np.int64(segmap_group_sizze_30660)),),
                                     (np.int64(segmap_group_sizze_30660),))
          if synchronous:
            sync(self)
        color_42658 = None
        mem_41591 = opencl_alloc(self, bytes_41594, "mem_41591")
        self.futhark_builtinzhgpu_map_transpose_f32(mem_41591, np.int64(0),
                                                    mem_41512, np.int64(0),
                                                    np.int64(1),
                                                    (m_28170 * i32_res_28185),
                                                    i32_res_28185)
        mem_41512 = None
        defunc_3_map_res_mem_41593 = mem_41591
      else:
        local_memory_capacity_43066 = self.max_local_memory
        if (sle64(np.int64(120),
                  sext_i32_i64(local_memory_capacity_43066)) and suff_outer_par_30691):
          mem_41515 = opencl_alloc(self, bytes_41441, "mem_41515")
          self.futhark_builtinzhgpu_map_transpose_f32(mem_41515, np.int64(0),
                                                      images_mem_41421,
                                                      np.int64(0), np.int64(1),
                                                      N_28169, m_28170)
          gridDim_x_39576 = sdiv_up64(i32_res_28185, Tx_39575)
          gridDim_y_39577 = sdiv_up64(i32_res_28185, Ty_39574)
          binop_x_39579 = (gridDim_y_39577 * gridDim_zz_39578)
          grid_sizze_tile3d_39580 = (gridDim_x_39576 * binop_x_39579)
          count_shmem_39582 = sdiv_up64(np.int64(30), group_sizze_tile3d_39581)
          mem_41576 = opencl_alloc(self, bytes_41594, "mem_41576")
          if ((1 * (np.int64(grid_sizze_tile3d_39580) * np.int64(group_sizze_tile3d_39581))) != 0):
            self.mainDetailedzisegmap_intragroup_39586_var.set_args(self.global_failure,
                                                                    cl.LocalMemory(np.int64(np.int64(120))),
                                                                    np.int64(m_28170),
                                                                    np.int32(n_28173),
                                                                    np.int64(i32_res_28185),
                                                                    np.int64(Ty_39574),
                                                                    np.int64(Tx_39575),
                                                                    np.int64(gridDim_x_39576),
                                                                    np.int64(gridDim_y_39577),
                                                                    np.int64(gridDim_zz_39578),
                                                                    np.int64(group_sizze_tile3d_39581),
                                                                    np.int64(count_shmem_39582),
                                                                    mem_41435,
                                                                    mem_41440,
                                                                    mem_41515,
                                                                    mem_41576)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegmap_intragroup_39586_var,
                                       ((np.int64(grid_sizze_tile3d_39580) * np.int64(group_sizze_tile3d_39581)),),
                                       (np.int64(group_sizze_tile3d_39581),))
            if synchronous:
              sync(self)
          mem_41515 = None
          defunc_3_map_res_mem_41586 = mem_41576
        else:
          mem_41579 = opencl_alloc(self, binop_y_41425, "mem_41579")
          self.futhark_builtinzhgpu_map_transpose_f32(mem_41579, np.int64(0),
                                                      mem_41440, np.int64(0),
                                                      np.int64(1),
                                                      i32_res_28185, N_28169)
          mem_41585 = opencl_alloc(self, bytes_41594, "mem_41585")
          if slt64((i32_res_28179 * np.int64(2)), segred_group_sizze_30712):
            segment_sizze_nonzzero_42994 = smax64(np.int64(1), i32_res_28179)
            num_threads_42995 = (num_groups_30713 * segred_group_sizze_30712)
            if ((1 * (np.int64(num_groups_30713) * np.int64(segred_group_sizze_30712))) != 0):
              self.mainDetailedzisegred_small_30574_var.set_args(self.global_failure,
                                                                 cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_30712))),
                                                                 np.int64(N_28169),
                                                                 np.int64(m_28170),
                                                                 np.int64(i32_res_28179),
                                                                 np.int64(i32_res_28185),
                                                                 np.int64(num_groups_30713),
                                                                 np.int64(segment_sizze_nonzzero_42994),
                                                                 images_mem_41421,
                                                                 binop_p_mem_41432,
                                                                 mem_41579,
                                                                 mem_41585)
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.mainDetailedzisegred_small_30574_var,
                                         ((np.int64(num_groups_30713) * np.int64(segred_group_sizze_30712)),),
                                         (np.int64(segred_group_sizze_30712),))
              if synchronous:
                sync(self)
          else:
            groups_per_segment_43021 = sdiv_up64(num_groups_30713,
                                                 smax64(np.int64(1),
                                                        ((m_28170 * i32_res_28185) * i32_res_28185)))
            elements_per_thread_43022 = sdiv_up64(i32_res_28179,
                                                  (segred_group_sizze_30712 * groups_per_segment_43021))
            virt_num_groups_43023 = (groups_per_segment_43021 * ((m_28170 * i32_res_28185) * i32_res_28185))
            num_threads_43024 = (num_groups_30713 * segred_group_sizze_30712)
            threads_per_segment_43025 = (groups_per_segment_43021 * segred_group_sizze_30712)
            segred_tmp_mem_43026 = opencl_alloc(self,
                                                (np.int64(4) * virt_num_groups_43023),
                                                "segred_tmp_mem_43026")
            mainDetailedzicounter_mem_43028 = self.mainDetailedzicounter_mem_43028
            if ((1 * (np.int64(num_groups_30713) * np.int64(segred_group_sizze_30712))) != 0):
              self.mainDetailedzisegred_large_30574_var.set_args(self.global_failure,
                                                                 cl.LocalMemory(np.int64(np.int32(1))),
                                                                 cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_30712))),
                                                                 np.int64(N_28169),
                                                                 np.int64(m_28170),
                                                                 np.int64(i32_res_28179),
                                                                 np.int64(i32_res_28185),
                                                                 np.int64(num_groups_30713),
                                                                 np.int64(groups_per_segment_43021),
                                                                 np.int64(elements_per_thread_43022),
                                                                 np.int64(virt_num_groups_43023),
                                                                 np.int64(threads_per_segment_43025),
                                                                 images_mem_41421,
                                                                 binop_p_mem_41432,
                                                                 mem_41579,
                                                                 mem_41585,
                                                                 segred_tmp_mem_43026,
                                                                 mainDetailedzicounter_mem_43028)
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.mainDetailedzisegred_large_30574_var,
                                         ((np.int64(num_groups_30713) * np.int64(segred_group_sizze_30712)),),
                                         (np.int64(segred_group_sizze_30712),))
              if synchronous:
                sync(self)
          mem_41579 = None
          defunc_3_map_res_mem_41586 = mem_41585
        defunc_3_map_res_mem_41593 = defunc_3_map_res_mem_41586
      defunc_3_map_res_mem_41600 = defunc_3_map_res_mem_41593
    m_28313 = (np.int32(2) * k2p2zq_28183)
    x_28314 = (np.int64(2) * i32_res_28185)
    nm_28315 = (i32_res_28185 * x_28314)
    bounds_invalid_upwards_28316 = slt64(nm_28315, np.int64(0))
    valid_28317 = not(bounds_invalid_upwards_28316)
    range_valid_c_28318 = True
    assert valid_28317, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:90:3-10\n   #1  helpers.fut:2:3-8\n   #2  helpers.fut:79:21-29\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n" % ("Range ",
                                                                                                                                                                                                                                                                  np.int64(0),
                                                                                                                                                                                                                                                                  "..",
                                                                                                                                                                                                                                                                  np.int64(1),
                                                                                                                                                                                                                                                                  "..<",
                                                                                                                                                                                                                                                                  nm_28315,
                                                                                                                                                                                                                                                                  " is invalid."))
    zzero_28323 = (m_28313 == np.int32(0))
    nonzzero_28324 = not(zzero_28323)
    nonzzero_cert_28325 = True
    assert nonzzero_28324, ("Error: %s\n\nBacktrace:\n-> #0  helpers.fut:74:41-47\n   #1  helpers.fut:74:14-79:30\n   #2  bfastfinal.fut:50:35-50\n   #3  bfastfinal.fut:174:3-56\n   #4  bfastfinal.fut:170:1-174:56\n" % ("division by zero",))
    loop_nonempty_28326 = slt32(np.int32(0), k2p2zq_28183)
    loop_not_taken_28327 = not(loop_nonempty_28326)
    protect_assert_disj_28328 = (nonzzero_28324 or loop_not_taken_28327)
    nonzzero_cert_28329 = True
    assert protect_assert_disj_28328, ("Error: %s\n\nBacktrace:\n-> #0  helpers.fut:60:43-49\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n" % ("division by zero",))
    i32_res_28330 = sext_i32_i64(m_28313)
    x_28331 = (i32_res_28185 * i32_res_28330)
    dim_ok_28332 = (x_28331 == nm_28315)
    dim_ok_cert_28333 = True
    assert dim_ok_28332, ("Error: %s\n\nBacktrace:\n-> #0  /prelude/array.fut:141:3-33\n   #1  helpers.fut:81:16-43\n   #2  bfastfinal.fut:50:35-50\n   #3  bfastfinal.fut:174:3-56\n   #4  bfastfinal.fut:170:1-174:56\n" % ("new shape has different number of elements than old shape",))
    empty_slice_28334 = (i32_res_28185 == np.int64(0))
    ok_or_empty_28335 = (y_28268 or empty_slice_28334)
    j_m_i_28336 = (x_28314 - i32_res_28185)
    empty_slice_28337 = (j_m_i_28336 == np.int64(0))
    m_28338 = (j_m_i_28336 - np.int64(1))
    i_p_m_t_s_28339 = (i32_res_28185 + m_28338)
    zzero_leq_i_p_m_t_s_28340 = sle64(np.int64(0), i_p_m_t_s_28339)
    i_p_m_t_s_leq_w_28341 = slt64(i_p_m_t_s_28339, i32_res_28330)
    i_lte_j_28342 = sle64(i32_res_28185, x_28314)
    y_28343 = (i_lte_j_28266 and i_p_m_t_s_leq_w_28341)
    y_28344 = (zzero_leq_i_p_m_t_s_28340 and y_28343)
    y_28345 = (i_lte_j_28342 and y_28344)
    forwards_ok_28346 = (i_lte_j_28266 and y_28345)
    ok_or_empty_28347 = (empty_slice_28337 or forwards_ok_28346)
    index_ok_28348 = (ok_or_empty_28335 and ok_or_empty_28347)
    index_certs_28349 = True
    assert index_ok_28348, ("Error: %s%d%s%d%s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  helpers.fut:83:8-30\n   #1  bfastfinal.fut:50:35-50\n   #2  bfastfinal.fut:174:3-56\n   #3  bfastfinal.fut:170:1-174:56\n" % ("Index [",
                                                                                                                                                                                                                   np.int64(0),
                                                                                                                                                                                                                   ":",
                                                                                                                                                                                                                   i32_res_28185,
                                                                                                                                                                                                                   ", ",
                                                                                                                                                                                                                   i32_res_28185,
                                                                                                                                                                                                                   ":",
                                                                                                                                                                                                                   x_28314,
                                                                                                                                                                                                                   "] out of bounds for array of shape [",
                                                                                                                                                                                                                   i32_res_28185,
                                                                                                                                                                                                                   "][",
                                                                                                                                                                                                                   i32_res_28330,
                                                                                                                                                                                                                   "]."))
    dim_match_28350 = (i32_res_28185 == j_m_i_28336)
    empty_or_match_cert_28351 = True
    assert dim_match_28350, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  helpers.fut:83:8-45\n   #1  bfastfinal.fut:50:35-50\n   #2  bfastfinal.fut:174:3-56\n   #3  bfastfinal.fut:170:1-174:56\n" % ("Value of (core language) shape (",
                                                                                                                                                                                                            i32_res_28185,
                                                                                                                                                                                                            ", ",
                                                                                                                                                                                                            j_m_i_28336,
                                                                                                                                                                                                            ") cannot match shape of type `[",
                                                                                                                                                                                                            i32_res_28185,
                                                                                                                                                                                                            "][",
                                                                                                                                                                                                            i32_res_28185,
                                                                                                                                                                                                            "]f32`."))
    max_group_sizze_30819 = self.max_group_size
    fits_30820 = sle64(nm_28315, max_group_sizze_30819)
    suff_intra_par_30818 = (self.sizes["mainDetailed.suff_intra_par_3"] <= nm_28315)
    intra_suff_and_fits_30821 = (suff_intra_par_30818 and fits_30820)
    nest_sizze_31293 = (m_28170 * nm_28315)
    segmap_group_sizze_31294 = self.sizes["mainDetailed.segmap_group_size_31240"]
    suff_intra_par_31331 = (self.sizes["mainDetailed.suff_intra_par_4"] <= nm_28315)
    intra_suff_and_fits_31332 = (fits_30820 and suff_intra_par_31331)
    segmap_group_sizze_31385 = self.sizes["mainDetailed.segmap_group_size_31151"]
    segmap_group_sizze_31398 = self.sizes["mainDetailed.segmap_group_size_31052"]
    segmap_group_sizze_31448 = self.sizes["mainDetailed.segmap_group_size_31032"]
    segmap_group_sizze_31458 = self.sizes["mainDetailed.segmap_group_size_30912"]
    segmap_usable_groups_31386 = sdiv_up_safe64(m_28170,
                                                segmap_group_sizze_31385)
    segmap_usable_groups_31399 = sdiv_up_safe64(nest_sizze_31293,
                                                segmap_group_sizze_31398)
    segmap_usable_groups_31449 = sdiv_up_safe64(nest_sizze_31293,
                                                segmap_group_sizze_31448)
    binop_y_41604 = (np.int64(4) * nm_28315)
    bytes_41603 = smax64(np.int64(0), binop_y_41604)
    binop_y_41631 = (np.int64(4) * nest_sizze_31293)
    bytes_41629 = smax64(np.int64(0), binop_y_41631)
    bytes_41657 = smax64(np.int64(0), m_28170)
    local_memory_capacity_43154 = self.max_local_memory
    if (sle64(((bytes_41603 + srem64((np.int64(8) - srem64(bytes_41603,
                                                           np.int64(8))),
                                     np.int64(8))) + (bytes_41603 + srem64((np.int64(8) - srem64(bytes_41603,
                                                                                                 np.int64(8))),
                                                                           np.int64(8)))),
              sext_i32_i64(local_memory_capacity_43154)) and intra_suff_and_fits_30821):
      mem_41627 = opencl_alloc(self, bytes_41594, "mem_41627")
      if ((1 * (np.int64(m_28170) * np.int64(nm_28315))) != 0):
        self.mainDetailedzisegmap_intragroup_30816_var.set_args(self.global_failure,
                                                                self.failure_is_an_option,
                                                                self.global_failure_args,
                                                                cl.LocalMemory(np.int64(bytes_41603)),
                                                                cl.LocalMemory(np.int64(bytes_41603)),
                                                                np.int64(m_28170),
                                                                np.int32(k2p2zq_28183),
                                                                np.int64(i32_res_28185),
                                                                np.int32(m_28313),
                                                                np.int64(nm_28315),
                                                                np.int64(i32_res_28330),
                                                                defunc_3_map_res_mem_41600,
                                                                mem_41627)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_intragroup_30816_var,
                                   ((np.int64(m_28170) * np.int64(nm_28315)),),
                                   (np.int64(nm_28315),))
        if synchronous:
          sync(self)
      self.failure_is_an_option = np.int32(1)
      defunc_3_map_res_mem_41687 = mem_41627
    else:
      segmap_usable_groups_31295 = sdiv_up64(nest_sizze_31293,
                                             segmap_group_sizze_31294)
      mem_41632 = opencl_alloc(self, bytes_41629, "mem_41632")
      if ((1 * (np.int64(segmap_usable_groups_31295) * np.int64(segmap_group_sizze_31294))) != 0):
        self.mainDetailedzisegmap_31237_var.set_args(self.global_failure,
                                                     self.failure_is_an_option,
                                                     self.global_failure_args,
                                                     np.int64(m_28170),
                                                     np.int32(k2p2zq_28183),
                                                     np.int64(i32_res_28185),
                                                     np.int32(m_28313),
                                                     np.int64(nm_28315),
                                                     defunc_3_map_res_mem_41600,
                                                     mem_41632)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_31237_var,
                                   ((np.int64(segmap_usable_groups_31295) * np.int64(segmap_group_sizze_31294)),),
                                   (np.int64(segmap_group_sizze_31294),))
        if synchronous:
          sync(self)
      self.failure_is_an_option = np.int32(1)
      ctx_param_ext_41633 = m_28170
      ctx_param_ext_41634 = nm_28315
      ctx_param_ext_41635 = np.int64(0)
      ctx_param_ext_41636 = nm_28315
      ctx_param_ext_41637 = m_28170
      ctx_param_ext_41638 = np.int64(1)
      ctx_param_ext_41639 = nm_28315
      mem_param_41640 = mem_41632
      i_31319 = np.int32(0)
      one_44248 = np.int32(1)
      for counter_44247 in range(k2p2zq_28183):
        i32_res_31321 = sext_i32_i64(i_31319)
        x_31322 = sle64(np.int64(0), i32_res_31321)
        y_31323 = slt64(i32_res_31321, nm_28315)
        bounds_check_31324 = (x_31322 and y_31323)
        index_certs_31325 = True
        assert bounds_check_31324, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  helpers.fut:59:16-27\n   #1  helpers.fut:80:16-34\n   #2  bfastfinal.fut:50:35-50\n   #3  bfastfinal.fut:174:3-56\n   #4  bfastfinal.fut:170:1-174:56\n" % ("Index [",
                                                                                                                                                                                                                                         i32_res_31321,
                                                                                                                                                                                                                                         "] out of bounds for array of shape [",
                                                                                                                                                                                                                                         nm_28315,
                                                                                                                                                                                                                                         "]."))
        local_memory_capacity_43098 = self.max_local_memory
        if intra_suff_and_fits_31332:
          gauss_jordan_res_ixfn_41665 = m_28170
        else:
          gauss_jordan_res_ixfn_41665 = ctx_param_ext_41637
        local_memory_capacity_43099 = self.max_local_memory
        if intra_suff_and_fits_31332:
          gauss_jordan_res_ixfn_41666 = nm_28315
        else:
          gauss_jordan_res_ixfn_41666 = ctx_param_ext_41639
        local_memory_capacity_43100 = self.max_local_memory
        if intra_suff_and_fits_31332:
          gauss_jordan_res_ixfn_41667 = m_28170
        else:
          gauss_jordan_res_ixfn_41667 = ctx_param_ext_41633
        local_memory_capacity_43101 = self.max_local_memory
        if intra_suff_and_fits_31332:
          gauss_jordan_res_ixfn_41668 = nm_28315
        else:
          gauss_jordan_res_ixfn_41668 = ctx_param_ext_41634
        local_memory_capacity_43102 = self.max_local_memory
        if intra_suff_and_fits_31332:
          gauss_jordan_res_ixfn_41669 = nm_28315
        else:
          gauss_jordan_res_ixfn_41669 = ctx_param_ext_41636
        local_memory_capacity_43103 = self.max_local_memory
        if intra_suff_and_fits_31332:
          gauss_jordan_res_ixfn_41670 = np.int64(1)
        else:
          gauss_jordan_res_ixfn_41670 = ctx_param_ext_41638
        local_memory_capacity_43104 = self.max_local_memory
        if intra_suff_and_fits_31332:
          gauss_jordan_res_ixfn_41671 = np.int64(0)
        else:
          gauss_jordan_res_ixfn_41671 = ctx_param_ext_41635
        local_memory_capacity_43141 = self.max_local_memory
        if (sle64(((bytes_41603 + srem64((np.int64(8) - srem64(bytes_41603,
                                                               np.int64(8))),
                                         np.int64(8))) + (bytes_41603 + srem64((np.int64(8) - srem64(bytes_41603,
                                                                                                     np.int64(8))),
                                                                               np.int64(8)))),
                  sext_i32_i64(local_memory_capacity_43141)) and intra_suff_and_fits_31332):
          mem_41655 = opencl_alloc(self, bytes_41629, "mem_41655")
          if ((1 * (np.int64(m_28170) * np.int64(nm_28315))) != 0):
            self.mainDetailedzisegmap_intragroup_30970_var.set_args(self.global_failure,
                                                                    self.failure_is_an_option,
                                                                    self.global_failure_args,
                                                                    cl.LocalMemory(np.int64(bytes_41603)),
                                                                    cl.LocalMemory(np.int64(bytes_41603)),
                                                                    np.int64(m_28170),
                                                                    np.int32(k2p2zq_28183),
                                                                    np.int32(m_28313),
                                                                    np.int64(nm_28315),
                                                                    np.int32(i_31319),
                                                                    np.int64(i32_res_31321),
                                                                    np.int64(ctx_param_ext_41635),
                                                                    np.int64(ctx_param_ext_41636),
                                                                    np.int64(ctx_param_ext_41638),
                                                                    mem_param_41640,
                                                                    mem_41655)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegmap_intragroup_30970_var,
                                       ((np.int64(m_28170) * np.int64(nm_28315)),),
                                       (np.int64(nm_28315),))
            if synchronous:
              sync(self)
          self.failure_is_an_option = np.int32(1)
          gauss_jordan_res_mem_41672 = mem_41655
        else:
          mem_41658 = opencl_alloc(self, bytes_41657, "mem_41658")
          if ((1 * (np.int64(segmap_usable_groups_31386) * np.int64(segmap_group_sizze_31385))) != 0):
            self.mainDetailedzisegmap_31149_var.set_args(self.global_failure,
                                                         np.int64(m_28170),
                                                         np.int64(i32_res_31321),
                                                         np.int64(ctx_param_ext_41635),
                                                         np.int64(ctx_param_ext_41636),
                                                         np.int64(ctx_param_ext_41638),
                                                         mem_param_41640,
                                                         mem_41658)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegmap_31149_var,
                                       ((np.int64(segmap_usable_groups_31386) * np.int64(segmap_group_sizze_31385)),),
                                       (np.int64(segmap_group_sizze_31385),))
            if synchronous:
              sync(self)
          mem_41663 = opencl_alloc(self, bytes_41629, "mem_41663")
          if ((1 * (np.int64(segmap_usable_groups_31399) * np.int64(segmap_group_sizze_31398))) != 0):
            self.mainDetailedzisegmap_31049_var.set_args(self.global_failure,
                                                         self.failure_is_an_option,
                                                         self.global_failure_args,
                                                         np.int64(m_28170),
                                                         np.int32(k2p2zq_28183),
                                                         np.int32(m_28313),
                                                         np.int64(nm_28315),
                                                         np.int32(i_31319),
                                                         np.int64(i32_res_31321),
                                                         np.int64(ctx_param_ext_41635),
                                                         np.int64(ctx_param_ext_41636),
                                                         np.int64(ctx_param_ext_41638),
                                                         mem_param_41640,
                                                         mem_41658, mem_41663)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegmap_31049_var,
                                       ((np.int64(segmap_usable_groups_31399) * np.int64(segmap_group_sizze_31398)),),
                                       (np.int64(segmap_group_sizze_31398),))
            if synchronous:
              sync(self)
          self.failure_is_an_option = np.int32(1)
          mem_41658 = None
          if ((1 * (np.int64(segmap_usable_groups_31449) * np.int64(segmap_group_sizze_31448))) != 0):
            self.mainDetailedzisegmap_31029_var.set_args(self.global_failure,
                                                         np.int64(m_28170),
                                                         np.int64(nm_28315),
                                                         np.int64(ctx_param_ext_41635),
                                                         np.int64(ctx_param_ext_41636),
                                                         np.int64(ctx_param_ext_41638),
                                                         mem_param_41640,
                                                         mem_41663)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegmap_31029_var,
                                       ((np.int64(segmap_usable_groups_31449) * np.int64(segmap_group_sizze_31448)),),
                                       (np.int64(segmap_group_sizze_31448),))
            if synchronous:
              sync(self)
          mem_41663 = None
          gauss_jordan_res_mem_41672 = mem_param_41640
        ctx_param_ext_tmp_43089 = gauss_jordan_res_ixfn_41667
        ctx_param_ext_tmp_43090 = gauss_jordan_res_ixfn_41668
        ctx_param_ext_tmp_43091 = gauss_jordan_res_ixfn_41671
        ctx_param_ext_tmp_43092 = gauss_jordan_res_ixfn_41669
        ctx_param_ext_tmp_43093 = gauss_jordan_res_ixfn_41665
        ctx_param_ext_tmp_43094 = gauss_jordan_res_ixfn_41670
        ctx_param_ext_tmp_43095 = gauss_jordan_res_ixfn_41666
        mem_param_tmp_43096 = gauss_jordan_res_mem_41672
        ctx_param_ext_41633 = ctx_param_ext_tmp_43089
        ctx_param_ext_41634 = ctx_param_ext_tmp_43090
        ctx_param_ext_41635 = ctx_param_ext_tmp_43091
        ctx_param_ext_41636 = ctx_param_ext_tmp_43092
        ctx_param_ext_41637 = ctx_param_ext_tmp_43093
        ctx_param_ext_41638 = ctx_param_ext_tmp_43094
        ctx_param_ext_41639 = ctx_param_ext_tmp_43095
        mem_param_41640 = mem_param_tmp_43096
        i_31319 += one_44248
      gauss_jordan_res_r_ixfn_41673 = ctx_param_ext_41633
      gauss_jordan_res_r_ixfn_41674 = ctx_param_ext_41634
      gauss_jordan_res_r_ixfn_41675 = ctx_param_ext_41635
      gauss_jordan_res_r_ixfn_41676 = ctx_param_ext_41636
      gauss_jordan_res_r_ixfn_41677 = ctx_param_ext_41637
      gauss_jordan_res_r_ixfn_41678 = ctx_param_ext_41638
      gauss_jordan_res_r_ixfn_41679 = ctx_param_ext_41639
      gauss_jordan_res_r_mem_41680 = mem_param_41640
      mem_41632 = None
      segmap_usable_groups_31459 = sdiv_up64(comparatee_30690,
                                             segmap_group_sizze_31458)
      mem_41686 = opencl_alloc(self, bytes_41594, "mem_41686")
      if ((1 * (np.int64(segmap_usable_groups_31459) * np.int64(segmap_group_sizze_31458))) != 0):
        self.mainDetailedzisegmap_30908_var.set_args(self.global_failure,
                                                     np.int64(m_28170),
                                                     np.int64(i32_res_28185),
                                                     np.int64(nm_28315),
                                                     np.int64(i32_res_28330),
                                                     np.int64(x_28331),
                                                     np.int64(gauss_jordan_res_r_ixfn_41675),
                                                     np.int64(gauss_jordan_res_r_ixfn_41676),
                                                     np.int64(gauss_jordan_res_r_ixfn_41678),
                                                     gauss_jordan_res_r_mem_41680,
                                                     mem_41686)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_30908_var,
                                   ((np.int64(segmap_usable_groups_31459) * np.int64(segmap_group_sizze_31458)),),
                                   (np.int64(segmap_group_sizze_31458),))
        if synchronous:
          sync(self)
      gauss_jordan_res_r_mem_41680 = None
      defunc_3_map_res_mem_41687 = mem_41686
    defunc_3_map_res_mem_41600 = None
    suff_outer_par_31466 = (self.sizes["mainDetailed.suff_outer_par_5"] <= m_28170)
    segmap_group_sizze_31488 = self.sizes["mainDetailed.segmap_group_size_31470"]
    max_num_groups_43155 = self.sizes["mainDetailed.segmap_num_groups_31472"]
    num_groups_31489 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_28170,
                                                            segmap_group_sizze_31488),
                                                  sext_i32_i64(max_num_groups_43155))))
    suff_outer_par_31573 = (self.sizes["mainDetailed.suff_outer_par_6"] <= nest_sizze_30659)
    nest_sizze_31589 = (i32_res_28179 * nest_sizze_30659)
    segred_group_sizze_31590 = self.sizes["mainDetailed.segred_group_size_31532"]
    max_num_groups_43156 = self.sizes["mainDetailed.segred_num_groups_31534"]
    num_groups_31591 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_31589,
                                                            segred_group_sizze_31590),
                                                  sext_i32_i64(max_num_groups_43156))))
    Ty_39720 = self.sizes["mainDetailed.Ty_39717"]
    Ry_39721 = self.sizes["mainDetailed.Ry_39719"]
    Tx_39722 = self.sizes["mainDetailed.Tx_39716"]
    Rx_39723 = self.sizes["mainDetailed.Rx_39718"]
    Tk_39724 = self.sizes["mainDetailed.Tk_39715"]
    TxRx_39727 = (Tx_39722 * Rx_39723)
    TyRy_39728 = (Ty_39720 * Ry_39721)
    a_loc_szz_39730 = (Tk_39724 * TyRy_39728)
    binop_x_39731 = (Tx_39722 * Tk_39724)
    b_loc_szz_39732 = (Rx_39723 * binop_x_39731)
    group_sizze_39736 = (Ty_39720 * Tx_39722)
    bytes_41707 = (np.int64(4) * nest_sizze_30659)
    bytes_41909 = smax64(np.int64(0), bytes_41707)
    binop_x_41721 = (Ry_39721 * group_sizze_39736)
    binop_x_41722 = (Rx_39723 * binop_x_41721)
    bytes_41719 = (np.int64(4) * binop_x_41722)
    binop_x_41713 = (Ry_39721 * Rx_39723)
    bytes_41712 = (np.int64(4) * binop_x_41713)
    binop_y_41725 = (np.int64(4) * a_loc_szz_39730)
    bytes_41724 = smax64(np.int64(0), binop_y_41725)
    binop_y_41728 = (np.int64(4) * b_loc_szz_39732)
    bytes_41727 = smax64(np.int64(0), binop_y_41728)
    bytes_41797 = (np.int64(4) * binop_x_41721)
    binop_x_41803 = (Rx_39723 * group_sizze_39736)
    bytes_41801 = (np.int64(4) * binop_x_41803)
    bytes_41789 = (np.int64(4) * Ry_39721)
    bytes_41791 = (np.int64(4) * Rx_39723)
    binop_x_42598 = (np.int64(4) * Ty_39720)
    binop_x_42599 = (Tx_39722 * binop_x_42598)
    binop_x_42600 = (Ry_39721 * binop_x_42599)
    sizze_42601 = (Rx_39723 * binop_x_42600)
    maxSubHelper_42676 = umax64(bytes_41719, sizze_42601)
    num_threads_42738 = (segmap_group_sizze_31488 * num_groups_31489)
    total_sizze_42739 = (bytes_41494 * num_threads_42738)
    local_memory_capacity_43301 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_43301)) and suff_outer_par_31466):
      mem_41690 = opencl_alloc(self, bytes_41441, "mem_41690")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_41690, np.int64(0),
                                                  images_mem_41421, np.int64(0),
                                                  np.int64(1), N_28169, m_28170)
      mem_41709 = opencl_alloc(self, bytes_41707, "mem_41709")
      color_42670 = opencl_alloc(self, total_sizze_42739, "color_42670")
      if ((1 * (np.int64(num_groups_31489) * np.int64(segmap_group_sizze_31488))) != 0):
        self.mainDetailedzisegmap_31468_var.set_args(self.global_failure,
                                                     np.int64(N_28169),
                                                     np.int64(m_28170),
                                                     np.int32(n_28173),
                                                     np.int32(k2p2zq_28183),
                                                     np.int64(i32_res_28185),
                                                     np.int64(num_groups_31489),
                                                     np.int64(num_threads_42738),
                                                     binop_p_mem_41432,
                                                     mem_41690, mem_41709,
                                                     color_42670)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_31468_var,
                                   ((np.int64(num_groups_31489) * np.int64(segmap_group_sizze_31488)),),
                                   (np.int64(segmap_group_sizze_31488),))
        if synchronous:
          sync(self)
      mem_41690 = None
      color_42670 = None
      mem_41912 = opencl_alloc(self, bytes_41909, "mem_41912")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_41912, np.int64(0),
                                                  mem_41709, np.int64(0),
                                                  np.int64(1), m_28170,
                                                  i32_res_28185)
      mem_41709 = None
      defunc_3_map_res_mem_41914 = mem_41912
    else:
      local_memory_capacity_43300 = self.max_local_memory
      if (sle64(((bytes_41727 + srem64((np.int64(8) - srem64(bytes_41727,
                                                             np.int64(8))),
                                       np.int64(8))) + (bytes_41724 + srem64((np.int64(8) - srem64(bytes_41724,
                                                                                                   np.int64(8))),
                                                                             np.int64(8)))),
                sext_i32_i64(local_memory_capacity_43300)) and suff_outer_par_31573):
        tk_div_tx_39725 = sdiv_up64(Tk_39724, Tx_39722)
        tk_div_ty_39726 = sdiv_up64(Tk_39724, Ty_39720)
        gridDim_x_39733 = sdiv_up64(i32_res_28185, TxRx_39727)
        gridDim_y_39734 = sdiv_up64(m_28170, TyRy_39728)
        grid_sizze_39735 = (gridDim_x_39733 * gridDim_y_39734)
        full_tiles_39764 = squot64(i32_res_28179, Tk_39724)
        kk_39971 = (Tk_39724 * full_tiles_39764)
        mem_41902 = opencl_alloc(self, bytes_41909, "mem_41902")
        if ((1 * (np.int64(grid_sizze_39735) * np.int64(group_sizze_39736))) != 0):
          self.mainDetailedzisegmap_intragroup_39739_var.set_args(self.global_failure,
                                                                  cl.LocalMemory(np.int64(bytes_41724)),
                                                                  cl.LocalMemory(np.int64(bytes_41727)),
                                                                  np.int64(N_28169),
                                                                  np.int64(m_28170),
                                                                  np.int64(i32_res_28179),
                                                                  np.int64(i32_res_28185),
                                                                  np.int64(gridDim_x_39733),
                                                                  np.int64(gridDim_y_39734),
                                                                  np.int64(full_tiles_39764),
                                                                  np.int64(kk_39971),
                                                                  images_mem_41421,
                                                                  mem_41435,
                                                                  mem_41902)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_intragroup_39739_var,
                                     ((np.int64(grid_sizze_39735) * np.int64(group_sizze_39736)),),
                                     (np.int64(group_sizze_39736),))
          if synchronous:
            sync(self)
        defunc_3_map_res_mem_41908 = mem_41902
      else:
        mem_41907 = opencl_alloc(self, bytes_41909, "mem_41907")
        if slt64((i32_res_28179 * np.int64(2)), segred_group_sizze_31590):
          segment_sizze_nonzzero_43232 = smax64(np.int64(1), i32_res_28179)
          num_threads_43233 = (num_groups_31591 * segred_group_sizze_31590)
          if ((1 * (np.int64(num_groups_31591) * np.int64(segred_group_sizze_31590))) != 0):
            self.mainDetailedzisegred_small_31538_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_31590))),
                                                               np.int64(N_28169),
                                                               np.int64(m_28170),
                                                               np.int64(i32_res_28179),
                                                               np.int64(i32_res_28185),
                                                               np.int64(num_groups_31591),
                                                               np.int64(segment_sizze_nonzzero_43232),
                                                               images_mem_41421,
                                                               binop_p_mem_41432,
                                                               mem_41907)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_small_31538_var,
                                       ((np.int64(num_groups_31591) * np.int64(segred_group_sizze_31590)),),
                                       (np.int64(segred_group_sizze_31590),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_43257 = sdiv_up64(num_groups_31591,
                                               smax64(np.int64(1),
                                                      (m_28170 * i32_res_28185)))
          elements_per_thread_43258 = sdiv_up64(i32_res_28179,
                                                (segred_group_sizze_31590 * groups_per_segment_43257))
          virt_num_groups_43259 = (groups_per_segment_43257 * (m_28170 * i32_res_28185))
          num_threads_43260 = (num_groups_31591 * segred_group_sizze_31590)
          threads_per_segment_43261 = (groups_per_segment_43257 * segred_group_sizze_31590)
          segred_tmp_mem_43262 = opencl_alloc(self,
                                              (np.int64(4) * virt_num_groups_43259),
                                              "segred_tmp_mem_43262")
          mainDetailedzicounter_mem_43264 = self.mainDetailedzicounter_mem_43264
          if ((1 * (np.int64(num_groups_31591) * np.int64(segred_group_sizze_31590))) != 0):
            self.mainDetailedzisegred_large_31538_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.int64(np.int32(1))),
                                                               cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_31590))),
                                                               np.int64(N_28169),
                                                               np.int64(m_28170),
                                                               np.int64(i32_res_28179),
                                                               np.int64(i32_res_28185),
                                                               np.int64(num_groups_31591),
                                                               np.int64(groups_per_segment_43257),
                                                               np.int64(elements_per_thread_43258),
                                                               np.int64(virt_num_groups_43259),
                                                               np.int64(threads_per_segment_43261),
                                                               images_mem_41421,
                                                               binop_p_mem_41432,
                                                               mem_41907,
                                                               segred_tmp_mem_43262,
                                                               mainDetailedzicounter_mem_43264)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_large_31538_var,
                                       ((np.int64(num_groups_31591) * np.int64(segred_group_sizze_31590)),),
                                       (np.int64(segred_group_sizze_31590),))
            if synchronous:
              sync(self)
        defunc_3_map_res_mem_41908 = mem_41907
      defunc_3_map_res_mem_41914 = defunc_3_map_res_mem_41908
    binop_p_mem_41432 = None
    mem_41435 = None
    suff_outer_par_31607 = (self.sizes["mainDetailed.suff_outer_par_7"] <= m_28170)
    segmap_group_sizze_31628 = self.sizes["mainDetailed.segmap_group_size_31611"]
    max_num_groups_43302 = self.sizes["mainDetailed.segmap_num_groups_31613"]
    num_groups_31629 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_28170,
                                                            segmap_group_sizze_31628),
                                                  sext_i32_i64(max_num_groups_43302))))
    suff_outer_par_31708 = (self.sizes["mainDetailed.suff_outer_par_8"] <= nest_sizze_30659)
    segred_group_sizze_31723 = self.sizes["mainDetailed.segred_group_size_31669"]
    max_num_groups_43303 = self.sizes["mainDetailed.segred_num_groups_31671"]
    num_groups_31724 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(binop_x_41596,
                                                            segred_group_sizze_31723),
                                                  sext_i32_i64(max_num_groups_43303))))
    tile_sizze_40183 = self.sizes["mainDetailed.tile_size_40182"]
    group_sizze_40184 = (tile_sizze_40183 * tile_sizze_40183)
    bytes_41947 = (np.int64(4) * group_sizze_40184)
    bytes_41952 = smax64(np.int64(0), bytes_41947)
    binop_x_42614 = (np.int64(4) * tile_sizze_40183)
    sizze_42615 = (tile_sizze_40183 * binop_x_42614)
    maxSubHelper_42684 = umax64(bytes_41947, sizze_42615)
    num_threads_42742 = (segmap_group_sizze_31628 * num_groups_31629)
    total_sizze_42743 = (bytes_41494 * num_threads_42742)
    local_memory_capacity_43404 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_43404)) and suff_outer_par_31607):
      mem_41918 = opencl_alloc(self, bytes_41489, "mem_41918")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_41918, np.int64(0),
                                                  defunc_3_map_res_mem_41687,
                                                  np.int64(0), np.int64(1),
                                                  (i32_res_28185 * i32_res_28185),
                                                  m_28170)
      mem_41921 = opencl_alloc(self, bytes_41707, "mem_41921")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_41921, np.int64(0),
                                                  defunc_3_map_res_mem_41914,
                                                  np.int64(0), np.int64(1),
                                                  i32_res_28185, m_28170)
      mem_41940 = opencl_alloc(self, bytes_41707, "mem_41940")
      color_42683 = opencl_alloc(self, total_sizze_42743, "color_42683")
      if ((1 * (np.int64(num_groups_31629) * np.int64(segmap_group_sizze_31628))) != 0):
        self.mainDetailedzisegmap_31609_var.set_args(self.global_failure,
                                                     np.int64(m_28170),
                                                     np.int32(k2p2zq_28183),
                                                     np.int64(i32_res_28185),
                                                     np.int64(num_groups_31629),
                                                     np.int64(num_threads_42742),
                                                     mem_41918, mem_41921,
                                                     mem_41940, color_42683)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_31609_var,
                                   ((np.int64(num_groups_31629) * np.int64(segmap_group_sizze_31628)),),
                                   (np.int64(segmap_group_sizze_31628),))
        if synchronous:
          sync(self)
      mem_41918 = None
      mem_41921 = None
      color_42683 = None
      mem_41984 = opencl_alloc(self, bytes_41909, "mem_41984")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_41984, np.int64(0),
                                                  mem_41940, np.int64(0),
                                                  np.int64(1), m_28170,
                                                  i32_res_28185)
      mem_41940 = None
      defunc_4_map_res_mem_41986 = mem_41984
    else:
      local_memory_capacity_43403 = self.max_local_memory
      if (sle64((bytes_41952 + srem64((np.int64(8) - srem64(bytes_41952,
                                                            np.int64(8))),
                                      np.int64(8))),
                sext_i32_i64(local_memory_capacity_43403)) and suff_outer_par_31708):
        mem_41944 = opencl_alloc(self, binop_y_41597, "mem_41944")
        self.futhark_builtinzhgpu_map_transpose_f32(mem_41944, np.int64(0),
                                                    defunc_3_map_res_mem_41687,
                                                    np.int64(0), np.int64(1),
                                                    i32_res_28185,
                                                    (m_28170 * i32_res_28185))
        num_groups_x_40185 = sdiv_up64(m_28170, tile_sizze_40183)
        num_groups_y_40186 = sdiv_up64(i32_res_28185, tile_sizze_40183)
        num_groups_top_40187 = (num_groups_x_40185 * num_groups_y_40186)
        num_whole_tiles_40204 = squot64(i32_res_28185, tile_sizze_40183)
        residual_input_40331 = srem64(i32_res_28185, tile_sizze_40183)
        cond_40332 = (residual_input_40331 == np.int64(0))
        mem_41974 = opencl_alloc(self, bytes_41909, "mem_41974")
        if ((1 * (np.int64(num_groups_top_40187) * np.int64(group_sizze_40184))) != 0):
          self.mainDetailedzisegmap_intragroup_40188_var.set_args(self.global_failure,
                                                                  cl.LocalMemory(np.int64(bytes_41952)),
                                                                  np.int64(m_28170),
                                                                  np.int64(i32_res_28185),
                                                                  np.int64(num_groups_x_40185),
                                                                  np.int64(num_groups_y_40186),
                                                                  np.int64(num_whole_tiles_40204),
                                                                  np.int64(residual_input_40331),
                                                                  np.byte(cond_40332),
                                                                  defunc_3_map_res_mem_41914,
                                                                  mem_41944,
                                                                  mem_41974)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_intragroup_40188_var,
                                     ((np.int64(num_groups_top_40187) * np.int64(group_sizze_40184)),),
                                     (np.int64(group_sizze_40184),))
          if synchronous:
            sync(self)
        mem_41944 = None
        defunc_4_map_res_mem_41980 = mem_41974
      else:
        mem_41979 = opencl_alloc(self, bytes_41909, "mem_41979")
        if slt64((i32_res_28185 * np.int64(2)), segred_group_sizze_31723):
          segment_sizze_nonzzero_43335 = smax64(np.int64(1), i32_res_28185)
          num_threads_43336 = (num_groups_31724 * segred_group_sizze_31723)
          if ((1 * (np.int64(num_groups_31724) * np.int64(segred_group_sizze_31723))) != 0):
            self.mainDetailedzisegred_small_31675_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_31723))),
                                                               np.int64(m_28170),
                                                               np.int64(i32_res_28185),
                                                               np.int64(num_groups_31724),
                                                               np.int64(segment_sizze_nonzzero_43335),
                                                               defunc_3_map_res_mem_41687,
                                                               defunc_3_map_res_mem_41914,
                                                               mem_41979)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_small_31675_var,
                                       ((np.int64(num_groups_31724) * np.int64(segred_group_sizze_31723)),),
                                       (np.int64(segred_group_sizze_31723),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_43360 = sdiv_up64(num_groups_31724,
                                               smax64(np.int64(1),
                                                      (m_28170 * i32_res_28185)))
          elements_per_thread_43361 = sdiv_up64(i32_res_28185,
                                                (segred_group_sizze_31723 * groups_per_segment_43360))
          virt_num_groups_43362 = (groups_per_segment_43360 * (m_28170 * i32_res_28185))
          num_threads_43363 = (num_groups_31724 * segred_group_sizze_31723)
          threads_per_segment_43364 = (groups_per_segment_43360 * segred_group_sizze_31723)
          segred_tmp_mem_43365 = opencl_alloc(self,
                                              (np.int64(4) * virt_num_groups_43362),
                                              "segred_tmp_mem_43365")
          mainDetailedzicounter_mem_43367 = self.mainDetailedzicounter_mem_43367
          if ((1 * (np.int64(num_groups_31724) * np.int64(segred_group_sizze_31723))) != 0):
            self.mainDetailedzisegred_large_31675_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.int64(np.int32(1))),
                                                               cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_31723))),
                                                               np.int64(m_28170),
                                                               np.int64(i32_res_28185),
                                                               np.int64(num_groups_31724),
                                                               np.int64(groups_per_segment_43360),
                                                               np.int64(elements_per_thread_43361),
                                                               np.int64(virt_num_groups_43362),
                                                               np.int64(threads_per_segment_43364),
                                                               defunc_3_map_res_mem_41687,
                                                               defunc_3_map_res_mem_41914,
                                                               mem_41979,
                                                               segred_tmp_mem_43365,
                                                               mainDetailedzicounter_mem_43367)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_large_31675_var,
                                       ((np.int64(num_groups_31724) * np.int64(segred_group_sizze_31723)),),
                                       (np.int64(segred_group_sizze_31723),))
            if synchronous:
              sync(self)
        defunc_4_map_res_mem_41980 = mem_41979
      defunc_4_map_res_mem_41986 = defunc_4_map_res_mem_41980
    defunc_3_map_res_mem_41687 = None
    defunc_3_map_res_mem_41914 = None
    suff_outer_par_31739 = (self.sizes["mainDetailed.suff_outer_par_9"] <= m_28170)
    segmap_group_sizze_31759 = self.sizes["mainDetailed.segmap_group_size_31743"]
    max_num_groups_43405 = self.sizes["mainDetailed.segmap_num_groups_31745"]
    num_groups_31760 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_28170,
                                                            segmap_group_sizze_31759),
                                                  sext_i32_i64(max_num_groups_43405))))
    suff_outer_par_31836 = (self.sizes["mainDetailed.suff_outer_par_10"] <= binop_x_41442)
    nest_sizze_31850 = (i32_res_28185 * binop_x_41442)
    segred_group_sizze_31851 = self.sizes["mainDetailed.segred_group_size_31799"]
    max_num_groups_43406 = self.sizes["mainDetailed.segred_num_groups_31801"]
    num_groups_31852 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_31850,
                                                            segred_group_sizze_31851),
                                                  sext_i32_i64(max_num_groups_43406))))
    Ty_40461 = self.sizes["mainDetailed.Ty_40458"]
    Ry_40462 = self.sizes["mainDetailed.Ry_40460"]
    Tx_40463 = self.sizes["mainDetailed.Tx_40457"]
    Rx_40464 = self.sizes["mainDetailed.Rx_40459"]
    Tk_40465 = self.sizes["mainDetailed.Tk_40456"]
    TxRx_40468 = (Tx_40463 * Rx_40464)
    TyRy_40469 = (Ty_40461 * Ry_40462)
    a_loc_szz_40471 = (Tk_40465 * TyRy_40469)
    binop_x_40472 = (Tx_40463 * Tk_40465)
    b_loc_szz_40473 = (Rx_40464 * binop_x_40472)
    group_sizze_40477 = (Ty_40461 * Tx_40463)
    binop_y_41992 = (np.int64(4) * N_28169)
    bytes_41991 = smax64(np.int64(0), binop_y_41992)
    bytes_42211 = smax64(np.int64(0), bytes_41441)
    binop_x_42023 = (Ry_40462 * group_sizze_40477)
    binop_x_42024 = (Rx_40464 * binop_x_42023)
    bytes_42021 = (np.int64(4) * binop_x_42024)
    binop_x_42015 = (Ry_40462 * Rx_40464)
    bytes_42014 = (np.int64(4) * binop_x_42015)
    binop_y_42027 = (np.int64(4) * a_loc_szz_40471)
    bytes_42026 = smax64(np.int64(0), binop_y_42027)
    binop_y_42030 = (np.int64(4) * b_loc_szz_40473)
    bytes_42029 = smax64(np.int64(0), binop_y_42030)
    bytes_42099 = (np.int64(4) * binop_x_42023)
    binop_x_42105 = (Rx_40464 * group_sizze_40477)
    bytes_42103 = (np.int64(4) * binop_x_42105)
    bytes_42091 = (np.int64(4) * Ry_40462)
    bytes_42093 = (np.int64(4) * Rx_40464)
    binop_x_42628 = (np.int64(4) * Ty_40461)
    binop_x_42629 = (Tx_40463 * binop_x_42628)
    binop_x_42630 = (Ry_40462 * binop_x_42629)
    sizze_42631 = (Rx_40464 * binop_x_42630)
    maxSubHelper_42694 = umax64(bytes_42021, sizze_42631)
    num_threads_42746 = (segmap_group_sizze_31759 * num_groups_31760)
    total_sizze_42747 = (bytes_41991 * num_threads_42746)
    local_memory_capacity_43551 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_43551)) and suff_outer_par_31739):
      mem_41989 = opencl_alloc(self, bytes_41707, "mem_41989")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_41989, np.int64(0),
                                                  defunc_4_map_res_mem_41986,
                                                  np.int64(0), np.int64(1),
                                                  i32_res_28185, m_28170)
      mem_42008 = opencl_alloc(self, bytes_41441, "mem_42008")
      color_42688 = opencl_alloc(self, total_sizze_42747, "color_42688")
      if ((1 * (np.int64(num_groups_31760) * np.int64(segmap_group_sizze_31759))) != 0):
        self.mainDetailedzisegmap_31741_var.set_args(self.global_failure,
                                                     np.int64(N_28169),
                                                     np.int64(m_28170),
                                                     np.int32(k2p2zq_28183),
                                                     np.int64(i32_res_28185),
                                                     np.int64(num_groups_31760),
                                                     np.int64(num_threads_42746),
                                                     mem_41440, mem_41989,
                                                     mem_42008, color_42688)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_31741_var,
                                   ((np.int64(num_groups_31760) * np.int64(segmap_group_sizze_31759)),),
                                   (np.int64(segmap_group_sizze_31759),))
        if synchronous:
          sync(self)
      mem_41989 = None
      color_42688 = None
      mem_42214 = opencl_alloc(self, bytes_42211, "mem_42214")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_42214, np.int64(0),
                                                  mem_42008, np.int64(0),
                                                  np.int64(1), m_28170, N_28169)
      mem_42008 = None
      defunc_3_map_res_mem_42216 = mem_42214
    else:
      local_memory_capacity_43550 = self.max_local_memory
      if (sle64(((bytes_42029 + srem64((np.int64(8) - srem64(bytes_42029,
                                                             np.int64(8))),
                                       np.int64(8))) + (bytes_42026 + srem64((np.int64(8) - srem64(bytes_42026,
                                                                                                   np.int64(8))),
                                                                             np.int64(8)))),
                sext_i32_i64(local_memory_capacity_43550)) and suff_outer_par_31836):
        mem_42011 = opencl_alloc(self, binop_y_41425, "mem_42011")
        self.futhark_builtinzhgpu_map_transpose_f32(mem_42011, np.int64(0),
                                                    mem_41440, np.int64(0),
                                                    np.int64(1), i32_res_28185,
                                                    N_28169)
        tk_div_tx_40466 = sdiv_up64(Tk_40465, Tx_40463)
        tk_div_ty_40467 = sdiv_up64(Tk_40465, Ty_40461)
        gridDim_x_40474 = sdiv_up64(N_28169, TxRx_40468)
        gridDim_y_40475 = sdiv_up64(m_28170, TyRy_40469)
        grid_sizze_40476 = (gridDim_x_40474 * gridDim_y_40475)
        full_tiles_40505 = squot64(i32_res_28185, Tk_40465)
        kk_40708 = (Tk_40465 * full_tiles_40505)
        mem_42204 = opencl_alloc(self, bytes_42211, "mem_42204")
        if ((1 * (np.int64(grid_sizze_40476) * np.int64(group_sizze_40477))) != 0):
          self.mainDetailedzisegmap_intragroup_40480_var.set_args(self.global_failure,
                                                                  cl.LocalMemory(np.int64(bytes_42026)),
                                                                  cl.LocalMemory(np.int64(bytes_42029)),
                                                                  np.int64(N_28169),
                                                                  np.int64(m_28170),
                                                                  np.int64(i32_res_28185),
                                                                  np.int64(gridDim_x_40474),
                                                                  np.int64(gridDim_y_40475),
                                                                  np.int64(full_tiles_40505),
                                                                  np.int64(kk_40708),
                                                                  defunc_4_map_res_mem_41986,
                                                                  mem_42011,
                                                                  mem_42204)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_intragroup_40480_var,
                                     ((np.int64(grid_sizze_40476) * np.int64(group_sizze_40477)),),
                                     (np.int64(group_sizze_40477),))
          if synchronous:
            sync(self)
        mem_42011 = None
        defunc_3_map_res_mem_42210 = mem_42204
      else:
        mem_42209 = opencl_alloc(self, bytes_42211, "mem_42209")
        if slt64((i32_res_28185 * np.int64(2)), segred_group_sizze_31851):
          segment_sizze_nonzzero_43482 = smax64(np.int64(1), i32_res_28185)
          num_threads_43483 = (num_groups_31852 * segred_group_sizze_31851)
          if ((1 * (np.int64(num_groups_31852) * np.int64(segred_group_sizze_31851))) != 0):
            self.mainDetailedzisegred_small_31805_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_31851))),
                                                               np.int64(N_28169),
                                                               np.int64(m_28170),
                                                               np.int64(i32_res_28185),
                                                               np.int64(num_groups_31852),
                                                               np.int64(segment_sizze_nonzzero_43482),
                                                               mem_41440,
                                                               defunc_4_map_res_mem_41986,
                                                               mem_42209)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_small_31805_var,
                                       ((np.int64(num_groups_31852) * np.int64(segred_group_sizze_31851)),),
                                       (np.int64(segred_group_sizze_31851),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_43507 = sdiv_up64(num_groups_31852,
                                               smax64(np.int64(1),
                                                      (m_28170 * N_28169)))
          elements_per_thread_43508 = sdiv_up64(i32_res_28185,
                                                (segred_group_sizze_31851 * groups_per_segment_43507))
          virt_num_groups_43509 = (groups_per_segment_43507 * (m_28170 * N_28169))
          num_threads_43510 = (num_groups_31852 * segred_group_sizze_31851)
          threads_per_segment_43511 = (groups_per_segment_43507 * segred_group_sizze_31851)
          segred_tmp_mem_43512 = opencl_alloc(self,
                                              (np.int64(4) * virt_num_groups_43509),
                                              "segred_tmp_mem_43512")
          mainDetailedzicounter_mem_43514 = self.mainDetailedzicounter_mem_43514
          if ((1 * (np.int64(num_groups_31852) * np.int64(segred_group_sizze_31851))) != 0):
            self.mainDetailedzisegred_large_31805_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.int64(np.int32(1))),
                                                               cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_31851))),
                                                               np.int64(N_28169),
                                                               np.int64(m_28170),
                                                               np.int64(i32_res_28185),
                                                               np.int64(num_groups_31852),
                                                               np.int64(groups_per_segment_43507),
                                                               np.int64(elements_per_thread_43508),
                                                               np.int64(virt_num_groups_43509),
                                                               np.int64(threads_per_segment_43511),
                                                               mem_41440,
                                                               defunc_4_map_res_mem_41986,
                                                               mem_42209,
                                                               segred_tmp_mem_43512,
                                                               mainDetailedzicounter_mem_43514)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_large_31805_var,
                                       ((np.int64(num_groups_31852) * np.int64(segred_group_sizze_31851)),),
                                       (np.int64(segred_group_sizze_31851),))
            if synchronous:
              sync(self)
        defunc_3_map_res_mem_42210 = mem_42209
      defunc_3_map_res_mem_42216 = defunc_3_map_res_mem_42210
    mem_41440 = None
    defunc_4_map_res_mem_41986 = None
    i_28472 = (N_28169 - np.int64(1))
    x_28473 = sle64(np.int64(0), i_28472)
    y_28474 = slt64(i_28472, N_28169)
    bounds_check_28475 = (x_28473 and y_28474)
    index_certs_28476 = True
    assert bounds_check_28475, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:26:29-34\n   #1  helpers.fut:20:13-20\n   #2  bfastfinal.fut:76:16-75\n   #3  /prelude/soacs.fut:67:19-23\n   #4  /prelude/soacs.fut:67:3-37\n   #5  bfastfinal.fut:71:5-77:25\n   #6  bfastfinal.fut:174:3-56\n   #7  bfastfinal.fut:170:1-174:56\n" % ("Index [",
                                                                                                                                                                                                                                                                                                                                                     i_28472,
                                                                                                                                                                                                                                                                                                                                                     "] out of bounds for array of shape [",
                                                                                                                                                                                                                                                                                                                                                     N_28169,
                                                                                                                                                                                                                                                                                                                                                     "]."))
    fits_31892 = sle64(N_28169, max_group_sizze_30819)
    suff_intra_par_31890 = (self.sizes["mainDetailed.suff_intra_par_11"] <= N_28169)
    intra_suff_and_fits_31893 = (suff_intra_par_31890 and fits_31892)
    segscan_group_sizze_32030 = self.sizes["mainDetailed.segscan_group_size_32007"]
    max_num_groups_43552 = self.sizes["mainDetailed.segscan_num_groups_32009"]
    num_groups_32031 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(binop_x_41442,
                                                            segscan_group_sizze_32030),
                                                  sext_i32_i64(max_num_groups_43552))))
    segmap_group_sizze_32050 = self.sizes["mainDetailed.segmap_group_size_31998"]
    segmap_group_sizze_32080 = self.sizes["mainDetailed.segmap_group_size_31937"]
    binop_y_42233 = (np.int64(4) * m_28170)
    bytes_42232 = smax64(np.int64(0), binop_y_42233)
    binop_y_42220 = (np.int64(8) * N_28169)
    bytes_42219 = smax64(np.int64(0), binop_y_42220)
    binop_y_42246 = (np.int64(8) * binop_x_41442)
    bytes_42244 = smax64(np.int64(0), binop_y_42246)
    local_memory_capacity_43664 = self.max_local_memory
    if (sle64(((((bytes_41991 + srem64((np.int64(8) - srem64(bytes_41991,
                                                             np.int64(8))),
                                       np.int64(8))) + (bytes_41991 + srem64((np.int64(8) - srem64(bytes_41991,
                                                                                                   np.int64(8))),
                                                                             np.int64(8)))) + (bytes_41991 + srem64((np.int64(8) - srem64(bytes_41991,
                                                                                                                                          np.int64(8))),
                                                                                                                    np.int64(8)))) + (bytes_42219 + srem64((np.int64(8) - srem64(bytes_42219,
                                                                                                                                                                                 np.int64(8))),
                                                                                                                                                           np.int64(8)))),
              sext_i32_i64(local_memory_capacity_43664)) and intra_suff_and_fits_31893):
      mem_42234 = opencl_alloc(self, bytes_42232, "mem_42234")
      mem_42238 = opencl_alloc(self, bytes_42211, "mem_42238")
      mem_42242 = opencl_alloc(self, bytes_42211, "mem_42242")
      if ((1 * (np.int64(m_28170) * np.int64(N_28169))) != 0):
        self.mainDetailedzisegmap_intragroup_31888_var.set_args(self.global_failure,
                                                                cl.LocalMemory(np.int64(bytes_42219)),
                                                                cl.LocalMemory(np.int64(bytes_41991)),
                                                                cl.LocalMemory(np.int64(bytes_41991)),
                                                                cl.LocalMemory(np.int64(bytes_41991)),
                                                                np.int64(N_28169),
                                                                np.int64(m_28170),
                                                                np.int64(i_28472),
                                                                images_mem_41421,
                                                                defunc_3_map_res_mem_42216,
                                                                mem_42234,
                                                                mem_42238,
                                                                mem_42242)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_intragroup_31888_var,
                                   ((np.int64(m_28170) * np.int64(N_28169)),),
                                   (np.int64(N_28169),))
        if synchronous:
          sync(self)
      defunc_4_map_res_mem_42265 = mem_42234
      defunc_4_map_res_mem_42266 = mem_42238
      defunc_4_map_res_mem_42267 = mem_42242
    else:
      mem_42247 = opencl_alloc(self, bytes_42244, "mem_42247")
      mem_42251 = opencl_alloc(self, bytes_42211, "mem_42251")
      if slt64(np.int64(0), (m_28170 * N_28169)):
        stage1_max_num_groups_43572 = self.max_group_size
        stage1_num_groups_43573 = smin64(stage1_max_num_groups_43572,
                                         num_groups_32031)
        num_threads_43574 = sext_i64_i32((stage1_num_groups_43573 * segscan_group_sizze_32030))
        if ((1 * (np.int64(stage1_num_groups_43573) * np.int64(segscan_group_sizze_32030))) != 0):
          self.mainDetailedziscan_stage1_32013_var.set_args(self.global_failure,
                                                            cl.LocalMemory(np.int64(smax64(np.int64(1),
                                                                                           (np.int64(8) * segscan_group_sizze_32030)))),
                                                            np.int64(N_28169),
                                                            np.int64(m_28170),
                                                            np.int32(num_threads_43574),
                                                            images_mem_41421,
                                                            defunc_3_map_res_mem_42216,
                                                            mem_42247,
                                                            mem_42251)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedziscan_stage1_32013_var,
                                     ((np.int64(stage1_num_groups_43573) * np.int64(segscan_group_sizze_32030)),),
                                     (np.int64(segscan_group_sizze_32030),))
          if synchronous:
            sync(self)
        if ((1 * (np.int64(np.int64(1)) * np.int64(stage1_num_groups_43573))) != 0):
          self.mainDetailedziscan_stage2_32013_var.set_args(self.global_failure,
                                                            cl.LocalMemory(np.int64(smax64(np.int64(1),
                                                                                           (np.int64(8) * stage1_num_groups_43573)))),
                                                            np.int64(N_28169),
                                                            np.int64(m_28170),
                                                            np.int64(stage1_num_groups_43573),
                                                            np.int32(num_threads_43574),
                                                            mem_42247)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedziscan_stage2_32013_var,
                                     ((np.int64(np.int64(1)) * np.int64(stage1_num_groups_43573)),),
                                     (np.int64(stage1_num_groups_43573),))
          if synchronous:
            sync(self)
        required_groups_43616 = sext_i64_i32(sdiv_up64((m_28170 * N_28169),
                                                       segscan_group_sizze_32030))
        if ((1 * (np.int64(num_groups_32031) * np.int64(segscan_group_sizze_32030))) != 0):
          self.mainDetailedziscan_stage3_32013_var.set_args(self.global_failure,
                                                            np.int64(N_28169),
                                                            np.int64(m_28170),
                                                            np.int64(num_groups_32031),
                                                            np.int32(num_threads_43574),
                                                            np.int32(required_groups_43616),
                                                            mem_42247)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedziscan_stage3_32013_var,
                                     ((np.int64(num_groups_32031) * np.int64(segscan_group_sizze_32030)),),
                                     (np.int64(segscan_group_sizze_32030),))
          if synchronous:
            sync(self)
      segmap_usable_groups_32051 = sdiv_up64(m_28170, segmap_group_sizze_32050)
      mem_42255 = opencl_alloc(self, bytes_42232, "mem_42255")
      if ((1 * (np.int64(segmap_usable_groups_32051) * np.int64(segmap_group_sizze_32050))) != 0):
        self.mainDetailedzisegmap_31996_var.set_args(self.global_failure,
                                                     np.int64(N_28169),
                                                     np.int64(m_28170),
                                                     np.int64(i_28472),
                                                     mem_42247, mem_42255)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_31996_var,
                                   ((np.int64(segmap_usable_groups_32051) * np.int64(segmap_group_sizze_32050)),),
                                   (np.int64(segmap_group_sizze_32050),))
        if synchronous:
          sync(self)
      mem_42259 = opencl_alloc(self, bytes_42211, "mem_42259")
      self.futhark_builtinzhreplicate_f32(mem_42259, (m_28170 * N_28169),
                                          np.nan)
      mem_42263 = opencl_alloc(self, bytes_42211, "mem_42263")
      self.futhark_builtinzhreplicate_i32(mem_42263, (m_28170 * N_28169),
                                          np.int32(0))
      segmap_usable_groups_32081 = sdiv_up64(binop_x_41442,
                                             segmap_group_sizze_32080)
      if ((1 * (np.int64(segmap_usable_groups_32081) * np.int64(segmap_group_sizze_32080))) != 0):
        self.mainDetailedzisegmap_31934_var.set_args(self.global_failure,
                                                     np.int64(N_28169),
                                                     np.int64(m_28170),
                                                     mem_42247, mem_42251,
                                                     mem_42259, mem_42263)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_31934_var,
                                   ((np.int64(segmap_usable_groups_32081) * np.int64(segmap_group_sizze_32080)),),
                                   (np.int64(segmap_group_sizze_32080),))
        if synchronous:
          sync(self)
      mem_42247 = None
      mem_42251 = None
      defunc_4_map_res_mem_42265 = mem_42255
      defunc_4_map_res_mem_42266 = mem_42259
      defunc_4_map_res_mem_42267 = mem_42263
    suff_outer_par_32119 = (self.sizes["mainDetailed.suff_outer_par_12"] <= m_28170)
    fits_32197 = sle64(i32_res_28179, max_group_sizze_30819)
    suff_intra_par_32195 = (self.sizes["mainDetailed.suff_intra_par_13"] <= i32_res_28179)
    intra_suff_and_fits_32198 = (suff_intra_par_32195 and fits_32197)
    segmap_group_sizze_32158 = self.sizes["mainDetailed.segmap_group_size_32123"]
    nest_sizze_32295 = (m_28170 * i32_res_28179)
    segred_group_sizze_32296 = self.sizes["mainDetailed.segred_group_size_32279"]
    max_num_groups_43665 = self.sizes["mainDetailed.segred_num_groups_32281"]
    num_groups_32297 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_32295,
                                                            segred_group_sizze_32296),
                                                  sext_i32_i64(max_num_groups_43665))))
    segred_group_sizze_32310 = self.sizes["mainDetailed.segred_group_size_32254"]
    max_num_groups_43666 = self.sizes["mainDetailed.segred_num_groups_32256"]
    num_groups_32311 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_32295,
                                                            segred_group_sizze_32310),
                                                  sext_i32_i64(max_num_groups_43666))))
    segmap_group_sizze_32330 = self.sizes["mainDetailed.segmap_group_size_32239"]
    bytes_42276 = (np.int64(4) * segmap_group_sizze_32158)
    bytes_42283 = smax64(np.int64(0), bytes_42276)
    local_memory_capacity_43833 = self.max_local_memory
    if (sle64((bytes_42283 + srem64((np.int64(8) - srem64(bytes_42283,
                                                          np.int64(8))),
                                    np.int64(8))),
              sext_i32_i64(local_memory_capacity_43833)) and suff_outer_par_32119):
      segmap_usable_groups_32159 = sdiv_up64(m_28170, segmap_group_sizze_32158)
      mem_42270 = opencl_alloc(self, bytes_41441, "mem_42270")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_42270, np.int64(0),
                                                  images_mem_41421, np.int64(0),
                                                  np.int64(1), N_28169, m_28170)
      mem_42273 = opencl_alloc(self, bytes_41441, "mem_42273")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_42273, np.int64(0),
                                                  defunc_4_map_res_mem_42266,
                                                  np.int64(0), np.int64(1),
                                                  N_28169, m_28170)
      num_whole_tiles_40936 = squot64(i32_res_28179, segmap_group_sizze_32158)
      residual_input_41037 = srem64(i32_res_28179, segmap_group_sizze_32158)
      cond_41038 = (residual_input_41037 == np.int64(0))
      mem_42307 = opencl_alloc(self, bytes_42232, "mem_42307")
      mem_42310 = opencl_alloc(self, bytes_42232, "mem_42310")
      mem_42313 = opencl_alloc(self, bytes_42232, "mem_42313")
      if ((1 * (np.int64(segmap_usable_groups_32159) * np.int64(segmap_group_sizze_32158))) != 0):
        self.mainDetailedzisegmap_intragroup_40914_var.set_args(self.global_failure,
                                                                self.failure_is_an_option,
                                                                self.global_failure_args,
                                                                cl.LocalMemory(np.int64(bytes_42283)),
                                                                np.int64(N_28169),
                                                                np.int64(m_28170),
                                                                np.int32(n_28173),
                                                                np.float32(hfrac_28175),
                                                                np.int64(i32_res_28179),
                                                                np.int32(k2p2_28181),
                                                                np.int64(segmap_usable_groups_32159),
                                                                np.int64(num_whole_tiles_40936),
                                                                np.int64(residual_input_41037),
                                                                np.byte(cond_41038),
                                                                mem_42270,
                                                                mem_42273,
                                                                mem_42307,
                                                                mem_42310,
                                                                mem_42313)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_intragroup_40914_var,
                                   ((np.int64(segmap_usable_groups_32159) * np.int64(segmap_group_sizze_32158)),),
                                   (np.int64(segmap_group_sizze_32158),))
        if synchronous:
          sync(self)
      self.failure_is_an_option = np.int32(1)
      mem_42270 = None
      mem_42273 = None
      defunc_3_map_res_mem_42344 = mem_42307
      defunc_3_map_res_mem_42345 = mem_42310
      defunc_3_map_res_mem_42346 = mem_42313
    else:
      local_memory_capacity_43832 = self.max_local_memory
      if (sle64((((np.int64(4) * i32_res_28179) + srem64((np.int64(8) - srem64((np.int64(4) * i32_res_28179),
                                                                               np.int64(8))),
                                                         np.int64(8))) + ((np.int64(4) * i32_res_28179) + srem64((np.int64(8) - srem64((np.int64(4) * i32_res_28179),
                                                                                                                                       np.int64(8))),
                                                                                                                 np.int64(8)))),
                sext_i32_i64(local_memory_capacity_43832)) and intra_suff_and_fits_32198):
        mem_42319 = opencl_alloc(self, bytes_42232, "mem_42319")
        mem_42322 = opencl_alloc(self, bytes_42232, "mem_42322")
        mem_42325 = opencl_alloc(self, bytes_42232, "mem_42325")
        if ((1 * (np.int64(m_28170) * np.int64(i32_res_28179))) != 0):
          self.mainDetailedzisegmap_intragroup_32117_var.set_args(self.global_failure,
                                                                  self.failure_is_an_option,
                                                                  self.global_failure_args,
                                                                  cl.LocalMemory(np.int64((np.int64(4) * i32_res_28179))),
                                                                  cl.LocalMemory(np.int64((np.int64(4) * i32_res_28179))),
                                                                  np.int64(N_28169),
                                                                  np.int64(m_28170),
                                                                  np.float32(hfrac_28175),
                                                                  np.int64(i32_res_28179),
                                                                  np.int32(k2p2_28181),
                                                                  images_mem_41421,
                                                                  defunc_4_map_res_mem_42266,
                                                                  mem_42319,
                                                                  mem_42322,
                                                                  mem_42325)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_intragroup_32117_var,
                                     ((np.int64(m_28170) * np.int64(i32_res_28179)),),
                                     (np.int64(i32_res_28179),))
          if synchronous:
            sync(self)
        self.failure_is_an_option = np.int32(1)
        defunc_3_map_res_mem_42341 = mem_42319
        defunc_3_map_res_mem_42342 = mem_42322
        defunc_3_map_res_mem_42343 = mem_42325
      else:
        mem_42329 = opencl_alloc(self, bytes_42232, "mem_42329")
        if slt64((i32_res_28179 * np.int64(2)), segred_group_sizze_32296):
          segment_sizze_nonzzero_43696 = smax64(np.int64(1), i32_res_28179)
          num_threads_43697 = (num_groups_32297 * segred_group_sizze_32296)
          if ((1 * (np.int64(num_groups_32297) * np.int64(segred_group_sizze_32296))) != 0):
            self.mainDetailedzisegred_small_32285_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_32296))),
                                                               np.int64(N_28169),
                                                               np.int64(m_28170),
                                                               np.int64(i32_res_28179),
                                                               np.int64(num_groups_32297),
                                                               np.int64(segment_sizze_nonzzero_43696),
                                                               images_mem_41421,
                                                               mem_42329)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_small_32285_var,
                                       ((np.int64(num_groups_32297) * np.int64(segred_group_sizze_32296)),),
                                       (np.int64(segred_group_sizze_32296),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_43719 = sdiv_up64(num_groups_32297,
                                               smax64(np.int64(1), m_28170))
          elements_per_thread_43720 = sdiv_up64(i32_res_28179,
                                                (segred_group_sizze_32296 * groups_per_segment_43719))
          virt_num_groups_43721 = (groups_per_segment_43719 * m_28170)
          num_threads_43722 = (num_groups_32297 * segred_group_sizze_32296)
          threads_per_segment_43723 = (groups_per_segment_43719 * segred_group_sizze_32296)
          segred_tmp_mem_43724 = opencl_alloc(self,
                                              (np.int64(4) * virt_num_groups_43721),
                                              "segred_tmp_mem_43724")
          mainDetailedzicounter_mem_43726 = self.mainDetailedzicounter_mem_43726
          if ((1 * (np.int64(num_groups_32297) * np.int64(segred_group_sizze_32296))) != 0):
            self.mainDetailedzisegred_large_32285_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.int64(np.int32(1))),
                                                               cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_32296))),
                                                               np.int64(N_28169),
                                                               np.int64(m_28170),
                                                               np.int64(i32_res_28179),
                                                               np.int64(num_groups_32297),
                                                               np.int64(groups_per_segment_43719),
                                                               np.int64(elements_per_thread_43720),
                                                               np.int64(virt_num_groups_43721),
                                                               np.int64(threads_per_segment_43723),
                                                               images_mem_41421,
                                                               mem_42329,
                                                               segred_tmp_mem_43724,
                                                               mainDetailedzicounter_mem_43726)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_large_32285_var,
                                       ((np.int64(num_groups_32297) * np.int64(segred_group_sizze_32296)),),
                                       (np.int64(segred_group_sizze_32296),))
            if synchronous:
              sync(self)
        mem_42333 = opencl_alloc(self, bytes_42232, "mem_42333")
        if slt64((i32_res_28179 * np.int64(2)), segred_group_sizze_32310):
          segment_sizze_nonzzero_43760 = smax64(np.int64(1), i32_res_28179)
          num_threads_43761 = (num_groups_32311 * segred_group_sizze_32310)
          if ((1 * (np.int64(num_groups_32311) * np.int64(segred_group_sizze_32310))) != 0):
            self.mainDetailedzisegred_small_32260_var.set_args(self.global_failure,
                                                               self.failure_is_an_option,
                                                               self.global_failure_args,
                                                               cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_32310))),
                                                               np.int64(N_28169),
                                                               np.int64(m_28170),
                                                               np.int64(i32_res_28179),
                                                               np.int64(num_groups_32311),
                                                               np.int64(segment_sizze_nonzzero_43760),
                                                               defunc_4_map_res_mem_42266,
                                                               mem_42329,
                                                               mem_42333)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_small_32260_var,
                                       ((np.int64(num_groups_32311) * np.int64(segred_group_sizze_32310)),),
                                       (np.int64(segred_group_sizze_32310),))
            if synchronous:
              sync(self)
          self.failure_is_an_option = np.int32(1)
        else:
          groups_per_segment_43783 = sdiv_up64(num_groups_32311,
                                               smax64(np.int64(1), m_28170))
          elements_per_thread_43784 = sdiv_up64(i32_res_28179,
                                                (segred_group_sizze_32310 * groups_per_segment_43783))
          virt_num_groups_43785 = (groups_per_segment_43783 * m_28170)
          num_threads_43786 = (num_groups_32311 * segred_group_sizze_32310)
          threads_per_segment_43787 = (groups_per_segment_43783 * segred_group_sizze_32310)
          segred_tmp_mem_43788 = opencl_alloc(self,
                                              (np.int64(4) * virt_num_groups_43785),
                                              "segred_tmp_mem_43788")
          mainDetailedzicounter_mem_43790 = self.mainDetailedzicounter_mem_43790
          if ((1 * (np.int64(num_groups_32311) * np.int64(segred_group_sizze_32310))) != 0):
            self.mainDetailedzisegred_large_32260_var.set_args(self.global_failure,
                                                               self.failure_is_an_option,
                                                               self.global_failure_args,
                                                               cl.LocalMemory(np.int64(np.int32(1))),
                                                               cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_32310))),
                                                               np.int64(N_28169),
                                                               np.int64(m_28170),
                                                               np.int64(i32_res_28179),
                                                               np.int64(num_groups_32311),
                                                               np.int64(groups_per_segment_43783),
                                                               np.int64(elements_per_thread_43784),
                                                               np.int64(virt_num_groups_43785),
                                                               np.int64(threads_per_segment_43787),
                                                               defunc_4_map_res_mem_42266,
                                                               mem_42329,
                                                               mem_42333,
                                                               segred_tmp_mem_43788,
                                                               mainDetailedzicounter_mem_43790)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_large_32260_var,
                                       ((np.int64(num_groups_32311) * np.int64(segred_group_sizze_32310)),),
                                       (np.int64(segred_group_sizze_32310),))
            if synchronous:
              sync(self)
          self.failure_is_an_option = np.int32(1)
        segmap_usable_groups_32331 = sdiv_up64(m_28170,
                                               segmap_group_sizze_32330)
        mem_42337 = opencl_alloc(self, bytes_42232, "mem_42337")
        mem_42340 = opencl_alloc(self, bytes_42232, "mem_42340")
        if ((1 * (np.int64(segmap_usable_groups_32331) * np.int64(segmap_group_sizze_32330))) != 0):
          self.mainDetailedzisegmap_32237_var.set_args(self.global_failure,
                                                       np.int64(m_28170),
                                                       np.float32(hfrac_28175),
                                                       np.int32(k2p2_28181),
                                                       mem_42329, mem_42333,
                                                       mem_42337, mem_42340)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_32237_var,
                                     ((np.int64(segmap_usable_groups_32331) * np.int64(segmap_group_sizze_32330)),),
                                     (np.int64(segmap_group_sizze_32330),))
          if synchronous:
            sync(self)
        mem_42333 = None
        defunc_3_map_res_mem_42341 = mem_42337
        defunc_3_map_res_mem_42342 = mem_42329
        defunc_3_map_res_mem_42343 = mem_42340
      defunc_3_map_res_mem_42344 = defunc_3_map_res_mem_42341
      defunc_3_map_res_mem_42345 = defunc_3_map_res_mem_42342
      defunc_3_map_res_mem_42346 = defunc_3_map_res_mem_42343
    segred_group_sizze_32351 = self.sizes["mainDetailed.segred_group_size_32350"]
    max_num_groups_43834 = self.sizes["mainDetailed.segred_num_groups_32352"]
    num_groups_32353 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_28170,
                                                            segred_group_sizze_32351),
                                                  sext_i32_i64(max_num_groups_43834))))
    mem_42349 = opencl_alloc(self, np.int64(4), "mem_42349")
    mainDetailedzicounter_mem_43835 = self.mainDetailedzicounter_mem_43835
    segred_tmp_mem_43837 = opencl_alloc(self, (np.int64(4) * num_groups_32353),
                                        "segred_tmp_mem_43837")
    num_threads_43839 = (num_groups_32353 * segred_group_sizze_32351)
    if ((1 * (np.int64(num_groups_32353) * np.int64(segred_group_sizze_32351))) != 0):
      self.mainDetailedzisegred_nonseg_32358_var.set_args(self.global_failure,
                                                          cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_32351))),
                                                          cl.LocalMemory(np.int64(np.int32(1))),
                                                          np.int64(m_28170),
                                                          np.int64(num_groups_32353),
                                                          np.int64(num_threads_43839),
                                                          defunc_3_map_res_mem_42344,
                                                          mem_42349,
                                                          mainDetailedzicounter_mem_43835,
                                                          segred_tmp_mem_43837)
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.mainDetailedzisegred_nonseg_32358_var,
                                 ((np.int64(num_groups_32353) * np.int64(segred_group_sizze_32351)),),
                                 (np.int64(segred_group_sizze_32351),))
      if synchronous:
        sync(self)
    read_res_44255 = np.empty(1, dtype=ct.c_int32)
    cl.enqueue_copy(self.queue, read_res_44255, mem_42349,
                    device_offset=(np.int64(np.int64(0)) * 4),
                    is_blocking=synchronous)
    sync(self)
    defunc_2_reduce_comm_res_28566 = read_res_44255[0]
    mem_42349 = None
    i32_res_28571 = sext_i32_i64(defunc_2_reduce_comm_res_28566)
    bounds_invalid_upwards_28572 = slt64(i32_res_28571, np.int64(0))
    valid_28573 = not(bounds_invalid_upwards_28572)
    range_valid_c_28574 = True
    assert valid_28573, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:90:3-10\n   #1  helpers.fut:5:3-18\n   #2  bfastfinal.fut:102:34-46\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:97:17-104:24\n   #5  bfastfinal.fut:174:3-56\n   #6  bfastfinal.fut:170:1-174:56\n" % ("Range ",
                                                                                                                                                                                                                                                                                                                   np.int64(0),
                                                                                                                                                                                                                                                                                                                   "..",
                                                                                                                                                                                                                                                                                                                   np.int64(1),
                                                                                                                                                                                                                                                                                                                   "..<",
                                                                                                                                                                                                                                                                                                                   i32_res_28571,
                                                                                                                                                                                                                                                                                                                   " is invalid."))
    suff_outer_par_32374 = (self.sizes["mainDetailed.suff_outer_par_14"] <= m_28170)
    segmap_group_sizze_32401 = self.sizes["mainDetailed.segmap_group_size_32378"]
    nest_sizze_32452 = (m_28170 * i32_res_28571)
    segred_group_sizze_32453 = self.sizes["mainDetailed.segred_group_size_32426"]
    max_num_groups_43865 = self.sizes["mainDetailed.segred_num_groups_32428"]
    num_groups_32454 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_32452,
                                                            segred_group_sizze_32453),
                                                  sext_i32_i64(max_num_groups_43865))))
    bytes_42352 = (np.int64(4) * segmap_group_sizze_32401)
    bytes_42361 = smax64(np.int64(0), bytes_42352)
    local_memory_capacity_43942 = self.max_local_memory
    if (sle64((bytes_42361 + srem64((np.int64(8) - srem64(bytes_42361,
                                                          np.int64(8))),
                                    np.int64(8))),
              sext_i32_i64(local_memory_capacity_43942)) and suff_outer_par_32374):
      segmap_usable_groups_32402 = sdiv_up64(m_28170, segmap_group_sizze_32401)
      num_whole_tiles_41140 = squot64(i32_res_28571, segmap_group_sizze_32401)
      residual_input_41251 = srem64(i32_res_28571, segmap_group_sizze_32401)
      cond_41252 = (residual_input_41251 == np.int64(0))
      mem_42378 = opencl_alloc(self, bytes_42232, "mem_42378")
      if ((1 * (np.int64(segmap_usable_groups_32402) * np.int64(segmap_group_sizze_32401))) != 0):
        self.mainDetailedzisegmap_intragroup_41120_var.set_args(self.global_failure,
                                                                self.failure_is_an_option,
                                                                self.global_failure_args,
                                                                cl.LocalMemory(np.int64(bytes_42361)),
                                                                np.int64(N_28169),
                                                                np.int64(m_28170),
                                                                np.int64(i32_res_28571),
                                                                np.int64(segmap_usable_groups_32402),
                                                                np.int64(num_whole_tiles_41140),
                                                                np.int64(residual_input_41251),
                                                                np.byte(cond_41252),
                                                                defunc_4_map_res_mem_42266,
                                                                defunc_3_map_res_mem_42344,
                                                                defunc_3_map_res_mem_42345,
                                                                mem_42378)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_intragroup_41120_var,
                                   ((np.int64(segmap_usable_groups_32402) * np.int64(segmap_group_sizze_32401)),),
                                   (np.int64(segmap_group_sizze_32401),))
        if synchronous:
          sync(self)
      self.failure_is_an_option = np.int32(1)
      defunc_0_f_res_mem_42383 = mem_42378
    else:
      mem_42382 = opencl_alloc(self, bytes_42232, "mem_42382")
      if slt64((i32_res_28571 * np.int64(2)), segred_group_sizze_32453):
        segment_sizze_nonzzero_43878 = smax64(np.int64(1), i32_res_28571)
        num_threads_43879 = (num_groups_32454 * segred_group_sizze_32453)
        if ((1 * (np.int64(num_groups_32454) * np.int64(segred_group_sizze_32453))) != 0):
          self.mainDetailedzisegred_small_32432_var.set_args(self.global_failure,
                                                             self.failure_is_an_option,
                                                             self.global_failure_args,
                                                             cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_32453))),
                                                             np.int64(N_28169),
                                                             np.int64(m_28170),
                                                             np.int64(i32_res_28571),
                                                             np.int64(num_groups_32454),
                                                             np.int64(segment_sizze_nonzzero_43878),
                                                             defunc_4_map_res_mem_42266,
                                                             defunc_3_map_res_mem_42344,
                                                             defunc_3_map_res_mem_42345,
                                                             mem_42382)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegred_small_32432_var,
                                     ((np.int64(num_groups_32454) * np.int64(segred_group_sizze_32453)),),
                                     (np.int64(segred_group_sizze_32453),))
          if synchronous:
            sync(self)
        self.failure_is_an_option = np.int32(1)
      else:
        groups_per_segment_43901 = sdiv_up64(num_groups_32454,
                                             smax64(np.int64(1), m_28170))
        elements_per_thread_43902 = sdiv_up64(i32_res_28571,
                                              (segred_group_sizze_32453 * groups_per_segment_43901))
        virt_num_groups_43903 = (groups_per_segment_43901 * m_28170)
        num_threads_43904 = (num_groups_32454 * segred_group_sizze_32453)
        threads_per_segment_43905 = (groups_per_segment_43901 * segred_group_sizze_32453)
        segred_tmp_mem_43906 = opencl_alloc(self,
                                            (np.int64(4) * virt_num_groups_43903),
                                            "segred_tmp_mem_43906")
        mainDetailedzicounter_mem_43908 = self.mainDetailedzicounter_mem_43908
        if ((1 * (np.int64(num_groups_32454) * np.int64(segred_group_sizze_32453))) != 0):
          self.mainDetailedzisegred_large_32432_var.set_args(self.global_failure,
                                                             self.failure_is_an_option,
                                                             self.global_failure_args,
                                                             cl.LocalMemory(np.int64(np.int32(1))),
                                                             cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_32453))),
                                                             np.int64(N_28169),
                                                             np.int64(m_28170),
                                                             np.int64(i32_res_28571),
                                                             np.int64(num_groups_32454),
                                                             np.int64(groups_per_segment_43901),
                                                             np.int64(elements_per_thread_43902),
                                                             np.int64(virt_num_groups_43903),
                                                             np.int64(threads_per_segment_43905),
                                                             defunc_4_map_res_mem_42266,
                                                             defunc_3_map_res_mem_42344,
                                                             defunc_3_map_res_mem_42345,
                                                             mem_42382,
                                                             segred_tmp_mem_43906,
                                                             mainDetailedzicounter_mem_43908)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegred_large_32432_var,
                                     ((np.int64(num_groups_32454) * np.int64(segred_group_sizze_32453)),),
                                     (np.int64(segred_group_sizze_32453),))
          if synchronous:
            sync(self)
        self.failure_is_an_option = np.int32(1)
      defunc_0_f_res_mem_42383 = mem_42382
    iota32_arg_28600 = (N_28169 - i32_res_28179)
    bounds_invalid_upwards_28601 = slt64(iota32_arg_28600, np.int64(0))
    valid_28602 = not(bounds_invalid_upwards_28601)
    range_valid_c_28603 = True
    assert valid_28602, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:90:3-10\n   #1  helpers.fut:2:3-8\n   #2  bfastfinal.fut:109:22-35\n   #3  bfastfinal.fut:174:3-56\n   #4  bfastfinal.fut:170:1-174:56\n" % ("Range ",
                                                                                                                                                                                                                                      np.int64(0),
                                                                                                                                                                                                                                      "..",
                                                                                                                                                                                                                                      np.int64(1),
                                                                                                                                                                                                                                      "..<",
                                                                                                                                                                                                                                      iota32_arg_28600,
                                                                                                                                                                                                                                      " is invalid."))
    i_28605 = (n_28173 - np.int32(1))
    i_28606 = sext_i32_i64(i_28605)
    x_28607 = sle64(np.int64(0), i_28606)
    y_28608 = slt64(i_28606, N_28169)
    bounds_check_28609 = (x_28607 and y_28608)
    index_certs_28610 = True
    assert bounds_check_28609, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:107:64-84\n   #1  bfastfinal.fut:106:15-109:36\n   #2  bfastfinal.fut:174:3-56\n   #3  bfastfinal.fut:170:1-174:56\n" % ("Index [",
                                                                                                                                                                                                                 i_28606,
                                                                                                                                                                                                                 "] out of bounds for array of shape [",
                                                                                                                                                                                                                 N_28169,
                                                                                                                                                                                                                 "]."))
    read_res_44257 = np.empty(1, dtype=ct.c_int32)
    cl.enqueue_copy(self.queue, read_res_44257, mappingindices_mem_41420,
                    device_offset=(np.int64(i_28606) * 4),
                    is_blocking=synchronous)
    sync(self)
    r32_arg_28611 = read_res_44257[0]
    i32_res_28612 = sitofp_i32_f32(r32_arg_28611)
    segmap_group_sizze_32499 = self.sizes["mainDetailed.segmap_group_size_32479"]
    segmap_usable_groups_32500 = sdiv_up64(iota32_arg_28600,
                                           segmap_group_sizze_32499)
    binop_y_42386 = (np.int64(4) * iota32_arg_28600)
    bytes_42385 = smax64(np.int64(0), binop_y_42386)
    mem_42387 = opencl_alloc(self, bytes_42385, "mem_42387")
    if ((1 * (np.int64(segmap_usable_groups_32500) * np.int64(segmap_group_sizze_32499))) != 0):
      self.mainDetailedzisegmap_32477_var.set_args(self.global_failure,
                                                   self.failure_is_an_option,
                                                   self.global_failure_args,
                                                   np.int64(N_28169),
                                                   np.int32(n_28173),
                                                   np.float32(lam_28176),
                                                   np.int64(iota32_arg_28600),
                                                   np.float32(i32_res_28612),
                                                   mappingindices_mem_41420,
                                                   mem_42387)
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.mainDetailedzisegmap_32477_var,
                                 ((np.int64(segmap_usable_groups_32500) * np.int64(segmap_group_sizze_32499)),),
                                 (np.int64(segmap_group_sizze_32499),))
      if synchronous:
        sync(self)
    self.failure_is_an_option = np.int32(1)
    iota32_arg_28630 = (N_28169 - i32_res_28179)
    bounds_invalid_upwards_28631 = slt64(iota32_arg_28630, np.int64(0))
    valid_28632 = not(bounds_invalid_upwards_28631)
    range_valid_c_28633 = True
    assert valid_28632, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:90:3-10\n   #1  helpers.fut:2:3-8\n   #2  bfastfinal.fut:119:20-35\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:114:20-131:9\n   #5  bfastfinal.fut:174:3-56\n   #6  bfastfinal.fut:170:1-174:56\n" % ("Range ",
                                                                                                                                                                                                                                                                                                                  np.int64(0),
                                                                                                                                                                                                                                                                                                                  "..",
                                                                                                                                                                                                                                                                                                                  np.int64(1),
                                                                                                                                                                                                                                                                                                                  "..<",
                                                                                                                                                                                                                                                                                                                  iota32_arg_28630,
                                                                                                                                                                                                                                                                                                                  " is invalid."))
    max_res_28638 = smax64(np.int64(1), iota32_arg_28630)
    bounds_invalid_upwards_28639 = slt64(max_res_28638, np.int64(1))
    distance_28640 = (max_res_28638 - np.int64(1))
    valid_28641 = not(bounds_invalid_upwards_28639)
    range_valid_c_28642 = True
    assert valid_28641, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  lib/github.com/diku-dk/sorts/insertion_sort.fut:16:30-45\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:116:13-121:42\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:114:20-131:9\n   #5  bfastfinal.fut:174:3-56\n   #6  bfastfinal.fut:170:1-174:56\n" % ("Range ",
                                                                                                                                                                                                                                                                                                                                                              np.int64(1),
                                                                                                                                                                                                                                                                                                                                                              "..<",
                                                                                                                                                                                                                                                                                                                                                              max_res_28638,
                                                                                                                                                                                                                                                                                                                                                              " is invalid."))
    dim_match_28643 = (iota32_arg_28600 == iota32_arg_28630)
    empty_or_match_cert_28644 = True
    assert dim_match_28643, ("Error: %s\n\nBacktrace:\n-> #0  unknown location\n   #1  bfastfinal.fut:116:13-121:42\n   #2  /prelude/functional.fut:9:42-44\n   #3  bfastfinal.fut:114:20-131:9\n   #4  bfastfinal.fut:174:3-56\n   #5  bfastfinal.fut:170:1-174:56\n" % ("Function return value does not match shape of declared return type.",))
    segmap_group_sizze_32695 = self.sizes["mainDetailed.segmap_group_size_32688"]
    segmap_usable_groups_32696 = sdiv_up64(m_28170, segmap_group_sizze_32695)
    mem_42391 = opencl_alloc(self, bytes_42232, "mem_42391")
    if ((1 * (np.int64(segmap_usable_groups_32696) * np.int64(segmap_group_sizze_32695))) != 0):
      self.mainDetailedzisegmap_32686_var.set_args(self.global_failure,
                                                   np.int64(m_28170),
                                                   defunc_4_map_res_mem_42265,
                                                   defunc_3_map_res_mem_42345,
                                                   mem_42391)
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.mainDetailedzisegmap_32686_var,
                                 ((np.int64(segmap_usable_groups_32696) * np.int64(segmap_group_sizze_32695)),),
                                 (np.int64(segmap_group_sizze_32695),))
      if synchronous:
        sync(self)
    nest_sizze_32706 = (m_28170 * iota32_arg_28630)
    segmap_group_sizze_32707 = self.sizes["mainDetailed.segmap_group_size_32631"]
    segmap_usable_groups_32708 = sdiv_up64(nest_sizze_32706,
                                           segmap_group_sizze_32707)
    binop_y_42395 = (np.int64(4) * nest_sizze_32706)
    bytes_42393 = smax64(np.int64(0), binop_y_42395)
    mem_42396 = opencl_alloc(self, bytes_42393, "mem_42396")
    if ((1 * (np.int64(segmap_usable_groups_32708) * np.int64(segmap_group_sizze_32707))) != 0):
      self.mainDetailedzisegmap_32628_var.set_args(self.global_failure,
                                                   self.failure_is_an_option,
                                                   self.global_failure_args,
                                                   np.int64(N_28169),
                                                   np.int64(m_28170),
                                                   np.int64(iota32_arg_28630),
                                                   defunc_4_map_res_mem_42266,
                                                   defunc_3_map_res_mem_42345,
                                                   mem_42391, mem_42396)
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.mainDetailedzisegmap_32628_var,
                                 ((np.int64(segmap_usable_groups_32708) * np.int64(segmap_group_sizze_32707)),),
                                 (np.int64(segmap_group_sizze_32707),))
      if synchronous:
        sync(self)
    self.failure_is_an_option = np.int32(1)
    segmap_group_sizze_32735 = self.sizes["mainDetailed.segmap_group_size_32537"]
    segmap_usable_groups_32736 = sdiv_up64(m_28170, segmap_group_sizze_32735)
    mem_42399 = opencl_alloc(self, binop_y_42395, "mem_42399")
    self.futhark_builtinzhgpu_map_transpose_f32(mem_42399, np.int64(0),
                                                mem_42396, np.int64(0),
                                                np.int64(1), iota32_arg_28630,
                                                m_28170)
    mem_42396 = None
    mem_42433 = opencl_alloc(self, bytes_42232, "mem_42433")
    binop_y_42411 = (np.int64(4) * iota32_arg_28630)
    bytes_42410 = smax64(np.int64(0), binop_y_42411)
    num_threads_42765 = (segmap_group_sizze_32735 * segmap_usable_groups_32736)
    total_sizze_42766 = (bytes_42410 * num_threads_42765)
    color_42716 = opencl_alloc(self, total_sizze_42766, "color_42716")
    if ((1 * (np.int64(segmap_usable_groups_32736) * np.int64(segmap_group_sizze_32735))) != 0):
      self.mainDetailedzisegmap_32535_var.set_args(self.global_failure,
                                                   self.failure_is_an_option,
                                                   self.global_failure_args,
                                                   np.int64(m_28170),
                                                   np.int64(iota32_arg_28600),
                                                   np.int64(iota32_arg_28630),
                                                   np.int64(distance_28640),
                                                   np.int64(num_threads_42765),
                                                   defunc_4_map_res_mem_42265,
                                                   defunc_3_map_res_mem_42345,
                                                   mem_42391, mem_42399,
                                                   mem_42433, color_42716)
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.mainDetailedzisegmap_32535_var,
                                 ((np.int64(segmap_usable_groups_32736) * np.int64(segmap_group_sizze_32735)),),
                                 (np.int64(segmap_group_sizze_32735),))
      if synchronous:
        sync(self)
    self.failure_is_an_option = np.int32(1)
    mem_42391 = None
    mem_42399 = None
    color_42716 = None
    empty_or_match_cert_28750 = True
    assert dim_match_28643, ("Error: %s\n\nBacktrace:\n-> #0  bfastfinal.fut:146:17-149:51\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:136:38-164:9\n   #3  bfastfinal.fut:174:3-56\n   #4  bfastfinal.fut:170:1-174:56\n" % ("function arguments of wrong shape",))
    dim_match_28751 = (iota32_arg_28630 == iota32_arg_28600)
    empty_or_match_cert_28752 = True
    assert dim_match_28751, ("Error: %s\n\nBacktrace:\n-> #0  bfastfinal.fut:162:24-88\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:136:38-164:9\n   #3  bfastfinal.fut:174:3-56\n   #4  bfastfinal.fut:170:1-174:56\n" % ("function arguments of wrong shape",))
    empty_or_match_cert_28753 = True
    assert dim_match_28643, ("Error: %s\n\nBacktrace:\n-> #0  unknown location\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:136:38-164:9\n   #3  bfastfinal.fut:174:3-56\n   #4  bfastfinal.fut:170:1-174:56\n" % ("Function return value does not match shape of declared return type.",))
    suff_outer_par_32844 = (self.sizes["mainDetailed.suff_outer_par_15"] <= m_28170)
    intra_avail_par_32839 = smin64(iota32_arg_28600, iota32_arg_28630)
    computed_group_sizze_32832 = smax64(iota32_arg_28600, iota32_arg_28630)
    fits_33076 = sle64(computed_group_sizze_32832, max_group_sizze_30819)
    suff_intra_par_33074 = (self.sizes["mainDetailed.suff_intra_par_16"] <= intra_avail_par_32839)
    intra_suff_and_fits_33077 = (suff_intra_par_33074 and fits_33076)
    segmap_group_sizze_32960 = self.sizes["mainDetailed.segmap_group_size_32848"]
    max_num_groups_43982 = self.sizes["mainDetailed.segmap_num_groups_32850"]
    num_groups_32961 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_28170,
                                                            segmap_group_sizze_32960),
                                                  sext_i32_i64(max_num_groups_43982))))
    segmap_group_sizze_33381 = self.sizes["mainDetailed.segmap_group_size_33374"]
    segscan_group_sizze_33389 = self.sizes["mainDetailed.segscan_group_size_33335"]
    max_num_groups_43983 = self.sizes["mainDetailed.segscan_num_groups_33337"]
    num_groups_33390 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_32706,
                                                            segscan_group_sizze_33389),
                                                  sext_i32_i64(max_num_groups_43983))))
    segmap_group_sizze_33423 = self.sizes["mainDetailed.segmap_group_size_33324"]
    nest_sizze_33433 = (m_28170 * iota32_arg_28600)
    segred_group_sizze_33434 = self.sizes["mainDetailed.segred_group_size_33284"]
    max_num_groups_43984 = self.sizes["mainDetailed.segred_num_groups_33286"]
    num_groups_33435 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_33433,
                                                            segred_group_sizze_33434),
                                                  sext_i32_i64(max_num_groups_43984))))
    segmap_group_sizze_33471 = self.sizes["mainDetailed.segmap_group_size_33248"]
    segmap_group_sizze_33517 = self.sizes["mainDetailed.segmap_group_size_33199"]
    bytes_42480 = (np.int64(4) * nest_sizze_33433)
    bytes_42562 = smax64(np.int64(0), bytes_42480)
    local_memory_capacity_43985 = self.max_local_memory
    if intra_suff_and_fits_33077:
      defunc_0_f_res_ixfn_42557 = iota32_arg_28600
    else:
      defunc_0_f_res_ixfn_42557 = iota32_arg_28630
    num_threads_42767 = (segmap_group_sizze_32960 * num_groups_32961)
    total_sizze_42768 = (bytes_42410 * num_threads_42767)
    total_sizze_42769 = (bytes_42385 * num_threads_42767)
    local_memory_capacity_44232 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_44232)) and suff_outer_par_32844):
      mem_42482 = opencl_alloc(self, bytes_42480, "mem_42482")
      mem_42485 = opencl_alloc(self, bytes_42480, "mem_42485")
      mem_42488 = opencl_alloc(self, bytes_42232, "mem_42488")
      mem_42491 = opencl_alloc(self, bytes_42232, "mem_42491")
      color_42717 = opencl_alloc(self, total_sizze_42768, "color_42717")
      color_42718 = opencl_alloc(self, total_sizze_42769, "color_42718")
      if ((1 * (np.int64(num_groups_32961) * np.int64(segmap_group_sizze_32960))) != 0):
        self.mainDetailedzisegmap_32846_var.set_args(self.global_failure,
                                                     self.failure_is_an_option,
                                                     self.global_failure_args,
                                                     np.int64(N_28169),
                                                     np.int64(m_28170),
                                                     np.int32(n_28173),
                                                     np.int64(iota32_arg_28600),
                                                     np.int64(iota32_arg_28630),
                                                     np.int64(num_groups_32961),
                                                     np.int64(num_threads_42767),
                                                     defunc_4_map_res_mem_42265,
                                                     defunc_4_map_res_mem_42266,
                                                     defunc_4_map_res_mem_42267,
                                                     defunc_3_map_res_mem_42344,
                                                     defunc_3_map_res_mem_42345,
                                                     defunc_3_map_res_mem_42346,
                                                     defunc_0_f_res_mem_42383,
                                                     mem_42387, mem_42482,
                                                     mem_42485, mem_42488,
                                                     mem_42491, color_42717,
                                                     color_42718)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_32846_var,
                                   ((np.int64(num_groups_32961) * np.int64(segmap_group_sizze_32960)),),
                                   (np.int64(segmap_group_sizze_32960),))
        if synchronous:
          sync(self)
      self.failure_is_an_option = np.int32(1)
      color_42717 = None
      color_42718 = None
      mem_42565 = opencl_alloc(self, bytes_42562, "mem_42565")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_42565, np.int64(0),
                                                  mem_42482, np.int64(0),
                                                  np.int64(1), m_28170,
                                                  iota32_arg_28600)
      mem_42482 = None
      mem_42570 = opencl_alloc(self, bytes_42562, "mem_42570")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_42570, np.int64(0),
                                                  mem_42485, np.int64(0),
                                                  np.int64(1), m_28170,
                                                  iota32_arg_28600)
      mem_42485 = None
      defunc_0_f_res_mem_42577 = mem_42565
      defunc_0_f_res_mem_42578 = mem_42570
      defunc_0_f_res_mem_42579 = mem_42488
      defunc_0_f_res_mem_42580 = mem_42491
    else:
      local_memory_capacity_44231 = self.max_local_memory
      if (sle64((((((bytes_42410 + srem64((np.int64(8) - srem64(bytes_42410,
                                                                np.int64(8))),
                                          np.int64(8))) + (bytes_42385 + srem64((np.int64(8) - srem64(bytes_42385,
                                                                                                      np.int64(8))),
                                                                                np.int64(8)))) + (iota32_arg_28600 + srem64((np.int64(8) - srem64(iota32_arg_28600,
                                                                                                                                                  np.int64(8))),
                                                                                                                            np.int64(8)))) + ((np.int64(4) * iota32_arg_28600) + srem64((np.int64(8) - srem64((np.int64(4) * iota32_arg_28600),
                                                                                                                                                                                                              np.int64(8))),
                                                                                                                                                                                        np.int64(8)))) + ((np.int64(4) * iota32_arg_28600) + srem64((np.int64(8) - srem64((np.int64(4) * iota32_arg_28600),
                                                                                                                                                                                                                                                                          np.int64(8))),
                                                                                                                                                                                                                                                    np.int64(8)))),
                sext_i32_i64(local_memory_capacity_44231)) and intra_suff_and_fits_33077):
        mem_42508 = opencl_alloc(self, bytes_42562, "mem_42508")
        mem_42512 = opencl_alloc(self, bytes_42562, "mem_42512")
        mem_42515 = opencl_alloc(self, bytes_42232, "mem_42515")
        mem_42518 = opencl_alloc(self, bytes_42232, "mem_42518")
        if ((1 * (np.int64(m_28170) * np.int64(computed_group_sizze_32832))) != 0):
          self.mainDetailedzisegmap_intragroup_32842_var.set_args(self.global_failure,
                                                                  self.failure_is_an_option,
                                                                  self.global_failure_args,
                                                                  cl.LocalMemory(np.int64((np.int64(4) * iota32_arg_28600))),
                                                                  cl.LocalMemory(np.int64((np.int64(4) * iota32_arg_28600))),
                                                                  cl.LocalMemory(np.int64(iota32_arg_28600)),
                                                                  cl.LocalMemory(np.int64(bytes_42385)),
                                                                  cl.LocalMemory(np.int64(bytes_42410)),
                                                                  np.int64(N_28169),
                                                                  np.int64(m_28170),
                                                                  np.int32(n_28173),
                                                                  np.int64(iota32_arg_28600),
                                                                  np.int64(iota32_arg_28630),
                                                                  np.int64(computed_group_sizze_32832),
                                                                  defunc_4_map_res_mem_42265,
                                                                  defunc_4_map_res_mem_42266,
                                                                  defunc_4_map_res_mem_42267,
                                                                  defunc_3_map_res_mem_42344,
                                                                  defunc_3_map_res_mem_42345,
                                                                  defunc_3_map_res_mem_42346,
                                                                  defunc_0_f_res_mem_42383,
                                                                  mem_42387,
                                                                  mem_42508,
                                                                  mem_42512,
                                                                  mem_42515,
                                                                  mem_42518)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_intragroup_32842_var,
                                     ((np.int64(m_28170) * np.int64(computed_group_sizze_32832)),),
                                     (np.int64(computed_group_sizze_32832),))
          if synchronous:
            sync(self)
        self.failure_is_an_option = np.int32(1)
        defunc_0_f_res_mem_42558 = mem_42508
        defunc_0_f_res_mem_42559 = mem_42512
        defunc_0_f_res_mem_42560 = mem_42515
        defunc_0_f_res_mem_42561 = mem_42518
      else:
        segmap_usable_groups_33382 = sdiv_up64(m_28170,
                                               segmap_group_sizze_33381)
        mem_42522 = opencl_alloc(self, bytes_42232, "mem_42522")
        if ((1 * (np.int64(segmap_usable_groups_33382) * np.int64(segmap_group_sizze_33381))) != 0):
          self.mainDetailedzisegmap_33372_var.set_args(self.global_failure,
                                                       np.int64(m_28170),
                                                       defunc_4_map_res_mem_42265,
                                                       defunc_3_map_res_mem_42345,
                                                       mem_42522)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_33372_var,
                                     ((np.int64(segmap_usable_groups_33382) * np.int64(segmap_group_sizze_33381)),),
                                     (np.int64(segmap_group_sizze_33381),))
          if synchronous:
            sync(self)
        mem_42527 = opencl_alloc(self, bytes_42393, "mem_42527")
        if slt64(np.int64(0), (m_28170 * iota32_arg_28630)):
          stage1_max_num_groups_44047 = self.max_group_size
          stage1_num_groups_44048 = smin64(stage1_max_num_groups_44047,
                                           num_groups_33390)
          num_threads_44049 = sext_i64_i32((stage1_num_groups_44048 * segscan_group_sizze_33389))
          if ((1 * (np.int64(stage1_num_groups_44048) * np.int64(segscan_group_sizze_33389))) != 0):
            self.mainDetailedziscan_stage1_33341_var.set_args(self.global_failure,
                                                              self.failure_is_an_option,
                                                              self.global_failure_args,
                                                              cl.LocalMemory(np.int64(smax64(np.int64(1),
                                                                                             (np.int64(4) * segscan_group_sizze_33389)))),
                                                              np.int64(N_28169),
                                                              np.int64(m_28170),
                                                              np.int64(iota32_arg_28630),
                                                              np.int32(num_threads_44049),
                                                              defunc_4_map_res_mem_42266,
                                                              defunc_3_map_res_mem_42344,
                                                              defunc_3_map_res_mem_42345,
                                                              defunc_0_f_res_mem_42383,
                                                              mem_42522,
                                                              mem_42527)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedziscan_stage1_33341_var,
                                       ((np.int64(stage1_num_groups_44048) * np.int64(segscan_group_sizze_33389)),),
                                       (np.int64(segscan_group_sizze_33389),))
            if synchronous:
              sync(self)
          self.failure_is_an_option = np.int32(1)
          if ((1 * (np.int64(np.int64(1)) * np.int64(stage1_num_groups_44048))) != 0):
            self.mainDetailedziscan_stage2_33341_var.set_args(self.global_failure,
                                                              cl.LocalMemory(np.int64(smax64(np.int64(1),
                                                                                             (np.int64(4) * stage1_num_groups_44048)))),
                                                              np.int64(m_28170),
                                                              np.int64(iota32_arg_28630),
                                                              np.int64(stage1_num_groups_44048),
                                                              np.int32(num_threads_44049),
                                                              mem_42527)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedziscan_stage2_33341_var,
                                       ((np.int64(np.int64(1)) * np.int64(stage1_num_groups_44048)),),
                                       (np.int64(stage1_num_groups_44048),))
            if synchronous:
              sync(self)
          required_groups_44091 = sext_i64_i32(sdiv_up64((m_28170 * iota32_arg_28630),
                                                         segscan_group_sizze_33389))
          if ((1 * (np.int64(num_groups_33390) * np.int64(segscan_group_sizze_33389))) != 0):
            self.mainDetailedziscan_stage3_33341_var.set_args(self.global_failure,
                                                              np.int64(m_28170),
                                                              np.int64(iota32_arg_28630),
                                                              np.int64(num_groups_33390),
                                                              np.int32(num_threads_44049),
                                                              np.int32(required_groups_44091),
                                                              mem_42527)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedziscan_stage3_33341_var,
                                       ((np.int64(num_groups_33390) * np.int64(segscan_group_sizze_33389)),),
                                       (np.int64(segscan_group_sizze_33389),))
            if synchronous:
              sync(self)
        segmap_usable_groups_33424 = sdiv_up64(m_28170,
                                               segmap_group_sizze_33423)
        mem_42531 = opencl_alloc(self, bytes_42232, "mem_42531")
        if ((1 * (np.int64(segmap_usable_groups_33424) * np.int64(segmap_group_sizze_33423))) != 0):
          self.mainDetailedzisegmap_33322_var.set_args(self.global_failure,
                                                       np.int64(m_28170),
                                                       defunc_3_map_res_mem_42345,
                                                       defunc_3_map_res_mem_42346,
                                                       mem_42531)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_33322_var,
                                     ((np.int64(segmap_usable_groups_33424) * np.int64(segmap_group_sizze_33423)),),
                                     (np.int64(segmap_group_sizze_33423),))
          if synchronous:
            sync(self)
        mem_42534 = opencl_alloc(self, bytes_41657, "mem_42534")
        mem_42537 = opencl_alloc(self, bytes_42232, "mem_42537")
        mem_42540 = opencl_alloc(self, bytes_42232, "mem_42540")
        mem_42544 = opencl_alloc(self, bytes_42562, "mem_42544")
        if slt64((iota32_arg_28600 * np.int64(2)), segred_group_sizze_33434):
          segment_sizze_nonzzero_44111 = smax64(np.int64(1), iota32_arg_28600)
          num_threads_44112 = (num_groups_33435 * segred_group_sizze_33434)
          if ((1 * (np.int64(num_groups_33435) * np.int64(segred_group_sizze_33434))) != 0):
            self.mainDetailedzisegred_small_33290_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_33434))),
                                                               cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_33434))),
                                                               cl.LocalMemory(np.int64(segred_group_sizze_33434)),
                                                               np.int64(m_28170),
                                                               np.int64(iota32_arg_28600),
                                                               np.int64(iota32_arg_28630),
                                                               np.int64(num_groups_33435),
                                                               np.int64(segment_sizze_nonzzero_44111),
                                                               mem_42387,
                                                               mem_42522,
                                                               mem_42527,
                                                               mem_42531,
                                                               mem_42534,
                                                               mem_42537,
                                                               mem_42540,
                                                               mem_42544)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_small_33290_var,
                                       ((np.int64(num_groups_33435) * np.int64(segred_group_sizze_33434)),),
                                       (np.int64(segred_group_sizze_33434),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_44149 = sdiv_up64(num_groups_33435,
                                               smax64(np.int64(1), m_28170))
          elements_per_thread_44150 = sdiv_up64(iota32_arg_28600,
                                                (segred_group_sizze_33434 * groups_per_segment_44149))
          virt_num_groups_44151 = (groups_per_segment_44149 * m_28170)
          num_threads_44152 = (num_groups_33435 * segred_group_sizze_33434)
          threads_per_segment_44153 = (groups_per_segment_44149 * segred_group_sizze_33434)
          segred_tmp_mem_44154 = opencl_alloc(self, virt_num_groups_44151,
                                              "segred_tmp_mem_44154")
          segred_tmp_mem_44156 = opencl_alloc(self,
                                              (np.int64(4) * virt_num_groups_44151),
                                              "segred_tmp_mem_44156")
          segred_tmp_mem_44158 = opencl_alloc(self,
                                              (np.int64(4) * virt_num_groups_44151),
                                              "segred_tmp_mem_44158")
          mainDetailedzicounter_mem_44160 = self.mainDetailedzicounter_mem_44160
          if ((1 * (np.int64(num_groups_33435) * np.int64(segred_group_sizze_33434))) != 0):
            self.mainDetailedzisegred_large_33290_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.int64(np.int32(1))),
                                                               cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_33434))),
                                                               cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_33434))),
                                                               cl.LocalMemory(np.int64(segred_group_sizze_33434)),
                                                               np.int64(m_28170),
                                                               np.int64(iota32_arg_28600),
                                                               np.int64(iota32_arg_28630),
                                                               np.int64(num_groups_33435),
                                                               np.int64(groups_per_segment_44149),
                                                               np.int64(elements_per_thread_44150),
                                                               np.int64(virt_num_groups_44151),
                                                               mem_42387,
                                                               mem_42522,
                                                               mem_42527,
                                                               mem_42531,
                                                               mem_42534,
                                                               mem_42537,
                                                               mem_42540,
                                                               mem_42544,
                                                               segred_tmp_mem_44154,
                                                               segred_tmp_mem_44156,
                                                               segred_tmp_mem_44158,
                                                               mainDetailedzicounter_mem_44160)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_large_33290_var,
                                       ((np.int64(num_groups_33435) * np.int64(segred_group_sizze_33434)),),
                                       (np.int64(segred_group_sizze_33434),))
            if synchronous:
              sync(self)
        mem_42527 = None
        mem_42531 = None
        segmap_usable_groups_33472 = sdiv_up64(m_28170,
                                               segmap_group_sizze_33471)
        mem_42548 = opencl_alloc(self, bytes_42232, "mem_42548")
        mem_42551 = opencl_alloc(self, bytes_42232, "mem_42551")
        if ((1 * (np.int64(segmap_usable_groups_33472) * np.int64(segmap_group_sizze_33471))) != 0):
          self.mainDetailedzisegmap_33246_var.set_args(self.global_failure,
                                                       self.failure_is_an_option,
                                                       self.global_failure_args,
                                                       np.int64(N_28169),
                                                       np.int64(m_28170),
                                                       np.int32(n_28173),
                                                       defunc_4_map_res_mem_42267,
                                                       defunc_3_map_res_mem_42345,
                                                       mem_42522, mem_42534,
                                                       mem_42537, mem_42540,
                                                       mem_42548, mem_42551)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_33246_var,
                                     ((np.int64(segmap_usable_groups_33472) * np.int64(segmap_group_sizze_33471)),),
                                     (np.int64(segmap_group_sizze_33471),))
          if synchronous:
            sync(self)
        self.failure_is_an_option = np.int32(1)
        mem_42534 = None
        mem_42537 = None
        mem_42540 = None
        mem_42555 = opencl_alloc(self, bytes_42393, "mem_42555")
        self.futhark_builtinzhreplicate_f32(mem_42555,
                                            (m_28170 * iota32_arg_28630),
                                            np.nan)
        segmap_usable_groups_33518 = sdiv_up64(nest_sizze_32706,
                                               segmap_group_sizze_33517)
        if ((1 * (np.int64(segmap_usable_groups_33518) * np.int64(segmap_group_sizze_33517))) != 0):
          self.mainDetailedzisegmap_33196_var.set_args(self.global_failure,
                                                       self.failure_is_an_option,
                                                       self.global_failure_args,
                                                       np.int64(N_28169),
                                                       np.int64(m_28170),
                                                       np.int32(n_28173),
                                                       np.int64(iota32_arg_28600),
                                                       np.int64(iota32_arg_28630),
                                                       defunc_4_map_res_mem_42267,
                                                       defunc_3_map_res_mem_42345,
                                                       mem_42522, mem_42544,
                                                       mem_42555)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_33196_var,
                                     ((np.int64(segmap_usable_groups_33518) * np.int64(segmap_group_sizze_33517)),),
                                     (np.int64(segmap_group_sizze_33517),))
          if synchronous:
            sync(self)
        self.failure_is_an_option = np.int32(1)
        mem_42522 = None
        defunc_0_f_res_mem_42558 = mem_42555
        defunc_0_f_res_mem_42559 = mem_42544
        defunc_0_f_res_mem_42560 = mem_42548
        defunc_0_f_res_mem_42561 = mem_42551
      mem_42575 = opencl_alloc(self, bytes_42562, "mem_42575")
      if (((m_28170 * iota32_arg_28600) * np.int64(4)) != 0):
        cl.enqueue_copy(self.queue, mem_42575, defunc_0_f_res_mem_42558,
                        dest_offset=np.int64(np.int64(0)),
                        src_offset=np.int64(np.int64(0)),
                        byte_count=np.int64(((m_28170 * iota32_arg_28600) * np.int64(4))))
      if synchronous:
        sync(self)
      defunc_0_f_res_mem_42558 = None
      defunc_0_f_res_mem_42577 = mem_42575
      defunc_0_f_res_mem_42578 = defunc_0_f_res_mem_42559
      defunc_0_f_res_mem_42579 = defunc_0_f_res_mem_42560
      defunc_0_f_res_mem_42580 = defunc_0_f_res_mem_42561
    defunc_4_map_res_mem_42267 = None
    defunc_3_map_res_mem_42344 = None
    out_arrsizze_42878 = iota32_arg_28600
    out_arrsizze_42880 = iota32_arg_28600
    out_arrsizze_42882 = iota32_arg_28600
    out_mem_42873 = defunc_0_f_res_mem_42383
    out_mem_42874 = defunc_4_map_res_mem_42265
    out_mem_42875 = defunc_3_map_res_mem_42345
    out_mem_42876 = defunc_3_map_res_mem_42346
    out_mem_42877 = defunc_0_f_res_mem_42577
    out_mem_42879 = defunc_0_f_res_mem_42578
    out_mem_42881 = mem_42387
    out_mem_42883 = defunc_0_f_res_mem_42579
    out_mem_42884 = defunc_0_f_res_mem_42580
    out_mem_42885 = mem_42433
    out_mem_42886 = defunc_4_map_res_mem_42266
    out_mem_42887 = defunc_3_map_res_mem_42216
    return (out_mem_42873, out_mem_42874, out_mem_42875, out_mem_42876,
            out_mem_42877, out_arrsizze_42878, out_mem_42879,
            out_arrsizze_42880, out_mem_42881, out_arrsizze_42882,
            out_mem_42883, out_mem_42884, out_mem_42885, out_mem_42886,
            out_mem_42887)
  def futhark_entry_mainMagnitude(self, mappingindices_mem_41420,
                                  images_mem_41421, N_28874, m_28875,
                                  trend_28876, k_28877, n_28878, freq_28879,
                                  hfrac_28880, lam_28881):
    i32_res_28884 = sext_i32_i64(n_28878)
    x_28885 = (np.int32(2) * k_28877)
    k2p2_28886 = (np.int32(2) + x_28885)
    cond_28887 = slt32(np.int32(0), trend_28876)
    if cond_28887:
      k2p2zq_28888 = k2p2_28886
    else:
      k2p2zq_f_res_28889 = (k2p2_28886 - np.int32(1))
      k2p2zq_28888 = k2p2zq_f_res_28889
    i32_res_28890 = sext_i32_i64(k2p2zq_28888)
    binop_x_41424 = (N_28874 * i32_res_28890)
    binop_y_41425 = (np.int64(4) * binop_x_41424)
    bytes_41423 = smax64(np.int64(0), binop_y_41425)
    if cond_28887:
      bounds_invalid_upwards_28892 = slt64(i32_res_28890, np.int64(0))
      valid_28893 = not(bounds_invalid_upwards_28892)
      range_valid_c_28894 = True
      assert valid_28893, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:90:3-10\n   #1  helpers.fut:2:3-8\n   #2  helpers.fut:37:10-20\n   #3  bfastfinal.fut:29:17-66\n   #4  bfastfinal.fut:181:5-58\n   #5  bfastfinal.fut:176:1-182:37\n" % ("Range ",
                                                                                                                                                                                                                                                                    np.int64(0),
                                                                                                                                                                                                                                                                    "..",
                                                                                                                                                                                                                                                                    np.int64(1),
                                                                                                                                                                                                                                                                    "..<",
                                                                                                                                                                                                                                                                    i32_res_28890,
                                                                                                                                                                                                                                                                    " is invalid."))
      segmap_group_sizze_33627 = self.sizes["mainMagnitude.segmap_group_size_33560"]
      segmap_usable_groups_33628 = sdiv_up64(binop_x_41424,
                                             segmap_group_sizze_33627)
      mem_41426 = opencl_alloc(self, bytes_41423, "mem_41426")
      if ((1 * (np.int64(segmap_usable_groups_33628) * np.int64(segmap_group_sizze_33627))) != 0):
        self.mainMagnitudezisegmap_33557_var.set_args(self.global_failure,
                                                      np.int64(N_28874),
                                                      np.float32(freq_28879),
                                                      np.int64(i32_res_28890),
                                                      mappingindices_mem_41420,
                                                      mem_41426)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainMagnitudezisegmap_33557_var,
                                   ((np.int64(segmap_usable_groups_33628) * np.int64(segmap_group_sizze_33627)),),
                                   (np.int64(segmap_group_sizze_33627),))
        if synchronous:
          sync(self)
      binop_p_mem_41432 = mem_41426
    else:
      bounds_invalid_upwards_28918 = slt64(i32_res_28890, np.int64(0))
      valid_28919 = not(bounds_invalid_upwards_28918)
      range_valid_c_28920 = True
      assert valid_28919, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:90:3-10\n   #1  helpers.fut:2:3-8\n   #2  helpers.fut:50:10-22\n   #3  bfastfinal.fut:30:17-64\n   #4  bfastfinal.fut:181:5-58\n   #5  bfastfinal.fut:176:1-182:37\n" % ("Range ",
                                                                                                                                                                                                                                                                    np.int64(0),
                                                                                                                                                                                                                                                                    "..",
                                                                                                                                                                                                                                                                    np.int64(1),
                                                                                                                                                                                                                                                                    "..<",
                                                                                                                                                                                                                                                                    i32_res_28890,
                                                                                                                                                                                                                                                                    " is invalid."))
      segmap_group_sizze_33727 = self.sizes["mainMagnitude.segmap_group_size_33664"]
      segmap_usable_groups_33728 = sdiv_up64(binop_x_41424,
                                             segmap_group_sizze_33727)
      mem_41431 = opencl_alloc(self, bytes_41423, "mem_41431")
      if ((1 * (np.int64(segmap_usable_groups_33728) * np.int64(segmap_group_sizze_33727))) != 0):
        self.mainMagnitudezisegmap_33661_var.set_args(self.global_failure,
                                                      np.int64(N_28874),
                                                      np.float32(freq_28879),
                                                      np.int64(i32_res_28890),
                                                      mappingindices_mem_41420,
                                                      mem_41431)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainMagnitudezisegmap_33661_var,
                                   ((np.int64(segmap_usable_groups_33728) * np.int64(segmap_group_sizze_33727)),),
                                   (np.int64(segmap_group_sizze_33727),))
        if synchronous:
          sync(self)
      binop_p_mem_41432 = mem_41431
    x_28943 = (N_28874 * N_28874)
    y_28944 = (np.int64(2) * N_28874)
    x_28945 = (x_28943 + y_28944)
    x_28946 = (np.int64(1) + x_28945)
    y_28947 = (np.int64(1) + N_28874)
    zzero_28948 = (y_28947 == np.int64(0))
    nonzzero_28949 = not(zzero_28948)
    nonzzero_cert_28950 = True
    assert nonzzero_28949, ("Error: %s\n\nBacktrace:\n-> #0  bfastfinal.fut:35:32-60\n   #1  bfastfinal.fut:181:5-58\n   #2  bfastfinal.fut:176:1-182:37\n" % ("division by zero",))
    x_28951 = sdiv64(x_28946, y_28947)
    x_28952 = (x_28951 - N_28874)
    binop_p_28953 = (x_28952 - np.int64(1))
    defunc_0_f_res_28954 = sext_i64_i32(binop_p_28953)
    i32_res_28955 = sitofp_i32_f32(defunc_0_f_res_28954)
    segmap_group_sizze_33778 = self.sizes["mainMagnitude.segmap_group_size_33760"]
    segmap_usable_groups_33779 = sdiv_up64(binop_x_41424,
                                           segmap_group_sizze_33778)
    mem_41435 = opencl_alloc(self, binop_y_41425, "mem_41435")
    self.futhark_builtinzhgpu_map_transpose_f32(mem_41435, np.int64(0),
                                                binop_p_mem_41432, np.int64(0),
                                                np.int64(1), N_28874,
                                                i32_res_28890)
    mem_41440 = opencl_alloc(self, bytes_41423, "mem_41440")
    if ((1 * (np.int64(segmap_usable_groups_33779) * np.int64(segmap_group_sizze_33778))) != 0):
      self.mainMagnitudezisegmap_33757_var.set_args(self.global_failure,
                                                    np.int64(N_28874),
                                                    np.int64(i32_res_28890),
                                                    np.float32(i32_res_28955),
                                                    mem_41435, mem_41440)
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.mainMagnitudezisegmap_33757_var,
                                 ((np.int64(segmap_usable_groups_33779) * np.int64(segmap_group_sizze_33778)),),
                                 (np.int64(segmap_group_sizze_33778),))
      if synchronous:
        sync(self)
    eq_x_y_28963 = (np.int64(0) == i32_res_28890)
    p_and_eq_x_y_28964 = (cond_28887 and eq_x_y_28963)
    not_p_28965 = not(cond_28887)
    p_and_eq_x_y_28966 = (eq_x_y_28963 and not_p_28965)
    empty_slice_28967 = (p_and_eq_x_y_28964 or p_and_eq_x_y_28966)
    m_28968 = (i32_res_28890 - np.int64(1))
    zzero_leq_i_p_m_t_s_28969 = sle64(np.int64(0), m_28968)
    i_p_m_t_s_leq_w_28970 = slt64(m_28968, i32_res_28890)
    i_lte_j_28971 = sle64(np.int64(0), i32_res_28890)
    y_28972 = (zzero_leq_i_p_m_t_s_28969 and i_p_m_t_s_leq_w_28970)
    y_28973 = (i_lte_j_28971 and y_28972)
    ok_or_empty_28974 = (empty_slice_28967 or y_28973)
    empty_slice_28975 = (i32_res_28884 == np.int64(0))
    m_28976 = (i32_res_28884 - np.int64(1))
    zzero_leq_i_p_m_t_s_28977 = sle64(np.int64(0), m_28976)
    i_p_m_t_s_leq_w_28978 = slt64(m_28976, N_28874)
    i_lte_j_28979 = sle64(np.int64(0), i32_res_28884)
    y_28980 = (zzero_leq_i_p_m_t_s_28977 and i_p_m_t_s_leq_w_28978)
    y_28981 = (i_lte_j_28979 and y_28980)
    ok_or_empty_28982 = (empty_slice_28975 or y_28981)
    index_ok_28983 = (ok_or_empty_28974 and ok_or_empty_28982)
    index_certs_28984 = True
    assert index_ok_28983, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:38:13-21\n   #1  bfastfinal.fut:181:5-58\n   #2  bfastfinal.fut:176:1-182:37\n" % ("Index [",
                                                                                                                                                                               np.int64(0),
                                                                                                                                                                               ":, :",
                                                                                                                                                                               i32_res_28884,
                                                                                                                                                                               "] out of bounds for array of shape [",
                                                                                                                                                                               i32_res_28890,
                                                                                                                                                                               "][",
                                                                                                                                                                               N_28874,
                                                                                                                                                                               "]."))
    index_certs_28986 = True
    assert index_ok_28983, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:39:13-22\n   #1  bfastfinal.fut:181:5-58\n   #2  bfastfinal.fut:176:1-182:37\n" % ("Index [:",
                                                                                                                                                                               i32_res_28884,
                                                                                                                                                                               ", ",
                                                                                                                                                                               np.int64(0),
                                                                                                                                                                               ":] out of bounds for array of shape [",
                                                                                                                                                                               N_28874,
                                                                                                                                                                               "][",
                                                                                                                                                                               i32_res_28890,
                                                                                                                                                                               "]."))
    empty_slice_28987 = (m_28875 == np.int64(0))
    m_28988 = (m_28875 - np.int64(1))
    zzero_leq_i_p_m_t_s_28989 = sle64(np.int64(0), m_28988)
    i_p_m_t_s_leq_w_28990 = slt64(m_28988, m_28875)
    i_lte_j_28991 = sle64(np.int64(0), m_28875)
    y_28992 = (zzero_leq_i_p_m_t_s_28989 and i_p_m_t_s_leq_w_28990)
    y_28993 = (i_lte_j_28991 and y_28992)
    ok_or_empty_28994 = (empty_slice_28987 or y_28993)
    index_ok_28995 = (ok_or_empty_28982 and ok_or_empty_28994)
    index_certs_28996 = True
    assert index_ok_28995, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:40:13-26\n   #1  bfastfinal.fut:181:5-58\n   #2  bfastfinal.fut:176:1-182:37\n" % ("Index [",
                                                                                                                                                                               np.int64(0),
                                                                                                                                                                               ":, :",
                                                                                                                                                                               i32_res_28884,
                                                                                                                                                                               "] out of bounds for array of shape [",
                                                                                                                                                                               m_28875,
                                                                                                                                                                               "][",
                                                                                                                                                                               N_28874,
                                                                                                                                                                               "]."))
    suff_outer_par_33785 = (self.sizes["mainMagnitude.suff_outer_par_0"] <= m_28875)
    segmap_group_sizze_33811 = self.sizes["mainMagnitude.segmap_group_size_33789"]
    max_num_groups_42907 = self.sizes["mainMagnitude.segmap_num_groups_33791"]
    num_groups_33812 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_28875,
                                                            segmap_group_sizze_33811),
                                                  sext_i32_i64(max_num_groups_42907))))
    nest_sizze_33987 = (m_28875 * i32_res_28890)
    segmap_group_sizze_33988 = self.sizes["mainMagnitude.segmap_group_size_33836"]
    max_num_groups_42908 = self.sizes["mainMagnitude.segmap_num_groups_33838"]
    num_groups_33989 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_33987,
                                                            segmap_group_sizze_33988),
                                                  sext_i32_i64(max_num_groups_42908))))
    suff_outer_par_33993 = (self.sizes["mainMagnitude.suff_outer_par_1"] <= nest_sizze_33987)
    y_34017 = (i32_res_28890 * i32_res_28890)
    comparatee_34018 = (m_28875 * y_34017)
    suff_outer_par_34019 = (self.sizes["mainMagnitude.suff_outer_par_2"] <= comparatee_34018)
    nest_sizze_34039 = (i32_res_28884 * comparatee_34018)
    segred_group_sizze_34040 = self.sizes["mainMagnitude.segred_group_size_33896"]
    max_num_groups_42909 = self.sizes["mainMagnitude.segred_num_groups_33898"]
    num_groups_34041 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_34039,
                                                            segred_group_sizze_34040),
                                                  sext_i32_i64(max_num_groups_42909))))
    Tx_39572 = self.sizes["mainMagnitude.Tx_39570"]
    Ty_39573 = self.sizes["mainMagnitude.Ty_39571"]
    Ty_39574 = smin64(i32_res_28890, Ty_39573)
    Tx_39575 = smin64(i32_res_28890, Tx_39572)
    gridDim_zz_39578 = sdiv_up64(m_28875, np.int64(30))
    group_sizze_tile3d_39581 = (Ty_39574 * Tx_39575)
    binop_x_41442 = (N_28874 * m_28875)
    bytes_41441 = (np.int64(4) * binop_x_41442)
    bytes_41489 = (np.int64(4) * comparatee_34018)
    binop_y_41447 = (np.int64(4) * y_34017)
    bytes_41445 = smax64(np.int64(0), binop_y_41447)
    binop_x_41596 = (i32_res_28890 * nest_sizze_33987)
    binop_y_41597 = (np.int64(4) * binop_x_41596)
    bytes_41594 = smax64(np.int64(0), binop_y_41597)
    binop_y_41495 = (np.int64(4) * i32_res_28890)
    bytes_41494 = smax64(np.int64(0), binop_y_41495)
    binop_x_41524 = (np.int64(30) * group_sizze_tile3d_39581)
    bytes_41522 = (np.int64(4) * binop_x_41524)
    binop_x_42581 = (np.int64(4) * Ty_39574)
    binop_x_42582 = (Tx_39575 * binop_x_42581)
    sizze_42583 = (np.int64(30) * binop_x_42582)
    num_threads_42780 = (segmap_group_sizze_33811 * num_groups_33812)
    total_sizze_42781 = (bytes_41445 * num_threads_42780)
    num_threads_42782 = (segmap_group_sizze_33988 * num_groups_33989)
    total_sizze_42783 = (bytes_41494 * num_threads_42782)
    local_memory_capacity_43057 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_43057)) and suff_outer_par_33785):
      mem_41443 = opencl_alloc(self, bytes_41441, "mem_41443")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_41443, np.int64(0),
                                                  images_mem_41421, np.int64(0),
                                                  np.int64(1), N_28874, m_28875)
      mem_41492 = opencl_alloc(self, bytes_41489, "mem_41492")
      color_42657 = opencl_alloc(self, total_sizze_42781, "color_42657")
      if ((1 * (np.int64(num_groups_33812) * np.int64(segmap_group_sizze_33811))) != 0):
        self.mainMagnitudezisegmap_33787_var.set_args(self.global_failure,
                                                      np.int64(N_28874),
                                                      np.int64(m_28875),
                                                      np.int32(n_28878),
                                                      np.int32(k2p2zq_28888),
                                                      np.int64(i32_res_28890),
                                                      np.int64(num_groups_33812),
                                                      np.int64(num_threads_42780),
                                                      binop_p_mem_41432,
                                                      mem_41440, mem_41443,
                                                      mem_41492, color_42657)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainMagnitudezisegmap_33787_var,
                                   ((np.int64(num_groups_33812) * np.int64(segmap_group_sizze_33811)),),
                                   (np.int64(segmap_group_sizze_33811),))
        if synchronous:
          sync(self)
      mem_41443 = None
      color_42657 = None
      mem_41598 = opencl_alloc(self, bytes_41594, "mem_41598")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_41598, np.int64(0),
                                                  mem_41492, np.int64(0),
                                                  np.int64(1), m_28875,
                                                  (i32_res_28890 * i32_res_28890))
      mem_41492 = None
      defunc_3_map_res_mem_41600 = mem_41598
    else:
      local_memory_capacity_43056 = self.max_local_memory
      if (sle64(np.int64(0),
                sext_i32_i64(local_memory_capacity_43056)) and suff_outer_par_33993):
        mem_41512 = opencl_alloc(self, binop_y_41597, "mem_41512")
        color_42658 = opencl_alloc(self, total_sizze_42783, "color_42658")
        if ((1 * (np.int64(num_groups_33989) * np.int64(segmap_group_sizze_33988))) != 0):
          self.mainMagnitudezisegmap_33833_var.set_args(self.global_failure,
                                                        np.int64(N_28874),
                                                        np.int64(m_28875),
                                                        np.int32(n_28878),
                                                        np.int32(k2p2zq_28888),
                                                        np.int64(i32_res_28890),
                                                        np.int64(num_groups_33989),
                                                        np.int64(num_threads_42782),
                                                        images_mem_41421,
                                                        mem_41435, mem_41440,
                                                        mem_41512, color_42658)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainMagnitudezisegmap_33833_var,
                                     ((np.int64(num_groups_33989) * np.int64(segmap_group_sizze_33988)),),
                                     (np.int64(segmap_group_sizze_33988),))
          if synchronous:
            sync(self)
        color_42658 = None
        mem_41591 = opencl_alloc(self, bytes_41594, "mem_41591")
        self.futhark_builtinzhgpu_map_transpose_f32(mem_41591, np.int64(0),
                                                    mem_41512, np.int64(0),
                                                    np.int64(1),
                                                    (m_28875 * i32_res_28890),
                                                    i32_res_28890)
        mem_41512 = None
        defunc_3_map_res_mem_41593 = mem_41591
      else:
        local_memory_capacity_43055 = self.max_local_memory
        if (sle64(np.int64(120),
                  sext_i32_i64(local_memory_capacity_43055)) and suff_outer_par_34019):
          mem_41515 = opencl_alloc(self, bytes_41441, "mem_41515")
          self.futhark_builtinzhgpu_map_transpose_f32(mem_41515, np.int64(0),
                                                      images_mem_41421,
                                                      np.int64(0), np.int64(1),
                                                      N_28874, m_28875)
          gridDim_x_39576 = sdiv_up64(i32_res_28890, Tx_39575)
          gridDim_y_39577 = sdiv_up64(i32_res_28890, Ty_39574)
          binop_x_39579 = (gridDim_y_39577 * gridDim_zz_39578)
          grid_sizze_tile3d_39580 = (gridDim_x_39576 * binop_x_39579)
          count_shmem_39582 = sdiv_up64(np.int64(30), group_sizze_tile3d_39581)
          mem_41576 = opencl_alloc(self, bytes_41594, "mem_41576")
          if ((1 * (np.int64(grid_sizze_tile3d_39580) * np.int64(group_sizze_tile3d_39581))) != 0):
            self.mainMagnitudezisegmap_intragroup_39586_var.set_args(self.global_failure,
                                                                     cl.LocalMemory(np.int64(np.int64(120))),
                                                                     np.int64(m_28875),
                                                                     np.int32(n_28878),
                                                                     np.int64(i32_res_28890),
                                                                     np.int64(Ty_39574),
                                                                     np.int64(Tx_39575),
                                                                     np.int64(gridDim_x_39576),
                                                                     np.int64(gridDim_y_39577),
                                                                     np.int64(gridDim_zz_39578),
                                                                     np.int64(group_sizze_tile3d_39581),
                                                                     np.int64(count_shmem_39582),
                                                                     mem_41435,
                                                                     mem_41440,
                                                                     mem_41515,
                                                                     mem_41576)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainMagnitudezisegmap_intragroup_39586_var,
                                       ((np.int64(grid_sizze_tile3d_39580) * np.int64(group_sizze_tile3d_39581)),),
                                       (np.int64(group_sizze_tile3d_39581),))
            if synchronous:
              sync(self)
          mem_41515 = None
          defunc_3_map_res_mem_41586 = mem_41576
        else:
          mem_41579 = opencl_alloc(self, binop_y_41425, "mem_41579")
          self.futhark_builtinzhgpu_map_transpose_f32(mem_41579, np.int64(0),
                                                      mem_41440, np.int64(0),
                                                      np.int64(1),
                                                      i32_res_28890, N_28874)
          mem_41585 = opencl_alloc(self, bytes_41594, "mem_41585")
          if slt64((i32_res_28884 * np.int64(2)), segred_group_sizze_34040):
            segment_sizze_nonzzero_42983 = smax64(np.int64(1), i32_res_28884)
            num_threads_42984 = (num_groups_34041 * segred_group_sizze_34040)
            if ((1 * (np.int64(num_groups_34041) * np.int64(segred_group_sizze_34040))) != 0):
              self.mainMagnitudezisegred_small_33902_var.set_args(self.global_failure,
                                                                  cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_34040))),
                                                                  np.int64(N_28874),
                                                                  np.int64(m_28875),
                                                                  np.int64(i32_res_28884),
                                                                  np.int64(i32_res_28890),
                                                                  np.int64(num_groups_34041),
                                                                  np.int64(segment_sizze_nonzzero_42983),
                                                                  images_mem_41421,
                                                                  binop_p_mem_41432,
                                                                  mem_41579,
                                                                  mem_41585)
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.mainMagnitudezisegred_small_33902_var,
                                         ((np.int64(num_groups_34041) * np.int64(segred_group_sizze_34040)),),
                                         (np.int64(segred_group_sizze_34040),))
              if synchronous:
                sync(self)
          else:
            groups_per_segment_43010 = sdiv_up64(num_groups_34041,
                                                 smax64(np.int64(1),
                                                        ((m_28875 * i32_res_28890) * i32_res_28890)))
            elements_per_thread_43011 = sdiv_up64(i32_res_28884,
                                                  (segred_group_sizze_34040 * groups_per_segment_43010))
            virt_num_groups_43012 = (groups_per_segment_43010 * ((m_28875 * i32_res_28890) * i32_res_28890))
            num_threads_43013 = (num_groups_34041 * segred_group_sizze_34040)
            threads_per_segment_43014 = (groups_per_segment_43010 * segred_group_sizze_34040)
            segred_tmp_mem_43015 = opencl_alloc(self,
                                                (np.int64(4) * virt_num_groups_43012),
                                                "segred_tmp_mem_43015")
            mainMagnitudezicounter_mem_43017 = self.mainMagnitudezicounter_mem_43017
            if ((1 * (np.int64(num_groups_34041) * np.int64(segred_group_sizze_34040))) != 0):
              self.mainMagnitudezisegred_large_33902_var.set_args(self.global_failure,
                                                                  cl.LocalMemory(np.int64(np.int32(1))),
                                                                  cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_34040))),
                                                                  np.int64(N_28874),
                                                                  np.int64(m_28875),
                                                                  np.int64(i32_res_28884),
                                                                  np.int64(i32_res_28890),
                                                                  np.int64(num_groups_34041),
                                                                  np.int64(groups_per_segment_43010),
                                                                  np.int64(elements_per_thread_43011),
                                                                  np.int64(virt_num_groups_43012),
                                                                  np.int64(threads_per_segment_43014),
                                                                  images_mem_41421,
                                                                  binop_p_mem_41432,
                                                                  mem_41579,
                                                                  mem_41585,
                                                                  segred_tmp_mem_43015,
                                                                  mainMagnitudezicounter_mem_43017)
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.mainMagnitudezisegred_large_33902_var,
                                         ((np.int64(num_groups_34041) * np.int64(segred_group_sizze_34040)),),
                                         (np.int64(segred_group_sizze_34040),))
              if synchronous:
                sync(self)
          mem_41579 = None
          defunc_3_map_res_mem_41586 = mem_41585
        defunc_3_map_res_mem_41593 = defunc_3_map_res_mem_41586
      defunc_3_map_res_mem_41600 = defunc_3_map_res_mem_41593
    m_29018 = (np.int32(2) * k2p2zq_28888)
    x_29019 = (np.int64(2) * i32_res_28890)
    nm_29020 = (i32_res_28890 * x_29019)
    bounds_invalid_upwards_29021 = slt64(nm_29020, np.int64(0))
    valid_29022 = not(bounds_invalid_upwards_29021)
    range_valid_c_29023 = True
    assert valid_29022, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:90:3-10\n   #1  helpers.fut:2:3-8\n   #2  helpers.fut:79:21-29\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:181:5-58\n   #5  bfastfinal.fut:176:1-182:37\n" % ("Range ",
                                                                                                                                                                                                                                                                  np.int64(0),
                                                                                                                                                                                                                                                                  "..",
                                                                                                                                                                                                                                                                  np.int64(1),
                                                                                                                                                                                                                                                                  "..<",
                                                                                                                                                                                                                                                                  nm_29020,
                                                                                                                                                                                                                                                                  " is invalid."))
    zzero_29028 = (m_29018 == np.int32(0))
    nonzzero_29029 = not(zzero_29028)
    nonzzero_cert_29030 = True
    assert nonzzero_29029, ("Error: %s\n\nBacktrace:\n-> #0  helpers.fut:74:41-47\n   #1  helpers.fut:74:14-79:30\n   #2  bfastfinal.fut:50:35-50\n   #3  bfastfinal.fut:181:5-58\n   #4  bfastfinal.fut:176:1-182:37\n" % ("division by zero",))
    loop_nonempty_29031 = slt32(np.int32(0), k2p2zq_28888)
    loop_not_taken_29032 = not(loop_nonempty_29031)
    protect_assert_disj_29033 = (nonzzero_29029 or loop_not_taken_29032)
    nonzzero_cert_29034 = True
    assert protect_assert_disj_29033, ("Error: %s\n\nBacktrace:\n-> #0  helpers.fut:60:43-49\n   #1  helpers.fut:60:16-66:44\n   #2  helpers.fut:80:16-34\n   #3  bfastfinal.fut:50:35-50\n   #4  bfastfinal.fut:181:5-58\n   #5  bfastfinal.fut:176:1-182:37\n" % ("division by zero",))
    i32_res_29035 = sext_i32_i64(m_29018)
    x_29036 = (i32_res_28890 * i32_res_29035)
    dim_ok_29037 = (x_29036 == nm_29020)
    dim_ok_cert_29038 = True
    assert dim_ok_29037, ("Error: %s\n\nBacktrace:\n-> #0  /prelude/array.fut:141:3-33\n   #1  helpers.fut:81:16-43\n   #2  bfastfinal.fut:50:35-50\n   #3  bfastfinal.fut:181:5-58\n   #4  bfastfinal.fut:176:1-182:37\n" % ("new shape has different number of elements than old shape",))
    empty_slice_29039 = (i32_res_28890 == np.int64(0))
    ok_or_empty_29040 = (y_28973 or empty_slice_29039)
    j_m_i_29041 = (x_29019 - i32_res_28890)
    empty_slice_29042 = (j_m_i_29041 == np.int64(0))
    m_29043 = (j_m_i_29041 - np.int64(1))
    i_p_m_t_s_29044 = (i32_res_28890 + m_29043)
    zzero_leq_i_p_m_t_s_29045 = sle64(np.int64(0), i_p_m_t_s_29044)
    i_p_m_t_s_leq_w_29046 = slt64(i_p_m_t_s_29044, i32_res_29035)
    i_lte_j_29047 = sle64(i32_res_28890, x_29019)
    y_29048 = (i_lte_j_28971 and i_p_m_t_s_leq_w_29046)
    y_29049 = (zzero_leq_i_p_m_t_s_29045 and y_29048)
    y_29050 = (i_lte_j_29047 and y_29049)
    forwards_ok_29051 = (i_lte_j_28971 and y_29050)
    ok_or_empty_29052 = (empty_slice_29042 or forwards_ok_29051)
    index_ok_29053 = (ok_or_empty_29040 and ok_or_empty_29052)
    index_certs_29054 = True
    assert index_ok_29053, ("Error: %s%d%s%d%s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  helpers.fut:83:8-30\n   #1  bfastfinal.fut:50:35-50\n   #2  bfastfinal.fut:181:5-58\n   #3  bfastfinal.fut:176:1-182:37\n" % ("Index [",
                                                                                                                                                                                                                   np.int64(0),
                                                                                                                                                                                                                   ":",
                                                                                                                                                                                                                   i32_res_28890,
                                                                                                                                                                                                                   ", ",
                                                                                                                                                                                                                   i32_res_28890,
                                                                                                                                                                                                                   ":",
                                                                                                                                                                                                                   x_29019,
                                                                                                                                                                                                                   "] out of bounds for array of shape [",
                                                                                                                                                                                                                   i32_res_28890,
                                                                                                                                                                                                                   "][",
                                                                                                                                                                                                                   i32_res_29035,
                                                                                                                                                                                                                   "]."))
    dim_match_29055 = (i32_res_28890 == j_m_i_29041)
    empty_or_match_cert_29056 = True
    assert dim_match_29055, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  helpers.fut:83:8-45\n   #1  bfastfinal.fut:50:35-50\n   #2  bfastfinal.fut:181:5-58\n   #3  bfastfinal.fut:176:1-182:37\n" % ("Value of (core language) shape (",
                                                                                                                                                                                                            i32_res_28890,
                                                                                                                                                                                                            ", ",
                                                                                                                                                                                                            j_m_i_29041,
                                                                                                                                                                                                            ") cannot match shape of type `[",
                                                                                                                                                                                                            i32_res_28890,
                                                                                                                                                                                                            "][",
                                                                                                                                                                                                            i32_res_28890,
                                                                                                                                                                                                            "]f32`."))
    max_group_sizze_34147 = self.max_group_size
    fits_34148 = sle64(nm_29020, max_group_sizze_34147)
    suff_intra_par_34146 = (self.sizes["mainMagnitude.suff_intra_par_3"] <= nm_29020)
    intra_suff_and_fits_34149 = (suff_intra_par_34146 and fits_34148)
    nest_sizze_34621 = (m_28875 * nm_29020)
    segmap_group_sizze_34622 = self.sizes["mainMagnitude.segmap_group_size_34568"]
    suff_intra_par_34659 = (self.sizes["mainMagnitude.suff_intra_par_4"] <= nm_29020)
    intra_suff_and_fits_34660 = (fits_34148 and suff_intra_par_34659)
    segmap_group_sizze_34713 = self.sizes["mainMagnitude.segmap_group_size_34479"]
    segmap_group_sizze_34726 = self.sizes["mainMagnitude.segmap_group_size_34380"]
    segmap_group_sizze_34776 = self.sizes["mainMagnitude.segmap_group_size_34360"]
    segmap_group_sizze_34786 = self.sizes["mainMagnitude.segmap_group_size_34240"]
    segmap_usable_groups_34714 = sdiv_up_safe64(m_28875,
                                                segmap_group_sizze_34713)
    segmap_usable_groups_34727 = sdiv_up_safe64(nest_sizze_34621,
                                                segmap_group_sizze_34726)
    segmap_usable_groups_34777 = sdiv_up_safe64(nest_sizze_34621,
                                                segmap_group_sizze_34776)
    binop_y_41604 = (np.int64(4) * nm_29020)
    bytes_41603 = smax64(np.int64(0), binop_y_41604)
    binop_y_41631 = (np.int64(4) * nest_sizze_34621)
    bytes_41629 = smax64(np.int64(0), binop_y_41631)
    bytes_41657 = smax64(np.int64(0), m_28875)
    local_memory_capacity_43143 = self.max_local_memory
    if (sle64(((bytes_41603 + srem64((np.int64(8) - srem64(bytes_41603,
                                                           np.int64(8))),
                                     np.int64(8))) + (bytes_41603 + srem64((np.int64(8) - srem64(bytes_41603,
                                                                                                 np.int64(8))),
                                                                           np.int64(8)))),
              sext_i32_i64(local_memory_capacity_43143)) and intra_suff_and_fits_34149):
      mem_41627 = opencl_alloc(self, bytes_41594, "mem_41627")
      if ((1 * (np.int64(m_28875) * np.int64(nm_29020))) != 0):
        self.mainMagnitudezisegmap_intragroup_34144_var.set_args(self.global_failure,
                                                                 self.failure_is_an_option,
                                                                 self.global_failure_args,
                                                                 cl.LocalMemory(np.int64(bytes_41603)),
                                                                 cl.LocalMemory(np.int64(bytes_41603)),
                                                                 np.int64(m_28875),
                                                                 np.int32(k2p2zq_28888),
                                                                 np.int64(i32_res_28890),
                                                                 np.int32(m_29018),
                                                                 np.int64(nm_29020),
                                                                 np.int64(i32_res_29035),
                                                                 defunc_3_map_res_mem_41600,
                                                                 mem_41627)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainMagnitudezisegmap_intragroup_34144_var,
                                   ((np.int64(m_28875) * np.int64(nm_29020)),),
                                   (np.int64(nm_29020),))
        if synchronous:
          sync(self)
      self.failure_is_an_option = np.int32(1)
      defunc_3_map_res_mem_41687 = mem_41627
    else:
      segmap_usable_groups_34623 = sdiv_up64(nest_sizze_34621,
                                             segmap_group_sizze_34622)
      mem_41632 = opencl_alloc(self, bytes_41629, "mem_41632")
      if ((1 * (np.int64(segmap_usable_groups_34623) * np.int64(segmap_group_sizze_34622))) != 0):
        self.mainMagnitudezisegmap_34565_var.set_args(self.global_failure,
                                                      self.failure_is_an_option,
                                                      self.global_failure_args,
                                                      np.int64(m_28875),
                                                      np.int32(k2p2zq_28888),
                                                      np.int64(i32_res_28890),
                                                      np.int32(m_29018),
                                                      np.int64(nm_29020),
                                                      defunc_3_map_res_mem_41600,
                                                      mem_41632)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainMagnitudezisegmap_34565_var,
                                   ((np.int64(segmap_usable_groups_34623) * np.int64(segmap_group_sizze_34622)),),
                                   (np.int64(segmap_group_sizze_34622),))
        if synchronous:
          sync(self)
      self.failure_is_an_option = np.int32(1)
      ctx_param_ext_41633 = m_28875
      ctx_param_ext_41634 = nm_29020
      ctx_param_ext_41635 = np.int64(0)
      ctx_param_ext_41636 = nm_29020
      ctx_param_ext_41637 = m_28875
      ctx_param_ext_41638 = np.int64(1)
      ctx_param_ext_41639 = nm_29020
      mem_param_41640 = mem_41632
      i_34647 = np.int32(0)
      one_44261 = np.int32(1)
      for counter_44260 in range(k2p2zq_28888):
        i32_res_34649 = sext_i32_i64(i_34647)
        x_34650 = sle64(np.int64(0), i32_res_34649)
        y_34651 = slt64(i32_res_34649, nm_29020)
        bounds_check_34652 = (x_34650 and y_34651)
        index_certs_34653 = True
        assert bounds_check_34652, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  helpers.fut:59:16-27\n   #1  helpers.fut:80:16-34\n   #2  bfastfinal.fut:50:35-50\n   #3  bfastfinal.fut:181:5-58\n   #4  bfastfinal.fut:176:1-182:37\n" % ("Index [",
                                                                                                                                                                                                                                         i32_res_34649,
                                                                                                                                                                                                                                         "] out of bounds for array of shape [",
                                                                                                                                                                                                                                         nm_29020,
                                                                                                                                                                                                                                         "]."))
        local_memory_capacity_43087 = self.max_local_memory
        if intra_suff_and_fits_34660:
          gauss_jordan_res_ixfn_41665 = m_28875
        else:
          gauss_jordan_res_ixfn_41665 = ctx_param_ext_41637
        local_memory_capacity_43088 = self.max_local_memory
        if intra_suff_and_fits_34660:
          gauss_jordan_res_ixfn_41666 = nm_29020
        else:
          gauss_jordan_res_ixfn_41666 = ctx_param_ext_41639
        local_memory_capacity_43089 = self.max_local_memory
        if intra_suff_and_fits_34660:
          gauss_jordan_res_ixfn_41667 = m_28875
        else:
          gauss_jordan_res_ixfn_41667 = ctx_param_ext_41633
        local_memory_capacity_43090 = self.max_local_memory
        if intra_suff_and_fits_34660:
          gauss_jordan_res_ixfn_41668 = nm_29020
        else:
          gauss_jordan_res_ixfn_41668 = ctx_param_ext_41634
        local_memory_capacity_43091 = self.max_local_memory
        if intra_suff_and_fits_34660:
          gauss_jordan_res_ixfn_41669 = nm_29020
        else:
          gauss_jordan_res_ixfn_41669 = ctx_param_ext_41636
        local_memory_capacity_43092 = self.max_local_memory
        if intra_suff_and_fits_34660:
          gauss_jordan_res_ixfn_41670 = np.int64(1)
        else:
          gauss_jordan_res_ixfn_41670 = ctx_param_ext_41638
        local_memory_capacity_43093 = self.max_local_memory
        if intra_suff_and_fits_34660:
          gauss_jordan_res_ixfn_41671 = np.int64(0)
        else:
          gauss_jordan_res_ixfn_41671 = ctx_param_ext_41635
        local_memory_capacity_43130 = self.max_local_memory
        if (sle64(((bytes_41603 + srem64((np.int64(8) - srem64(bytes_41603,
                                                               np.int64(8))),
                                         np.int64(8))) + (bytes_41603 + srem64((np.int64(8) - srem64(bytes_41603,
                                                                                                     np.int64(8))),
                                                                               np.int64(8)))),
                  sext_i32_i64(local_memory_capacity_43130)) and intra_suff_and_fits_34660):
          mem_41655 = opencl_alloc(self, bytes_41629, "mem_41655")
          if ((1 * (np.int64(m_28875) * np.int64(nm_29020))) != 0):
            self.mainMagnitudezisegmap_intragroup_34298_var.set_args(self.global_failure,
                                                                     self.failure_is_an_option,
                                                                     self.global_failure_args,
                                                                     cl.LocalMemory(np.int64(bytes_41603)),
                                                                     cl.LocalMemory(np.int64(bytes_41603)),
                                                                     np.int64(m_28875),
                                                                     np.int32(k2p2zq_28888),
                                                                     np.int32(m_29018),
                                                                     np.int64(nm_29020),
                                                                     np.int32(i_34647),
                                                                     np.int64(i32_res_34649),
                                                                     np.int64(ctx_param_ext_41635),
                                                                     np.int64(ctx_param_ext_41636),
                                                                     np.int64(ctx_param_ext_41638),
                                                                     mem_param_41640,
                                                                     mem_41655)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainMagnitudezisegmap_intragroup_34298_var,
                                       ((np.int64(m_28875) * np.int64(nm_29020)),),
                                       (np.int64(nm_29020),))
            if synchronous:
              sync(self)
          self.failure_is_an_option = np.int32(1)
          gauss_jordan_res_mem_41672 = mem_41655
        else:
          mem_41658 = opencl_alloc(self, bytes_41657, "mem_41658")
          if ((1 * (np.int64(segmap_usable_groups_34714) * np.int64(segmap_group_sizze_34713))) != 0):
            self.mainMagnitudezisegmap_34477_var.set_args(self.global_failure,
                                                          np.int64(m_28875),
                                                          np.int64(i32_res_34649),
                                                          np.int64(ctx_param_ext_41635),
                                                          np.int64(ctx_param_ext_41636),
                                                          np.int64(ctx_param_ext_41638),
                                                          mem_param_41640,
                                                          mem_41658)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainMagnitudezisegmap_34477_var,
                                       ((np.int64(segmap_usable_groups_34714) * np.int64(segmap_group_sizze_34713)),),
                                       (np.int64(segmap_group_sizze_34713),))
            if synchronous:
              sync(self)
          mem_41663 = opencl_alloc(self, bytes_41629, "mem_41663")
          if ((1 * (np.int64(segmap_usable_groups_34727) * np.int64(segmap_group_sizze_34726))) != 0):
            self.mainMagnitudezisegmap_34377_var.set_args(self.global_failure,
                                                          self.failure_is_an_option,
                                                          self.global_failure_args,
                                                          np.int64(m_28875),
                                                          np.int32(k2p2zq_28888),
                                                          np.int32(m_29018),
                                                          np.int64(nm_29020),
                                                          np.int32(i_34647),
                                                          np.int64(i32_res_34649),
                                                          np.int64(ctx_param_ext_41635),
                                                          np.int64(ctx_param_ext_41636),
                                                          np.int64(ctx_param_ext_41638),
                                                          mem_param_41640,
                                                          mem_41658, mem_41663)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainMagnitudezisegmap_34377_var,
                                       ((np.int64(segmap_usable_groups_34727) * np.int64(segmap_group_sizze_34726)),),
                                       (np.int64(segmap_group_sizze_34726),))
            if synchronous:
              sync(self)
          self.failure_is_an_option = np.int32(1)
          mem_41658 = None
          if ((1 * (np.int64(segmap_usable_groups_34777) * np.int64(segmap_group_sizze_34776))) != 0):
            self.mainMagnitudezisegmap_34357_var.set_args(self.global_failure,
                                                          np.int64(m_28875),
                                                          np.int64(nm_29020),
                                                          np.int64(ctx_param_ext_41635),
                                                          np.int64(ctx_param_ext_41636),
                                                          np.int64(ctx_param_ext_41638),
                                                          mem_param_41640,
                                                          mem_41663)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainMagnitudezisegmap_34357_var,
                                       ((np.int64(segmap_usable_groups_34777) * np.int64(segmap_group_sizze_34776)),),
                                       (np.int64(segmap_group_sizze_34776),))
            if synchronous:
              sync(self)
          mem_41663 = None
          gauss_jordan_res_mem_41672 = mem_param_41640
        ctx_param_ext_tmp_43078 = gauss_jordan_res_ixfn_41667
        ctx_param_ext_tmp_43079 = gauss_jordan_res_ixfn_41668
        ctx_param_ext_tmp_43080 = gauss_jordan_res_ixfn_41671
        ctx_param_ext_tmp_43081 = gauss_jordan_res_ixfn_41669
        ctx_param_ext_tmp_43082 = gauss_jordan_res_ixfn_41665
        ctx_param_ext_tmp_43083 = gauss_jordan_res_ixfn_41670
        ctx_param_ext_tmp_43084 = gauss_jordan_res_ixfn_41666
        mem_param_tmp_43085 = gauss_jordan_res_mem_41672
        ctx_param_ext_41633 = ctx_param_ext_tmp_43078
        ctx_param_ext_41634 = ctx_param_ext_tmp_43079
        ctx_param_ext_41635 = ctx_param_ext_tmp_43080
        ctx_param_ext_41636 = ctx_param_ext_tmp_43081
        ctx_param_ext_41637 = ctx_param_ext_tmp_43082
        ctx_param_ext_41638 = ctx_param_ext_tmp_43083
        ctx_param_ext_41639 = ctx_param_ext_tmp_43084
        mem_param_41640 = mem_param_tmp_43085
        i_34647 += one_44261
      gauss_jordan_res_r_ixfn_41673 = ctx_param_ext_41633
      gauss_jordan_res_r_ixfn_41674 = ctx_param_ext_41634
      gauss_jordan_res_r_ixfn_41675 = ctx_param_ext_41635
      gauss_jordan_res_r_ixfn_41676 = ctx_param_ext_41636
      gauss_jordan_res_r_ixfn_41677 = ctx_param_ext_41637
      gauss_jordan_res_r_ixfn_41678 = ctx_param_ext_41638
      gauss_jordan_res_r_ixfn_41679 = ctx_param_ext_41639
      gauss_jordan_res_r_mem_41680 = mem_param_41640
      mem_41632 = None
      segmap_usable_groups_34787 = sdiv_up64(comparatee_34018,
                                             segmap_group_sizze_34786)
      mem_41686 = opencl_alloc(self, bytes_41594, "mem_41686")
      if ((1 * (np.int64(segmap_usable_groups_34787) * np.int64(segmap_group_sizze_34786))) != 0):
        self.mainMagnitudezisegmap_34236_var.set_args(self.global_failure,
                                                      np.int64(m_28875),
                                                      np.int64(i32_res_28890),
                                                      np.int64(nm_29020),
                                                      np.int64(i32_res_29035),
                                                      np.int64(x_29036),
                                                      np.int64(gauss_jordan_res_r_ixfn_41675),
                                                      np.int64(gauss_jordan_res_r_ixfn_41676),
                                                      np.int64(gauss_jordan_res_r_ixfn_41678),
                                                      gauss_jordan_res_r_mem_41680,
                                                      mem_41686)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainMagnitudezisegmap_34236_var,
                                   ((np.int64(segmap_usable_groups_34787) * np.int64(segmap_group_sizze_34786)),),
                                   (np.int64(segmap_group_sizze_34786),))
        if synchronous:
          sync(self)
      gauss_jordan_res_r_mem_41680 = None
      defunc_3_map_res_mem_41687 = mem_41686
    defunc_3_map_res_mem_41600 = None
    suff_outer_par_34794 = (self.sizes["mainMagnitude.suff_outer_par_5"] <= m_28875)
    segmap_group_sizze_34816 = self.sizes["mainMagnitude.segmap_group_size_34798"]
    max_num_groups_43144 = self.sizes["mainMagnitude.segmap_num_groups_34800"]
    num_groups_34817 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_28875,
                                                            segmap_group_sizze_34816),
                                                  sext_i32_i64(max_num_groups_43144))))
    suff_outer_par_34901 = (self.sizes["mainMagnitude.suff_outer_par_6"] <= nest_sizze_33987)
    nest_sizze_34917 = (i32_res_28884 * nest_sizze_33987)
    segred_group_sizze_34918 = self.sizes["mainMagnitude.segred_group_size_34860"]
    max_num_groups_43145 = self.sizes["mainMagnitude.segred_num_groups_34862"]
    num_groups_34919 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_34917,
                                                            segred_group_sizze_34918),
                                                  sext_i32_i64(max_num_groups_43145))))
    Ty_39720 = self.sizes["mainMagnitude.Ty_39717"]
    Ry_39721 = self.sizes["mainMagnitude.Ry_39719"]
    Tx_39722 = self.sizes["mainMagnitude.Tx_39716"]
    Rx_39723 = self.sizes["mainMagnitude.Rx_39718"]
    Tk_39724 = self.sizes["mainMagnitude.Tk_39715"]
    TxRx_39727 = (Tx_39722 * Rx_39723)
    TyRy_39728 = (Ty_39720 * Ry_39721)
    a_loc_szz_39730 = (Tk_39724 * TyRy_39728)
    binop_x_39731 = (Tx_39722 * Tk_39724)
    b_loc_szz_39732 = (Rx_39723 * binop_x_39731)
    group_sizze_39736 = (Ty_39720 * Tx_39722)
    bytes_41707 = (np.int64(4) * nest_sizze_33987)
    bytes_41909 = smax64(np.int64(0), bytes_41707)
    binop_x_41721 = (Ry_39721 * group_sizze_39736)
    binop_x_41722 = (Rx_39723 * binop_x_41721)
    bytes_41719 = (np.int64(4) * binop_x_41722)
    binop_x_41713 = (Ry_39721 * Rx_39723)
    bytes_41712 = (np.int64(4) * binop_x_41713)
    binop_y_41725 = (np.int64(4) * a_loc_szz_39730)
    bytes_41724 = smax64(np.int64(0), binop_y_41725)
    binop_y_41728 = (np.int64(4) * b_loc_szz_39732)
    bytes_41727 = smax64(np.int64(0), binop_y_41728)
    bytes_41797 = (np.int64(4) * binop_x_41721)
    binop_x_41803 = (Rx_39723 * group_sizze_39736)
    bytes_41801 = (np.int64(4) * binop_x_41803)
    bytes_41789 = (np.int64(4) * Ry_39721)
    bytes_41791 = (np.int64(4) * Rx_39723)
    binop_x_42598 = (np.int64(4) * Ty_39720)
    binop_x_42599 = (Tx_39722 * binop_x_42598)
    binop_x_42600 = (Ry_39721 * binop_x_42599)
    sizze_42601 = (Rx_39723 * binop_x_42600)
    maxSubHelper_42676 = umax64(bytes_41719, sizze_42601)
    num_threads_42793 = (segmap_group_sizze_34816 * num_groups_34817)
    total_sizze_42794 = (bytes_41494 * num_threads_42793)
    local_memory_capacity_43290 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_43290)) and suff_outer_par_34794):
      mem_41690 = opencl_alloc(self, bytes_41441, "mem_41690")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_41690, np.int64(0),
                                                  images_mem_41421, np.int64(0),
                                                  np.int64(1), N_28874, m_28875)
      mem_41709 = opencl_alloc(self, bytes_41707, "mem_41709")
      color_42670 = opencl_alloc(self, total_sizze_42794, "color_42670")
      if ((1 * (np.int64(num_groups_34817) * np.int64(segmap_group_sizze_34816))) != 0):
        self.mainMagnitudezisegmap_34796_var.set_args(self.global_failure,
                                                      np.int64(N_28874),
                                                      np.int64(m_28875),
                                                      np.int32(n_28878),
                                                      np.int32(k2p2zq_28888),
                                                      np.int64(i32_res_28890),
                                                      np.int64(num_groups_34817),
                                                      np.int64(num_threads_42793),
                                                      binop_p_mem_41432,
                                                      mem_41690, mem_41709,
                                                      color_42670)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainMagnitudezisegmap_34796_var,
                                   ((np.int64(num_groups_34817) * np.int64(segmap_group_sizze_34816)),),
                                   (np.int64(segmap_group_sizze_34816),))
        if synchronous:
          sync(self)
      mem_41690 = None
      color_42670 = None
      mem_41912 = opencl_alloc(self, bytes_41909, "mem_41912")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_41912, np.int64(0),
                                                  mem_41709, np.int64(0),
                                                  np.int64(1), m_28875,
                                                  i32_res_28890)
      mem_41709 = None
      defunc_3_map_res_mem_41914 = mem_41912
    else:
      local_memory_capacity_43289 = self.max_local_memory
      if (sle64(((bytes_41727 + srem64((np.int64(8) - srem64(bytes_41727,
                                                             np.int64(8))),
                                       np.int64(8))) + (bytes_41724 + srem64((np.int64(8) - srem64(bytes_41724,
                                                                                                   np.int64(8))),
                                                                             np.int64(8)))),
                sext_i32_i64(local_memory_capacity_43289)) and suff_outer_par_34901):
        tk_div_tx_39725 = sdiv_up64(Tk_39724, Tx_39722)
        tk_div_ty_39726 = sdiv_up64(Tk_39724, Ty_39720)
        gridDim_x_39733 = sdiv_up64(i32_res_28890, TxRx_39727)
        gridDim_y_39734 = sdiv_up64(m_28875, TyRy_39728)
        grid_sizze_39735 = (gridDim_x_39733 * gridDim_y_39734)
        full_tiles_39764 = squot64(i32_res_28884, Tk_39724)
        kk_39971 = (Tk_39724 * full_tiles_39764)
        mem_41902 = opencl_alloc(self, bytes_41909, "mem_41902")
        if ((1 * (np.int64(grid_sizze_39735) * np.int64(group_sizze_39736))) != 0):
          self.mainMagnitudezisegmap_intragroup_39739_var.set_args(self.global_failure,
                                                                   cl.LocalMemory(np.int64(bytes_41724)),
                                                                   cl.LocalMemory(np.int64(bytes_41727)),
                                                                   np.int64(N_28874),
                                                                   np.int64(m_28875),
                                                                   np.int64(i32_res_28884),
                                                                   np.int64(i32_res_28890),
                                                                   np.int64(gridDim_x_39733),
                                                                   np.int64(gridDim_y_39734),
                                                                   np.int64(full_tiles_39764),
                                                                   np.int64(kk_39971),
                                                                   images_mem_41421,
                                                                   mem_41435,
                                                                   mem_41902)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainMagnitudezisegmap_intragroup_39739_var,
                                     ((np.int64(grid_sizze_39735) * np.int64(group_sizze_39736)),),
                                     (np.int64(group_sizze_39736),))
          if synchronous:
            sync(self)
        defunc_3_map_res_mem_41908 = mem_41902
      else:
        mem_41907 = opencl_alloc(self, bytes_41909, "mem_41907")
        if slt64((i32_res_28884 * np.int64(2)), segred_group_sizze_34918):
          segment_sizze_nonzzero_43221 = smax64(np.int64(1), i32_res_28884)
          num_threads_43222 = (num_groups_34919 * segred_group_sizze_34918)
          if ((1 * (np.int64(num_groups_34919) * np.int64(segred_group_sizze_34918))) != 0):
            self.mainMagnitudezisegred_small_34866_var.set_args(self.global_failure,
                                                                cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_34918))),
                                                                np.int64(N_28874),
                                                                np.int64(m_28875),
                                                                np.int64(i32_res_28884),
                                                                np.int64(i32_res_28890),
                                                                np.int64(num_groups_34919),
                                                                np.int64(segment_sizze_nonzzero_43221),
                                                                images_mem_41421,
                                                                binop_p_mem_41432,
                                                                mem_41907)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainMagnitudezisegred_small_34866_var,
                                       ((np.int64(num_groups_34919) * np.int64(segred_group_sizze_34918)),),
                                       (np.int64(segred_group_sizze_34918),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_43246 = sdiv_up64(num_groups_34919,
                                               smax64(np.int64(1),
                                                      (m_28875 * i32_res_28890)))
          elements_per_thread_43247 = sdiv_up64(i32_res_28884,
                                                (segred_group_sizze_34918 * groups_per_segment_43246))
          virt_num_groups_43248 = (groups_per_segment_43246 * (m_28875 * i32_res_28890))
          num_threads_43249 = (num_groups_34919 * segred_group_sizze_34918)
          threads_per_segment_43250 = (groups_per_segment_43246 * segred_group_sizze_34918)
          segred_tmp_mem_43251 = opencl_alloc(self,
                                              (np.int64(4) * virt_num_groups_43248),
                                              "segred_tmp_mem_43251")
          mainMagnitudezicounter_mem_43253 = self.mainMagnitudezicounter_mem_43253
          if ((1 * (np.int64(num_groups_34919) * np.int64(segred_group_sizze_34918))) != 0):
            self.mainMagnitudezisegred_large_34866_var.set_args(self.global_failure,
                                                                cl.LocalMemory(np.int64(np.int32(1))),
                                                                cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_34918))),
                                                                np.int64(N_28874),
                                                                np.int64(m_28875),
                                                                np.int64(i32_res_28884),
                                                                np.int64(i32_res_28890),
                                                                np.int64(num_groups_34919),
                                                                np.int64(groups_per_segment_43246),
                                                                np.int64(elements_per_thread_43247),
                                                                np.int64(virt_num_groups_43248),
                                                                np.int64(threads_per_segment_43250),
                                                                images_mem_41421,
                                                                binop_p_mem_41432,
                                                                mem_41907,
                                                                segred_tmp_mem_43251,
                                                                mainMagnitudezicounter_mem_43253)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainMagnitudezisegred_large_34866_var,
                                       ((np.int64(num_groups_34919) * np.int64(segred_group_sizze_34918)),),
                                       (np.int64(segred_group_sizze_34918),))
            if synchronous:
              sync(self)
        defunc_3_map_res_mem_41908 = mem_41907
      defunc_3_map_res_mem_41914 = defunc_3_map_res_mem_41908
    binop_p_mem_41432 = None
    mem_41435 = None
    suff_outer_par_34935 = (self.sizes["mainMagnitude.suff_outer_par_7"] <= m_28875)
    segmap_group_sizze_34956 = self.sizes["mainMagnitude.segmap_group_size_34939"]
    max_num_groups_43291 = self.sizes["mainMagnitude.segmap_num_groups_34941"]
    num_groups_34957 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_28875,
                                                            segmap_group_sizze_34956),
                                                  sext_i32_i64(max_num_groups_43291))))
    suff_outer_par_35036 = (self.sizes["mainMagnitude.suff_outer_par_8"] <= nest_sizze_33987)
    segred_group_sizze_35051 = self.sizes["mainMagnitude.segred_group_size_34997"]
    max_num_groups_43292 = self.sizes["mainMagnitude.segred_num_groups_34999"]
    num_groups_35052 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(binop_x_41596,
                                                            segred_group_sizze_35051),
                                                  sext_i32_i64(max_num_groups_43292))))
    tile_sizze_40183 = self.sizes["mainMagnitude.tile_size_40182"]
    group_sizze_40184 = (tile_sizze_40183 * tile_sizze_40183)
    bytes_41947 = (np.int64(4) * group_sizze_40184)
    bytes_41952 = smax64(np.int64(0), bytes_41947)
    binop_x_42614 = (np.int64(4) * tile_sizze_40183)
    sizze_42615 = (tile_sizze_40183 * binop_x_42614)
    maxSubHelper_42684 = umax64(bytes_41947, sizze_42615)
    num_threads_42797 = (segmap_group_sizze_34956 * num_groups_34957)
    total_sizze_42798 = (bytes_41494 * num_threads_42797)
    local_memory_capacity_43393 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_43393)) and suff_outer_par_34935):
      mem_41918 = opencl_alloc(self, bytes_41489, "mem_41918")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_41918, np.int64(0),
                                                  defunc_3_map_res_mem_41687,
                                                  np.int64(0), np.int64(1),
                                                  (i32_res_28890 * i32_res_28890),
                                                  m_28875)
      mem_41921 = opencl_alloc(self, bytes_41707, "mem_41921")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_41921, np.int64(0),
                                                  defunc_3_map_res_mem_41914,
                                                  np.int64(0), np.int64(1),
                                                  i32_res_28890, m_28875)
      mem_41940 = opencl_alloc(self, bytes_41707, "mem_41940")
      color_42683 = opencl_alloc(self, total_sizze_42798, "color_42683")
      if ((1 * (np.int64(num_groups_34957) * np.int64(segmap_group_sizze_34956))) != 0):
        self.mainMagnitudezisegmap_34937_var.set_args(self.global_failure,
                                                      np.int64(m_28875),
                                                      np.int32(k2p2zq_28888),
                                                      np.int64(i32_res_28890),
                                                      np.int64(num_groups_34957),
                                                      np.int64(num_threads_42797),
                                                      mem_41918, mem_41921,
                                                      mem_41940, color_42683)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainMagnitudezisegmap_34937_var,
                                   ((np.int64(num_groups_34957) * np.int64(segmap_group_sizze_34956)),),
                                   (np.int64(segmap_group_sizze_34956),))
        if synchronous:
          sync(self)
      mem_41918 = None
      mem_41921 = None
      color_42683 = None
      mem_41984 = opencl_alloc(self, bytes_41909, "mem_41984")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_41984, np.int64(0),
                                                  mem_41940, np.int64(0),
                                                  np.int64(1), m_28875,
                                                  i32_res_28890)
      mem_41940 = None
      defunc_4_map_res_mem_41986 = mem_41984
    else:
      local_memory_capacity_43392 = self.max_local_memory
      if (sle64((bytes_41952 + srem64((np.int64(8) - srem64(bytes_41952,
                                                            np.int64(8))),
                                      np.int64(8))),
                sext_i32_i64(local_memory_capacity_43392)) and suff_outer_par_35036):
        mem_41944 = opencl_alloc(self, binop_y_41597, "mem_41944")
        self.futhark_builtinzhgpu_map_transpose_f32(mem_41944, np.int64(0),
                                                    defunc_3_map_res_mem_41687,
                                                    np.int64(0), np.int64(1),
                                                    i32_res_28890,
                                                    (m_28875 * i32_res_28890))
        num_groups_x_40185 = sdiv_up64(m_28875, tile_sizze_40183)
        num_groups_y_40186 = sdiv_up64(i32_res_28890, tile_sizze_40183)
        num_groups_top_40187 = (num_groups_x_40185 * num_groups_y_40186)
        num_whole_tiles_40204 = squot64(i32_res_28890, tile_sizze_40183)
        residual_input_40331 = srem64(i32_res_28890, tile_sizze_40183)
        cond_40332 = (residual_input_40331 == np.int64(0))
        mem_41974 = opencl_alloc(self, bytes_41909, "mem_41974")
        if ((1 * (np.int64(num_groups_top_40187) * np.int64(group_sizze_40184))) != 0):
          self.mainMagnitudezisegmap_intragroup_40188_var.set_args(self.global_failure,
                                                                   cl.LocalMemory(np.int64(bytes_41952)),
                                                                   np.int64(m_28875),
                                                                   np.int64(i32_res_28890),
                                                                   np.int64(num_groups_x_40185),
                                                                   np.int64(num_groups_y_40186),
                                                                   np.int64(num_whole_tiles_40204),
                                                                   np.int64(residual_input_40331),
                                                                   np.byte(cond_40332),
                                                                   defunc_3_map_res_mem_41914,
                                                                   mem_41944,
                                                                   mem_41974)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainMagnitudezisegmap_intragroup_40188_var,
                                     ((np.int64(num_groups_top_40187) * np.int64(group_sizze_40184)),),
                                     (np.int64(group_sizze_40184),))
          if synchronous:
            sync(self)
        mem_41944 = None
        defunc_4_map_res_mem_41980 = mem_41974
      else:
        mem_41979 = opencl_alloc(self, bytes_41909, "mem_41979")
        if slt64((i32_res_28890 * np.int64(2)), segred_group_sizze_35051):
          segment_sizze_nonzzero_43324 = smax64(np.int64(1), i32_res_28890)
          num_threads_43325 = (num_groups_35052 * segred_group_sizze_35051)
          if ((1 * (np.int64(num_groups_35052) * np.int64(segred_group_sizze_35051))) != 0):
            self.mainMagnitudezisegred_small_35003_var.set_args(self.global_failure,
                                                                cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_35051))),
                                                                np.int64(m_28875),
                                                                np.int64(i32_res_28890),
                                                                np.int64(num_groups_35052),
                                                                np.int64(segment_sizze_nonzzero_43324),
                                                                defunc_3_map_res_mem_41687,
                                                                defunc_3_map_res_mem_41914,
                                                                mem_41979)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainMagnitudezisegred_small_35003_var,
                                       ((np.int64(num_groups_35052) * np.int64(segred_group_sizze_35051)),),
                                       (np.int64(segred_group_sizze_35051),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_43349 = sdiv_up64(num_groups_35052,
                                               smax64(np.int64(1),
                                                      (m_28875 * i32_res_28890)))
          elements_per_thread_43350 = sdiv_up64(i32_res_28890,
                                                (segred_group_sizze_35051 * groups_per_segment_43349))
          virt_num_groups_43351 = (groups_per_segment_43349 * (m_28875 * i32_res_28890))
          num_threads_43352 = (num_groups_35052 * segred_group_sizze_35051)
          threads_per_segment_43353 = (groups_per_segment_43349 * segred_group_sizze_35051)
          segred_tmp_mem_43354 = opencl_alloc(self,
                                              (np.int64(4) * virt_num_groups_43351),
                                              "segred_tmp_mem_43354")
          mainMagnitudezicounter_mem_43356 = self.mainMagnitudezicounter_mem_43356
          if ((1 * (np.int64(num_groups_35052) * np.int64(segred_group_sizze_35051))) != 0):
            self.mainMagnitudezisegred_large_35003_var.set_args(self.global_failure,
                                                                cl.LocalMemory(np.int64(np.int32(1))),
                                                                cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_35051))),
                                                                np.int64(m_28875),
                                                                np.int64(i32_res_28890),
                                                                np.int64(num_groups_35052),
                                                                np.int64(groups_per_segment_43349),
                                                                np.int64(elements_per_thread_43350),
                                                                np.int64(virt_num_groups_43351),
                                                                np.int64(threads_per_segment_43353),
                                                                defunc_3_map_res_mem_41687,
                                                                defunc_3_map_res_mem_41914,
                                                                mem_41979,
                                                                segred_tmp_mem_43354,
                                                                mainMagnitudezicounter_mem_43356)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainMagnitudezisegred_large_35003_var,
                                       ((np.int64(num_groups_35052) * np.int64(segred_group_sizze_35051)),),
                                       (np.int64(segred_group_sizze_35051),))
            if synchronous:
              sync(self)
        defunc_4_map_res_mem_41980 = mem_41979
      defunc_4_map_res_mem_41986 = defunc_4_map_res_mem_41980
    defunc_3_map_res_mem_41687 = None
    defunc_3_map_res_mem_41914 = None
    suff_outer_par_35067 = (self.sizes["mainMagnitude.suff_outer_par_9"] <= m_28875)
    segmap_group_sizze_35087 = self.sizes["mainMagnitude.segmap_group_size_35071"]
    max_num_groups_43394 = self.sizes["mainMagnitude.segmap_num_groups_35073"]
    num_groups_35088 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_28875,
                                                            segmap_group_sizze_35087),
                                                  sext_i32_i64(max_num_groups_43394))))
    suff_outer_par_35164 = (self.sizes["mainMagnitude.suff_outer_par_10"] <= binop_x_41442)
    nest_sizze_35178 = (i32_res_28890 * binop_x_41442)
    segred_group_sizze_35179 = self.sizes["mainMagnitude.segred_group_size_35127"]
    max_num_groups_43395 = self.sizes["mainMagnitude.segred_num_groups_35129"]
    num_groups_35180 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_35178,
                                                            segred_group_sizze_35179),
                                                  sext_i32_i64(max_num_groups_43395))))
    Ty_40461 = self.sizes["mainMagnitude.Ty_40458"]
    Ry_40462 = self.sizes["mainMagnitude.Ry_40460"]
    Tx_40463 = self.sizes["mainMagnitude.Tx_40457"]
    Rx_40464 = self.sizes["mainMagnitude.Rx_40459"]
    Tk_40465 = self.sizes["mainMagnitude.Tk_40456"]
    TxRx_40468 = (Tx_40463 * Rx_40464)
    TyRy_40469 = (Ty_40461 * Ry_40462)
    a_loc_szz_40471 = (Tk_40465 * TyRy_40469)
    binop_x_40472 = (Tx_40463 * Tk_40465)
    b_loc_szz_40473 = (Rx_40464 * binop_x_40472)
    group_sizze_40477 = (Ty_40461 * Tx_40463)
    binop_y_41992 = (np.int64(4) * N_28874)
    bytes_41991 = smax64(np.int64(0), binop_y_41992)
    bytes_42211 = smax64(np.int64(0), bytes_41441)
    binop_x_42023 = (Ry_40462 * group_sizze_40477)
    binop_x_42024 = (Rx_40464 * binop_x_42023)
    bytes_42021 = (np.int64(4) * binop_x_42024)
    binop_x_42015 = (Ry_40462 * Rx_40464)
    bytes_42014 = (np.int64(4) * binop_x_42015)
    binop_y_42027 = (np.int64(4) * a_loc_szz_40471)
    bytes_42026 = smax64(np.int64(0), binop_y_42027)
    binop_y_42030 = (np.int64(4) * b_loc_szz_40473)
    bytes_42029 = smax64(np.int64(0), binop_y_42030)
    bytes_42099 = (np.int64(4) * binop_x_42023)
    binop_x_42105 = (Rx_40464 * group_sizze_40477)
    bytes_42103 = (np.int64(4) * binop_x_42105)
    bytes_42091 = (np.int64(4) * Ry_40462)
    bytes_42093 = (np.int64(4) * Rx_40464)
    binop_x_42628 = (np.int64(4) * Ty_40461)
    binop_x_42629 = (Tx_40463 * binop_x_42628)
    binop_x_42630 = (Ry_40462 * binop_x_42629)
    sizze_42631 = (Rx_40464 * binop_x_42630)
    maxSubHelper_42694 = umax64(bytes_42021, sizze_42631)
    num_threads_42801 = (segmap_group_sizze_35087 * num_groups_35088)
    total_sizze_42802 = (bytes_41991 * num_threads_42801)
    local_memory_capacity_43540 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_43540)) and suff_outer_par_35067):
      mem_41989 = opencl_alloc(self, bytes_41707, "mem_41989")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_41989, np.int64(0),
                                                  defunc_4_map_res_mem_41986,
                                                  np.int64(0), np.int64(1),
                                                  i32_res_28890, m_28875)
      mem_42008 = opencl_alloc(self, bytes_41441, "mem_42008")
      color_42688 = opencl_alloc(self, total_sizze_42802, "color_42688")
      if ((1 * (np.int64(num_groups_35088) * np.int64(segmap_group_sizze_35087))) != 0):
        self.mainMagnitudezisegmap_35069_var.set_args(self.global_failure,
                                                      np.int64(N_28874),
                                                      np.int64(m_28875),
                                                      np.int32(k2p2zq_28888),
                                                      np.int64(i32_res_28890),
                                                      np.int64(num_groups_35088),
                                                      np.int64(num_threads_42801),
                                                      mem_41440, mem_41989,
                                                      mem_42008, color_42688)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainMagnitudezisegmap_35069_var,
                                   ((np.int64(num_groups_35088) * np.int64(segmap_group_sizze_35087)),),
                                   (np.int64(segmap_group_sizze_35087),))
        if synchronous:
          sync(self)
      mem_41989 = None
      color_42688 = None
      mem_42214 = opencl_alloc(self, bytes_42211, "mem_42214")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_42214, np.int64(0),
                                                  mem_42008, np.int64(0),
                                                  np.int64(1), m_28875, N_28874)
      mem_42008 = None
      defunc_3_map_res_mem_42216 = mem_42214
    else:
      local_memory_capacity_43539 = self.max_local_memory
      if (sle64(((bytes_42029 + srem64((np.int64(8) - srem64(bytes_42029,
                                                             np.int64(8))),
                                       np.int64(8))) + (bytes_42026 + srem64((np.int64(8) - srem64(bytes_42026,
                                                                                                   np.int64(8))),
                                                                             np.int64(8)))),
                sext_i32_i64(local_memory_capacity_43539)) and suff_outer_par_35164):
        mem_42011 = opencl_alloc(self, binop_y_41425, "mem_42011")
        self.futhark_builtinzhgpu_map_transpose_f32(mem_42011, np.int64(0),
                                                    mem_41440, np.int64(0),
                                                    np.int64(1), i32_res_28890,
                                                    N_28874)
        tk_div_tx_40466 = sdiv_up64(Tk_40465, Tx_40463)
        tk_div_ty_40467 = sdiv_up64(Tk_40465, Ty_40461)
        gridDim_x_40474 = sdiv_up64(N_28874, TxRx_40468)
        gridDim_y_40475 = sdiv_up64(m_28875, TyRy_40469)
        grid_sizze_40476 = (gridDim_x_40474 * gridDim_y_40475)
        full_tiles_40505 = squot64(i32_res_28890, Tk_40465)
        kk_40708 = (Tk_40465 * full_tiles_40505)
        mem_42204 = opencl_alloc(self, bytes_42211, "mem_42204")
        if ((1 * (np.int64(grid_sizze_40476) * np.int64(group_sizze_40477))) != 0):
          self.mainMagnitudezisegmap_intragroup_40480_var.set_args(self.global_failure,
                                                                   cl.LocalMemory(np.int64(bytes_42026)),
                                                                   cl.LocalMemory(np.int64(bytes_42029)),
                                                                   np.int64(N_28874),
                                                                   np.int64(m_28875),
                                                                   np.int64(i32_res_28890),
                                                                   np.int64(gridDim_x_40474),
                                                                   np.int64(gridDim_y_40475),
                                                                   np.int64(full_tiles_40505),
                                                                   np.int64(kk_40708),
                                                                   defunc_4_map_res_mem_41986,
                                                                   mem_42011,
                                                                   mem_42204)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainMagnitudezisegmap_intragroup_40480_var,
                                     ((np.int64(grid_sizze_40476) * np.int64(group_sizze_40477)),),
                                     (np.int64(group_sizze_40477),))
          if synchronous:
            sync(self)
        mem_42011 = None
        defunc_3_map_res_mem_42210 = mem_42204
      else:
        mem_42209 = opencl_alloc(self, bytes_42211, "mem_42209")
        if slt64((i32_res_28890 * np.int64(2)), segred_group_sizze_35179):
          segment_sizze_nonzzero_43471 = smax64(np.int64(1), i32_res_28890)
          num_threads_43472 = (num_groups_35180 * segred_group_sizze_35179)
          if ((1 * (np.int64(num_groups_35180) * np.int64(segred_group_sizze_35179))) != 0):
            self.mainMagnitudezisegred_small_35133_var.set_args(self.global_failure,
                                                                cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_35179))),
                                                                np.int64(N_28874),
                                                                np.int64(m_28875),
                                                                np.int64(i32_res_28890),
                                                                np.int64(num_groups_35180),
                                                                np.int64(segment_sizze_nonzzero_43471),
                                                                mem_41440,
                                                                defunc_4_map_res_mem_41986,
                                                                mem_42209)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainMagnitudezisegred_small_35133_var,
                                       ((np.int64(num_groups_35180) * np.int64(segred_group_sizze_35179)),),
                                       (np.int64(segred_group_sizze_35179),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_43496 = sdiv_up64(num_groups_35180,
                                               smax64(np.int64(1),
                                                      (m_28875 * N_28874)))
          elements_per_thread_43497 = sdiv_up64(i32_res_28890,
                                                (segred_group_sizze_35179 * groups_per_segment_43496))
          virt_num_groups_43498 = (groups_per_segment_43496 * (m_28875 * N_28874))
          num_threads_43499 = (num_groups_35180 * segred_group_sizze_35179)
          threads_per_segment_43500 = (groups_per_segment_43496 * segred_group_sizze_35179)
          segred_tmp_mem_43501 = opencl_alloc(self,
                                              (np.int64(4) * virt_num_groups_43498),
                                              "segred_tmp_mem_43501")
          mainMagnitudezicounter_mem_43503 = self.mainMagnitudezicounter_mem_43503
          if ((1 * (np.int64(num_groups_35180) * np.int64(segred_group_sizze_35179))) != 0):
            self.mainMagnitudezisegred_large_35133_var.set_args(self.global_failure,
                                                                cl.LocalMemory(np.int64(np.int32(1))),
                                                                cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_35179))),
                                                                np.int64(N_28874),
                                                                np.int64(m_28875),
                                                                np.int64(i32_res_28890),
                                                                np.int64(num_groups_35180),
                                                                np.int64(groups_per_segment_43496),
                                                                np.int64(elements_per_thread_43497),
                                                                np.int64(virt_num_groups_43498),
                                                                np.int64(threads_per_segment_43500),
                                                                mem_41440,
                                                                defunc_4_map_res_mem_41986,
                                                                mem_42209,
                                                                segred_tmp_mem_43501,
                                                                mainMagnitudezicounter_mem_43503)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainMagnitudezisegred_large_35133_var,
                                       ((np.int64(num_groups_35180) * np.int64(segred_group_sizze_35179)),),
                                       (np.int64(segred_group_sizze_35179),))
            if synchronous:
              sync(self)
        defunc_3_map_res_mem_42210 = mem_42209
      defunc_3_map_res_mem_42216 = defunc_3_map_res_mem_42210
    mem_41440 = None
    defunc_4_map_res_mem_41986 = None
    i_29176 = (N_28874 - np.int64(1))
    x_29177 = sle64(np.int64(0), i_29176)
    y_29178 = slt64(i_29176, N_28874)
    bounds_check_29179 = (x_29177 and y_29178)
    index_certs_29180 = True
    assert bounds_check_29179, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:26:29-34\n   #1  helpers.fut:20:13-20\n   #2  bfastfinal.fut:76:16-75\n   #3  /prelude/soacs.fut:67:19-23\n   #4  /prelude/soacs.fut:67:3-37\n   #5  bfastfinal.fut:71:5-77:25\n   #6  bfastfinal.fut:181:5-58\n   #7  bfastfinal.fut:176:1-182:37\n" % ("Index [",
                                                                                                                                                                                                                                                                                                                                                     i_29176,
                                                                                                                                                                                                                                                                                                                                                     "] out of bounds for array of shape [",
                                                                                                                                                                                                                                                                                                                                                     N_28874,
                                                                                                                                                                                                                                                                                                                                                     "]."))
    fits_35220 = sle64(N_28874, max_group_sizze_34147)
    suff_intra_par_35218 = (self.sizes["mainMagnitude.suff_intra_par_11"] <= N_28874)
    intra_suff_and_fits_35221 = (suff_intra_par_35218 and fits_35220)
    segscan_group_sizze_35358 = self.sizes["mainMagnitude.segscan_group_size_35335"]
    max_num_groups_43541 = self.sizes["mainMagnitude.segscan_num_groups_35337"]
    num_groups_35359 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(binop_x_41442,
                                                            segscan_group_sizze_35358),
                                                  sext_i32_i64(max_num_groups_43541))))
    segmap_group_sizze_35378 = self.sizes["mainMagnitude.segmap_group_size_35326"]
    segmap_group_sizze_35408 = self.sizes["mainMagnitude.segmap_group_size_35265"]
    binop_y_42233 = (np.int64(4) * m_28875)
    bytes_42232 = smax64(np.int64(0), binop_y_42233)
    binop_y_42220 = (np.int64(8) * N_28874)
    bytes_42219 = smax64(np.int64(0), binop_y_42220)
    binop_y_42246 = (np.int64(8) * binop_x_41442)
    bytes_42244 = smax64(np.int64(0), binop_y_42246)
    local_memory_capacity_43653 = self.max_local_memory
    if (sle64(((((bytes_41991 + srem64((np.int64(8) - srem64(bytes_41991,
                                                             np.int64(8))),
                                       np.int64(8))) + (bytes_41991 + srem64((np.int64(8) - srem64(bytes_41991,
                                                                                                   np.int64(8))),
                                                                             np.int64(8)))) + (bytes_41991 + srem64((np.int64(8) - srem64(bytes_41991,
                                                                                                                                          np.int64(8))),
                                                                                                                    np.int64(8)))) + (bytes_42219 + srem64((np.int64(8) - srem64(bytes_42219,
                                                                                                                                                                                 np.int64(8))),
                                                                                                                                                           np.int64(8)))),
              sext_i32_i64(local_memory_capacity_43653)) and intra_suff_and_fits_35221):
      mem_42234 = opencl_alloc(self, bytes_42232, "mem_42234")
      mem_42238 = opencl_alloc(self, bytes_42211, "mem_42238")
      mem_42242 = opencl_alloc(self, bytes_42211, "mem_42242")
      if ((1 * (np.int64(m_28875) * np.int64(N_28874))) != 0):
        self.mainMagnitudezisegmap_intragroup_35216_var.set_args(self.global_failure,
                                                                 cl.LocalMemory(np.int64(bytes_42219)),
                                                                 cl.LocalMemory(np.int64(bytes_41991)),
                                                                 cl.LocalMemory(np.int64(bytes_41991)),
                                                                 cl.LocalMemory(np.int64(bytes_41991)),
                                                                 np.int64(N_28874),
                                                                 np.int64(m_28875),
                                                                 np.int64(i_29176),
                                                                 images_mem_41421,
                                                                 defunc_3_map_res_mem_42216,
                                                                 mem_42234,
                                                                 mem_42238,
                                                                 mem_42242)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainMagnitudezisegmap_intragroup_35216_var,
                                   ((np.int64(m_28875) * np.int64(N_28874)),),
                                   (np.int64(N_28874),))
        if synchronous:
          sync(self)
      defunc_4_map_res_mem_42265 = mem_42234
      defunc_4_map_res_mem_42266 = mem_42238
      defunc_4_map_res_mem_42267 = mem_42242
    else:
      mem_42247 = opencl_alloc(self, bytes_42244, "mem_42247")
      mem_42251 = opencl_alloc(self, bytes_42211, "mem_42251")
      if slt64(np.int64(0), (m_28875 * N_28874)):
        stage1_max_num_groups_43561 = self.max_group_size
        stage1_num_groups_43562 = smin64(stage1_max_num_groups_43561,
                                         num_groups_35359)
        num_threads_43563 = sext_i64_i32((stage1_num_groups_43562 * segscan_group_sizze_35358))
        if ((1 * (np.int64(stage1_num_groups_43562) * np.int64(segscan_group_sizze_35358))) != 0):
          self.mainMagnitudeziscan_stage1_35341_var.set_args(self.global_failure,
                                                             cl.LocalMemory(np.int64(smax64(np.int64(1),
                                                                                            (np.int64(8) * segscan_group_sizze_35358)))),
                                                             np.int64(N_28874),
                                                             np.int64(m_28875),
                                                             np.int32(num_threads_43563),
                                                             images_mem_41421,
                                                             defunc_3_map_res_mem_42216,
                                                             mem_42247,
                                                             mem_42251)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainMagnitudeziscan_stage1_35341_var,
                                     ((np.int64(stage1_num_groups_43562) * np.int64(segscan_group_sizze_35358)),),
                                     (np.int64(segscan_group_sizze_35358),))
          if synchronous:
            sync(self)
        if ((1 * (np.int64(np.int64(1)) * np.int64(stage1_num_groups_43562))) != 0):
          self.mainMagnitudeziscan_stage2_35341_var.set_args(self.global_failure,
                                                             cl.LocalMemory(np.int64(smax64(np.int64(1),
                                                                                            (np.int64(8) * stage1_num_groups_43562)))),
                                                             np.int64(N_28874),
                                                             np.int64(m_28875),
                                                             np.int64(stage1_num_groups_43562),
                                                             np.int32(num_threads_43563),
                                                             mem_42247)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainMagnitudeziscan_stage2_35341_var,
                                     ((np.int64(np.int64(1)) * np.int64(stage1_num_groups_43562)),),
                                     (np.int64(stage1_num_groups_43562),))
          if synchronous:
            sync(self)
        required_groups_43605 = sext_i64_i32(sdiv_up64((m_28875 * N_28874),
                                                       segscan_group_sizze_35358))
        if ((1 * (np.int64(num_groups_35359) * np.int64(segscan_group_sizze_35358))) != 0):
          self.mainMagnitudeziscan_stage3_35341_var.set_args(self.global_failure,
                                                             np.int64(N_28874),
                                                             np.int64(m_28875),
                                                             np.int64(num_groups_35359),
                                                             np.int32(num_threads_43563),
                                                             np.int32(required_groups_43605),
                                                             mem_42247)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainMagnitudeziscan_stage3_35341_var,
                                     ((np.int64(num_groups_35359) * np.int64(segscan_group_sizze_35358)),),
                                     (np.int64(segscan_group_sizze_35358),))
          if synchronous:
            sync(self)
      segmap_usable_groups_35379 = sdiv_up64(m_28875, segmap_group_sizze_35378)
      mem_42255 = opencl_alloc(self, bytes_42232, "mem_42255")
      if ((1 * (np.int64(segmap_usable_groups_35379) * np.int64(segmap_group_sizze_35378))) != 0):
        self.mainMagnitudezisegmap_35324_var.set_args(self.global_failure,
                                                      np.int64(N_28874),
                                                      np.int64(m_28875),
                                                      np.int64(i_29176),
                                                      mem_42247, mem_42255)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainMagnitudezisegmap_35324_var,
                                   ((np.int64(segmap_usable_groups_35379) * np.int64(segmap_group_sizze_35378)),),
                                   (np.int64(segmap_group_sizze_35378),))
        if synchronous:
          sync(self)
      mem_42259 = opencl_alloc(self, bytes_42211, "mem_42259")
      self.futhark_builtinzhreplicate_f32(mem_42259, (m_28875 * N_28874),
                                          np.nan)
      mem_42263 = opencl_alloc(self, bytes_42211, "mem_42263")
      self.futhark_builtinzhreplicate_i32(mem_42263, (m_28875 * N_28874),
                                          np.int32(0))
      segmap_usable_groups_35409 = sdiv_up64(binop_x_41442,
                                             segmap_group_sizze_35408)
      if ((1 * (np.int64(segmap_usable_groups_35409) * np.int64(segmap_group_sizze_35408))) != 0):
        self.mainMagnitudezisegmap_35262_var.set_args(self.global_failure,
                                                      np.int64(N_28874),
                                                      np.int64(m_28875),
                                                      mem_42247, mem_42251,
                                                      mem_42259, mem_42263)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainMagnitudezisegmap_35262_var,
                                   ((np.int64(segmap_usable_groups_35409) * np.int64(segmap_group_sizze_35408)),),
                                   (np.int64(segmap_group_sizze_35408),))
        if synchronous:
          sync(self)
      mem_42247 = None
      mem_42251 = None
      defunc_4_map_res_mem_42265 = mem_42255
      defunc_4_map_res_mem_42266 = mem_42259
      defunc_4_map_res_mem_42267 = mem_42263
    defunc_3_map_res_mem_42216 = None
    suff_outer_par_35447 = (self.sizes["mainMagnitude.suff_outer_par_12"] <= m_28875)
    fits_35525 = sle64(i32_res_28884, max_group_sizze_34147)
    suff_intra_par_35523 = (self.sizes["mainMagnitude.suff_intra_par_13"] <= i32_res_28884)
    intra_suff_and_fits_35526 = (suff_intra_par_35523 and fits_35525)
    segmap_group_sizze_35486 = self.sizes["mainMagnitude.segmap_group_size_35451"]
    nest_sizze_35623 = (m_28875 * i32_res_28884)
    segred_group_sizze_35624 = self.sizes["mainMagnitude.segred_group_size_35607"]
    max_num_groups_43654 = self.sizes["mainMagnitude.segred_num_groups_35609"]
    num_groups_35625 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_35623,
                                                            segred_group_sizze_35624),
                                                  sext_i32_i64(max_num_groups_43654))))
    segred_group_sizze_35638 = self.sizes["mainMagnitude.segred_group_size_35582"]
    max_num_groups_43655 = self.sizes["mainMagnitude.segred_num_groups_35584"]
    num_groups_35639 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_35623,
                                                            segred_group_sizze_35638),
                                                  sext_i32_i64(max_num_groups_43655))))
    segmap_group_sizze_35658 = self.sizes["mainMagnitude.segmap_group_size_35567"]
    bytes_42276 = (np.int64(4) * segmap_group_sizze_35486)
    bytes_42283 = smax64(np.int64(0), bytes_42276)
    local_memory_capacity_43822 = self.max_local_memory
    if (sle64((bytes_42283 + srem64((np.int64(8) - srem64(bytes_42283,
                                                          np.int64(8))),
                                    np.int64(8))),
              sext_i32_i64(local_memory_capacity_43822)) and suff_outer_par_35447):
      segmap_usable_groups_35487 = sdiv_up64(m_28875, segmap_group_sizze_35486)
      mem_42270 = opencl_alloc(self, bytes_41441, "mem_42270")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_42270, np.int64(0),
                                                  images_mem_41421, np.int64(0),
                                                  np.int64(1), N_28874, m_28875)
      mem_42273 = opencl_alloc(self, bytes_41441, "mem_42273")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_42273, np.int64(0),
                                                  defunc_4_map_res_mem_42266,
                                                  np.int64(0), np.int64(1),
                                                  N_28874, m_28875)
      num_whole_tiles_40936 = squot64(i32_res_28884, segmap_group_sizze_35486)
      residual_input_41037 = srem64(i32_res_28884, segmap_group_sizze_35486)
      cond_41038 = (residual_input_41037 == np.int64(0))
      mem_42307 = opencl_alloc(self, bytes_42232, "mem_42307")
      mem_42310 = opencl_alloc(self, bytes_42232, "mem_42310")
      mem_42313 = opencl_alloc(self, bytes_42232, "mem_42313")
      if ((1 * (np.int64(segmap_usable_groups_35487) * np.int64(segmap_group_sizze_35486))) != 0):
        self.mainMagnitudezisegmap_intragroup_40914_var.set_args(self.global_failure,
                                                                 self.failure_is_an_option,
                                                                 self.global_failure_args,
                                                                 cl.LocalMemory(np.int64(bytes_42283)),
                                                                 np.int64(N_28874),
                                                                 np.int64(m_28875),
                                                                 np.int32(n_28878),
                                                                 np.float32(hfrac_28880),
                                                                 np.int64(i32_res_28884),
                                                                 np.int32(k2p2_28886),
                                                                 np.int64(segmap_usable_groups_35487),
                                                                 np.int64(num_whole_tiles_40936),
                                                                 np.int64(residual_input_41037),
                                                                 np.byte(cond_41038),
                                                                 mem_42270,
                                                                 mem_42273,
                                                                 mem_42307,
                                                                 mem_42310,
                                                                 mem_42313)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainMagnitudezisegmap_intragroup_40914_var,
                                   ((np.int64(segmap_usable_groups_35487) * np.int64(segmap_group_sizze_35486)),),
                                   (np.int64(segmap_group_sizze_35486),))
        if synchronous:
          sync(self)
      self.failure_is_an_option = np.int32(1)
      mem_42270 = None
      mem_42273 = None
      defunc_3_map_res_mem_42344 = mem_42307
      defunc_3_map_res_mem_42345 = mem_42310
      defunc_3_map_res_mem_42346 = mem_42313
    else:
      local_memory_capacity_43821 = self.max_local_memory
      if (sle64((((np.int64(4) * i32_res_28884) + srem64((np.int64(8) - srem64((np.int64(4) * i32_res_28884),
                                                                               np.int64(8))),
                                                         np.int64(8))) + ((np.int64(4) * i32_res_28884) + srem64((np.int64(8) - srem64((np.int64(4) * i32_res_28884),
                                                                                                                                       np.int64(8))),
                                                                                                                 np.int64(8)))),
                sext_i32_i64(local_memory_capacity_43821)) and intra_suff_and_fits_35526):
        mem_42319 = opencl_alloc(self, bytes_42232, "mem_42319")
        mem_42322 = opencl_alloc(self, bytes_42232, "mem_42322")
        mem_42325 = opencl_alloc(self, bytes_42232, "mem_42325")
        if ((1 * (np.int64(m_28875) * np.int64(i32_res_28884))) != 0):
          self.mainMagnitudezisegmap_intragroup_35445_var.set_args(self.global_failure,
                                                                   self.failure_is_an_option,
                                                                   self.global_failure_args,
                                                                   cl.LocalMemory(np.int64((np.int64(4) * i32_res_28884))),
                                                                   cl.LocalMemory(np.int64((np.int64(4) * i32_res_28884))),
                                                                   np.int64(N_28874),
                                                                   np.int64(m_28875),
                                                                   np.float32(hfrac_28880),
                                                                   np.int64(i32_res_28884),
                                                                   np.int32(k2p2_28886),
                                                                   images_mem_41421,
                                                                   defunc_4_map_res_mem_42266,
                                                                   mem_42319,
                                                                   mem_42322,
                                                                   mem_42325)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainMagnitudezisegmap_intragroup_35445_var,
                                     ((np.int64(m_28875) * np.int64(i32_res_28884)),),
                                     (np.int64(i32_res_28884),))
          if synchronous:
            sync(self)
        self.failure_is_an_option = np.int32(1)
        defunc_3_map_res_mem_42341 = mem_42319
        defunc_3_map_res_mem_42342 = mem_42322
        defunc_3_map_res_mem_42343 = mem_42325
      else:
        mem_42329 = opencl_alloc(self, bytes_42232, "mem_42329")
        if slt64((i32_res_28884 * np.int64(2)), segred_group_sizze_35624):
          segment_sizze_nonzzero_43685 = smax64(np.int64(1), i32_res_28884)
          num_threads_43686 = (num_groups_35625 * segred_group_sizze_35624)
          if ((1 * (np.int64(num_groups_35625) * np.int64(segred_group_sizze_35624))) != 0):
            self.mainMagnitudezisegred_small_35613_var.set_args(self.global_failure,
                                                                cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_35624))),
                                                                np.int64(N_28874),
                                                                np.int64(m_28875),
                                                                np.int64(i32_res_28884),
                                                                np.int64(num_groups_35625),
                                                                np.int64(segment_sizze_nonzzero_43685),
                                                                images_mem_41421,
                                                                mem_42329)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainMagnitudezisegred_small_35613_var,
                                       ((np.int64(num_groups_35625) * np.int64(segred_group_sizze_35624)),),
                                       (np.int64(segred_group_sizze_35624),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_43708 = sdiv_up64(num_groups_35625,
                                               smax64(np.int64(1), m_28875))
          elements_per_thread_43709 = sdiv_up64(i32_res_28884,
                                                (segred_group_sizze_35624 * groups_per_segment_43708))
          virt_num_groups_43710 = (groups_per_segment_43708 * m_28875)
          num_threads_43711 = (num_groups_35625 * segred_group_sizze_35624)
          threads_per_segment_43712 = (groups_per_segment_43708 * segred_group_sizze_35624)
          segred_tmp_mem_43713 = opencl_alloc(self,
                                              (np.int64(4) * virt_num_groups_43710),
                                              "segred_tmp_mem_43713")
          mainMagnitudezicounter_mem_43715 = self.mainMagnitudezicounter_mem_43715
          if ((1 * (np.int64(num_groups_35625) * np.int64(segred_group_sizze_35624))) != 0):
            self.mainMagnitudezisegred_large_35613_var.set_args(self.global_failure,
                                                                cl.LocalMemory(np.int64(np.int32(1))),
                                                                cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_35624))),
                                                                np.int64(N_28874),
                                                                np.int64(m_28875),
                                                                np.int64(i32_res_28884),
                                                                np.int64(num_groups_35625),
                                                                np.int64(groups_per_segment_43708),
                                                                np.int64(elements_per_thread_43709),
                                                                np.int64(virt_num_groups_43710),
                                                                np.int64(threads_per_segment_43712),
                                                                images_mem_41421,
                                                                mem_42329,
                                                                segred_tmp_mem_43713,
                                                                mainMagnitudezicounter_mem_43715)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainMagnitudezisegred_large_35613_var,
                                       ((np.int64(num_groups_35625) * np.int64(segred_group_sizze_35624)),),
                                       (np.int64(segred_group_sizze_35624),))
            if synchronous:
              sync(self)
        mem_42333 = opencl_alloc(self, bytes_42232, "mem_42333")
        if slt64((i32_res_28884 * np.int64(2)), segred_group_sizze_35638):
          segment_sizze_nonzzero_43749 = smax64(np.int64(1), i32_res_28884)
          num_threads_43750 = (num_groups_35639 * segred_group_sizze_35638)
          if ((1 * (np.int64(num_groups_35639) * np.int64(segred_group_sizze_35638))) != 0):
            self.mainMagnitudezisegred_small_35588_var.set_args(self.global_failure,
                                                                self.failure_is_an_option,
                                                                self.global_failure_args,
                                                                cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_35638))),
                                                                np.int64(N_28874),
                                                                np.int64(m_28875),
                                                                np.int64(i32_res_28884),
                                                                np.int64(num_groups_35639),
                                                                np.int64(segment_sizze_nonzzero_43749),
                                                                defunc_4_map_res_mem_42266,
                                                                mem_42329,
                                                                mem_42333)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainMagnitudezisegred_small_35588_var,
                                       ((np.int64(num_groups_35639) * np.int64(segred_group_sizze_35638)),),
                                       (np.int64(segred_group_sizze_35638),))
            if synchronous:
              sync(self)
          self.failure_is_an_option = np.int32(1)
        else:
          groups_per_segment_43772 = sdiv_up64(num_groups_35639,
                                               smax64(np.int64(1), m_28875))
          elements_per_thread_43773 = sdiv_up64(i32_res_28884,
                                                (segred_group_sizze_35638 * groups_per_segment_43772))
          virt_num_groups_43774 = (groups_per_segment_43772 * m_28875)
          num_threads_43775 = (num_groups_35639 * segred_group_sizze_35638)
          threads_per_segment_43776 = (groups_per_segment_43772 * segred_group_sizze_35638)
          segred_tmp_mem_43777 = opencl_alloc(self,
                                              (np.int64(4) * virt_num_groups_43774),
                                              "segred_tmp_mem_43777")
          mainMagnitudezicounter_mem_43779 = self.mainMagnitudezicounter_mem_43779
          if ((1 * (np.int64(num_groups_35639) * np.int64(segred_group_sizze_35638))) != 0):
            self.mainMagnitudezisegred_large_35588_var.set_args(self.global_failure,
                                                                self.failure_is_an_option,
                                                                self.global_failure_args,
                                                                cl.LocalMemory(np.int64(np.int32(1))),
                                                                cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_35638))),
                                                                np.int64(N_28874),
                                                                np.int64(m_28875),
                                                                np.int64(i32_res_28884),
                                                                np.int64(num_groups_35639),
                                                                np.int64(groups_per_segment_43772),
                                                                np.int64(elements_per_thread_43773),
                                                                np.int64(virt_num_groups_43774),
                                                                np.int64(threads_per_segment_43776),
                                                                defunc_4_map_res_mem_42266,
                                                                mem_42329,
                                                                mem_42333,
                                                                segred_tmp_mem_43777,
                                                                mainMagnitudezicounter_mem_43779)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainMagnitudezisegred_large_35588_var,
                                       ((np.int64(num_groups_35639) * np.int64(segred_group_sizze_35638)),),
                                       (np.int64(segred_group_sizze_35638),))
            if synchronous:
              sync(self)
          self.failure_is_an_option = np.int32(1)
        segmap_usable_groups_35659 = sdiv_up64(m_28875,
                                               segmap_group_sizze_35658)
        mem_42337 = opencl_alloc(self, bytes_42232, "mem_42337")
        mem_42340 = opencl_alloc(self, bytes_42232, "mem_42340")
        if ((1 * (np.int64(segmap_usable_groups_35659) * np.int64(segmap_group_sizze_35658))) != 0):
          self.mainMagnitudezisegmap_35565_var.set_args(self.global_failure,
                                                        np.int64(m_28875),
                                                        np.float32(hfrac_28880),
                                                        np.int32(k2p2_28886),
                                                        mem_42329, mem_42333,
                                                        mem_42337, mem_42340)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainMagnitudezisegmap_35565_var,
                                     ((np.int64(segmap_usable_groups_35659) * np.int64(segmap_group_sizze_35658)),),
                                     (np.int64(segmap_group_sizze_35658),))
          if synchronous:
            sync(self)
        mem_42333 = None
        defunc_3_map_res_mem_42341 = mem_42337
        defunc_3_map_res_mem_42342 = mem_42329
        defunc_3_map_res_mem_42343 = mem_42340
      defunc_3_map_res_mem_42344 = defunc_3_map_res_mem_42341
      defunc_3_map_res_mem_42345 = defunc_3_map_res_mem_42342
      defunc_3_map_res_mem_42346 = defunc_3_map_res_mem_42343
    segred_group_sizze_35679 = self.sizes["mainMagnitude.segred_group_size_35678"]
    max_num_groups_43823 = self.sizes["mainMagnitude.segred_num_groups_35680"]
    num_groups_35681 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_28875,
                                                            segred_group_sizze_35679),
                                                  sext_i32_i64(max_num_groups_43823))))
    mem_42349 = opencl_alloc(self, np.int64(4), "mem_42349")
    mainMagnitudezicounter_mem_43824 = self.mainMagnitudezicounter_mem_43824
    segred_tmp_mem_43826 = opencl_alloc(self, (np.int64(4) * num_groups_35681),
                                        "segred_tmp_mem_43826")
    num_threads_43828 = (num_groups_35681 * segred_group_sizze_35679)
    if ((1 * (np.int64(num_groups_35681) * np.int64(segred_group_sizze_35679))) != 0):
      self.mainMagnitudezisegred_nonseg_35686_var.set_args(self.global_failure,
                                                           cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_35679))),
                                                           cl.LocalMemory(np.int64(np.int32(1))),
                                                           np.int64(m_28875),
                                                           np.int64(num_groups_35681),
                                                           np.int64(num_threads_43828),
                                                           defunc_3_map_res_mem_42344,
                                                           mem_42349,
                                                           mainMagnitudezicounter_mem_43824,
                                                           segred_tmp_mem_43826)
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.mainMagnitudezisegred_nonseg_35686_var,
                                 ((np.int64(num_groups_35681) * np.int64(segred_group_sizze_35679)),),
                                 (np.int64(segred_group_sizze_35679),))
      if synchronous:
        sync(self)
    read_res_44268 = np.empty(1, dtype=ct.c_int32)
    cl.enqueue_copy(self.queue, read_res_44268, mem_42349,
                    device_offset=(np.int64(np.int64(0)) * 4),
                    is_blocking=synchronous)
    sync(self)
    defunc_2_reduce_comm_res_29270 = read_res_44268[0]
    mem_42349 = None
    i32_res_29275 = sext_i32_i64(defunc_2_reduce_comm_res_29270)
    bounds_invalid_upwards_29276 = slt64(i32_res_29275, np.int64(0))
    valid_29277 = not(bounds_invalid_upwards_29276)
    range_valid_c_29278 = True
    assert valid_29277, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:90:3-10\n   #1  helpers.fut:5:3-18\n   #2  bfastfinal.fut:102:34-46\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:97:17-104:24\n   #5  bfastfinal.fut:181:5-58\n   #6  bfastfinal.fut:176:1-182:37\n" % ("Range ",
                                                                                                                                                                                                                                                                                                                   np.int64(0),
                                                                                                                                                                                                                                                                                                                   "..",
                                                                                                                                                                                                                                                                                                                   np.int64(1),
                                                                                                                                                                                                                                                                                                                   "..<",
                                                                                                                                                                                                                                                                                                                   i32_res_29275,
                                                                                                                                                                                                                                                                                                                   " is invalid."))
    suff_outer_par_35702 = (self.sizes["mainMagnitude.suff_outer_par_14"] <= m_28875)
    segmap_group_sizze_35729 = self.sizes["mainMagnitude.segmap_group_size_35706"]
    nest_sizze_35780 = (m_28875 * i32_res_29275)
    segred_group_sizze_35781 = self.sizes["mainMagnitude.segred_group_size_35754"]
    max_num_groups_43854 = self.sizes["mainMagnitude.segred_num_groups_35756"]
    num_groups_35782 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_35780,
                                                            segred_group_sizze_35781),
                                                  sext_i32_i64(max_num_groups_43854))))
    bytes_42352 = (np.int64(4) * segmap_group_sizze_35729)
    bytes_42361 = smax64(np.int64(0), bytes_42352)
    local_memory_capacity_43931 = self.max_local_memory
    if (sle64((bytes_42361 + srem64((np.int64(8) - srem64(bytes_42361,
                                                          np.int64(8))),
                                    np.int64(8))),
              sext_i32_i64(local_memory_capacity_43931)) and suff_outer_par_35702):
      segmap_usable_groups_35730 = sdiv_up64(m_28875, segmap_group_sizze_35729)
      num_whole_tiles_41140 = squot64(i32_res_29275, segmap_group_sizze_35729)
      residual_input_41251 = srem64(i32_res_29275, segmap_group_sizze_35729)
      cond_41252 = (residual_input_41251 == np.int64(0))
      mem_42378 = opencl_alloc(self, bytes_42232, "mem_42378")
      if ((1 * (np.int64(segmap_usable_groups_35730) * np.int64(segmap_group_sizze_35729))) != 0):
        self.mainMagnitudezisegmap_intragroup_41120_var.set_args(self.global_failure,
                                                                 self.failure_is_an_option,
                                                                 self.global_failure_args,
                                                                 cl.LocalMemory(np.int64(bytes_42361)),
                                                                 np.int64(N_28874),
                                                                 np.int64(m_28875),
                                                                 np.int64(i32_res_29275),
                                                                 np.int64(segmap_usable_groups_35730),
                                                                 np.int64(num_whole_tiles_41140),
                                                                 np.int64(residual_input_41251),
                                                                 np.byte(cond_41252),
                                                                 defunc_4_map_res_mem_42266,
                                                                 defunc_3_map_res_mem_42344,
                                                                 defunc_3_map_res_mem_42345,
                                                                 mem_42378)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainMagnitudezisegmap_intragroup_41120_var,
                                   ((np.int64(segmap_usable_groups_35730) * np.int64(segmap_group_sizze_35729)),),
                                   (np.int64(segmap_group_sizze_35729),))
        if synchronous:
          sync(self)
      self.failure_is_an_option = np.int32(1)
      defunc_0_f_res_mem_42383 = mem_42378
    else:
      mem_42382 = opencl_alloc(self, bytes_42232, "mem_42382")
      if slt64((i32_res_29275 * np.int64(2)), segred_group_sizze_35781):
        segment_sizze_nonzzero_43867 = smax64(np.int64(1), i32_res_29275)
        num_threads_43868 = (num_groups_35782 * segred_group_sizze_35781)
        if ((1 * (np.int64(num_groups_35782) * np.int64(segred_group_sizze_35781))) != 0):
          self.mainMagnitudezisegred_small_35760_var.set_args(self.global_failure,
                                                              self.failure_is_an_option,
                                                              self.global_failure_args,
                                                              cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_35781))),
                                                              np.int64(N_28874),
                                                              np.int64(m_28875),
                                                              np.int64(i32_res_29275),
                                                              np.int64(num_groups_35782),
                                                              np.int64(segment_sizze_nonzzero_43867),
                                                              defunc_4_map_res_mem_42266,
                                                              defunc_3_map_res_mem_42344,
                                                              defunc_3_map_res_mem_42345,
                                                              mem_42382)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainMagnitudezisegred_small_35760_var,
                                     ((np.int64(num_groups_35782) * np.int64(segred_group_sizze_35781)),),
                                     (np.int64(segred_group_sizze_35781),))
          if synchronous:
            sync(self)
        self.failure_is_an_option = np.int32(1)
      else:
        groups_per_segment_43890 = sdiv_up64(num_groups_35782,
                                             smax64(np.int64(1), m_28875))
        elements_per_thread_43891 = sdiv_up64(i32_res_29275,
                                              (segred_group_sizze_35781 * groups_per_segment_43890))
        virt_num_groups_43892 = (groups_per_segment_43890 * m_28875)
        num_threads_43893 = (num_groups_35782 * segred_group_sizze_35781)
        threads_per_segment_43894 = (groups_per_segment_43890 * segred_group_sizze_35781)
        segred_tmp_mem_43895 = opencl_alloc(self,
                                            (np.int64(4) * virt_num_groups_43892),
                                            "segred_tmp_mem_43895")
        mainMagnitudezicounter_mem_43897 = self.mainMagnitudezicounter_mem_43897
        if ((1 * (np.int64(num_groups_35782) * np.int64(segred_group_sizze_35781))) != 0):
          self.mainMagnitudezisegred_large_35760_var.set_args(self.global_failure,
                                                              self.failure_is_an_option,
                                                              self.global_failure_args,
                                                              cl.LocalMemory(np.int64(np.int32(1))),
                                                              cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_35781))),
                                                              np.int64(N_28874),
                                                              np.int64(m_28875),
                                                              np.int64(i32_res_29275),
                                                              np.int64(num_groups_35782),
                                                              np.int64(groups_per_segment_43890),
                                                              np.int64(elements_per_thread_43891),
                                                              np.int64(virt_num_groups_43892),
                                                              np.int64(threads_per_segment_43894),
                                                              defunc_4_map_res_mem_42266,
                                                              defunc_3_map_res_mem_42344,
                                                              defunc_3_map_res_mem_42345,
                                                              mem_42382,
                                                              segred_tmp_mem_43895,
                                                              mainMagnitudezicounter_mem_43897)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainMagnitudezisegred_large_35760_var,
                                     ((np.int64(num_groups_35782) * np.int64(segred_group_sizze_35781)),),
                                     (np.int64(segred_group_sizze_35781),))
          if synchronous:
            sync(self)
        self.failure_is_an_option = np.int32(1)
      defunc_0_f_res_mem_42383 = mem_42382
    iota32_arg_29304 = (N_28874 - i32_res_28884)
    bounds_invalid_upwards_29305 = slt64(iota32_arg_29304, np.int64(0))
    valid_29306 = not(bounds_invalid_upwards_29305)
    range_valid_c_29307 = True
    assert valid_29306, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:90:3-10\n   #1  helpers.fut:2:3-8\n   #2  bfastfinal.fut:109:22-35\n   #3  bfastfinal.fut:181:5-58\n   #4  bfastfinal.fut:176:1-182:37\n" % ("Range ",
                                                                                                                                                                                                                                      np.int64(0),
                                                                                                                                                                                                                                      "..",
                                                                                                                                                                                                                                      np.int64(1),
                                                                                                                                                                                                                                      "..<",
                                                                                                                                                                                                                                      iota32_arg_29304,
                                                                                                                                                                                                                                      " is invalid."))
    i_29309 = (n_28878 - np.int32(1))
    i_29310 = sext_i32_i64(i_29309)
    x_29311 = sle64(np.int64(0), i_29310)
    y_29312 = slt64(i_29310, N_28874)
    bounds_check_29313 = (x_29311 and y_29312)
    index_certs_29314 = True
    assert bounds_check_29313, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:107:64-84\n   #1  bfastfinal.fut:106:15-109:36\n   #2  bfastfinal.fut:181:5-58\n   #3  bfastfinal.fut:176:1-182:37\n" % ("Index [",
                                                                                                                                                                                                                 i_29310,
                                                                                                                                                                                                                 "] out of bounds for array of shape [",
                                                                                                                                                                                                                 N_28874,
                                                                                                                                                                                                                 "]."))
    read_res_44270 = np.empty(1, dtype=ct.c_int32)
    cl.enqueue_copy(self.queue, read_res_44270, mappingindices_mem_41420,
                    device_offset=(np.int64(i_29310) * 4),
                    is_blocking=synchronous)
    sync(self)
    r32_arg_29315 = read_res_44270[0]
    i32_res_29316 = sitofp_i32_f32(r32_arg_29315)
    range_valid_c_29317 = True
    assert valid_29306, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:90:3-10\n   #1  helpers.fut:2:3-8\n   #2  bfastfinal.fut:119:20-35\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:114:20-131:9\n   #5  bfastfinal.fut:181:5-58\n   #6  bfastfinal.fut:176:1-182:37\n" % ("Range ",
                                                                                                                                                                                                                                                                                                                  np.int64(0),
                                                                                                                                                                                                                                                                                                                  "..",
                                                                                                                                                                                                                                                                                                                  np.int64(1),
                                                                                                                                                                                                                                                                                                                  "..<",
                                                                                                                                                                                                                                                                                                                  iota32_arg_29304,
                                                                                                                                                                                                                                                                                                                  " is invalid."))
    segmap_group_sizze_35827 = self.sizes["mainMagnitude.segmap_group_size_35807"]
    segmap_usable_groups_35828 = sdiv_up64(iota32_arg_29304,
                                           segmap_group_sizze_35827)
    binop_y_42386 = (np.int64(4) * iota32_arg_29304)
    bytes_42385 = smax64(np.int64(0), binop_y_42386)
    mem_42387 = opencl_alloc(self, bytes_42385, "mem_42387")
    mem_42390 = opencl_alloc(self, bytes_42385, "mem_42390")
    if ((1 * (np.int64(segmap_usable_groups_35828) * np.int64(segmap_group_sizze_35827))) != 0):
      self.mainMagnitudezisegmap_35805_var.set_args(self.global_failure,
                                                    self.failure_is_an_option,
                                                    self.global_failure_args,
                                                    np.int64(N_28874),
                                                    np.int32(n_28878),
                                                    np.float32(lam_28881),
                                                    np.int64(iota32_arg_29304),
                                                    np.float32(i32_res_29316),
                                                    mappingindices_mem_41420,
                                                    mem_42387, mem_42390)
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.mainMagnitudezisegmap_35805_var,
                                 ((np.int64(segmap_usable_groups_35828) * np.int64(segmap_group_sizze_35827)),),
                                 (np.int64(segmap_group_sizze_35827),))
      if synchronous:
        sync(self)
    self.failure_is_an_option = np.int32(1)
    mem_42387 = None
    max_res_29336 = smax64(np.int64(1), iota32_arg_29304)
    bounds_invalid_upwards_29337 = slt64(max_res_29336, np.int64(1))
    distance_29338 = (max_res_29336 - np.int64(1))
    valid_29339 = not(bounds_invalid_upwards_29337)
    range_valid_c_29340 = True
    assert valid_29339, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  lib/github.com/diku-dk/sorts/insertion_sort.fut:16:30-45\n   #1  /prelude/functional.fut:9:42-44\n   #2  bfastfinal.fut:116:13-121:42\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:114:20-131:9\n   #5  bfastfinal.fut:181:5-58\n   #6  bfastfinal.fut:176:1-182:37\n" % ("Range ",
                                                                                                                                                                                                                                                                                                                                                              np.int64(1),
                                                                                                                                                                                                                                                                                                                                                              "..<",
                                                                                                                                                                                                                                                                                                                                                              max_res_29336,
                                                                                                                                                                                                                                                                                                                                                              " is invalid."))
    segmap_group_sizze_36010 = self.sizes["mainMagnitude.segmap_group_size_36003"]
    segmap_usable_groups_36011 = sdiv_up64(m_28875, segmap_group_sizze_36010)
    mem_42394 = opencl_alloc(self, bytes_42232, "mem_42394")
    if ((1 * (np.int64(segmap_usable_groups_36011) * np.int64(segmap_group_sizze_36010))) != 0):
      self.mainMagnitudezisegmap_36001_var.set_args(self.global_failure,
                                                    np.int64(m_28875),
                                                    defunc_4_map_res_mem_42265,
                                                    defunc_3_map_res_mem_42345,
                                                    mem_42394)
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.mainMagnitudezisegmap_36001_var,
                                 ((np.int64(segmap_usable_groups_36011) * np.int64(segmap_group_sizze_36010)),),
                                 (np.int64(segmap_group_sizze_36010),))
      if synchronous:
        sync(self)
    nest_sizze_36021 = (m_28875 * iota32_arg_29304)
    segmap_group_sizze_36022 = self.sizes["mainMagnitude.segmap_group_size_35946"]
    segmap_usable_groups_36023 = sdiv_up64(nest_sizze_36021,
                                           segmap_group_sizze_36022)
    binop_y_42398 = (np.int64(4) * nest_sizze_36021)
    bytes_42396 = smax64(np.int64(0), binop_y_42398)
    mem_42399 = opencl_alloc(self, bytes_42396, "mem_42399")
    if ((1 * (np.int64(segmap_usable_groups_36023) * np.int64(segmap_group_sizze_36022))) != 0):
      self.mainMagnitudezisegmap_35943_var.set_args(self.global_failure,
                                                    self.failure_is_an_option,
                                                    self.global_failure_args,
                                                    np.int64(N_28874),
                                                    np.int64(m_28875),
                                                    np.int64(iota32_arg_29304),
                                                    defunc_4_map_res_mem_42266,
                                                    defunc_3_map_res_mem_42345,
                                                    mem_42394, mem_42399)
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.mainMagnitudezisegmap_35943_var,
                                 ((np.int64(segmap_usable_groups_36023) * np.int64(segmap_group_sizze_36022)),),
                                 (np.int64(segmap_group_sizze_36022),))
      if synchronous:
        sync(self)
    self.failure_is_an_option = np.int32(1)
    segmap_group_sizze_36050 = self.sizes["mainMagnitude.segmap_group_size_35852"]
    segmap_usable_groups_36051 = sdiv_up64(m_28875, segmap_group_sizze_36050)
    mem_42402 = opencl_alloc(self, binop_y_42398, "mem_42402")
    self.futhark_builtinzhgpu_map_transpose_f32(mem_42402, np.int64(0),
                                                mem_42399, np.int64(0),
                                                np.int64(1), iota32_arg_29304,
                                                m_28875)
    mem_42399 = None
    mem_42436 = opencl_alloc(self, bytes_42232, "mem_42436")
    num_threads_42820 = (segmap_group_sizze_36050 * segmap_usable_groups_36051)
    total_sizze_42821 = (bytes_42385 * num_threads_42820)
    color_42716 = opencl_alloc(self, total_sizze_42821, "color_42716")
    if ((1 * (np.int64(segmap_usable_groups_36051) * np.int64(segmap_group_sizze_36050))) != 0):
      self.mainMagnitudezisegmap_35850_var.set_args(self.global_failure,
                                                    self.failure_is_an_option,
                                                    self.global_failure_args,
                                                    np.int64(m_28875),
                                                    np.int64(iota32_arg_29304),
                                                    np.int64(distance_29338),
                                                    np.int64(num_threads_42820),
                                                    defunc_4_map_res_mem_42265,
                                                    defunc_3_map_res_mem_42345,
                                                    mem_42394, mem_42402,
                                                    mem_42436, color_42716)
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.mainMagnitudezisegmap_35850_var,
                                 ((np.int64(segmap_usable_groups_36051) * np.int64(segmap_group_sizze_36050)),),
                                 (np.int64(segmap_group_sizze_36050),))
      if synchronous:
        sync(self)
    self.failure_is_an_option = np.int32(1)
    mem_42394 = None
    mem_42402 = None
    color_42716 = None
    fits_36158 = sle64(iota32_arg_29304, max_group_sizze_34147)
    suff_intra_par_36156 = (self.sizes["mainMagnitude.suff_intra_par_15"] <= iota32_arg_29304)
    intra_suff_and_fits_36159 = (suff_intra_par_36156 and fits_36158)
    segmap_group_sizze_36458 = self.sizes["mainMagnitude.segmap_group_size_36438"]
    max_num_groups_43971 = self.sizes["mainMagnitude.segmap_num_groups_36440"]
    num_groups_36459 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_28875,
                                                            segmap_group_sizze_36458),
                                                  sext_i32_i64(max_num_groups_43971))))
    segscan_group_sizze_36481 = self.sizes["mainMagnitude.segscan_group_size_36389"]
    max_num_groups_43972 = self.sizes["mainMagnitude.segscan_num_groups_36391"]
    num_groups_36482 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_36021,
                                                            segscan_group_sizze_36481),
                                                  sext_i32_i64(max_num_groups_43972))))
    segred_group_sizze_36527 = self.sizes["mainMagnitude.segred_group_size_36335"]
    max_num_groups_43973 = self.sizes["mainMagnitude.segred_num_groups_36337"]
    num_groups_36528 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_36021,
                                                            segred_group_sizze_36527),
                                                  sext_i32_i64(max_num_groups_43973))))
    segmap_group_sizze_36566 = self.sizes["mainMagnitude.segmap_group_size_36284"]
    local_memory_capacity_44178 = self.max_local_memory
    if (sle64(((((bytes_42385 + srem64((np.int64(8) - srem64(bytes_42385,
                                                             np.int64(8))),
                                       np.int64(8))) + (iota32_arg_29304 + srem64((np.int64(8) - srem64(iota32_arg_29304,
                                                                                                        np.int64(8))),
                                                                                  np.int64(8)))) + ((np.int64(4) * iota32_arg_29304) + srem64((np.int64(8) - srem64((np.int64(4) * iota32_arg_29304),
                                                                                                                                                                    np.int64(8))),
                                                                                                                                              np.int64(8)))) + ((np.int64(4) * iota32_arg_29304) + srem64((np.int64(8) - srem64((np.int64(4) * iota32_arg_29304),
                                                                                                                                                                                                                                np.int64(8))),
                                                                                                                                                                                                          np.int64(8)))),
              sext_i32_i64(local_memory_capacity_44178)) and intra_suff_and_fits_36159):
      mem_42445 = opencl_alloc(self, bytes_42232, "mem_42445")
      mem_42448 = opencl_alloc(self, bytes_42232, "mem_42448")
      if ((1 * (np.int64(m_28875) * np.int64(iota32_arg_29304))) != 0):
        self.mainMagnitudezisegmap_intragroup_36154_var.set_args(self.global_failure,
                                                                 self.failure_is_an_option,
                                                                 self.global_failure_args,
                                                                 cl.LocalMemory(np.int64((np.int64(4) * iota32_arg_29304))),
                                                                 cl.LocalMemory(np.int64((np.int64(4) * iota32_arg_29304))),
                                                                 cl.LocalMemory(np.int64(iota32_arg_29304)),
                                                                 cl.LocalMemory(np.int64(bytes_42385)),
                                                                 np.int64(N_28874),
                                                                 np.int64(m_28875),
                                                                 np.int32(n_28878),
                                                                 np.int64(iota32_arg_29304),
                                                                 defunc_4_map_res_mem_42265,
                                                                 defunc_4_map_res_mem_42266,
                                                                 defunc_4_map_res_mem_42267,
                                                                 defunc_3_map_res_mem_42344,
                                                                 defunc_3_map_res_mem_42345,
                                                                 defunc_3_map_res_mem_42346,
                                                                 defunc_0_f_res_mem_42383,
                                                                 mem_42390,
                                                                 mem_42445,
                                                                 mem_42448)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainMagnitudezisegmap_intragroup_36154_var,
                                   ((np.int64(m_28875) * np.int64(iota32_arg_29304)),),
                                   (np.int64(iota32_arg_29304),))
        if synchronous:
          sync(self)
      self.failure_is_an_option = np.int32(1)
      defunc_0_f_res_mem_42477 = mem_42445
      defunc_0_f_res_mem_42478 = mem_42448
    else:
      mem_42452 = opencl_alloc(self, bytes_42232, "mem_42452")
      mem_42455 = opencl_alloc(self, bytes_42232, "mem_42455")
      if ((1 * (np.int64(num_groups_36459) * np.int64(segmap_group_sizze_36458))) != 0):
        self.mainMagnitudezisegmap_36436_var.set_args(self.global_failure,
                                                      np.int64(m_28875),
                                                      np.int64(num_groups_36459),
                                                      defunc_4_map_res_mem_42265,
                                                      defunc_3_map_res_mem_42345,
                                                      defunc_3_map_res_mem_42346,
                                                      mem_42452, mem_42455)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainMagnitudezisegmap_36436_var,
                                   ((np.int64(num_groups_36459) * np.int64(segmap_group_sizze_36458)),),
                                   (np.int64(segmap_group_sizze_36458),))
        if synchronous:
          sync(self)
      mem_42460 = opencl_alloc(self, bytes_42396, "mem_42460")
      if slt64(np.int64(0), (m_28875 * iota32_arg_29304)):
        stage1_max_num_groups_44012 = self.max_group_size
        stage1_num_groups_44013 = smin64(stage1_max_num_groups_44012,
                                         num_groups_36482)
        num_threads_44014 = sext_i64_i32((stage1_num_groups_44013 * segscan_group_sizze_36481))
        if ((1 * (np.int64(stage1_num_groups_44013) * np.int64(segscan_group_sizze_36481))) != 0):
          self.mainMagnitudeziscan_stage1_36395_var.set_args(self.global_failure,
                                                             self.failure_is_an_option,
                                                             self.global_failure_args,
                                                             cl.LocalMemory(np.int64(smax64(np.int64(1),
                                                                                            (np.int64(4) * segscan_group_sizze_36481)))),
                                                             np.int64(N_28874),
                                                             np.int64(m_28875),
                                                             np.int64(iota32_arg_29304),
                                                             np.int32(num_threads_44014),
                                                             defunc_4_map_res_mem_42266,
                                                             defunc_3_map_res_mem_42344,
                                                             defunc_3_map_res_mem_42345,
                                                             defunc_0_f_res_mem_42383,
                                                             mem_42455,
                                                             mem_42460)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainMagnitudeziscan_stage1_36395_var,
                                     ((np.int64(stage1_num_groups_44013) * np.int64(segscan_group_sizze_36481)),),
                                     (np.int64(segscan_group_sizze_36481),))
          if synchronous:
            sync(self)
        self.failure_is_an_option = np.int32(1)
        if ((1 * (np.int64(np.int64(1)) * np.int64(stage1_num_groups_44013))) != 0):
          self.mainMagnitudeziscan_stage2_36395_var.set_args(self.global_failure,
                                                             cl.LocalMemory(np.int64(smax64(np.int64(1),
                                                                                            (np.int64(4) * stage1_num_groups_44013)))),
                                                             np.int64(m_28875),
                                                             np.int64(iota32_arg_29304),
                                                             np.int64(stage1_num_groups_44013),
                                                             np.int32(num_threads_44014),
                                                             mem_42460)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainMagnitudeziscan_stage2_36395_var,
                                     ((np.int64(np.int64(1)) * np.int64(stage1_num_groups_44013)),),
                                     (np.int64(stage1_num_groups_44013),))
          if synchronous:
            sync(self)
        required_groups_44056 = sext_i64_i32(sdiv_up64((m_28875 * iota32_arg_29304),
                                                       segscan_group_sizze_36481))
        if ((1 * (np.int64(num_groups_36482) * np.int64(segscan_group_sizze_36481))) != 0):
          self.mainMagnitudeziscan_stage3_36395_var.set_args(self.global_failure,
                                                             np.int64(m_28875),
                                                             np.int64(iota32_arg_29304),
                                                             np.int64(num_groups_36482),
                                                             np.int32(num_threads_44014),
                                                             np.int32(required_groups_44056),
                                                             mem_42460)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainMagnitudeziscan_stage3_36395_var,
                                     ((np.int64(num_groups_36482) * np.int64(segscan_group_sizze_36481)),),
                                     (np.int64(segscan_group_sizze_36481),))
          if synchronous:
            sync(self)
      mem_42463 = opencl_alloc(self, bytes_41657, "mem_42463")
      mem_42466 = opencl_alloc(self, bytes_42232, "mem_42466")
      mem_42469 = opencl_alloc(self, bytes_42232, "mem_42469")
      if slt64((iota32_arg_29304 * np.int64(2)), segred_group_sizze_36527):
        segment_sizze_nonzzero_44068 = smax64(np.int64(1), iota32_arg_29304)
        num_threads_44069 = (num_groups_36528 * segred_group_sizze_36527)
        if ((1 * (np.int64(num_groups_36528) * np.int64(segred_group_sizze_36527))) != 0):
          self.mainMagnitudezisegred_small_36341_var.set_args(self.global_failure,
                                                              cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_36527))),
                                                              cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_36527))),
                                                              cl.LocalMemory(np.int64(segred_group_sizze_36527)),
                                                              np.int64(m_28875),
                                                              np.int64(iota32_arg_29304),
                                                              np.int64(num_groups_36528),
                                                              np.int64(segment_sizze_nonzzero_44068),
                                                              mem_42390,
                                                              mem_42452,
                                                              mem_42455,
                                                              mem_42460,
                                                              mem_42463,
                                                              mem_42466,
                                                              mem_42469)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainMagnitudezisegred_small_36341_var,
                                     ((np.int64(num_groups_36528) * np.int64(segred_group_sizze_36527)),),
                                     (np.int64(segred_group_sizze_36527),))
          if synchronous:
            sync(self)
      else:
        groups_per_segment_44106 = sdiv_up64(num_groups_36528,
                                             smax64(np.int64(1), m_28875))
        elements_per_thread_44107 = sdiv_up64(iota32_arg_29304,
                                              (segred_group_sizze_36527 * groups_per_segment_44106))
        virt_num_groups_44108 = (groups_per_segment_44106 * m_28875)
        num_threads_44109 = (num_groups_36528 * segred_group_sizze_36527)
        threads_per_segment_44110 = (groups_per_segment_44106 * segred_group_sizze_36527)
        segred_tmp_mem_44111 = opencl_alloc(self, virt_num_groups_44108,
                                            "segred_tmp_mem_44111")
        segred_tmp_mem_44113 = opencl_alloc(self,
                                            (np.int64(4) * virt_num_groups_44108),
                                            "segred_tmp_mem_44113")
        segred_tmp_mem_44115 = opencl_alloc(self,
                                            (np.int64(4) * virt_num_groups_44108),
                                            "segred_tmp_mem_44115")
        mainMagnitudezicounter_mem_44117 = self.mainMagnitudezicounter_mem_44117
        if ((1 * (np.int64(num_groups_36528) * np.int64(segred_group_sizze_36527))) != 0):
          self.mainMagnitudezisegred_large_36341_var.set_args(self.global_failure,
                                                              cl.LocalMemory(np.int64(np.int32(1))),
                                                              cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_36527))),
                                                              cl.LocalMemory(np.int64((np.int64(4) * segred_group_sizze_36527))),
                                                              cl.LocalMemory(np.int64(segred_group_sizze_36527)),
                                                              np.int64(m_28875),
                                                              np.int64(iota32_arg_29304),
                                                              np.int64(num_groups_36528),
                                                              np.int64(groups_per_segment_44106),
                                                              np.int64(elements_per_thread_44107),
                                                              np.int64(virt_num_groups_44108),
                                                              mem_42390,
                                                              mem_42452,
                                                              mem_42455,
                                                              mem_42460,
                                                              mem_42463,
                                                              mem_42466,
                                                              mem_42469,
                                                              segred_tmp_mem_44111,
                                                              segred_tmp_mem_44113,
                                                              segred_tmp_mem_44115,
                                                              mainMagnitudezicounter_mem_44117)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainMagnitudezisegred_large_36341_var,
                                     ((np.int64(num_groups_36528) * np.int64(segred_group_sizze_36527)),),
                                     (np.int64(segred_group_sizze_36527),))
          if synchronous:
            sync(self)
      mem_42452 = None
      mem_42460 = None
      segmap_usable_groups_36567 = sdiv_up64(m_28875, segmap_group_sizze_36566)
      mem_42473 = opencl_alloc(self, bytes_42232, "mem_42473")
      mem_42476 = opencl_alloc(self, bytes_42232, "mem_42476")
      if ((1 * (np.int64(segmap_usable_groups_36567) * np.int64(segmap_group_sizze_36566))) != 0):
        self.mainMagnitudezisegmap_36282_var.set_args(self.global_failure,
                                                      self.failure_is_an_option,
                                                      self.global_failure_args,
                                                      np.int64(N_28874),
                                                      np.int64(m_28875),
                                                      np.int32(n_28878),
                                                      defunc_4_map_res_mem_42267,
                                                      defunc_3_map_res_mem_42345,
                                                      mem_42455, mem_42463,
                                                      mem_42466, mem_42469,
                                                      mem_42473, mem_42476)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainMagnitudezisegmap_36282_var,
                                   ((np.int64(segmap_usable_groups_36567) * np.int64(segmap_group_sizze_36566)),),
                                   (np.int64(segmap_group_sizze_36566),))
        if synchronous:
          sync(self)
      self.failure_is_an_option = np.int32(1)
      mem_42455 = None
      mem_42463 = None
      mem_42466 = None
      mem_42469 = None
      defunc_0_f_res_mem_42477 = mem_42473
      defunc_0_f_res_mem_42478 = mem_42476
    defunc_4_map_res_mem_42266 = None
    defunc_4_map_res_mem_42267 = None
    defunc_3_map_res_mem_42344 = None
    defunc_3_map_res_mem_42345 = None
    defunc_3_map_res_mem_42346 = None
    defunc_0_f_res_mem_42383 = None
    mem_42390 = None
    out_mem_42873 = defunc_4_map_res_mem_42265
    out_mem_42874 = defunc_0_f_res_mem_42477
    out_mem_42875 = defunc_0_f_res_mem_42478
    out_mem_42876 = mem_42436
    return (out_mem_42873, out_mem_42874, out_mem_42875, out_mem_42876)
  def futhark_entry_reshapeTransp(self, images_mem_41420, m_28145, n_28146,
                                  p_28147):
    flatten_to_arg_28149 = (n_28146 * p_28147)
    flat_dim_28150 = (n_28146 * p_28147)
    dim_match_28151 = (flatten_to_arg_28149 == flat_dim_28150)
    empty_or_match_cert_28152 = True
    assert dim_match_28151, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:127:3-20\n   #1  bfastfinal.fut:200:17-47\n   #2  bfastfinal.fut:199:1-201:23\n" % ("Value of (core language) shape (",
                                                                                                                                                                             flat_dim_28150,
                                                                                                                                                                             ") cannot match shape of type `[",
                                                                                                                                                                             flatten_to_arg_28149,
                                                                                                                                                                             "]t`."))
    binop_x_41422 = (m_28145 * flatten_to_arg_28149)
    binop_y_41423 = (np.int64(4) * binop_x_41422)
    bytes_41421 = smax64(np.int64(0), binop_y_41423)
    mem_41424 = opencl_alloc(self, bytes_41421, "mem_41424")
    self.futhark_builtinzhgpu_map_transpose_f32(mem_41424, np.int64(0),
                                                images_mem_41420, np.int64(0),
                                                np.int64(1),
                                                flatten_to_arg_28149, m_28145)
    out_arrsizze_42874 = flatten_to_arg_28149
    out_mem_42873 = mem_41424
    return (out_mem_42873, out_arrsizze_42874)
  def convertToFloat(self, nan_value_28158_ext, images_mem_41420_ext):
    m_28155 = None
    n_28156 = None
    p_28157 = None
    try:
      nan_value_28158 = np.int16(ct.c_int16(nan_value_28158_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #0 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i16",
                                                                                                                            type(nan_value_28158_ext),
                                                                                                                            nan_value_28158_ext))
    try:
      assert ((type(images_mem_41420_ext) in [np.ndarray,
                                              cl.array.Array]) and (images_mem_41420_ext.dtype == np.int16)), "Parameter has unexpected type"
      if (m_28155 == None):
        m_28155 = np.int64(images_mem_41420_ext.shape[0])
      else:
        assert (m_28155 == images_mem_41420_ext.shape[0]), "Error: entry point arguments have invalid sizes."
      if (n_28156 == None):
        n_28156 = np.int64(images_mem_41420_ext.shape[1])
      else:
        assert (n_28156 == images_mem_41420_ext.shape[1]), "Error: entry point arguments have invalid sizes."
      if (p_28157 == None):
        p_28157 = np.int64(images_mem_41420_ext.shape[2])
      else:
        assert (p_28157 == images_mem_41420_ext.shape[2]), "Error: entry point arguments have invalid sizes."
      if (type(images_mem_41420_ext) == cl.array.Array):
        images_mem_41420 = images_mem_41420_ext.data
      else:
        images_mem_41420 = opencl_alloc(self,
                                        np.int64(images_mem_41420_ext.nbytes),
                                        "images_mem_41420")
        if (np.int64(images_mem_41420_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, images_mem_41420,
                          normaliseArray(images_mem_41420_ext),
                          is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #1 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[][][]i16",
                                                                                                                            type(images_mem_41420_ext),
                                                                                                                            images_mem_41420_ext))
    time_start = time.time()
    with np.errstate(divide="ignore", over="ignore", under="ignore",
                     invalid="ignore"):
      out_mem_42873 = self.futhark_entry_convertToFloat(images_mem_41420,
                                                        m_28155, n_28156,
                                                        p_28157,
                                                        nan_value_28158)
    runtime = (int((time.time() * 1000000)) - int((time_start * 1000000)))
    sync(self)
    return cl.array.Array(self.queue, (m_28155, n_28156, p_28157), ct.c_float,
                          data=out_mem_42873)
  def main(self, trend_29561_ext, k_29562_ext, n_29563_ext, freq_29564_ext,
           hfrac_29565_ext, lam_29566_ext, mappingindices_mem_41420_ext,
           images_mem_41421_ext):
    N_29559 = None
    m_29560 = None
    N_29559 = None
    try:
      trend_29561 = np.int32(ct.c_int32(trend_29561_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #0 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i32",
                                                                                                                            type(trend_29561_ext),
                                                                                                                            trend_29561_ext))
    try:
      k_29562 = np.int32(ct.c_int32(k_29562_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #1 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i32",
                                                                                                                            type(k_29562_ext),
                                                                                                                            k_29562_ext))
    try:
      n_29563 = np.int32(ct.c_int32(n_29563_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #2 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i32",
                                                                                                                            type(n_29563_ext),
                                                                                                                            n_29563_ext))
    try:
      freq_29564 = np.float32(ct.c_float(freq_29564_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #3 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32",
                                                                                                                            type(freq_29564_ext),
                                                                                                                            freq_29564_ext))
    try:
      hfrac_29565 = np.float32(ct.c_float(hfrac_29565_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #4 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32",
                                                                                                                            type(hfrac_29565_ext),
                                                                                                                            hfrac_29565_ext))
    try:
      lam_29566 = np.float32(ct.c_float(lam_29566_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #5 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32",
                                                                                                                            type(lam_29566_ext),
                                                                                                                            lam_29566_ext))
    try:
      assert ((type(mappingindices_mem_41420_ext) in [np.ndarray,
                                                      cl.array.Array]) and (mappingindices_mem_41420_ext.dtype == np.int32)), "Parameter has unexpected type"
      if (N_29559 == None):
        N_29559 = np.int64(mappingindices_mem_41420_ext.shape[0])
      else:
        assert (N_29559 == mappingindices_mem_41420_ext.shape[0]), "Error: entry point arguments have invalid sizes."
      if (type(mappingindices_mem_41420_ext) == cl.array.Array):
        mappingindices_mem_41420 = mappingindices_mem_41420_ext.data
      else:
        mappingindices_mem_41420 = opencl_alloc(self,
                                                np.int64(mappingindices_mem_41420_ext.nbytes),
                                                "mappingindices_mem_41420")
        if (np.int64(mappingindices_mem_41420_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, mappingindices_mem_41420,
                          normaliseArray(mappingindices_mem_41420_ext),
                          is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #6 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[]i32",
                                                                                                                            type(mappingindices_mem_41420_ext),
                                                                                                                            mappingindices_mem_41420_ext))
    try:
      assert ((type(images_mem_41421_ext) in [np.ndarray,
                                              cl.array.Array]) and (images_mem_41421_ext.dtype == np.float32)), "Parameter has unexpected type"
      if (m_29560 == None):
        m_29560 = np.int64(images_mem_41421_ext.shape[0])
      else:
        assert (m_29560 == images_mem_41421_ext.shape[0]), "Error: entry point arguments have invalid sizes."
      if (N_29559 == None):
        N_29559 = np.int64(images_mem_41421_ext.shape[1])
      else:
        assert (N_29559 == images_mem_41421_ext.shape[1]), "Error: entry point arguments have invalid sizes."
      if (type(images_mem_41421_ext) == cl.array.Array):
        images_mem_41421 = images_mem_41421_ext.data
      else:
        images_mem_41421 = opencl_alloc(self,
                                        np.int64(images_mem_41421_ext.nbytes),
                                        "images_mem_41421")
        if (np.int64(images_mem_41421_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, images_mem_41421,
                          normaliseArray(images_mem_41421_ext),
                          is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #7 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[][]f32",
                                                                                                                            type(images_mem_41421_ext),
                                                                                                                            images_mem_41421_ext))
    time_start = time.time()
    with np.errstate(divide="ignore", over="ignore", under="ignore",
                     invalid="ignore"):
      (out_mem_42873, out_mem_42874,
       out_mem_42875) = self.futhark_entry_main(mappingindices_mem_41420,
                                                images_mem_41421, N_29559,
                                                m_29560, trend_29561, k_29562,
                                                n_29563, freq_29564,
                                                hfrac_29565, lam_29566)
    runtime = (int((time.time() * 1000000)) - int((time_start * 1000000)))
    sync(self)
    return (cl.array.Array(self.queue, (m_29560,), ct.c_int32,
                           data=out_mem_42873), cl.array.Array(self.queue,
                                                               (m_29560,),
                                                               ct.c_int32,
                                                               data=out_mem_42874),
            cl.array.Array(self.queue, (m_29560,), ct.c_float,
                           data=out_mem_42875))
  def mainDetailed(self, trend_28171_ext, k_28172_ext, n_28173_ext,
                   freq_28174_ext, hfrac_28175_ext, lam_28176_ext,
                   mappingindices_mem_41420_ext, images_mem_41421_ext):
    N_28169 = None
    m_28170 = None
    N_28169 = None
    try:
      trend_28171 = np.int32(ct.c_int32(trend_28171_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #0 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i32",
                                                                                                                            type(trend_28171_ext),
                                                                                                                            trend_28171_ext))
    try:
      k_28172 = np.int32(ct.c_int32(k_28172_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #1 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i32",
                                                                                                                            type(k_28172_ext),
                                                                                                                            k_28172_ext))
    try:
      n_28173 = np.int32(ct.c_int32(n_28173_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #2 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i32",
                                                                                                                            type(n_28173_ext),
                                                                                                                            n_28173_ext))
    try:
      freq_28174 = np.float32(ct.c_float(freq_28174_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #3 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32",
                                                                                                                            type(freq_28174_ext),
                                                                                                                            freq_28174_ext))
    try:
      hfrac_28175 = np.float32(ct.c_float(hfrac_28175_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #4 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32",
                                                                                                                            type(hfrac_28175_ext),
                                                                                                                            hfrac_28175_ext))
    try:
      lam_28176 = np.float32(ct.c_float(lam_28176_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #5 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32",
                                                                                                                            type(lam_28176_ext),
                                                                                                                            lam_28176_ext))
    try:
      assert ((type(mappingindices_mem_41420_ext) in [np.ndarray,
                                                      cl.array.Array]) and (mappingindices_mem_41420_ext.dtype == np.int32)), "Parameter has unexpected type"
      if (N_28169 == None):
        N_28169 = np.int64(mappingindices_mem_41420_ext.shape[0])
      else:
        assert (N_28169 == mappingindices_mem_41420_ext.shape[0]), "Error: entry point arguments have invalid sizes."
      if (type(mappingindices_mem_41420_ext) == cl.array.Array):
        mappingindices_mem_41420 = mappingindices_mem_41420_ext.data
      else:
        mappingindices_mem_41420 = opencl_alloc(self,
                                                np.int64(mappingindices_mem_41420_ext.nbytes),
                                                "mappingindices_mem_41420")
        if (np.int64(mappingindices_mem_41420_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, mappingindices_mem_41420,
                          normaliseArray(mappingindices_mem_41420_ext),
                          is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #6 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[]i32",
                                                                                                                            type(mappingindices_mem_41420_ext),
                                                                                                                            mappingindices_mem_41420_ext))
    try:
      assert ((type(images_mem_41421_ext) in [np.ndarray,
                                              cl.array.Array]) and (images_mem_41421_ext.dtype == np.float32)), "Parameter has unexpected type"
      if (m_28170 == None):
        m_28170 = np.int64(images_mem_41421_ext.shape[0])
      else:
        assert (m_28170 == images_mem_41421_ext.shape[0]), "Error: entry point arguments have invalid sizes."
      if (N_28169 == None):
        N_28169 = np.int64(images_mem_41421_ext.shape[1])
      else:
        assert (N_28169 == images_mem_41421_ext.shape[1]), "Error: entry point arguments have invalid sizes."
      if (type(images_mem_41421_ext) == cl.array.Array):
        images_mem_41421 = images_mem_41421_ext.data
      else:
        images_mem_41421 = opencl_alloc(self,
                                        np.int64(images_mem_41421_ext.nbytes),
                                        "images_mem_41421")
        if (np.int64(images_mem_41421_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, images_mem_41421,
                          normaliseArray(images_mem_41421_ext),
                          is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #7 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[][]f32",
                                                                                                                            type(images_mem_41421_ext),
                                                                                                                            images_mem_41421_ext))
    time_start = time.time()
    with np.errstate(divide="ignore", over="ignore", under="ignore",
                     invalid="ignore"):
      (out_mem_42873, out_mem_42874, out_mem_42875, out_mem_42876,
       out_mem_42877, out_arrsizze_42878, out_mem_42879, out_arrsizze_42880,
       out_mem_42881, out_arrsizze_42882, out_mem_42883, out_mem_42884,
       out_mem_42885, out_mem_42886,
       out_mem_42887) = self.futhark_entry_mainDetailed(mappingindices_mem_41420,
                                                        images_mem_41421,
                                                        N_28169, m_28170,
                                                        trend_28171, k_28172,
                                                        n_28173, freq_28174,
                                                        hfrac_28175, lam_28176)
    runtime = (int((time.time() * 1000000)) - int((time_start * 1000000)))
    sync(self)
    return (cl.array.Array(self.queue, (m_28170,), ct.c_float,
                           data=out_mem_42873), cl.array.Array(self.queue,
                                                               (m_28170,),
                                                               ct.c_int32,
                                                               data=out_mem_42874),
            cl.array.Array(self.queue, (m_28170,), ct.c_int32,
                           data=out_mem_42875), cl.array.Array(self.queue,
                                                               (m_28170,),
                                                               ct.c_float,
                                                               data=out_mem_42876),
            cl.array.Array(self.queue, (m_28170, out_arrsizze_42878),
                           ct.c_float, data=out_mem_42877),
            cl.array.Array(self.queue, (m_28170, out_arrsizze_42880),
                           ct.c_float, data=out_mem_42879),
            cl.array.Array(self.queue, (out_arrsizze_42882,), ct.c_float,
                           data=out_mem_42881), cl.array.Array(self.queue,
                                                               (m_28170,),
                                                               ct.c_int32,
                                                               data=out_mem_42883),
            cl.array.Array(self.queue, (m_28170,), ct.c_float,
                           data=out_mem_42884), cl.array.Array(self.queue,
                                                               (m_28170,),
                                                               ct.c_float,
                                                               data=out_mem_42885),
            cl.array.Array(self.queue, (m_28170, N_28169), ct.c_float,
                           data=out_mem_42886), cl.array.Array(self.queue,
                                                               (m_28170,
                                                                N_28169),
                                                               ct.c_float,
                                                               data=out_mem_42887))
  def mainMagnitude(self, trend_28876_ext, k_28877_ext, n_28878_ext,
                    freq_28879_ext, hfrac_28880_ext, lam_28881_ext,
                    mappingindices_mem_41420_ext, images_mem_41421_ext):
    N_28874 = None
    m_28875 = None
    N_28874 = None
    try:
      trend_28876 = np.int32(ct.c_int32(trend_28876_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #0 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i32",
                                                                                                                            type(trend_28876_ext),
                                                                                                                            trend_28876_ext))
    try:
      k_28877 = np.int32(ct.c_int32(k_28877_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #1 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i32",
                                                                                                                            type(k_28877_ext),
                                                                                                                            k_28877_ext))
    try:
      n_28878 = np.int32(ct.c_int32(n_28878_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #2 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i32",
                                                                                                                            type(n_28878_ext),
                                                                                                                            n_28878_ext))
    try:
      freq_28879 = np.float32(ct.c_float(freq_28879_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #3 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32",
                                                                                                                            type(freq_28879_ext),
                                                                                                                            freq_28879_ext))
    try:
      hfrac_28880 = np.float32(ct.c_float(hfrac_28880_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #4 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32",
                                                                                                                            type(hfrac_28880_ext),
                                                                                                                            hfrac_28880_ext))
    try:
      lam_28881 = np.float32(ct.c_float(lam_28881_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #5 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32",
                                                                                                                            type(lam_28881_ext),
                                                                                                                            lam_28881_ext))
    try:
      assert ((type(mappingindices_mem_41420_ext) in [np.ndarray,
                                                      cl.array.Array]) and (mappingindices_mem_41420_ext.dtype == np.int32)), "Parameter has unexpected type"
      if (N_28874 == None):
        N_28874 = np.int64(mappingindices_mem_41420_ext.shape[0])
      else:
        assert (N_28874 == mappingindices_mem_41420_ext.shape[0]), "Error: entry point arguments have invalid sizes."
      if (type(mappingindices_mem_41420_ext) == cl.array.Array):
        mappingindices_mem_41420 = mappingindices_mem_41420_ext.data
      else:
        mappingindices_mem_41420 = opencl_alloc(self,
                                                np.int64(mappingindices_mem_41420_ext.nbytes),
                                                "mappingindices_mem_41420")
        if (np.int64(mappingindices_mem_41420_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, mappingindices_mem_41420,
                          normaliseArray(mappingindices_mem_41420_ext),
                          is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #6 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[]i32",
                                                                                                                            type(mappingindices_mem_41420_ext),
                                                                                                                            mappingindices_mem_41420_ext))
    try:
      assert ((type(images_mem_41421_ext) in [np.ndarray,
                                              cl.array.Array]) and (images_mem_41421_ext.dtype == np.float32)), "Parameter has unexpected type"
      if (m_28875 == None):
        m_28875 = np.int64(images_mem_41421_ext.shape[0])
      else:
        assert (m_28875 == images_mem_41421_ext.shape[0]), "Error: entry point arguments have invalid sizes."
      if (N_28874 == None):
        N_28874 = np.int64(images_mem_41421_ext.shape[1])
      else:
        assert (N_28874 == images_mem_41421_ext.shape[1]), "Error: entry point arguments have invalid sizes."
      if (type(images_mem_41421_ext) == cl.array.Array):
        images_mem_41421 = images_mem_41421_ext.data
      else:
        images_mem_41421 = opencl_alloc(self,
                                        np.int64(images_mem_41421_ext.nbytes),
                                        "images_mem_41421")
        if (np.int64(images_mem_41421_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, images_mem_41421,
                          normaliseArray(images_mem_41421_ext),
                          is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #7 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[][]f32",
                                                                                                                            type(images_mem_41421_ext),
                                                                                                                            images_mem_41421_ext))
    time_start = time.time()
    with np.errstate(divide="ignore", over="ignore", under="ignore",
                     invalid="ignore"):
      (out_mem_42873, out_mem_42874, out_mem_42875,
       out_mem_42876) = self.futhark_entry_mainMagnitude(mappingindices_mem_41420,
                                                         images_mem_41421,
                                                         N_28874, m_28875,
                                                         trend_28876, k_28877,
                                                         n_28878, freq_28879,
                                                         hfrac_28880, lam_28881)
    runtime = (int((time.time() * 1000000)) - int((time_start * 1000000)))
    sync(self)
    return (cl.array.Array(self.queue, (m_28875,), ct.c_int32,
                           data=out_mem_42873), cl.array.Array(self.queue,
                                                               (m_28875,),
                                                               ct.c_int32,
                                                               data=out_mem_42874),
            cl.array.Array(self.queue, (m_28875,), ct.c_float,
                           data=out_mem_42875), cl.array.Array(self.queue,
                                                               (m_28875,),
                                                               ct.c_float,
                                                               data=out_mem_42876))
  def reshapeTransp(self, images_mem_41420_ext):
    m_28145 = None
    n_28146 = None
    p_28147 = None
    try:
      assert ((type(images_mem_41420_ext) in [np.ndarray,
                                              cl.array.Array]) and (images_mem_41420_ext.dtype == np.float32)), "Parameter has unexpected type"
      if (m_28145 == None):
        m_28145 = np.int64(images_mem_41420_ext.shape[0])
      else:
        assert (m_28145 == images_mem_41420_ext.shape[0]), "Error: entry point arguments have invalid sizes."
      if (n_28146 == None):
        n_28146 = np.int64(images_mem_41420_ext.shape[1])
      else:
        assert (n_28146 == images_mem_41420_ext.shape[1]), "Error: entry point arguments have invalid sizes."
      if (p_28147 == None):
        p_28147 = np.int64(images_mem_41420_ext.shape[2])
      else:
        assert (p_28147 == images_mem_41420_ext.shape[2]), "Error: entry point arguments have invalid sizes."
      if (type(images_mem_41420_ext) == cl.array.Array):
        images_mem_41420 = images_mem_41420_ext.data
      else:
        images_mem_41420 = opencl_alloc(self,
                                        np.int64(images_mem_41420_ext.nbytes),
                                        "images_mem_41420")
        if (np.int64(images_mem_41420_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, images_mem_41420,
                          normaliseArray(images_mem_41420_ext),
                          is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #0 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[][][]f32",
                                                                                                                            type(images_mem_41420_ext),
                                                                                                                            images_mem_41420_ext))
    time_start = time.time()
    with np.errstate(divide="ignore", over="ignore", under="ignore",
                     invalid="ignore"):
      (out_mem_42873,
       out_arrsizze_42874) = self.futhark_entry_reshapeTransp(images_mem_41420,
                                                              m_28145, n_28146,
                                                              p_28147)
    runtime = (int((time.time() * 1000000)) - int((time_start * 1000000)))
    sync(self)
    return cl.array.Array(self.queue, (out_arrsizze_42874, m_28145), ct.c_float,
                          data=out_mem_42873)